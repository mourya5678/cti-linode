{
  "version": 3,
  "sources": ["../../../../../node_modules/xterm/lib/webpack:/xterm/webpack/universalModuleDefinition", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/AccessibilityManager.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/Clipboard.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/ColorContrastCache.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/ColorManager.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/Dom.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/Lifecycle.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/Linkifier.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/Linkifier2.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/LocalizableStrings.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/MouseZoneManager.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/RenderDebouncer.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/ScreenDprMonitor.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/Terminal.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/TimeBasedDebouncer.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/Viewport.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/decorations/BufferDecorationRenderer.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/decorations/ColorZoneStore.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/decorations/OverviewRulerRenderer.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/input/CompositionHelper.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/input/Mouse.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/input/MoveToCell.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/public/Terminal.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/renderer/BaseRenderLayer.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/renderer/CursorRenderLayer.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/renderer/CustomGlyphs.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/renderer/GridCache.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/renderer/LinkRenderLayer.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/renderer/Renderer.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/renderer/RendererUtils.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/renderer/SelectionRenderLayer.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/renderer/TextRenderLayer.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/renderer/atlas/BaseCharAtlas.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/renderer/atlas/CharAtlasCache.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/renderer/atlas/CharAtlasUtils.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/renderer/atlas/Constants.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/renderer/atlas/DynamicCharAtlas.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/renderer/atlas/LRUMap.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/renderer/dom/DomRenderer.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/renderer/dom/DomRendererRowFactory.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/selection/SelectionModel.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/services/CharSizeService.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/services/CharacterJoinerService.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/services/CoreBrowserService.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/services/MouseService.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/services/RenderService.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/services/SelectionService.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/services/Services.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/browser/services/SoundService.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/CircularList.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/Clone.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/Color.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/CoreTerminal.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/EventEmitter.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/InputHandler.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/Lifecycle.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/Platform.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/SortedList.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/TypedArrayUtils.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/WindowsMode.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/buffer/AttributeData.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/buffer/Buffer.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/buffer/BufferLine.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/buffer/BufferRange.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/buffer/BufferReflow.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/buffer/BufferSet.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/buffer/CellData.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/buffer/Constants.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/buffer/Marker.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/data/Charsets.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/data/EscapeSequences.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/input/Keyboard.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/input/TextDecoder.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/input/UnicodeV6.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/input/WriteBuffer.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/input/XParseColor.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/parser/Constants.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/parser/DcsParser.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/parser/EscapeSequenceParser.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/parser/OscParser.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/parser/Params.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/public/AddonManager.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/public/BufferApiView.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/public/BufferLineApiView.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/public/BufferNamespaceApi.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/public/ParserApi.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/public/UnicodeApi.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/services/BufferService.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/services/CharsetService.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/services/CoreMouseService.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/services/CoreService.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/services/DecorationService.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/services/DirtyRowService.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/services/InstantiationService.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/services/LogService.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/services/OptionsService.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/services/ServiceRegistry.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/services/Services.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/src/common/services/UnicodeService.ts", "../../../../../node_modules/xterm/lib/webpack:/xterm/webpack/bootstrap", "../../../../../node_modules/xterm/lib/webpack:/xterm/webpack/startup"],
  "sourcesContent": ["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, function() {\nreturn ", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport * as Strings from 'browser/LocalizableStrings';\nimport { ITerminal, IRenderDebouncer } from 'browser/Types';\nimport { IBuffer } from 'common/buffer/Types';\nimport { isMac } from 'common/Platform';\nimport { TimeBasedDebouncer } from 'browser/TimeBasedDebouncer';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { Disposable } from 'common/Lifecycle';\nimport { ScreenDprMonitor } from 'browser/ScreenDprMonitor';\nimport { IRenderService } from 'browser/services/Services';\nimport { removeElementFromParent } from 'browser/Dom';\n\nconst MAX_ROWS_TO_READ = 20;\n\nconst enum BoundaryPosition {\n  TOP,\n  BOTTOM\n}\n\nexport class AccessibilityManager extends Disposable {\n  private _accessibilityTreeRoot: HTMLElement;\n  private _rowContainer: HTMLElement;\n  private _rowElements: HTMLElement[];\n  private _liveRegion: HTMLElement;\n  private _liveRegionLineCount: number = 0;\n\n  private _renderRowsDebouncer: IRenderDebouncer;\n  private _screenDprMonitor: ScreenDprMonitor;\n\n  private _topBoundaryFocusListener: (e: FocusEvent) => void;\n  private _bottomBoundaryFocusListener: (e: FocusEvent) => void;\n\n  /**\n   * This queue has a character pushed to it for keys that are pressed, if the\n   * next character added to the terminal is equal to the key char then it is\n   * not announced (added to live region) because it has already been announced\n   * by the textarea event (which cannot be canceled). There are some race\n   * condition cases if there is typing while data is streaming, but this covers\n   * the main case of typing into the prompt and inputting the answer to a\n   * question (Y/N, etc.).\n   */\n  private _charsToConsume: string[] = [];\n\n  private _charsToAnnounce: string = '';\n\n  constructor(\n    private readonly _terminal: ITerminal,\n    private readonly _renderService: IRenderService\n  ) {\n    super();\n    this._accessibilityTreeRoot = document.createElement('div');\n    this._accessibilityTreeRoot.classList.add('xterm-accessibility');\n    this._accessibilityTreeRoot.tabIndex = 0;\n\n    this._rowContainer = document.createElement('div');\n    this._rowContainer.setAttribute('role', 'list');\n    this._rowContainer.classList.add('xterm-accessibility-tree');\n    this._rowElements = [];\n    for (let i = 0; i < this._terminal.rows; i++) {\n      this._rowElements[i] = this._createAccessibilityTreeNode();\n      this._rowContainer.appendChild(this._rowElements[i]);\n    }\n\n    this._topBoundaryFocusListener = e => this._onBoundaryFocus(e, BoundaryPosition.TOP);\n    this._bottomBoundaryFocusListener = e => this._onBoundaryFocus(e, BoundaryPosition.BOTTOM);\n    this._rowElements[0].addEventListener('focus', this._topBoundaryFocusListener);\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n\n    this._refreshRowsDimensions();\n    this._accessibilityTreeRoot.appendChild(this._rowContainer);\n\n    this._renderRowsDebouncer = new TimeBasedDebouncer(this._renderRows.bind(this));\n    this._refreshRows();\n\n    this._liveRegion = document.createElement('div');\n    this._liveRegion.classList.add('live-region');\n    this._liveRegion.setAttribute('aria-live', 'assertive');\n    this._accessibilityTreeRoot.appendChild(this._liveRegion);\n\n    if (!this._terminal.element) {\n      throw new Error('Cannot enable accessibility before Terminal.open');\n    }\n    this._terminal.element.insertAdjacentElement('afterbegin', this._accessibilityTreeRoot);\n\n    this.register(this._renderRowsDebouncer);\n    this.register(this._terminal.onResize(e => this._onResize(e.rows)));\n    this.register(this._terminal.onRender(e => this._refreshRows(e.start, e.end)));\n    this.register(this._terminal.onScroll(() => this._refreshRows()));\n    // Line feed is an issue as the prompt won't be read out after a command is run\n    this.register(this._terminal.onA11yChar(char => this._onChar(char)));\n    this.register(this._terminal.onLineFeed(() => this._onChar('\\n')));\n    this.register(this._terminal.onA11yTab(spaceCount => this._onTab(spaceCount)));\n    this.register(this._terminal.onKey(e => this._onKey(e.key)));\n    this.register(this._terminal.onBlur(() => this._clearLiveRegion()));\n    this.register(this._renderService.onDimensionsChange(() => this._refreshRowsDimensions()));\n\n    this._screenDprMonitor = new ScreenDprMonitor();\n    this.register(this._screenDprMonitor);\n    this._screenDprMonitor.setListener(() => this._refreshRowsDimensions());\n    // This shouldn't be needed on modern browsers but is present in case the\n    // media query that drives the ScreenDprMonitor isn't supported\n    this.register(addDisposableDomListener(window, 'resize', () => this._refreshRowsDimensions()));\n  }\n\n  public dispose(): void {\n    super.dispose();\n    removeElementFromParent(this._accessibilityTreeRoot);\n    this._rowElements.length = 0;\n  }\n\n  private _onBoundaryFocus(e: FocusEvent, position: BoundaryPosition): void {\n    const boundaryElement = e.target as HTMLElement;\n    const beforeBoundaryElement = this._rowElements[position === BoundaryPosition.TOP ? 1 : this._rowElements.length - 2];\n\n    // Don't scroll if the buffer top has reached the end in that direction\n    const posInSet = boundaryElement.getAttribute('aria-posinset');\n    const lastRowPos = position === BoundaryPosition.TOP ? '1' : `${this._terminal.buffer.lines.length}`;\n    if (posInSet === lastRowPos) {\n      return;\n    }\n\n    // Don't scroll when the last focused item was not the second row (focus is going the other\n    // direction)\n    if (e.relatedTarget !== beforeBoundaryElement) {\n      return;\n    }\n\n    // Remove old boundary element from array\n    let topBoundaryElement: HTMLElement;\n    let bottomBoundaryElement: HTMLElement;\n    if (position === BoundaryPosition.TOP) {\n      topBoundaryElement = boundaryElement;\n      bottomBoundaryElement = this._rowElements.pop()!;\n      this._rowContainer.removeChild(bottomBoundaryElement);\n    } else {\n      topBoundaryElement = this._rowElements.shift()!;\n      bottomBoundaryElement = boundaryElement;\n      this._rowContainer.removeChild(topBoundaryElement);\n    }\n\n    // Remove listeners from old boundary elements\n    topBoundaryElement.removeEventListener('focus', this._topBoundaryFocusListener);\n    bottomBoundaryElement.removeEventListener('focus', this._bottomBoundaryFocusListener);\n\n    // Add new element to array/DOM\n    if (position === BoundaryPosition.TOP) {\n      const newElement = this._createAccessibilityTreeNode();\n      this._rowElements.unshift(newElement);\n      this._rowContainer.insertAdjacentElement('afterbegin', newElement);\n    } else {\n      const newElement = this._createAccessibilityTreeNode();\n      this._rowElements.push(newElement);\n      this._rowContainer.appendChild(newElement);\n    }\n\n    // Add listeners to new boundary elements\n    this._rowElements[0].addEventListener('focus', this._topBoundaryFocusListener);\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n\n    // Scroll up\n    this._terminal.scrollLines(position === BoundaryPosition.TOP ? -1 : 1);\n\n    // Focus new boundary before element\n    this._rowElements[position === BoundaryPosition.TOP ? 1 : this._rowElements.length - 2].focus();\n\n    // Prevent the standard behavior\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  }\n\n  private _onResize(rows: number): void {\n    // Remove bottom boundary listener\n    this._rowElements[this._rowElements.length - 1].removeEventListener('focus', this._bottomBoundaryFocusListener);\n\n    // Grow rows as required\n    for (let i = this._rowContainer.children.length; i < this._terminal.rows; i++) {\n      this._rowElements[i] = this._createAccessibilityTreeNode();\n      this._rowContainer.appendChild(this._rowElements[i]);\n    }\n    // Shrink rows as required\n    while (this._rowElements.length > rows) {\n      this._rowContainer.removeChild(this._rowElements.pop()!);\n    }\n\n    // Add bottom boundary listener\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n\n    this._refreshRowsDimensions();\n  }\n\n  private _createAccessibilityTreeNode(): HTMLElement {\n    const element = document.createElement('div');\n    element.setAttribute('role', 'listitem');\n    element.tabIndex = -1;\n    this._refreshRowDimensions(element);\n    return element;\n  }\n\n  private _onTab(spaceCount: number): void {\n    for (let i = 0; i < spaceCount; i++) {\n      this._onChar(' ');\n    }\n  }\n\n  private _onChar(char: string): void {\n    if (this._liveRegionLineCount < MAX_ROWS_TO_READ + 1) {\n      if (this._charsToConsume.length > 0) {\n        // Have the screen reader ignore the char if it was just input\n        const shiftedChar = this._charsToConsume.shift();\n        if (shiftedChar !== char) {\n          this._charsToAnnounce += char;\n        }\n      } else {\n        this._charsToAnnounce += char;\n      }\n\n      if (char === '\\n') {\n        this._liveRegionLineCount++;\n        if (this._liveRegionLineCount === MAX_ROWS_TO_READ + 1) {\n          this._liveRegion.textContent += Strings.tooMuchOutput;\n        }\n      }\n\n      // Only detach/attach on mac as otherwise messages can go unaccounced\n      if (isMac) {\n        if (this._liveRegion.textContent && this._liveRegion.textContent.length > 0 && !this._liveRegion.parentNode) {\n          setTimeout(() => {\n            this._accessibilityTreeRoot.appendChild(this._liveRegion);\n          }, 0);\n        }\n      }\n    }\n  }\n\n  private _clearLiveRegion(): void {\n    this._liveRegion.textContent = '';\n    this._liveRegionLineCount = 0;\n\n    // Only detach/attach on mac as otherwise messages can go unaccounced\n    if (isMac) {\n      removeElementFromParent(this._liveRegion);\n    }\n  }\n\n  private _onKey(keyChar: string): void {\n    this._clearLiveRegion();\n    this._charsToConsume.push(keyChar);\n  }\n\n  private _refreshRows(start?: number, end?: number): void {\n    this._renderRowsDebouncer.refresh(start, end, this._terminal.rows);\n  }\n\n  private _renderRows(start: number, end: number): void {\n    const buffer: IBuffer = this._terminal.buffer;\n    const setSize = buffer.lines.length.toString();\n    for (let i = start; i <= end; i++) {\n      const lineData = buffer.translateBufferLineToString(buffer.ydisp + i, true);\n      const posInSet = (buffer.ydisp + i + 1).toString();\n      const element = this._rowElements[i];\n      if (element) {\n        if (lineData.length === 0) {\n          element.innerText = '\\u00a0';\n        } else {\n          element.textContent = lineData;\n        }\n        element.setAttribute('aria-posinset', posInSet);\n        element.setAttribute('aria-setsize', setSize);\n      }\n    }\n    this._announceCharacters();\n  }\n\n  private _refreshRowsDimensions(): void {\n    if (!this._renderService.dimensions.actualCellHeight) {\n      return;\n    }\n    if (this._rowElements.length !== this._terminal.rows) {\n      this._onResize(this._terminal.rows);\n    }\n    for (let i = 0; i < this._terminal.rows; i++) {\n      this._refreshRowDimensions(this._rowElements[i]);\n    }\n  }\n\n  private _refreshRowDimensions(element: HTMLElement): void {\n    element.style.height = `${this._renderService.dimensions.actualCellHeight}px`;\n  }\n\n  private _announceCharacters(): void {\n    if (this._charsToAnnounce.length === 0) {\n      return;\n    }\n    this._liveRegion.textContent += this._charsToAnnounce;\n    this._charsToAnnounce = '';\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ISelectionService } from 'browser/services/Services';\nimport { ICoreService } from 'common/services/Services';\n\n/**\n * Prepares text to be pasted into the terminal by normalizing the line endings\n * @param text The pasted text that needs processing before inserting into the terminal\n */\nexport function prepareTextForTerminal(text: string): string {\n  return text.replace(/\\r?\\n/g, '\\r');\n}\n\n/**\n * Bracket text for paste, if necessary, as per https://cirw.in/blog/bracketed-paste\n * @param text The pasted text to bracket\n */\nexport function bracketTextForPaste(text: string, bracketedPasteMode: boolean): string {\n  if (bracketedPasteMode) {\n    return '\\x1b[200~' + text + '\\x1b[201~';\n  }\n  return text;\n}\n\n/**\n * Binds copy functionality to the given terminal.\n * @param ev The original copy event to be handled\n */\nexport function copyHandler(ev: ClipboardEvent, selectionService: ISelectionService): void {\n  if (ev.clipboardData) {\n    ev.clipboardData.setData('text/plain', selectionService.selectionText);\n  }\n  // Prevent or the original text will be copied.\n  ev.preventDefault();\n}\n\n/**\n * Redirect the clipboard's data to the terminal's input handler.\n * @param ev The original paste event to be handled\n * @param term The terminal on which to apply the handled paste event\n */\nexport function handlePasteEvent(ev: ClipboardEvent, textarea: HTMLTextAreaElement, coreService: ICoreService): void {\n  ev.stopPropagation();\n  if (ev.clipboardData) {\n    const text = ev.clipboardData.getData('text/plain');\n    paste(text, textarea, coreService);\n  }\n}\n\nexport function paste(text: string, textarea: HTMLTextAreaElement, coreService: ICoreService): void {\n  text = prepareTextForTerminal(text);\n  text = bracketTextForPaste(text, coreService.decPrivateModes.bracketedPasteMode);\n  coreService.triggerDataEvent(text, true);\n  textarea.value = '';\n}\n\n/**\n * Moves the textarea under the mouse cursor and focuses it.\n * @param ev The original right click event to be handled.\n * @param textarea The terminal's textarea.\n */\nexport function moveTextAreaUnderMouseCursor(ev: MouseEvent, textarea: HTMLTextAreaElement, screenElement: HTMLElement): void {\n\n  // Calculate textarea position relative to the screen element\n  const pos = screenElement.getBoundingClientRect();\n  const left = ev.clientX - pos.left - 10;\n  const top = ev.clientY - pos.top - 10;\n\n  // Bring textarea at the cursor position\n  textarea.style.width = '20px';\n  textarea.style.height = '20px';\n  textarea.style.left = `${left}px`;\n  textarea.style.top = `${top}px`;\n  textarea.style.zIndex = '1000';\n\n  textarea.focus();\n}\n\n/**\n * Bind to right-click event and allow right-click copy and paste.\n * @param ev The original right click event to be handled.\n * @param textarea The terminal's textarea.\n * @param selectionService The terminal's selection manager.\n * @param shouldSelectWord If true and there is no selection the current word will be selected\n */\nexport function rightClickHandler(ev: MouseEvent, textarea: HTMLTextAreaElement, screenElement: HTMLElement, selectionService: ISelectionService, shouldSelectWord: boolean): void {\n  moveTextAreaUnderMouseCursor(ev, textarea, screenElement);\n\n  if (shouldSelectWord) {\n    selectionService.rightClickSelect(ev);\n  }\n\n  // Get textarea ready to copy from the context menu\n  textarea.value = selectionService.selectionText;\n  textarea.select();\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColorContrastCache } from 'browser/Types';\nimport { IColor } from 'common/Types';\n\nexport class ColorContrastCache implements IColorContrastCache {\n  private _color: { [bg: number]: { [fg: number]: IColor | null | undefined } | undefined } = {};\n  private _rgba: { [bg: number]: { [fg: number]: string | null | undefined } | undefined } = {};\n\n  public clear(): void {\n    this._color = {};\n    this._rgba = {};\n  }\n\n  public setCss(bg: number, fg: number, value: string | null): void {\n    if (!this._rgba[bg]) {\n      this._rgba[bg] = {};\n    }\n    this._rgba[bg]![fg] = value;\n  }\n\n  public getCss(bg: number, fg: number): string | null | undefined {\n    return this._rgba[bg] ? this._rgba[bg]![fg] : undefined;\n  }\n\n  public setColor(bg: number, fg: number, value: IColor | null): void {\n    if (!this._color[bg]) {\n      this._color[bg] = {};\n    }\n    this._color[bg]![fg] = value;\n  }\n\n  public getColor(bg: number, fg: number): IColor | null | undefined {\n    return this._color[bg] ? this._color[bg]![fg] : undefined;\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColorManager, IColorSet, IColorContrastCache } from 'browser/Types';\nimport { ITheme } from 'common/services/Services';\nimport { channels, color, css } from 'common/Color';\nimport { ColorContrastCache } from 'browser/ColorContrastCache';\nimport { ColorIndex, IColor } from 'common/Types';\n\n\ninterface IRestoreColorSet {\n  foreground: IColor;\n  background: IColor;\n  cursor: IColor;\n  ansi: IColor[];\n}\n\n\nconst DEFAULT_FOREGROUND = css.toColor('#ffffff');\nconst DEFAULT_BACKGROUND = css.toColor('#000000');\nconst DEFAULT_CURSOR = css.toColor('#ffffff');\nconst DEFAULT_CURSOR_ACCENT = css.toColor('#000000');\nconst DEFAULT_SELECTION = {\n  css: 'rgba(255, 255, 255, 0.3)',\n  rgba: 0xFFFFFF4D\n};\n\n// An IIFE to generate DEFAULT_ANSI_COLORS.\nexport const DEFAULT_ANSI_COLORS = Object.freeze((() => {\n  const colors = [\n    // dark:\n    css.toColor('#2e3436'),\n    css.toColor('#cc0000'),\n    css.toColor('#4e9a06'),\n    css.toColor('#c4a000'),\n    css.toColor('#3465a4'),\n    css.toColor('#75507b'),\n    css.toColor('#06989a'),\n    css.toColor('#d3d7cf'),\n    // bright:\n    css.toColor('#555753'),\n    css.toColor('#ef2929'),\n    css.toColor('#8ae234'),\n    css.toColor('#fce94f'),\n    css.toColor('#729fcf'),\n    css.toColor('#ad7fa8'),\n    css.toColor('#34e2e2'),\n    css.toColor('#eeeeec')\n  ];\n\n  // Fill in the remaining 240 ANSI colors.\n  // Generate colors (16-231)\n  const v = [0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff];\n  for (let i = 0; i < 216; i++) {\n    const r = v[(i / 36) % 6 | 0];\n    const g = v[(i / 6) % 6 | 0];\n    const b = v[i % 6];\n    colors.push({\n      css: channels.toCss(r, g, b),\n      rgba: channels.toRgba(r, g, b)\n    });\n  }\n\n  // Generate greys (232-255)\n  for (let i = 0; i < 24; i++) {\n    const c = 8 + i * 10;\n    colors.push({\n      css: channels.toCss(c, c, c),\n      rgba: channels.toRgba(c, c, c)\n    });\n  }\n\n  return colors;\n})());\n\n/**\n * Manages the source of truth for a terminal's colors.\n */\nexport class ColorManager implements IColorManager {\n  public colors: IColorSet;\n  private _ctx: CanvasRenderingContext2D;\n  private _litmusColor: CanvasGradient;\n  private _contrastCache: IColorContrastCache;\n  private _restoreColors!: IRestoreColorSet;\n\n  constructor(document: Document, public allowTransparency: boolean) {\n    const canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      throw new Error('Could not get rendering context');\n    }\n    this._ctx = ctx;\n    this._ctx.globalCompositeOperation = 'copy';\n    this._litmusColor = this._ctx.createLinearGradient(0, 0, 1, 1);\n    this._contrastCache = new ColorContrastCache();\n    this.colors = {\n      foreground: DEFAULT_FOREGROUND,\n      background: DEFAULT_BACKGROUND,\n      cursor: DEFAULT_CURSOR,\n      cursorAccent: DEFAULT_CURSOR_ACCENT,\n      selectionTransparent: DEFAULT_SELECTION,\n      selectionOpaque: color.blend(DEFAULT_BACKGROUND, DEFAULT_SELECTION),\n      selectionForeground: undefined,\n      ansi: DEFAULT_ANSI_COLORS.slice(),\n      contrastCache: this._contrastCache\n    };\n    this._updateRestoreColors();\n  }\n\n  public onOptionsChange(key: string): void {\n    if (key === 'minimumContrastRatio') {\n      this._contrastCache.clear();\n    }\n  }\n\n  /**\n   * Sets the terminal's theme.\n   * @param theme The  theme to use. If a partial theme is provided then default\n   * colors will be used where colors are not defined.\n   */\n  public setTheme(theme: ITheme = {}): void {\n    this.colors.foreground = this._parseColor(theme.foreground, DEFAULT_FOREGROUND);\n    this.colors.background = this._parseColor(theme.background, DEFAULT_BACKGROUND);\n    this.colors.cursor = this._parseColor(theme.cursor, DEFAULT_CURSOR, true);\n    this.colors.cursorAccent = this._parseColor(theme.cursorAccent, DEFAULT_CURSOR_ACCENT, true);\n    this.colors.selectionTransparent = this._parseColor(theme.selection, DEFAULT_SELECTION, true);\n    this.colors.selectionOpaque = color.blend(this.colors.background, this.colors.selectionTransparent);\n    const nullColor: IColor = {\n      css: '',\n      rgba: 0\n    };\n    this.colors.selectionForeground = theme.selectionForeground ? this._parseColor(theme.selectionForeground, nullColor) : undefined;\n    if (this.colors.selectionForeground === nullColor) {\n      this.colors.selectionForeground = undefined;\n    }\n\n    /**\n     * If selection color is opaque, blend it with background with 0.3 opacity\n     * Issue #2737\n     */\n    if (color.isOpaque(this.colors.selectionTransparent)) {\n      const opacity = 0.3;\n      this.colors.selectionTransparent = color.opacity(this.colors.selectionTransparent, opacity);\n    }\n    this.colors.ansi[0] = this._parseColor(theme.black, DEFAULT_ANSI_COLORS[0]);\n    this.colors.ansi[1] = this._parseColor(theme.red, DEFAULT_ANSI_COLORS[1]);\n    this.colors.ansi[2] = this._parseColor(theme.green, DEFAULT_ANSI_COLORS[2]);\n    this.colors.ansi[3] = this._parseColor(theme.yellow, DEFAULT_ANSI_COLORS[3]);\n    this.colors.ansi[4] = this._parseColor(theme.blue, DEFAULT_ANSI_COLORS[4]);\n    this.colors.ansi[5] = this._parseColor(theme.magenta, DEFAULT_ANSI_COLORS[5]);\n    this.colors.ansi[6] = this._parseColor(theme.cyan, DEFAULT_ANSI_COLORS[6]);\n    this.colors.ansi[7] = this._parseColor(theme.white, DEFAULT_ANSI_COLORS[7]);\n    this.colors.ansi[8] = this._parseColor(theme.brightBlack, DEFAULT_ANSI_COLORS[8]);\n    this.colors.ansi[9] = this._parseColor(theme.brightRed, DEFAULT_ANSI_COLORS[9]);\n    this.colors.ansi[10] = this._parseColor(theme.brightGreen, DEFAULT_ANSI_COLORS[10]);\n    this.colors.ansi[11] = this._parseColor(theme.brightYellow, DEFAULT_ANSI_COLORS[11]);\n    this.colors.ansi[12] = this._parseColor(theme.brightBlue, DEFAULT_ANSI_COLORS[12]);\n    this.colors.ansi[13] = this._parseColor(theme.brightMagenta, DEFAULT_ANSI_COLORS[13]);\n    this.colors.ansi[14] = this._parseColor(theme.brightCyan, DEFAULT_ANSI_COLORS[14]);\n    this.colors.ansi[15] = this._parseColor(theme.brightWhite, DEFAULT_ANSI_COLORS[15]);\n    // Clear our the cache\n    this._contrastCache.clear();\n    this._updateRestoreColors();\n  }\n\n  public restoreColor(slot?: ColorIndex): void {\n    // unset slot restores all ansi colors\n    if (slot === undefined) {\n      for (let i = 0; i < this._restoreColors.ansi.length; ++i) {\n        this.colors.ansi[i] = this._restoreColors.ansi[i];\n      }\n      return;\n    }\n    switch (slot) {\n      case ColorIndex.FOREGROUND:\n        this.colors.foreground = this._restoreColors.foreground;\n        break;\n      case ColorIndex.BACKGROUND:\n        this.colors.background = this._restoreColors.background;\n        break;\n      case ColorIndex.CURSOR:\n        this.colors.cursor = this._restoreColors.cursor;\n        break;\n      default:\n        this.colors.ansi[slot] = this._restoreColors.ansi[slot];\n    }\n  }\n\n  private _updateRestoreColors(): void {\n    this._restoreColors = {\n      foreground: this.colors.foreground,\n      background: this.colors.background,\n      cursor: this.colors.cursor,\n      ansi: this.colors.ansi.slice()\n    };\n  }\n\n  private _parseColor(\n    css: string | undefined,\n    fallback: IColor,\n    allowTransparency: boolean = this.allowTransparency\n  ): IColor {\n    if (css === undefined) {\n      return fallback;\n    }\n\n    // If parsing the value results in failure, then it must be ignored, and the attribute must\n    // retain its previous value.\n    // -- https://html.spec.whatwg.org/multipage/canvas.html#fill-and-stroke-styles\n    this._ctx.fillStyle = this._litmusColor;\n    this._ctx.fillStyle = css;\n    if (typeof this._ctx.fillStyle !== 'string') {\n      console.warn(`Color: ${css} is invalid using fallback ${fallback.css}`);\n      return fallback;\n    }\n\n    this._ctx.fillRect(0, 0, 1, 1);\n    const data = this._ctx.getImageData(0, 0, 1, 1).data;\n\n    // Check if the printed color was transparent\n    if (data[3] !== 0xFF) {\n      if (!allowTransparency) {\n        // Ideally we'd just ignore the alpha channel, but...\n        //\n        // Browsers may not give back exactly the same RGB values we put in, because most/all\n        // convert the color to a pre-multiplied representation. getImageData converts that back to\n        // a un-premultipled representation, but the precision loss may make the RGB channels unuable\n        // on their own.\n        //\n        // E.g. In Chrome #12345610 turns into #10305010, and in the extreme case, 0xFFFFFF00 turns\n        // into 0x00000000.\n        //\n        // \"Note: Due to the lossy nature of converting to and from premultiplied alpha color values,\n        // pixels that have just been set using putImageData() might be returned to an equivalent\n        // getImageData() as different values.\"\n        // -- https://html.spec.whatwg.org/multipage/canvas.html#pixel-manipulation\n        //\n        // So let's just use the fallback color in this case instead.\n        console.warn(\n          `Color: ${css} is using transparency, but allowTransparency is false. ` +\n          `Using fallback ${fallback.css}.`\n        );\n        return fallback;\n      }\n\n      // https://html.spec.whatwg.org/multipage/canvas.html#serialisation-of-a-color\n      // the color value has alpha less than 1.0, and the string is the color value in the CSS rgba()\n      const [r, g, b, a] = this._ctx.fillStyle.substring(5, this._ctx.fillStyle.length - 1).split(',').map(component => Number(component));\n      const alpha = Math.round(a * 255);\n      const rgba: number = channels.toRgba(r, g, b, alpha);\n      return {\n        rgba,\n        css\n      };\n    }\n\n    return {\n      // https://html.spec.whatwg.org/multipage/canvas.html#serialisation-of-a-color\n      // if it has alpha equal to 1.0, then the string is a lowercase six-digit hex value, prefixed with a \"#\" character\n      css: this._ctx.fillStyle,\n      rgba: channels.toRgba(data[0], data[1], data[2], data[3])\n    };\n  }\n}\n", "/**\n * Copyright (c) 2020 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport function removeElementFromParent(...elements: (HTMLElement | undefined)[]): void {\n  for (const e of elements) {\n    e?.parentElement?.removeChild(e);\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * Adds a disposable listener to a node in the DOM, returning the disposable.\n * @param type The event type.\n * @param handler The handler for the listener.\n */\nexport function addDisposableDomListener(\n  node: Element | Window | Document,\n  type: string,\n  handler: (e: any) => void,\n  options?: boolean | AddEventListenerOptions\n): IDisposable {\n  node.addEventListener(type, handler, options);\n  let disposed = false;\n  return {\n    dispose: () => {\n      if (disposed) {\n        return;\n      }\n      disposed = true;\n      node.removeEventListener(type, handler, options);\n    }\n  };\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ILinkifierEvent, ILinkMatcher, LinkMatcherHandler, ILinkMatcherOptions, ILinkifier, IMouseZoneManager, IMouseZone, IRegisteredLinkMatcher } from 'browser/Types';\nimport { IBufferStringIteratorResult } from 'common/buffer/Types';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { ILogService, IBufferService, IOptionsService, IUnicodeService } from 'common/services/Services';\n\n/**\n * Limit of the unwrapping line expansion (overscan) at the top and bottom\n * of the actual viewport in ASCII characters.\n * A limit of 2000 should match most sane urls.\n */\nconst OVERSCAN_CHAR_LIMIT = 2000;\n\n/**\n * The Linkifier applies links to rows shortly after they have been refreshed.\n */\nexport class Linkifier implements ILinkifier {\n  /**\n   * The time to wait after a row is changed before it is linkified. This prevents\n   * the costly operation of searching every row multiple times, potentially a\n   * huge amount of times.\n   */\n  protected static _timeBeforeLatency = 200;\n\n  protected _linkMatchers: IRegisteredLinkMatcher[] = [];\n\n  private _mouseZoneManager: IMouseZoneManager | undefined;\n  private _element: HTMLElement | undefined;\n\n  private _rowsTimeoutId: number | undefined;\n  private _nextLinkMatcherId = 0;\n  private _rowsToLinkify: { start: number | undefined, end: number | undefined };\n\n  private _onShowLinkUnderline = new EventEmitter<ILinkifierEvent>();\n  public get onShowLinkUnderline(): IEvent<ILinkifierEvent> { return this._onShowLinkUnderline.event; }\n  private _onHideLinkUnderline = new EventEmitter<ILinkifierEvent>();\n  public get onHideLinkUnderline(): IEvent<ILinkifierEvent> { return this._onHideLinkUnderline.event; }\n  private _onLinkTooltip = new EventEmitter<ILinkifierEvent>();\n  public get onLinkTooltip(): IEvent<ILinkifierEvent> { return this._onLinkTooltip.event; }\n\n  constructor(\n    @IBufferService protected readonly _bufferService: IBufferService,\n    @ILogService private readonly _logService: ILogService,\n    @IUnicodeService private readonly _unicodeService: IUnicodeService\n  ) {\n    this._rowsToLinkify = {\n      start: undefined,\n      end: undefined\n    };\n  }\n\n  /**\n   * Attaches the linkifier to the DOM, enabling linkification.\n   * @param mouseZoneManager The mouse zone manager to register link zones with.\n   */\n  public attachToDom(element: HTMLElement, mouseZoneManager: IMouseZoneManager): void {\n    this._element = element;\n    this._mouseZoneManager = mouseZoneManager;\n  }\n\n  /**\n   * Queue linkification on a set of rows.\n   * @param start The row to linkify from (inclusive).\n   * @param end The row to linkify to (inclusive).\n   */\n  public linkifyRows(start: number, end: number): void {\n    // Don't attempt linkify if not yet attached to DOM\n    if (!this._mouseZoneManager) {\n      return;\n    }\n\n    // Increase range to linkify\n    if (this._rowsToLinkify.start === undefined || this._rowsToLinkify.end === undefined) {\n      this._rowsToLinkify.start = start;\n      this._rowsToLinkify.end = end;\n    } else {\n      this._rowsToLinkify.start = Math.min(this._rowsToLinkify.start, start);\n      this._rowsToLinkify.end = Math.max(this._rowsToLinkify.end, end);\n    }\n\n    // Clear out any existing links on this row range\n    this._mouseZoneManager.clearAll(start, end);\n\n    // Restart timer\n    if (this._rowsTimeoutId) {\n      clearTimeout(this._rowsTimeoutId);\n    }\n\n    // Cannot use window.setTimeout since tests need to run in node\n    this._rowsTimeoutId = setTimeout(() => this._linkifyRows(), Linkifier._timeBeforeLatency) as any as number;\n  }\n\n  /**\n   * Linkifies the rows requested.\n   */\n  private _linkifyRows(): void {\n    this._rowsTimeoutId = undefined;\n    const buffer = this._bufferService.buffer;\n\n    if (this._rowsToLinkify.start === undefined || this._rowsToLinkify.end === undefined) {\n      this._logService.debug('_rowToLinkify was unset before _linkifyRows was called');\n      return;\n    }\n\n    // Ensure the start row exists\n    const absoluteRowIndexStart = buffer.ydisp + this._rowsToLinkify.start;\n    if (absoluteRowIndexStart >= buffer.lines.length) {\n      return;\n    }\n\n    // Invalidate bad end row values (if a resize happened)\n    const absoluteRowIndexEnd = buffer.ydisp + Math.min(this._rowsToLinkify.end, this._bufferService.rows) + 1;\n\n    // Iterate over the range of unwrapped content strings within start..end\n    // (excluding).\n    // _doLinkifyRow gets full unwrapped lines with the start row as buffer offset\n    // for every matcher.\n    // The unwrapping is needed to also match content that got wrapped across\n    // several buffer lines. To avoid a worst case scenario where the whole buffer\n    // contains just a single unwrapped string we limit this line expansion beyond\n    // the viewport to +OVERSCAN_CHAR_LIMIT chars (overscan) at top and bottom.\n    // This comes with the tradeoff that matches longer than OVERSCAN_CHAR_LIMIT\n    // chars will not match anymore at the viewport borders.\n    const overscanLineLimit = Math.ceil(OVERSCAN_CHAR_LIMIT / this._bufferService.cols);\n    const iterator = this._bufferService.buffer.iterator(\n      false, absoluteRowIndexStart, absoluteRowIndexEnd, overscanLineLimit, overscanLineLimit);\n    while (iterator.hasNext()) {\n      const lineData: IBufferStringIteratorResult = iterator.next();\n      for (let i = 0; i < this._linkMatchers.length; i++) {\n        this._doLinkifyRow(lineData.range.first, lineData.content, this._linkMatchers[i]);\n      }\n    }\n\n    this._rowsToLinkify.start = undefined;\n    this._rowsToLinkify.end = undefined;\n  }\n\n  /**\n   * Registers a link matcher, allowing custom link patterns to be matched and\n   * handled.\n   * @param regex The regular expression to search for. Specifically, this\n   * searches the textContent of the rows. You will want to use \\s to match a\n   * space ' ' character for example.\n   * @param handler The callback when the link is called.\n   * @param options Options for the link matcher.\n   * @return The ID of the new matcher, this can be used to deregister.\n   */\n  public registerLinkMatcher(regex: RegExp, handler: LinkMatcherHandler, options: ILinkMatcherOptions = {}): number {\n    if (!handler) {\n      throw new Error('handler must be defined');\n    }\n    const matcher: IRegisteredLinkMatcher = {\n      id: this._nextLinkMatcherId++,\n      regex,\n      handler,\n      matchIndex: options.matchIndex,\n      validationCallback: options.validationCallback,\n      hoverTooltipCallback: options.tooltipCallback,\n      hoverLeaveCallback: options.leaveCallback,\n      willLinkActivate: options.willLinkActivate,\n      priority: options.priority || 0\n    };\n    this._addLinkMatcherToList(matcher);\n    return matcher.id;\n  }\n\n  /**\n   * Inserts a link matcher to the list in the correct position based on the\n   * priority of each link matcher. New link matchers of equal priority are\n   * considered after older link matchers.\n   * @param matcher The link matcher to be added.\n   */\n  private _addLinkMatcherToList(matcher: IRegisteredLinkMatcher): void {\n    if (this._linkMatchers.length === 0) {\n      this._linkMatchers.push(matcher);\n      return;\n    }\n\n    for (let i = this._linkMatchers.length - 1; i >= 0; i--) {\n      if (matcher.priority <= this._linkMatchers[i].priority) {\n        this._linkMatchers.splice(i + 1, 0, matcher);\n        return;\n      }\n    }\n\n    this._linkMatchers.splice(0, 0, matcher);\n  }\n\n  /**\n   * Deregisters a link matcher if it has been registered.\n   * @param matcherId The link matcher's ID (returned after register)\n   * @return Whether a link matcher was found and deregistered.\n   */\n  public deregisterLinkMatcher(matcherId: number): boolean {\n    for (let i = 0; i < this._linkMatchers.length; i++) {\n      if (this._linkMatchers[i].id === matcherId) {\n        this._linkMatchers.splice(i, 1);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Linkifies a row given a specific handler.\n   * @param rowIndex The row index to linkify (absolute index).\n   * @param text string content of the unwrapped row.\n   * @param matcher The link matcher for this line.\n   */\n  private _doLinkifyRow(rowIndex: number, text: string, matcher: ILinkMatcher): void {\n    // clone regex to do a global search on text\n    const rex = new RegExp(matcher.regex.source, (matcher.regex.flags || '') + 'g');\n    let match;\n    let stringIndex = -1;\n    while ((match = rex.exec(text)) !== null) {\n      const uri = match[typeof matcher.matchIndex !== 'number' ? 0 : matcher.matchIndex];\n      if (!uri) {\n        // something matched but does not comply with the given matchIndex\n        // since this is most likely a bug the regex itself we simply do nothing here\n        this._logService.debug('match found without corresponding matchIndex', match, matcher);\n        break;\n      }\n\n      // Get index, match.index is for the outer match which includes negated chars\n      // therefore we cannot use match.index directly, instead we search the position\n      // of the match group in text again\n      // also correct regex and string search offsets for the next loop run\n      stringIndex = text.indexOf(uri, stringIndex + 1);\n      rex.lastIndex = stringIndex + uri.length;\n      if (stringIndex < 0) {\n        // invalid stringIndex (should not have happened)\n        break;\n      }\n\n      // get the buffer index as [absolute row, col] for the match\n      const bufferIndex = this._bufferService.buffer.stringIndexToBufferIndex(rowIndex, stringIndex);\n      if (bufferIndex[0] < 0) {\n        // invalid bufferIndex (should not have happened)\n        break;\n      }\n\n      const line = this._bufferService.buffer.lines.get(bufferIndex[0]);\n      if (!line) {\n        break;\n      }\n\n      const attr = line.getFg(bufferIndex[1]);\n      const fg = attr ? (attr >> 9) & 0x1ff : undefined;\n\n      if (matcher.validationCallback) {\n        matcher.validationCallback(uri, isValid => {\n          // Discard link if the line has already changed\n          if (this._rowsTimeoutId) {\n            return;\n          }\n          if (isValid) {\n            this._addLink(bufferIndex[1], bufferIndex[0] - this._bufferService.buffer.ydisp, uri, matcher, fg);\n          }\n        });\n      } else {\n        this._addLink(bufferIndex[1], bufferIndex[0] - this._bufferService.buffer.ydisp, uri, matcher, fg);\n      }\n    }\n  }\n\n  /**\n   * Registers a link to the mouse zone manager.\n   * @param x The column the link starts.\n   * @param y The row the link is on.\n   * @param uri The URI of the link.\n   * @param matcher The link matcher for the link.\n   * @param fg The link color for hover event.\n   */\n  private _addLink(x: number, y: number, uri: string, matcher: ILinkMatcher, fg: number | undefined): void {\n    if (!this._mouseZoneManager || !this._element) {\n      return;\n    }\n    // FIXME: get cell length from buffer to avoid mismatch after Unicode version change\n    const width = this._unicodeService.getStringCellWidth(uri);\n    const x1 = x % this._bufferService.cols;\n    const y1 = y + Math.floor(x / this._bufferService.cols);\n    let x2 = (x1 + width) % this._bufferService.cols;\n    let y2 = y1 + Math.floor((x1 + width) / this._bufferService.cols);\n    if (x2 === 0) {\n      x2 = this._bufferService.cols;\n      y2--;\n    }\n\n    this._mouseZoneManager.add(new MouseZone(\n      x1 + 1,\n      y1 + 1,\n      x2 + 1,\n      y2 + 1,\n      e => {\n        if (matcher.handler) {\n          return matcher.handler(e, uri);\n        }\n        const newWindow = window.open();\n        if (newWindow) {\n          newWindow.opener = null;\n          newWindow.location.href = uri;\n        } else {\n          console.warn('Opening link blocked as opener could not be cleared');\n        }\n      },\n      () => {\n        this._onShowLinkUnderline.fire(this._createLinkHoverEvent(x1, y1, x2, y2, fg));\n        this._element!.classList.add('xterm-cursor-pointer');\n      },\n      e => {\n        this._onLinkTooltip.fire(this._createLinkHoverEvent(x1, y1, x2, y2, fg));\n        if (matcher.hoverTooltipCallback) {\n          // Note that IViewportRange use 1-based coordinates to align with escape sequences such\n          // as CUP which use 1,1 as the default for row/col\n          matcher.hoverTooltipCallback(e, uri, { start: { x: x1, y: y1 }, end: { x: x2, y: y2 } });\n        }\n      },\n      () => {\n        this._onHideLinkUnderline.fire(this._createLinkHoverEvent(x1, y1, x2, y2, fg));\n        this._element!.classList.remove('xterm-cursor-pointer');\n        if (matcher.hoverLeaveCallback) {\n          matcher.hoverLeaveCallback();\n        }\n      },\n      e => {\n        if (matcher.willLinkActivate) {\n          return matcher.willLinkActivate(e, uri);\n        }\n        return true;\n      }\n    ));\n  }\n\n  private _createLinkHoverEvent(x1: number, y1: number, x2: number, y2: number, fg: number | undefined): ILinkifierEvent {\n    return { x1, y1, x2, y2, cols: this._bufferService.cols, fg };\n  }\n}\n\nexport class MouseZone implements IMouseZone {\n  constructor(\n    public x1: number,\n    public y1: number,\n    public x2: number,\n    public y2: number,\n    public clickCallback: (e: MouseEvent) => any,\n    public hoverCallback: (e: MouseEvent) => any,\n    public tooltipCallback: (e: MouseEvent) => any,\n    public leaveCallback: () => void,\n    public willLinkActivate: (e: MouseEvent) => boolean\n  ) {\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ILinkifier2, ILinkProvider, IBufferCellPosition, ILink, ILinkifierEvent, ILinkDecorations, ILinkWithState } from 'browser/Types';\nimport { IDisposable } from 'common/Types';\nimport { IMouseService, IRenderService } from './services/Services';\nimport { IBufferService } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { Disposable, getDisposeArrayDisposable, disposeArray } from 'common/Lifecycle';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\n\nexport class Linkifier2 extends Disposable implements ILinkifier2 {\n  private _element: HTMLElement | undefined;\n  private _mouseService: IMouseService | undefined;\n  private _renderService: IRenderService | undefined;\n  private _linkProviders: ILinkProvider[] = [];\n  public get currentLink(): ILinkWithState | undefined { return this._currentLink; }\n  protected _currentLink: ILinkWithState | undefined;\n  private _mouseDownLink: ILinkWithState | undefined;\n  private _lastMouseEvent: MouseEvent | undefined;\n  private _linkCacheDisposables: IDisposable[] = [];\n  private _lastBufferCell: IBufferCellPosition | undefined;\n  private _isMouseOut: boolean = true;\n  private _activeProviderReplies: Map<Number, ILinkWithState[] | undefined> | undefined;\n  private _activeLine: number = -1;\n\n  private _onShowLinkUnderline = this.register(new EventEmitter<ILinkifierEvent>());\n  public get onShowLinkUnderline(): IEvent<ILinkifierEvent> { return this._onShowLinkUnderline.event; }\n  private _onHideLinkUnderline = this.register(new EventEmitter<ILinkifierEvent>());\n  public get onHideLinkUnderline(): IEvent<ILinkifierEvent> { return this._onHideLinkUnderline.event; }\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService\n  ) {\n    super();\n    this.register(getDisposeArrayDisposable(this._linkCacheDisposables));\n  }\n\n  public registerLinkProvider(linkProvider: ILinkProvider): IDisposable {\n    this._linkProviders.push(linkProvider);\n    return {\n      dispose: () => {\n        // Remove the link provider from the list\n        const providerIndex = this._linkProviders.indexOf(linkProvider);\n\n        if (providerIndex !== -1) {\n          this._linkProviders.splice(providerIndex, 1);\n        }\n      }\n    };\n  }\n\n  public attachToDom(element: HTMLElement, mouseService: IMouseService, renderService: IRenderService): void {\n    this._element = element;\n    this._mouseService = mouseService;\n    this._renderService = renderService;\n\n    this.register(addDisposableDomListener(this._element, 'mouseleave', () => {\n      this._isMouseOut = true;\n      this._clearCurrentLink();\n    }));\n    this.register(addDisposableDomListener(this._element, 'mousemove', this._onMouseMove.bind(this)));\n    this.register(addDisposableDomListener(this._element, 'mousedown', this._handleMouseDown.bind(this)));\n    this.register(addDisposableDomListener(this._element, 'mouseup', this._handleMouseUp.bind(this)));\n  }\n\n  private _onMouseMove(event: MouseEvent): void {\n    this._lastMouseEvent = event;\n\n    if (!this._element || !this._mouseService) {\n      return;\n    }\n\n    const position = this._positionFromMouseEvent(event, this._element, this._mouseService);\n    if (!position) {\n      return;\n    }\n    this._isMouseOut = false;\n\n    // Ignore the event if it's an embedder created hover widget\n    const composedPath = event.composedPath() as HTMLElement[];\n    for (let i = 0; i < composedPath.length; i++) {\n      const target = composedPath[i];\n      // Hit Terminal.element, break and continue\n      if (target.classList.contains('xterm')) {\n        break;\n      }\n      // It's a hover, don't respect hover event\n      if (target.classList.contains('xterm-hover')) {\n        return;\n      }\n    }\n\n    if (!this._lastBufferCell || (position.x !== this._lastBufferCell.x || position.y !== this._lastBufferCell.y)) {\n      this._onHover(position);\n      this._lastBufferCell = position;\n    }\n  }\n\n  private _onHover(position: IBufferCellPosition): void {\n    // TODO: This currently does not cache link provider results across wrapped lines, activeLine should be something like `activeRange: {startY, endY}`\n    // Check if we need to clear the link\n    if (this._activeLine !== position.y) {\n      this._clearCurrentLink();\n      this._askForLink(position, false);\n      return;\n    }\n\n    // Check the if the link is in the mouse position\n    const isCurrentLinkInPosition = this._currentLink && this._linkAtPosition(this._currentLink.link, position);\n    if (!isCurrentLinkInPosition) {\n      this._clearCurrentLink();\n      this._askForLink(position, true);\n    }\n  }\n\n  private _askForLink(position: IBufferCellPosition, useLineCache: boolean): void {\n    if (!this._activeProviderReplies || !useLineCache) {\n      this._activeProviderReplies?.forEach(reply => {\n        reply?.forEach(linkWithState => {\n          if (linkWithState.link.dispose) {\n            linkWithState.link.dispose();\n          }\n        });\n      });\n      this._activeProviderReplies = new Map();\n      this._activeLine = position.y;\n    }\n    let linkProvided = false;\n\n    // There is no link cached, so ask for one\n    for (const [i, linkProvider] of this._linkProviders.entries()) {\n      if (useLineCache) {\n        const existingReply = this._activeProviderReplies?.get(i);\n        // If there isn't a reply, the provider hasn't responded yet.\n\n        // TODO: If there isn't a reply yet it means that the provider is still resolving. Ensuring\n        // provideLinks isn't triggered again saves ILink.hover firing twice though. This probably\n        // needs promises to get fixed\n        if (existingReply) {\n          linkProvided = this._checkLinkProviderResult(i, position, linkProvided);\n        }\n      } else {\n        linkProvider.provideLinks(position.y, (links: ILink[] | undefined) => {\n          if (this._isMouseOut) {\n            return;\n          }\n          const linksWithState: ILinkWithState[] | undefined = links?.map(link  => ({ link }));\n          this._activeProviderReplies?.set(i, linksWithState);\n          linkProvided = this._checkLinkProviderResult(i, position, linkProvided);\n\n          // If all providers have responded, remove lower priority links that intersect ranges of\n          // higher priority links\n          if (this._activeProviderReplies?.size === this._linkProviders.length) {\n            this._removeIntersectingLinks(position.y, this._activeProviderReplies);\n          }\n        });\n      }\n    }\n  }\n\n  private _removeIntersectingLinks(y: number, replies: Map<Number, ILinkWithState[] | undefined>): void {\n    const occupiedCells = new Set<number>();\n    for (let i = 0; i < replies.size; i++) {\n      const providerReply = replies.get(i);\n      if (!providerReply) {\n        continue;\n      }\n      for (let i = 0; i < providerReply.length; i++) {\n        const linkWithState = providerReply[i];\n        const startX = linkWithState.link.range.start.y < y ? 0 : linkWithState.link.range.start.x;\n        const endX = linkWithState.link.range.end.y > y ? this._bufferService.cols : linkWithState.link.range.end.x;\n        for (let x = startX; x <= endX; x++) {\n          if (occupiedCells.has(x)) {\n            providerReply.splice(i--, 1);\n            break;\n          }\n          occupiedCells.add(x);\n        }\n      }\n    }\n  }\n\n  private _checkLinkProviderResult(index: number, position: IBufferCellPosition, linkProvided: boolean): boolean {\n    if (!this._activeProviderReplies) {\n      return linkProvided;\n    }\n\n    const links = this._activeProviderReplies.get(index);\n\n    // Check if every provider before this one has come back undefined\n    let hasLinkBefore = false;\n    for (let j = 0; j < index; j++) {\n      if (!this._activeProviderReplies.has(j) || this._activeProviderReplies.get(j)) {\n        hasLinkBefore = true;\n      }\n    }\n\n    // If all providers with higher priority came back undefined, then this provider's link for\n    // the position should be used\n    if (!hasLinkBefore && links) {\n      const linkAtPosition = links.find(link => this._linkAtPosition(link.link, position));\n      if (linkAtPosition) {\n        linkProvided = true;\n        this._handleNewLink(linkAtPosition);\n      }\n    }\n\n    // Check if all the providers have responded\n    if (this._activeProviderReplies.size === this._linkProviders.length && !linkProvided) {\n      // Respect the order of the link providers\n      for (let j = 0; j < this._activeProviderReplies.size; j++) {\n        const currentLink = this._activeProviderReplies.get(j)?.find(link => this._linkAtPosition(link.link, position));\n        if (currentLink) {\n          linkProvided = true;\n          this._handleNewLink(currentLink);\n          break;\n        }\n      }\n    }\n\n    return linkProvided;\n  }\n\n  private _handleMouseDown(): void {\n    this._mouseDownLink = this._currentLink;\n  }\n\n  private _handleMouseUp(event: MouseEvent): void {\n    if (!this._element || !this._mouseService || !this._currentLink) {\n      return;\n    }\n\n    const position = this._positionFromMouseEvent(event, this._element, this._mouseService);\n    if (!position) {\n      return;\n    }\n\n    if (this._mouseDownLink === this._currentLink && this._linkAtPosition(this._currentLink.link, position)) {\n      this._currentLink.link.activate(event, this._currentLink.link.text);\n    }\n  }\n\n  private _clearCurrentLink(startRow?: number, endRow?: number): void {\n    if (!this._element || !this._currentLink || !this._lastMouseEvent) {\n      return;\n    }\n\n    // If we have a start and end row, check that the link is within it\n    if (!startRow || !endRow || (this._currentLink.link.range.start.y >= startRow && this._currentLink.link.range.end.y <= endRow)) {\n      this._linkLeave(this._element, this._currentLink.link, this._lastMouseEvent);\n      this._currentLink = undefined;\n      disposeArray(this._linkCacheDisposables);\n    }\n  }\n\n  private _handleNewLink(linkWithState: ILinkWithState): void {\n    if (!this._element || !this._lastMouseEvent || !this._mouseService) {\n      return;\n    }\n\n    const position = this._positionFromMouseEvent(this._lastMouseEvent, this._element, this._mouseService);\n\n    if (!position) {\n      return;\n    }\n\n    // Trigger hover if the we have a link at the position\n    if (this._linkAtPosition(linkWithState.link, position)) {\n      this._currentLink = linkWithState;\n      this._currentLink.state = {\n        decorations: {\n          underline: linkWithState.link.decorations === undefined ? true : linkWithState.link.decorations.underline,\n          pointerCursor: linkWithState.link.decorations === undefined ? true : linkWithState.link.decorations.pointerCursor\n        },\n        isHovered: true\n      };\n      this._linkHover(this._element, linkWithState.link, this._lastMouseEvent);\n\n      // Add listener for tracking decorations changes\n      linkWithState.link.decorations = {} as ILinkDecorations;\n      Object.defineProperties(linkWithState.link.decorations, {\n        pointerCursor: {\n          get: () => this._currentLink?.state?.decorations.pointerCursor,\n          set: v => {\n            if (this._currentLink?.state && this._currentLink.state.decorations.pointerCursor !== v) {\n              this._currentLink.state.decorations.pointerCursor = v;\n              if (this._currentLink.state.isHovered) {\n                this._element?.classList.toggle('xterm-cursor-pointer', v);\n              }\n            }\n          }\n        },\n        underline: {\n          get: () => this._currentLink?.state?.decorations.underline,\n          set: v => {\n            if (this._currentLink?.state && this._currentLink?.state?.decorations.underline !== v) {\n              this._currentLink.state.decorations.underline = v;\n              if (this._currentLink.state.isHovered) {\n                this._fireUnderlineEvent(linkWithState.link, v);\n              }\n            }\n          }\n        }\n      });\n\n      // Add listener for rerendering\n      if (this._renderService) {\n        this._linkCacheDisposables.push(this._renderService.onRenderedViewportChange(e => {\n          // When start is 0 a scroll most likely occurred, make sure links above the fold also get\n          // cleared.\n          const start = e.start === 0 ? 0 : e.start + 1 + this._bufferService.buffer.ydisp;\n          this._clearCurrentLink(start, e.end + 1 + this._bufferService.buffer.ydisp);\n        }));\n      }\n    }\n  }\n\n  protected _linkHover(element: HTMLElement, link: ILink, event: MouseEvent): void {\n    if (this._currentLink?.state) {\n      this._currentLink.state.isHovered = true;\n      if (this._currentLink.state.decorations.underline) {\n        this._fireUnderlineEvent(link, true);\n      }\n      if (this._currentLink.state.decorations.pointerCursor) {\n        element.classList.add('xterm-cursor-pointer');\n      }\n    }\n\n    if (link.hover) {\n      link.hover(event, link.text);\n    }\n  }\n\n  private _fireUnderlineEvent(link: ILink, showEvent: boolean): void {\n    const range = link.range;\n    const scrollOffset = this._bufferService.buffer.ydisp;\n    const event = this._createLinkUnderlineEvent(range.start.x - 1, range.start.y - scrollOffset - 1, range.end.x, range.end.y - scrollOffset - 1, undefined);\n    const emitter = showEvent ? this._onShowLinkUnderline : this._onHideLinkUnderline;\n    emitter.fire(event);\n  }\n\n  protected _linkLeave(element: HTMLElement, link: ILink, event: MouseEvent): void {\n    if (this._currentLink?.state) {\n      this._currentLink.state.isHovered = false;\n      if (this._currentLink.state.decorations.underline) {\n        this._fireUnderlineEvent(link, false);\n      }\n      if (this._currentLink.state.decorations.pointerCursor) {\n        element.classList.remove('xterm-cursor-pointer');\n      }\n    }\n\n    if (link.leave) {\n      link.leave(event, link.text);\n    }\n  }\n\n  /**\n   * Check if the buffer position is within the link\n   * @param link\n   * @param position\n   */\n  private _linkAtPosition(link: ILink, position: IBufferCellPosition): boolean {\n    const sameLine = link.range.start.y === link.range.end.y;\n    const wrappedFromLeft = link.range.start.y < position.y;\n    const wrappedToRight = link.range.end.y > position.y;\n\n    // If the start and end have the same y, then the position must be between start and end x\n    // If not, then handle each case seperately, depending on which way it wraps\n    return ((sameLine && link.range.start.x <= position.x && link.range.end.x >= position.x) ||\n      (wrappedFromLeft && link.range.end.x >= position.x) ||\n      (wrappedToRight && link.range.start.x <= position.x) ||\n      (wrappedFromLeft && wrappedToRight)) &&\n      link.range.start.y <= position.y &&\n      link.range.end.y >= position.y;\n  }\n\n  /**\n   * Get the buffer position from a mouse event\n   * @param event\n   */\n  private _positionFromMouseEvent(event: MouseEvent, element: HTMLElement, mouseService: IMouseService): IBufferCellPosition | undefined {\n    const coords = mouseService.getCoords(event, element, this._bufferService.cols, this._bufferService.rows);\n    if (!coords) {\n      return;\n    }\n\n    return { x: coords[0], y: coords[1] + this._bufferService.buffer.ydisp };\n  }\n\n  private _createLinkUnderlineEvent(x1: number, y1: number, x2: number, y2: number, fg: number | undefined): ILinkifierEvent {\n    return { x1, y1, x2, y2, cols: this._bufferService.cols, fg };\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n// eslint-disable-next-line prefer-const\nexport let promptLabel = 'Terminal input';\n\n// eslint-disable-next-line prefer-const\nexport let tooMuchOutput = 'Too much output to announce, navigate to rows manually to read';\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Disposable } from 'common/Lifecycle';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IMouseService, ISelectionService } from 'browser/services/Services';\nimport { IMouseZoneManager, IMouseZone } from 'browser/Types';\nimport { IBufferService, IOptionsService } from 'common/services/Services';\n\n/**\n * The MouseZoneManager allows components to register zones within the terminal\n * that trigger hover and click callbacks.\n *\n * This class was intentionally made not so robust initially as the only case it\n * needed to support was single-line links which never overlap. Improvements can\n * be made in the future.\n */\nexport class MouseZoneManager extends Disposable implements IMouseZoneManager {\n  private _zones: IMouseZone[] = [];\n\n  private _areZonesActive: boolean = false;\n  private _mouseMoveListener: (e: MouseEvent) => any;\n  private _mouseLeaveListener: (e: MouseEvent) => any;\n  private _clickListener: (e: MouseEvent) => any;\n\n  private _tooltipTimeout: number | undefined;\n  private _currentZone: IMouseZone | undefined;\n  private _lastHoverCoords: [number | undefined, number | undefined] = [undefined, undefined];\n  private _initialSelectionLength: number = 0;\n\n  constructor(\n    private readonly _element: HTMLElement,\n    private readonly _screenElement: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IMouseService private readonly _mouseService: IMouseService,\n    @ISelectionService private readonly _selectionService: ISelectionService,\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n\n    this.register(addDisposableDomListener(this._element, 'mousedown', e => this._onMouseDown(e)));\n\n    // These events are expensive, only listen to it when mouse zones are active\n    this._mouseMoveListener = e => this._onMouseMove(e);\n    this._mouseLeaveListener = e => this._onMouseLeave(e);\n    this._clickListener = e => this._onClick(e);\n  }\n\n  public dispose(): void {\n    super.dispose();\n    this._deactivate();\n  }\n\n  public add(zone: IMouseZone): void {\n    this._zones.push(zone);\n    if (this._zones.length === 1) {\n      this._activate();\n    }\n  }\n\n  public clearAll(start?: number, end?: number): void {\n    // Exit if there's nothing to clear\n    if (this._zones.length === 0) {\n      return;\n    }\n\n    // Clear all if start/end weren't set\n    if (!start || !end) {\n      start = 0;\n      end = this._bufferService.rows - 1;\n    }\n\n    // Iterate through zones and clear them out if they're within the range\n    for (let i = 0; i < this._zones.length; i++) {\n      const zone = this._zones[i];\n      if ((zone.y1 > start && zone.y1 <= end + 1) ||\n          (zone.y2 > start && zone.y2 <= end + 1) ||\n          (zone.y1 < start && zone.y2 > end + 1)) {\n        if (this._currentZone && this._currentZone === zone) {\n          this._currentZone.leaveCallback();\n          this._currentZone = undefined;\n        }\n        this._zones.splice(i--, 1);\n      }\n    }\n\n    // Deactivate the mouse zone manager if all the zones have been removed\n    if (this._zones.length === 0) {\n      this._deactivate();\n    }\n  }\n\n  private _activate(): void {\n    if (!this._areZonesActive) {\n      this._areZonesActive = true;\n      this._element.addEventListener('mousemove', this._mouseMoveListener);\n      this._element.addEventListener('mouseleave', this._mouseLeaveListener);\n      this._element.addEventListener('click', this._clickListener);\n    }\n  }\n\n  private _deactivate(): void {\n    if (this._areZonesActive) {\n      this._areZonesActive = false;\n      this._element.removeEventListener('mousemove', this._mouseMoveListener);\n      this._element.removeEventListener('mouseleave', this._mouseLeaveListener);\n      this._element.removeEventListener('click', this._clickListener);\n    }\n  }\n\n  private _onMouseMove(e: MouseEvent): void {\n    // TODO: Ideally this would only clear the hover state when the mouse moves\n    // outside of the mouse zone\n    if (this._lastHoverCoords[0] !== e.pageX || this._lastHoverCoords[1] !== e.pageY) {\n      this._onHover(e);\n      // Record the current coordinates\n      this._lastHoverCoords = [e.pageX, e.pageY];\n    }\n  }\n\n  private _onHover(e: MouseEvent): void {\n    const zone = this._findZoneEventAt(e);\n\n    // Do nothing if the zone is the same\n    if (zone === this._currentZone) {\n      return;\n    }\n\n    // Fire the hover end callback and cancel any existing timer if a new zone\n    // is being hovered\n    if (this._currentZone) {\n      this._currentZone.leaveCallback();\n      this._currentZone = undefined;\n      if (this._tooltipTimeout) {\n        clearTimeout(this._tooltipTimeout);\n      }\n    }\n\n    // Exit if there is not zone\n    if (!zone) {\n      return;\n    }\n    this._currentZone = zone;\n\n    // Trigger the hover callback\n    if (zone.hoverCallback) {\n      zone.hoverCallback(e);\n    }\n\n    // Restart the tooltip timeout\n    this._tooltipTimeout = window.setTimeout(() => this._onTooltip(e), this._optionsService.rawOptions.linkTooltipHoverDuration);\n  }\n\n  private _onTooltip(e: MouseEvent): void {\n    this._tooltipTimeout = undefined;\n    const zone = this._findZoneEventAt(e);\n    zone?.tooltipCallback(e);\n  }\n\n  private _onMouseDown(e: MouseEvent): void {\n    // Store current terminal selection length, to check if we're performing\n    // a selection operation\n    this._initialSelectionLength = this._getSelectionLength();\n\n    // Ignore the event if there are no zones active\n    if (!this._areZonesActive) {\n      return;\n    }\n\n    // Find the active zone, prevent event propagation if found to prevent other\n    // components from handling the mouse event.\n    const zone = this._findZoneEventAt(e);\n    if (zone?.willLinkActivate(e)) {\n      e.preventDefault();\n      e.stopImmediatePropagation();\n    }\n  }\n\n  private _onMouseLeave(e: MouseEvent): void {\n    // Fire the hover end callback and cancel any existing timer if the mouse\n    // leaves the terminal element\n    if (this._currentZone) {\n      this._currentZone.leaveCallback();\n      this._currentZone = undefined;\n      if (this._tooltipTimeout) {\n        clearTimeout(this._tooltipTimeout);\n      }\n    }\n  }\n\n  private _onClick(e: MouseEvent): void {\n    // Find the active zone and click it if found and no selection was\n    // being performed\n    const zone = this._findZoneEventAt(e);\n    const currentSelectionLength = this._getSelectionLength();\n\n    if (zone && currentSelectionLength === this._initialSelectionLength) {\n      zone.clickCallback(e);\n      e.preventDefault();\n      e.stopImmediatePropagation();\n    }\n  }\n\n  private _getSelectionLength(): number {\n    const selectionText = this._selectionService.selectionText;\n    return selectionText ? selectionText.length : 0;\n  }\n\n  private _findZoneEventAt(e: MouseEvent): IMouseZone | undefined {\n    const coords = this._mouseService.getCoords(e, this._screenElement, this._bufferService.cols, this._bufferService.rows);\n    if (!coords) {\n      return undefined;\n    }\n    const x = coords[0];\n    const y = coords[1];\n    for (let i = 0; i < this._zones.length; i++) {\n      const zone = this._zones[i];\n      if (zone.y1 === zone.y2) {\n        // Single line link\n        if (y === zone.y1 && x >= zone.x1 && x < zone.x2) {\n          return zone;\n        }\n      } else {\n        // Multi-line link\n        if ((y === zone.y1 && x >= zone.x1) ||\n            (y === zone.y2 && x < zone.x2) ||\n            (y > zone.y1 && y < zone.y2)) {\n          return zone;\n        }\n      }\n    }\n    return undefined;\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDebouncerWithCallback } from 'browser/Types';\n\n/**\n * Debounces calls to render terminal rows using animation frames.\n */\nexport class RenderDebouncer implements IRenderDebouncerWithCallback {\n  private _rowStart: number | undefined;\n  private _rowEnd: number | undefined;\n  private _rowCount: number | undefined;\n  private _animationFrame: number | undefined;\n  private _refreshCallbacks: FrameRequestCallback[] = [];\n\n  constructor(\n    private _renderCallback: (start: number, end: number) => void\n  ) {\n  }\n\n  public dispose(): void {\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public addRefreshCallback(callback: FrameRequestCallback): number {\n    this._refreshCallbacks.push(callback);\n    if (!this._animationFrame) {\n      this._animationFrame = window.requestAnimationFrame(() => this._innerRefresh());\n    }\n    return this._animationFrame;\n  }\n\n  public refresh(rowStart: number | undefined, rowEnd: number | undefined, rowCount: number): void {\n    this._rowCount = rowCount;\n    // Get the min/max row start/end for the arg values\n    rowStart = rowStart !== undefined ? rowStart : 0;\n    rowEnd = rowEnd !== undefined ? rowEnd : this._rowCount - 1;\n    // Set the properties to the updated values\n    this._rowStart = this._rowStart !== undefined ? Math.min(this._rowStart, rowStart) : rowStart;\n    this._rowEnd = this._rowEnd !== undefined ? Math.max(this._rowEnd, rowEnd) : rowEnd;\n\n    if (this._animationFrame) {\n      return;\n    }\n\n    this._animationFrame = window.requestAnimationFrame(() => this._innerRefresh());\n  }\n\n  private _innerRefresh(): void {\n    this._animationFrame = undefined;\n\n    // Make sure values are set\n    if (this._rowStart === undefined || this._rowEnd === undefined || this._rowCount === undefined) {\n      this._runRefreshCallbacks();\n      return;\n    }\n\n    // Clamp values\n    const start = Math.max(this._rowStart, 0);\n    const end = Math.min(this._rowEnd, this._rowCount - 1);\n\n    // Reset debouncer (this happens before render callback as the render could trigger it again)\n    this._rowStart = undefined;\n    this._rowEnd = undefined;\n\n    // Run render callback\n    this._renderCallback(start, end);\n    this._runRefreshCallbacks();\n  }\n\n  private _runRefreshCallbacks(): void {\n    for (const callback of this._refreshCallbacks) {\n      callback(0);\n    }\n    this._refreshCallbacks = [];\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Disposable } from 'common/Lifecycle';\n\nexport type ScreenDprListener = (newDevicePixelRatio?: number, oldDevicePixelRatio?: number) => void;\n\n/**\n * The screen device pixel ratio monitor allows listening for when the\n * window.devicePixelRatio value changes. This is done not with polling but with\n * the use of window.matchMedia to watch media queries. When the event fires,\n * the listener will be reattached using a different media query to ensure that\n * any further changes will register.\n *\n * The listener should fire on both window zoom changes and switching to a\n * monitor with a different DPI.\n */\nexport class ScreenDprMonitor extends Disposable {\n  private _currentDevicePixelRatio: number = window.devicePixelRatio;\n  private _outerListener: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | undefined;\n  private _listener: ScreenDprListener | undefined;\n  private _resolutionMediaMatchList: MediaQueryList | undefined;\n\n  public setListener(listener: ScreenDprListener): void {\n    if (this._listener) {\n      this.clearListener();\n    }\n    this._listener = listener;\n    this._outerListener = () => {\n      if (!this._listener) {\n        return;\n      }\n      this._listener(window.devicePixelRatio, this._currentDevicePixelRatio);\n      this._updateDpr();\n    };\n    this._updateDpr();\n  }\n\n  public dispose(): void {\n    super.dispose();\n    this.clearListener();\n  }\n\n  private _updateDpr(): void {\n    if (!this._outerListener) {\n      return;\n    }\n\n    // Clear listeners for old DPR\n    this._resolutionMediaMatchList?.removeListener(this._outerListener);\n\n    // Add listeners for new DPR\n    this._currentDevicePixelRatio = window.devicePixelRatio;\n    this._resolutionMediaMatchList = window.matchMedia(`screen and (resolution: ${window.devicePixelRatio}dppx)`);\n    this._resolutionMediaMatchList.addListener(this._outerListener);\n  }\n\n  public clearListener(): void {\n    if (!this._resolutionMediaMatchList || !this._listener || !this._outerListener) {\n      return;\n    }\n    this._resolutionMediaMatchList.removeListener(this._outerListener);\n    this._resolutionMediaMatchList = undefined;\n    this._listener = undefined;\n    this._outerListener = undefined;\n  }\n}\n", "/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n *\n * Originally forked from (with the author's permission):\n *   Fabrice Bellard's javascript vt100 for jslinux:\n *   http://bellard.org/jslinux/\n *   Copyright (c) 2011 Fabrice Bellard\n *   The original design remains. The terminal itself\n *   has been extended to include xterm CSI codes, among\n *   other features.\n *\n * Terminal Emulation References:\n *   http://vt100.net/\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.txt\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n *   http://invisible-island.net/vttest/\n *   http://www.inwap.com/pdp10/ansicode.txt\n *   http://linux.die.net/man/4/console_codes\n *   http://linux.die.net/man/7/urxvt\n */\n\nimport { ICompositionHelper, ITerminal, IBrowser, CustomKeyEventHandler, ILinkifier, IMouseZoneManager, LinkMatcherHandler, ILinkMatcherOptions, IViewport, ILinkifier2, CharacterJoinerHandler } from 'browser/Types';\nimport { IRenderer } from 'browser/renderer/Types';\nimport { CompositionHelper } from 'browser/input/CompositionHelper';\nimport { Viewport } from 'browser/Viewport';\nimport { rightClickHandler, moveTextAreaUnderMouseCursor, handlePasteEvent, copyHandler, paste } from 'browser/Clipboard';\nimport { C0, C1_ESCAPED } from 'common/data/EscapeSequences';\nimport { WindowsOptionsReportType } from '../common/InputHandler';\nimport { Renderer } from 'browser/renderer/Renderer';\nimport { Linkifier } from 'browser/Linkifier';\nimport { SelectionService } from 'browser/services/SelectionService';\nimport * as Browser from 'common/Platform';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport * as Strings from 'browser/LocalizableStrings';\nimport { SoundService } from 'browser/services/SoundService';\nimport { MouseZoneManager } from 'browser/MouseZoneManager';\nimport { AccessibilityManager } from './AccessibilityManager';\nimport { ITheme, IMarker, IDisposable, ISelectionPosition, ILinkProvider, IDecorationOptions, IDecoration } from 'xterm';\nimport { DomRenderer } from 'browser/renderer/dom/DomRenderer';\nimport { KeyboardResultType, CoreMouseEventType, CoreMouseButton, CoreMouseAction, ITerminalOptions, ScrollSource, IColorEvent, ColorIndex, ColorRequestType } from 'common/Types';\nimport { evaluateKeyboardEvent } from 'common/input/Keyboard';\nimport { EventEmitter, IEvent, forwardEvent } from 'common/EventEmitter';\nimport { DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { ColorManager } from 'browser/ColorManager';\nimport { RenderService } from 'browser/services/RenderService';\nimport { ICharSizeService, IRenderService, IMouseService, ISelectionService, ISoundService, ICoreBrowserService, ICharacterJoinerService } from 'browser/services/Services';\nimport { CharSizeService } from 'browser/services/CharSizeService';\nimport { IBuffer } from 'common/buffer/Types';\nimport { MouseService } from 'browser/services/MouseService';\nimport { Linkifier2 } from 'browser/Linkifier2';\nimport { CoreBrowserService } from 'browser/services/CoreBrowserService';\nimport { CoreTerminal } from 'common/CoreTerminal';\nimport { color, rgba } from 'common/Color';\nimport { CharacterJoinerService } from 'browser/services/CharacterJoinerService';\nimport { toRgbString } from 'common/input/XParseColor';\nimport { BufferDecorationRenderer } from 'browser/decorations/BufferDecorationRenderer';\nimport { OverviewRulerRenderer } from 'browser/decorations/OverviewRulerRenderer';\nimport { DecorationService } from 'common/services/DecorationService';\nimport { IDecorationService } from 'common/services/Services';\n\n// Let it work inside Node.js for automated testing purposes.\nconst document: Document = (typeof window !== 'undefined') ? window.document : null as any;\n\nexport class Terminal extends CoreTerminal implements ITerminal {\n  public textarea: HTMLTextAreaElement | undefined;\n  public element: HTMLElement | undefined;\n  public screenElement: HTMLElement | undefined;\n\n  private _document: Document | undefined;\n  private _viewportScrollArea: HTMLElement | undefined;\n  private _viewportElement: HTMLElement | undefined;\n  private _helperContainer: HTMLElement | undefined;\n  private _compositionView: HTMLElement | undefined;\n\n  private _overviewRulerRenderer: OverviewRulerRenderer | undefined;\n\n  // private _visualBellTimer: number;\n\n  public browser: IBrowser = Browser as any;\n\n  private _customKeyEventHandler: CustomKeyEventHandler | undefined;\n\n  // browser services\n  private _decorationService: DecorationService;\n  private _charSizeService: ICharSizeService | undefined;\n  private _mouseService: IMouseService | undefined;\n  private _renderService: IRenderService | undefined;\n  private _characterJoinerService: ICharacterJoinerService | undefined;\n  private _selectionService: ISelectionService | undefined;\n  private _soundService: ISoundService | undefined;\n\n  /**\n   * Records whether the keydown event has already been handled and triggered a data event, if so\n   * the keypress event should not trigger a data event but should still print to the textarea so\n   * screen readers will announce it.\n   */\n  private _keyDownHandled: boolean = false;\n\n  /**\n   * Records whether a keydown event has occured since the last keyup event, i.e. whether a key\n   * is currently \"pressed\".\n   */\n  private _keyDownSeen: boolean = false;\n\n  /**\n   * Records whether the keypress event has already been handled and triggered a data event, if so\n   * the input event should not trigger a data event but should still print to the textarea so\n   * screen readers will announce it.\n   */\n  private _keyPressHandled: boolean = false;\n\n  /**\n   * Records whether there has been a keydown event for a dead key without a corresponding keydown\n   * event for the composed/alternative character. If we cancel the keydown event for the dead key,\n   * no events will be emitted for the final character.\n   */\n  private _unprocessedDeadKey: boolean = false;\n\n  public linkifier: ILinkifier;\n  public linkifier2: ILinkifier2;\n  public viewport: IViewport | undefined;\n  private _compositionHelper: ICompositionHelper | undefined;\n  private _mouseZoneManager: IMouseZoneManager | undefined;\n  private _accessibilityManager: AccessibilityManager | undefined;\n  private _colorManager: ColorManager | undefined;\n  private _theme: ITheme | undefined;\n\n  private _onCursorMove = new EventEmitter<void>();\n  public get onCursorMove(): IEvent<void> { return this._onCursorMove.event; }\n  private _onKey = new EventEmitter<{ key: string, domEvent: KeyboardEvent }>();\n  public get onKey(): IEvent<{ key: string, domEvent: KeyboardEvent }> { return this._onKey.event; }\n  private _onRender = new EventEmitter<{ start: number, end: number }>();\n  public get onRender(): IEvent<{ start: number, end: number }> { return this._onRender.event; }\n  private _onSelectionChange = new EventEmitter<void>();\n  public get onSelectionChange(): IEvent<void> { return this._onSelectionChange.event; }\n  private _onTitleChange = new EventEmitter<string>();\n  public get onTitleChange(): IEvent<string> { return this._onTitleChange.event; }\n  private _onBell = new EventEmitter<void>();\n  public get onBell(): IEvent<void> { return this._onBell.event; }\n\n  private _onFocus = new EventEmitter<void>();\n  public get onFocus(): IEvent<void> { return this._onFocus.event; }\n  private _onBlur = new EventEmitter<void>();\n  public get onBlur(): IEvent<void> { return this._onBlur.event; }\n  private _onA11yCharEmitter = new EventEmitter<string>();\n  public get onA11yChar(): IEvent<string> { return this._onA11yCharEmitter.event; }\n  private _onA11yTabEmitter = new EventEmitter<number>();\n  public get onA11yTab(): IEvent<number> { return this._onA11yTabEmitter.event; }\n\n  /**\n   * Creates a new `Terminal` object.\n   *\n   * @param options An object containing a set of options, the available options are:\n   *   - `cursorBlink` (boolean): Whether the terminal cursor blinks\n   *   - `cols` (number): The number of columns of the terminal (horizontal size)\n   *   - `rows` (number): The number of rows of the terminal (vertical size)\n   *\n   * @public\n   * @class Xterm Xterm\n   * @alias module:xterm/src/xterm\n   */\n  constructor(\n    options: Partial<ITerminalOptions> = {}\n  ) {\n    super(options);\n\n    this._setup();\n\n    this.linkifier = this._instantiationService.createInstance(Linkifier);\n    this.linkifier2 = this.register(this._instantiationService.createInstance(Linkifier2));\n    this._decorationService = this._instantiationService.createInstance(DecorationService);\n    this._instantiationService.setService(IDecorationService, this._decorationService);\n\n    // Setup InputHandler listeners\n    this.register(this._inputHandler.onRequestBell(() => this.bell()));\n    this.register(this._inputHandler.onRequestRefreshRows((start, end) => this.refresh(start, end)));\n    this.register(this._inputHandler.onRequestSendFocus(() => this._reportFocus()));\n    this.register(this._inputHandler.onRequestReset(() => this.reset()));\n    this.register(this._inputHandler.onRequestWindowsOptionsReport(type => this._reportWindowsOptions(type)));\n    this.register(this._inputHandler.onColor((event) => this._handleColorEvent(event)));\n    this.register(forwardEvent(this._inputHandler.onCursorMove, this._onCursorMove));\n    this.register(forwardEvent(this._inputHandler.onTitleChange, this._onTitleChange));\n    this.register(forwardEvent(this._inputHandler.onA11yChar, this._onA11yCharEmitter));\n    this.register(forwardEvent(this._inputHandler.onA11yTab, this._onA11yTabEmitter));\n\n    // Setup listeners\n    this.register(this._bufferService.onResize(e => this._afterResize(e.cols, e.rows)));\n  }\n\n  /**\n   * Handle color event from inputhandler for OSC 4|104 | 10|110 | 11|111 | 12|112.\n   * An event from OSC 4|104 may contain multiple set or report requests, and multiple\n   * or none restore requests (resetting all),\n   * while an event from OSC 10|110 | 11|111 | 12|112 always contains a single request.\n   */\n  private _handleColorEvent(event: IColorEvent): void {\n    if (!this._colorManager) return;\n    for (const req of event) {\n      let acc: 'foreground' | 'background' | 'cursor' | 'ansi' | undefined = undefined;\n      let ident = '';\n      switch (req.index) {\n        case ColorIndex.FOREGROUND: // OSC 10 | 110\n          acc = 'foreground';\n          ident = '10';\n          break;\n        case ColorIndex.BACKGROUND: // OSC 11 | 111\n          acc = 'background';\n          ident = '11';\n          break;\n        case ColorIndex.CURSOR: // OSC 12 | 112\n          acc = 'cursor';\n          ident = '12';\n          break;\n        default: // OSC 4 | 104\n          // we can skip the [0..255] range check here (already done in inputhandler)\n          acc = 'ansi';\n          ident = '4;' + req.index;\n      }\n      if (acc) {\n        switch (req.type) {\n          case ColorRequestType.REPORT:\n            const channels = color.toColorRGB(acc === 'ansi'\n              ? this._colorManager.colors.ansi[req.index]\n              : this._colorManager.colors[acc]);\n            this.coreService.triggerDataEvent(`${C0.ESC}]${ident};${toRgbString(channels)}${C1_ESCAPED.ST}`);\n            break;\n          case ColorRequestType.SET:\n            if (acc === 'ansi') this._colorManager.colors.ansi[req.index] = rgba.toColor(...req.color);\n            else this._colorManager.colors[acc] = rgba.toColor(...req.color);\n            break;\n          case ColorRequestType.RESTORE:\n            this._colorManager.restoreColor(req.index);\n            break;\n        }\n      }\n    }\n    this._renderService?.setColors(this._colorManager.colors);\n    this.viewport?.onThemeChange(this._colorManager.colors);\n  }\n\n  public dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n    super.dispose();\n    this._renderService?.dispose();\n    this._customKeyEventHandler = undefined;\n    this.write = () => { };\n    this.element?.parentNode?.removeChild(this.element);\n  }\n\n  protected _setup(): void {\n    super._setup();\n\n    this._customKeyEventHandler = undefined;\n  }\n\n  /**\n   * Convenience property to active buffer.\n   */\n  public get buffer(): IBuffer {\n    return this.buffers.active;\n  }\n\n  /**\n   * Focus the terminal. Delegates focus handling to the terminal's DOM element.\n   */\n  public focus(): void {\n    if (this.textarea) {\n      this.textarea.focus({ preventScroll: true });\n    }\n  }\n\n  protected _updateOptions(key: string): void {\n    super._updateOptions(key);\n\n    // TODO: These listeners should be owned by individual components\n    switch (key) {\n      case 'fontFamily':\n      case 'fontSize':\n        // When the font changes the size of the cells may change which requires a renderer clear\n        this._renderService?.clear();\n        this._charSizeService?.measure();\n        break;\n      case 'cursorBlink':\n      case 'cursorStyle':\n        // The DOM renderer needs a row refresh to update the cursor styles\n        this.refresh(this.buffer.y, this.buffer.y);\n        break;\n      case 'customGlyphs':\n      case 'drawBoldTextInBrightColors':\n      case 'letterSpacing':\n      case 'lineHeight':\n      case 'fontWeight':\n      case 'fontWeightBold':\n      case 'minimumContrastRatio':\n        // When the font changes the size of the cells may change which requires a renderer clear\n        if (this._renderService) {\n          this._renderService.clear();\n          this._renderService.onResize(this.cols, this.rows);\n          this.refresh(0, this.rows - 1);\n        }\n        break;\n      case 'rendererType':\n        if (this._renderService) {\n          this._renderService.setRenderer(this._createRenderer());\n          this._renderService.onResize(this.cols, this.rows);\n        }\n        break;\n      case 'scrollback':\n        this.viewport?.syncScrollArea();\n        break;\n      case 'screenReaderMode':\n        if (this.optionsService.rawOptions.screenReaderMode) {\n          if (!this._accessibilityManager && this._renderService) {\n            this._accessibilityManager = new AccessibilityManager(this, this._renderService);\n          }\n        } else {\n          this._accessibilityManager?.dispose();\n          this._accessibilityManager = undefined;\n        }\n        break;\n      case 'tabStopWidth': this.buffers.setupTabStops(); break;\n      case 'theme':\n        this._setTheme(this.optionsService.rawOptions.theme);\n        break;\n    }\n  }\n\n  /**\n   * Binds the desired focus behavior on a given terminal object.\n   */\n  private _onTextAreaFocus(ev: KeyboardEvent): void {\n    if (this.coreService.decPrivateModes.sendFocus) {\n      this.coreService.triggerDataEvent(C0.ESC + '[I');\n    }\n    this.updateCursorStyle(ev);\n    this.element!.classList.add('focus');\n    this._showCursor();\n    this._onFocus.fire();\n  }\n\n  /**\n   * Blur the terminal, calling the blur function on the terminal's underlying\n   * textarea.\n   */\n  public blur(): void {\n    return this.textarea?.blur();\n  }\n\n  /**\n   * Binds the desired blur behavior on a given terminal object.\n   */\n  private _onTextAreaBlur(): void {\n    // Text can safely be removed on blur. Doing it earlier could interfere with\n    // screen readers reading it out.\n    this.textarea!.value = '';\n    this.refresh(this.buffer.y, this.buffer.y);\n    if (this.coreService.decPrivateModes.sendFocus) {\n      this.coreService.triggerDataEvent(C0.ESC + '[O');\n    }\n    this.element!.classList.remove('focus');\n    this._onBlur.fire();\n  }\n\n  private _syncTextArea(): void {\n    if (!this.textarea || !this.buffer.isCursorInViewport || this._compositionHelper!.isComposing || !this._renderService) {\n      return;\n    }\n    const cursorY = this.buffer.ybase + this.buffer.y;\n    const bufferLine = this.buffer.lines.get(cursorY);\n    if (!bufferLine) {\n      return;\n    }\n    const cursorX = Math.min(this.buffer.x, this.cols - 1);\n    const cellHeight = this._renderService.dimensions.actualCellHeight;\n    const width = bufferLine.getWidth(cursorX);\n    const cellWidth = this._renderService.dimensions.actualCellWidth * width;\n    const cursorTop = this.buffer.y * this._renderService.dimensions.actualCellHeight;\n    const cursorLeft = cursorX * this._renderService.dimensions.actualCellWidth;\n\n    // Sync the textarea to the exact position of the composition view so the IME knows where the\n    // text is.\n    this.textarea.style.left = cursorLeft + 'px';\n    this.textarea.style.top = cursorTop + 'px';\n    this.textarea.style.width = cellWidth + 'px';\n    this.textarea.style.height = cellHeight + 'px';\n    this.textarea.style.lineHeight = cellHeight + 'px';\n    this.textarea.style.zIndex = '-5';\n  }\n\n  /**\n   * Initialize default behavior\n   */\n  private _initGlobal(): void {\n    this._bindKeys();\n\n    // Bind clipboard functionality\n    this.register(addDisposableDomListener(this.element!, 'copy', (event: ClipboardEvent) => {\n      // If mouse events are active it means the selection manager is disabled and\n      // copy should be handled by the host program.\n      if (!this.hasSelection()) {\n        return;\n      }\n      copyHandler(event, this._selectionService!);\n    }));\n    const pasteHandlerWrapper = (event: ClipboardEvent): void => handlePasteEvent(event, this.textarea!, this.coreService);\n    this.register(addDisposableDomListener(this.textarea!, 'paste', pasteHandlerWrapper));\n    this.register(addDisposableDomListener(this.element!, 'paste', pasteHandlerWrapper));\n\n    // Handle right click context menus\n    if (Browser.isFirefox) {\n      // Firefox doesn't appear to fire the contextmenu event on right click\n      this.register(addDisposableDomListener(this.element!, 'mousedown', (event: MouseEvent) => {\n        if (event.button === 2) {\n          rightClickHandler(event, this.textarea!, this.screenElement!, this._selectionService!, this.options.rightClickSelectsWord);\n        }\n      }));\n    } else {\n      this.register(addDisposableDomListener(this.element!, 'contextmenu', (event: MouseEvent) => {\n        rightClickHandler(event, this.textarea!, this.screenElement!, this._selectionService!, this.options.rightClickSelectsWord);\n      }));\n    }\n\n    // Move the textarea under the cursor when middle clicking on Linux to ensure\n    // middle click to paste selection works. This only appears to work in Chrome\n    // at the time is writing.\n    if (Browser.isLinux) {\n      // Use auxclick event over mousedown the latter doesn't seem to work. Note\n      // that the regular click event doesn't fire for the middle mouse button.\n      this.register(addDisposableDomListener(this.element!, 'auxclick', (event: MouseEvent) => {\n        if (event.button === 1) {\n          moveTextAreaUnderMouseCursor(event, this.textarea!, this.screenElement!);\n        }\n      }));\n    }\n  }\n\n  /**\n   * Apply key handling to the terminal\n   */\n  private _bindKeys(): void {\n    this.register(addDisposableDomListener(this.textarea!, 'keyup', (ev: KeyboardEvent) => this._keyUp(ev), true));\n    this.register(addDisposableDomListener(this.textarea!, 'keydown', (ev: KeyboardEvent) => this._keyDown(ev), true));\n    this.register(addDisposableDomListener(this.textarea!, 'keypress', (ev: KeyboardEvent) => this._keyPress(ev), true));\n    this.register(addDisposableDomListener(this.textarea!, 'compositionstart', () => this._compositionHelper!.compositionstart()));\n    this.register(addDisposableDomListener(this.textarea!, 'compositionupdate', (e: CompositionEvent) => this._compositionHelper!.compositionupdate(e)));\n    this.register(addDisposableDomListener(this.textarea!, 'compositionend', () => this._compositionHelper!.compositionend()));\n    this.register(addDisposableDomListener(this.textarea!, 'input', (ev: InputEvent) => this._inputEvent(ev), true));\n    this.register(this.onRender(() => this._compositionHelper!.updateCompositionElements()));\n    this.register(this.onRender(e => this._queueLinkification(e.start, e.end)));\n  }\n\n  /**\n   * Opens the terminal within an element.\n   *\n   * @param parent The element to create the terminal within.\n   */\n  public open(parent: HTMLElement): void {\n    if (!parent) {\n      throw new Error('Terminal requires a parent element.');\n    }\n\n    if (!parent.isConnected) {\n      this._logService.debug('Terminal.open was called on an element that was not attached to the DOM');\n    }\n\n    this._document = parent.ownerDocument!;\n\n    // Create main element container\n    this.element = this._document.createElement('div');\n    this.element.dir = 'ltr';   // xterm.css assumes LTR\n    this.element.classList.add('terminal');\n    this.element.classList.add('xterm');\n    this.element.setAttribute('tabindex', '0');\n    parent.appendChild(this.element);\n\n    // Performance: Use a document fragment to build the terminal\n    // viewport and helper elements detached from the DOM\n    const fragment = document.createDocumentFragment();\n    this._viewportElement = document.createElement('div');\n    this._viewportElement.classList.add('xterm-viewport');\n    fragment.appendChild(this._viewportElement);\n\n    this._viewportScrollArea = document.createElement('div');\n    this._viewportScrollArea.classList.add('xterm-scroll-area');\n    this._viewportElement.appendChild(this._viewportScrollArea);\n\n    this.screenElement = document.createElement('div');\n    this.screenElement.classList.add('xterm-screen');\n    // Create the container that will hold helpers like the textarea for\n    // capturing DOM Events. Then produce the helpers.\n    this._helperContainer = document.createElement('div');\n    this._helperContainer.classList.add('xterm-helpers');\n    this.screenElement.appendChild(this._helperContainer);\n    fragment.appendChild(this.screenElement);\n\n    this.textarea = document.createElement('textarea');\n    this.textarea.classList.add('xterm-helper-textarea');\n    this.textarea.setAttribute('aria-label', Strings.promptLabel);\n    this.textarea.setAttribute('aria-multiline', 'false');\n    this.textarea.setAttribute('autocorrect', 'off');\n    this.textarea.setAttribute('autocapitalize', 'off');\n    this.textarea.setAttribute('spellcheck', 'false');\n    this.textarea.tabIndex = 0;\n    this.register(addDisposableDomListener(this.textarea, 'focus', (ev: KeyboardEvent) => this._onTextAreaFocus(ev)));\n    this.register(addDisposableDomListener(this.textarea, 'blur', () => this._onTextAreaBlur()));\n    this._helperContainer.appendChild(this.textarea);\n\n    const coreBrowserService = this._instantiationService.createInstance(CoreBrowserService, this.textarea);\n    this._instantiationService.setService(ICoreBrowserService, coreBrowserService);\n\n    this._charSizeService = this._instantiationService.createInstance(CharSizeService, this._document, this._helperContainer);\n    this._instantiationService.setService(ICharSizeService, this._charSizeService);\n\n    this._theme = this.options.theme || this._theme;\n    this._colorManager = new ColorManager(document, this.options.allowTransparency);\n    this.register(this.optionsService.onOptionChange(e => this._colorManager!.onOptionsChange(e)));\n    this._colorManager.setTheme(this._theme);\n\n    this._characterJoinerService = this._instantiationService.createInstance(CharacterJoinerService);\n    this._instantiationService.setService(ICharacterJoinerService, this._characterJoinerService);\n\n    const renderer = this._createRenderer();\n    this._renderService = this.register(this._instantiationService.createInstance(RenderService, renderer, this.rows, this.screenElement));\n    this._instantiationService.setService(IRenderService, this._renderService);\n    this.register(this._renderService.onRenderedViewportChange(e => this._onRender.fire(e)));\n    this.onResize(e => this._renderService!.resize(e.cols, e.rows));\n\n    this._compositionView = document.createElement('div');\n    this._compositionView.classList.add('composition-view');\n    this._compositionHelper = this._instantiationService.createInstance(CompositionHelper, this.textarea, this._compositionView);\n    this._helperContainer.appendChild(this._compositionView);\n\n    // Performance: Add viewport and helper elements from the fragment\n    this.element.appendChild(fragment);\n\n    this._soundService = this._instantiationService.createInstance(SoundService);\n    this._instantiationService.setService(ISoundService, this._soundService);\n    this._mouseService = this._instantiationService.createInstance(MouseService);\n    this._instantiationService.setService(IMouseService, this._mouseService);\n\n    this.viewport = this._instantiationService.createInstance(Viewport,\n      (amount: number) => this.scrollLines(amount, true, ScrollSource.VIEWPORT),\n      this._viewportElement,\n      this._viewportScrollArea,\n      this.element\n    );\n    this.viewport.onThemeChange(this._colorManager.colors);\n    this.register(this._inputHandler.onRequestSyncScrollBar(() => this.viewport!.syncScrollArea()));\n    this.register(this.viewport);\n\n    this.register(this.onCursorMove(() => {\n      this._renderService!.onCursorMove();\n      this._syncTextArea();\n    }));\n    this.register(this.onResize(() => this._renderService!.onResize(this.cols, this.rows)));\n    this.register(this.onBlur(() => this._renderService!.onBlur()));\n    this.register(this.onFocus(() => this._renderService!.onFocus()));\n    this.register(this._renderService.onDimensionsChange(() => this.viewport!.syncScrollArea()));\n\n    this._selectionService = this.register(this._instantiationService.createInstance(SelectionService,\n      this.element,\n      this.screenElement,\n      this.linkifier2\n    ));\n    this._instantiationService.setService(ISelectionService, this._selectionService);\n    this.register(this._selectionService.onRequestScrollLines(e => this.scrollLines(e.amount, e.suppressScrollEvent)));\n    this.register(this._selectionService.onSelectionChange(() => this._onSelectionChange.fire()));\n    this.register(this._selectionService.onRequestRedraw(e => this._renderService!.onSelectionChanged(e.start, e.end, e.columnSelectMode)));\n    this.register(this._selectionService.onLinuxMouseSelection(text => {\n      // If there's a new selection, put it into the textarea, focus and select it\n      // in order to register it as a selection on the OS. This event is fired\n      // only on Linux to enable middle click to paste selection.\n      this.textarea!.value = text;\n      this.textarea!.focus();\n      this.textarea!.select();\n    }));\n    this.register(this._onScroll.event(ev => {\n      this.viewport!.syncScrollArea();\n      this._selectionService!.refresh();\n    }));\n    this.register(addDisposableDomListener(this._viewportElement, 'scroll', () => this._selectionService!.refresh()));\n\n    this._mouseZoneManager = this._instantiationService.createInstance(MouseZoneManager, this.element, this.screenElement);\n    this.register(this._mouseZoneManager);\n    this.register(this.onScroll(() => this._mouseZoneManager!.clearAll()));\n    this.linkifier.attachToDom(this.element, this._mouseZoneManager);\n    this.linkifier2.attachToDom(this.screenElement, this._mouseService, this._renderService);\n    this.register(this._instantiationService.createInstance(BufferDecorationRenderer, this.screenElement));\n    // This event listener must be registered aftre MouseZoneManager is created\n    this.register(addDisposableDomListener(this.element, 'mousedown', (e: MouseEvent) => this._selectionService!.onMouseDown(e)));\n\n    // apply mouse event classes set by escape codes before terminal was attached\n    if (this.coreMouseService.areMouseEventsActive) {\n      this._selectionService.disable();\n      this.element.classList.add('enable-mouse-events');\n    } else {\n      this._selectionService.enable();\n    }\n\n    if (this.options.screenReaderMode) {\n      // Note that this must be done *after* the renderer is created in order to\n      // ensure the correct order of the dprchange event\n      this._accessibilityManager = new AccessibilityManager(this, this._renderService);\n    }\n\n    if (this.options.overviewRulerWidth) {\n      this._overviewRulerRenderer = this._instantiationService.createInstance(OverviewRulerRenderer, this._viewportElement, this.screenElement);\n    }\n    this.optionsService.onOptionChange(() => {\n      if (!this._overviewRulerRenderer && this.options.overviewRulerWidth && this._viewportElement && this.screenElement) {\n        this._overviewRulerRenderer = this._instantiationService.createInstance(OverviewRulerRenderer, this._viewportElement, this.screenElement);\n      }\n    });\n    // Measure the character size\n    this._charSizeService.measure();\n\n    // Setup loop that draws to screen\n    this.refresh(0, this.rows - 1);\n\n    // Initialize global actions that need to be taken on the document.\n    this._initGlobal();\n\n    // Listen for mouse events and translate\n    // them into terminal mouse protocols.\n    this.bindMouse();\n  }\n\n  private _createRenderer(): IRenderer {\n    switch (this.options.rendererType) {\n      case 'canvas': return this._instantiationService.createInstance(Renderer, this._colorManager!.colors, this.screenElement!, this.linkifier, this.linkifier2);\n      case 'dom': return this._instantiationService.createInstance(DomRenderer, this._colorManager!.colors, this.element!, this.screenElement!, this._viewportElement!, this.linkifier, this.linkifier2);\n      default: throw new Error(`Unrecognized rendererType \"${this.options.rendererType}\"`);\n    }\n  }\n\n  /**\n   * Sets the theme on the renderer. The renderer must have been initialized.\n   * @param theme The theme to set.\n   */\n  private _setTheme(theme: ITheme): void {\n    this._theme = theme;\n    this._colorManager?.setTheme(theme);\n    this._renderService?.setColors(this._colorManager!.colors);\n    this.viewport?.onThemeChange(this._colorManager!.colors);\n  }\n\n  /**\n   * Bind certain mouse events to the terminal.\n   * By default only 3 button + wheel up/down is ativated. For higher buttons\n   * no mouse report will be created. Typically the standard actions will be active.\n   *\n   * There are several reasons not to enable support for higher buttons/wheel:\n   * - Button 4 and 5 are typically used for history back and forward navigation,\n   *   there is no straight forward way to supress/intercept those standard actions.\n   * - Support for higher buttons does not work in some platform/browser combinations.\n   * - Left/right wheel was not tested.\n   * - Emulators vary in mouse button support, typically only 3 buttons and\n   *   wheel up/down work reliable.\n   *\n   * TODO: Move mouse event code into its own file.\n   */\n  public bindMouse(): void {\n    const self = this;\n    const el = this.element!;\n\n    // send event to CoreMouseService\n    function sendEvent(ev: MouseEvent | WheelEvent): boolean {\n      // get mouse coordinates\n      const pos = self._mouseService!.getRawByteCoords(ev, self.screenElement!, self.cols, self.rows);\n      if (!pos) {\n        return false;\n      }\n\n      let but: CoreMouseButton;\n      let action: CoreMouseAction | undefined;\n      switch ((ev as any).overrideType || ev.type) {\n        case 'mousemove':\n          action = CoreMouseAction.MOVE;\n          if (ev.buttons === undefined) {\n            // buttons is not supported on macOS, try to get a value from button instead\n            but = CoreMouseButton.NONE;\n            if (ev.button !== undefined) {\n              but = ev.button < 3 ? ev.button : CoreMouseButton.NONE;\n            }\n          } else {\n            // according to MDN buttons only reports up to button 5 (AUX2)\n            but = ev.buttons & 1 ? CoreMouseButton.LEFT :\n              ev.buttons & 4 ? CoreMouseButton.MIDDLE :\n                ev.buttons & 2 ? CoreMouseButton.RIGHT :\n                  CoreMouseButton.NONE; // fallback to NONE\n          }\n          break;\n        case 'mouseup':\n          action = CoreMouseAction.UP;\n          but = ev.button < 3 ? ev.button : CoreMouseButton.NONE;\n          break;\n        case 'mousedown':\n          action = CoreMouseAction.DOWN;\n          but = ev.button < 3 ? ev.button : CoreMouseButton.NONE;\n          break;\n        case 'wheel':\n          const amount = self.viewport!.getLinesScrolled(ev as WheelEvent);\n\n          if (amount === 0) {\n            return false;\n          }\n\n          action = (ev as WheelEvent).deltaY < 0 ? CoreMouseAction.UP : CoreMouseAction.DOWN;\n          but = CoreMouseButton.WHEEL;\n          break;\n        default:\n          // dont handle other event types by accident\n          return false;\n      }\n\n      // exit if we cannot determine valid button/action values\n      // do nothing for higher buttons than wheel\n      if (action === undefined || but === undefined || but > CoreMouseButton.WHEEL) {\n        return false;\n      }\n\n      return self.coreMouseService.triggerMouseEvent({\n        col: pos.x - 33, // FIXME: why -33 here?\n        row: pos.y - 33,\n        button: but,\n        action,\n        ctrl: ev.ctrlKey,\n        alt: ev.altKey,\n        shift: ev.shiftKey\n      });\n    }\n\n    /**\n     * Event listener state handling.\n     * We listen to the onProtocolChange event of CoreMouseService and put\n     * requested listeners in `requestedEvents`. With this the listeners\n     * have all bits to do the event listener juggling.\n     * Note: 'mousedown' currently is \"always on\" and not managed\n     * by onProtocolChange.\n     */\n    const requestedEvents: { [key: string]: ((ev: Event) => void) | null } = {\n      mouseup: null,\n      wheel: null,\n      mousedrag: null,\n      mousemove: null\n    };\n    const eventListeners: { [key: string]: (ev: any) => void | boolean } = {\n      mouseup: (ev: MouseEvent) => {\n        sendEvent(ev);\n        if (!ev.buttons) {\n          // if no other button is held remove global handlers\n          this._document!.removeEventListener('mouseup', requestedEvents.mouseup!);\n          if (requestedEvents.mousedrag) {\n            this._document!.removeEventListener('mousemove', requestedEvents.mousedrag);\n          }\n        }\n        return this.cancel(ev);\n      },\n      wheel: (ev: WheelEvent) => {\n        sendEvent(ev);\n        return this.cancel(ev, true);\n      },\n      mousedrag: (ev: MouseEvent) => {\n        // deal only with move while a button is held\n        if (ev.buttons) {\n          sendEvent(ev);\n        }\n      },\n      mousemove: (ev: MouseEvent) => {\n        // deal only with move without any button\n        if (!ev.buttons) {\n          sendEvent(ev);\n        }\n      }\n    };\n    this.register(this.coreMouseService.onProtocolChange(events => {\n      // apply global changes on events\n      if (events) {\n        if (this.optionsService.rawOptions.logLevel === 'debug') {\n          this._logService.debug('Binding to mouse events:', this.coreMouseService.explainEvents(events));\n        }\n        this.element!.classList.add('enable-mouse-events');\n        this._selectionService!.disable();\n      } else {\n        this._logService.debug('Unbinding from mouse events.');\n        this.element!.classList.remove('enable-mouse-events');\n        this._selectionService!.enable();\n      }\n\n      // add/remove handlers from requestedEvents\n\n      if (!(events & CoreMouseEventType.MOVE)) {\n        el.removeEventListener('mousemove', requestedEvents.mousemove!);\n        requestedEvents.mousemove = null;\n      } else if (!requestedEvents.mousemove) {\n        el.addEventListener('mousemove', eventListeners.mousemove);\n        requestedEvents.mousemove = eventListeners.mousemove;\n      }\n\n      if (!(events & CoreMouseEventType.WHEEL)) {\n        el.removeEventListener('wheel', requestedEvents.wheel!);\n        requestedEvents.wheel = null;\n      } else if (!requestedEvents.wheel) {\n        el.addEventListener('wheel', eventListeners.wheel, { passive: false });\n        requestedEvents.wheel = eventListeners.wheel;\n      }\n\n      if (!(events & CoreMouseEventType.UP)) {\n        this._document!.removeEventListener('mouseup', requestedEvents.mouseup!);\n        requestedEvents.mouseup = null;\n      } else if (!requestedEvents.mouseup) {\n        requestedEvents.mouseup = eventListeners.mouseup;\n      }\n\n      if (!(events & CoreMouseEventType.DRAG)) {\n        this._document!.removeEventListener('mousemove', requestedEvents.mousedrag!);\n        requestedEvents.mousedrag = null;\n      } else if (!requestedEvents.mousedrag) {\n        requestedEvents.mousedrag = eventListeners.mousedrag;\n      }\n    }));\n    // force initial onProtocolChange so we dont miss early mouse requests\n    this.coreMouseService.activeProtocol = this.coreMouseService.activeProtocol;\n\n    /**\n     * \"Always on\" event listeners.\n     */\n    this.register(addDisposableDomListener(el, 'mousedown', (ev: MouseEvent) => {\n      ev.preventDefault();\n      this.focus();\n\n      // Don't send the mouse button to the pty if mouse events are disabled or\n      // if the selection manager is having selection forced (ie. a modifier is\n      // held).\n      if (!this.coreMouseService.areMouseEventsActive || this._selectionService!.shouldForceSelection(ev)) {\n        return;\n      }\n\n      sendEvent(ev);\n\n      // Register additional global handlers which should keep reporting outside\n      // of the terminal element.\n      // Note: Other emulators also do this for 'mousedown' while a button\n      // is held, we currently limit 'mousedown' to the terminal only.\n      if (requestedEvents.mouseup) {\n        this._document!.addEventListener('mouseup', requestedEvents.mouseup);\n      }\n      if (requestedEvents.mousedrag) {\n        this._document!.addEventListener('mousemove', requestedEvents.mousedrag);\n      }\n\n      return this.cancel(ev);\n    }));\n\n    this.register(addDisposableDomListener(el, 'wheel', (ev: WheelEvent) => {\n      // do nothing, if app side handles wheel itself\n      if (requestedEvents.wheel) return;\n\n      if (!this.buffer.hasScrollback) {\n        // Convert wheel events into up/down events when the buffer does not have scrollback, this\n        // enables scrolling in apps hosted in the alt buffer such as vim or tmux.\n        const amount = this.viewport!.getLinesScrolled(ev);\n\n        // Do nothing if there's no vertical scroll\n        if (amount === 0) {\n          return;\n        }\n\n        // Construct and send sequences\n        const sequence = C0.ESC + (this.coreService.decPrivateModes.applicationCursorKeys ? 'O' : '[') + (ev.deltaY < 0 ? 'A' : 'B');\n        let data = '';\n        for (let i = 0; i < Math.abs(amount); i++) {\n          data += sequence;\n        }\n        this.coreService.triggerDataEvent(data, true);\n        return this.cancel(ev, true);\n      }\n\n      // normal viewport scrolling\n      // conditionally stop event, if the viewport still had rows to scroll within\n      if (this.viewport!.onWheel(ev)) {\n        return this.cancel(ev);\n      }\n    }, { passive: false }));\n\n    this.register(addDisposableDomListener(el, 'touchstart', (ev: TouchEvent) => {\n      if (this.coreMouseService.areMouseEventsActive) return;\n      this.viewport!.onTouchStart(ev);\n      return this.cancel(ev);\n    }, { passive: true }));\n\n    this.register(addDisposableDomListener(el, 'touchmove', (ev: TouchEvent) => {\n      if (this.coreMouseService.areMouseEventsActive) return;\n      if (!this.viewport!.onTouchMove(ev)) {\n        return this.cancel(ev);\n      }\n    }, { passive: false }));\n  }\n\n\n  /**\n   * Tells the renderer to refresh terminal content between two rows (inclusive) at the next\n   * opportunity.\n   * @param start The row to start from (between 0 and this.rows - 1).\n   * @param end The row to end at (between start and this.rows - 1).\n   */\n  public refresh(start: number, end: number): void {\n    this._renderService?.refreshRows(start, end);\n  }\n\n  /**\n   * Queues linkification for the specified rows.\n   * @param start The row to start from (between 0 and this.rows - 1).\n   * @param end The row to end at (between start and this.rows - 1).\n   */\n  private _queueLinkification(start: number, end: number): void {\n    this.linkifier?.linkifyRows(start, end);\n  }\n\n  /**\n   * Change the cursor style for different selection modes\n   */\n  public updateCursorStyle(ev: KeyboardEvent): void {\n    if (this._selectionService?.shouldColumnSelect(ev)) {\n      this.element!.classList.add('column-select');\n    } else {\n      this.element!.classList.remove('column-select');\n    }\n  }\n\n  /**\n   * Display the cursor element\n   */\n  private _showCursor(): void {\n    if (!this.coreService.isCursorInitialized) {\n      this.coreService.isCursorInitialized = true;\n      this.refresh(this.buffer.y, this.buffer.y);\n    }\n  }\n\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source = ScrollSource.TERMINAL): void {\n    super.scrollLines(disp, suppressScrollEvent, source);\n    this.refresh(0, this.rows - 1);\n  }\n\n  public paste(data: string): void {\n    paste(data, this.textarea!, this.coreService);\n  }\n\n  /**\n   * Attaches a custom key event handler which is run before keys are processed,\n   * giving consumers of xterm.js ultimate control as to what keys should be\n   * processed by the terminal and what keys should not.\n   * @param customKeyEventHandler The custom KeyboardEvent handler to attach.\n   * This is a function that takes a KeyboardEvent, allowing consumers to stop\n   * propagation and/or prevent the default action. The function returns whether\n   * the event should be processed by xterm.js.\n   */\n  public attachCustomKeyEventHandler(customKeyEventHandler: CustomKeyEventHandler): void {\n    this._customKeyEventHandler = customKeyEventHandler;\n  }\n\n  /**\n   * Registers a link matcher, allowing custom link patterns to be matched and\n   * handled.\n   * @param regex The regular expression to search for, specifically\n   * this searches the textContent of the rows. You will want to use \\s to match\n   * a space ' ' character for example.\n   * @param handler The callback when the link is called.\n   * @param options Options for the link matcher.\n   * @return The ID of the new matcher, this can be used to deregister.\n   */\n  public registerLinkMatcher(regex: RegExp, handler: LinkMatcherHandler, options?: ILinkMatcherOptions): number {\n    const matcherId = this.linkifier.registerLinkMatcher(regex, handler, options);\n    this.refresh(0, this.rows - 1);\n    return matcherId;\n  }\n\n  /**\n   * Deregisters a link matcher if it has been registered.\n   * @param matcherId The link matcher's ID (returned after register)\n   */\n  public deregisterLinkMatcher(matcherId: number): void {\n    if (this.linkifier.deregisterLinkMatcher(matcherId)) {\n      this.refresh(0, this.rows - 1);\n    }\n  }\n\n  public registerLinkProvider(linkProvider: ILinkProvider): IDisposable {\n    return this.linkifier2.registerLinkProvider(linkProvider);\n  }\n\n  public registerCharacterJoiner(handler: CharacterJoinerHandler): number {\n    if (!this._characterJoinerService) {\n      throw new Error('Terminal must be opened first');\n    }\n    const joinerId = this._characterJoinerService.register(handler);\n    this.refresh(0, this.rows - 1);\n    return joinerId;\n  }\n\n  public deregisterCharacterJoiner(joinerId: number): void {\n    if (!this._characterJoinerService) {\n      throw new Error('Terminal must be opened first');\n    }\n    if (this._characterJoinerService.deregister(joinerId)) {\n      this.refresh(0, this.rows - 1);\n    }\n  }\n\n  public get markers(): IMarker[] {\n    return this.buffer.markers;\n  }\n\n  public addMarker(cursorYOffset: number): IMarker | undefined {\n    // Disallow markers on the alt buffer\n    if (this.buffer !== this.buffers.normal) {\n      return;\n    }\n\n    return this.buffer.addMarker(this.buffer.ybase + this.buffer.y + cursorYOffset);\n  }\n\n  public registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined {\n    return this._decorationService.registerDecoration(decorationOptions);\n  }\n\n  /**\n   * Gets whether the terminal has an active selection.\n   */\n  public hasSelection(): boolean {\n    return this._selectionService ? this._selectionService.hasSelection : false;\n  }\n\n  /**\n   * Selects text within the terminal.\n   * @param column The column the selection starts at..\n   * @param row The row the selection starts at.\n   * @param length The length of the selection.\n   */\n  public select(column: number, row: number, length: number): void {\n    this._selectionService!.setSelection(column, row, length);\n  }\n\n  /**\n   * Gets the terminal's current selection, this is useful for implementing copy\n   * behavior outside of xterm.js.\n   */\n  public getSelection(): string {\n    return this._selectionService ? this._selectionService.selectionText : '';\n  }\n\n  public getSelectionPosition(): ISelectionPosition | undefined {\n    if (!this._selectionService || !this._selectionService.hasSelection) {\n      return undefined;\n    }\n\n    return {\n      startColumn: this._selectionService.selectionStart![0],\n      startRow: this._selectionService.selectionStart![1],\n      endColumn: this._selectionService.selectionEnd![0],\n      endRow: this._selectionService.selectionEnd![1]\n    };\n  }\n\n  /**\n   * Clears the current terminal selection.\n   */\n  public clearSelection(): void {\n    this._selectionService?.clearSelection();\n  }\n\n  /**\n   * Selects all text within the terminal.\n   */\n  public selectAll(): void {\n    this._selectionService?.selectAll();\n  }\n\n  public selectLines(start: number, end: number): void {\n    this._selectionService?.selectLines(start, end);\n  }\n\n  /**\n   * Handle a keydown event\n   * Key Resources:\n   *   - https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\n   * @param ev The keydown event to be handled.\n   */\n  protected _keyDown(event: KeyboardEvent): boolean | undefined {\n    this._keyDownHandled = false;\n    this._keyDownSeen = true;\n\n    if (this._customKeyEventHandler && this._customKeyEventHandler(event) === false) {\n      return false;\n    }\n\n    // Ignore composing with Alt key on Mac when macOptionIsMeta is enabled\n    const shouldIgnoreComposition = this.browser.isMac && this.options.macOptionIsMeta && event.altKey;\n\n    if (!shouldIgnoreComposition && !this._compositionHelper!.keydown(event)) {\n      if (this.buffer.ybase !== this.buffer.ydisp) {\n        this._bufferService.scrollToBottom();\n      }\n      return false;\n    }\n\n    if (!shouldIgnoreComposition && (event.key === 'Dead' || event.key === 'AltGraph')) {\n      this._unprocessedDeadKey = true;\n    }\n\n    const result = evaluateKeyboardEvent(event, this.coreService.decPrivateModes.applicationCursorKeys, this.browser.isMac, this.options.macOptionIsMeta);\n\n    this.updateCursorStyle(event);\n\n    if (result.type === KeyboardResultType.PAGE_DOWN || result.type === KeyboardResultType.PAGE_UP) {\n      const scrollCount = this.rows - 1;\n      this.scrollLines(result.type === KeyboardResultType.PAGE_UP ? -scrollCount : scrollCount);\n      return this.cancel(event, true);\n    }\n\n    if (result.type === KeyboardResultType.SELECT_ALL) {\n      this.selectAll();\n    }\n\n    if (this._isThirdLevelShift(this.browser, event)) {\n      return true;\n    }\n\n    if (result.cancel) {\n      // The event is canceled at the end already, is this necessary?\n      this.cancel(event, true);\n    }\n\n    if (!result.key) {\n      return true;\n    }\n\n    // HACK: Process A-Z in the keypress event to fix an issue with macOS IMEs where lower case\n    // letters cannot be input while caps lock is on.\n    if (event.key && !event.ctrlKey && !event.altKey && !event.metaKey && event.key.length === 1) {\n      if (event.key.charCodeAt(0) >= 65 && event.key.charCodeAt(0) <= 90) {\n        return true;\n      }\n    }\n\n    if (this._unprocessedDeadKey) {\n      this._unprocessedDeadKey = false;\n      return true;\n    }\n\n    // If ctrl+c or enter is being sent, clear out the textarea. This is done so that screen readers\n    // will announce deleted characters. This will not work 100% of the time but it should cover\n    // most scenarios.\n    if (result.key === C0.ETX || result.key === C0.CR) {\n      this.textarea!.value = '';\n    }\n\n    this._onKey.fire({ key: result.key, domEvent: event });\n    this._showCursor();\n    this.coreService.triggerDataEvent(result.key, true);\n\n    // Cancel events when not in screen reader mode so events don't get bubbled up and handled by\n    // other listeners. When screen reader mode is enabled, this could cause issues if the event\n    // is handled at a higher level, this is a compromise in order to echo keys to the screen\n    // reader.\n    if (!this.optionsService.rawOptions.screenReaderMode) {\n      return this.cancel(event, true);\n    }\n\n    this._keyDownHandled = true;\n  }\n\n  private _isThirdLevelShift(browser: IBrowser, ev: KeyboardEvent): boolean {\n    const thirdLevelKey =\n      (browser.isMac && !this.options.macOptionIsMeta && ev.altKey && !ev.ctrlKey && !ev.metaKey) ||\n      (browser.isWindows && ev.altKey && ev.ctrlKey && !ev.metaKey) ||\n      (browser.isWindows && ev.getModifierState('AltGraph'));\n\n    if (ev.type === 'keypress') {\n      return thirdLevelKey;\n    }\n\n    // Don't invoke for arrows, pageDown, home, backspace, etc. (on non-keypress events)\n    return thirdLevelKey && (!ev.keyCode || ev.keyCode > 47);\n  }\n\n  protected _keyUp(ev: KeyboardEvent): void {\n    this._keyDownSeen = false;\n\n    if (this._customKeyEventHandler && this._customKeyEventHandler(ev) === false) {\n      return;\n    }\n\n    if (!wasModifierKeyOnlyEvent(ev)) {\n      this.focus();\n    }\n\n    this.updateCursorStyle(ev);\n    this._keyPressHandled = false;\n  }\n\n  /**\n   * Handle a keypress event.\n   * Key Resources:\n   *   - https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\n   * @param ev The keypress event to be handled.\n   */\n  protected _keyPress(ev: KeyboardEvent): boolean {\n    let key;\n\n    this._keyPressHandled = false;\n\n    if (this._keyDownHandled) {\n      return false;\n    }\n\n    if (this._customKeyEventHandler && this._customKeyEventHandler(ev) === false) {\n      return false;\n    }\n\n    this.cancel(ev);\n\n    if (ev.charCode) {\n      key = ev.charCode;\n    } else if (ev.which === null || ev.which === undefined) {\n      key = ev.keyCode;\n    } else if (ev.which !== 0 && ev.charCode !== 0) {\n      key = ev.which;\n    } else {\n      return false;\n    }\n\n    if (!key || (\n      (ev.altKey || ev.ctrlKey || ev.metaKey) && !this._isThirdLevelShift(this.browser, ev)\n    )) {\n      return false;\n    }\n\n    key = String.fromCharCode(key);\n\n    this._onKey.fire({ key, domEvent: ev });\n    this._showCursor();\n    this.coreService.triggerDataEvent(key, true);\n\n    this._keyPressHandled = true;\n\n    // The key was handled so clear the dead key state, otherwise certain keystrokes like arrow\n    // keys could be ignored\n    this._unprocessedDeadKey = false;\n\n    return true;\n  }\n\n  /**\n   * Handle an input event.\n   * Key Resources:\n   *   - https://developer.mozilla.org/en-US/docs/Web/API/InputEvent\n   * @param ev The input event to be handled.\n   */\n  protected _inputEvent(ev: InputEvent): boolean {\n    // Only support emoji IMEs when screen reader mode is disabled as the event must bubble up to\n    // support reading out character input which can doubling up input characters\n    // Based on these event traces: https://github.com/xtermjs/xterm.js/issues/3679\n    if (ev.data && ev.inputType === 'insertText' && (!ev.composed || !this._keyDownSeen) && !this.optionsService.rawOptions.screenReaderMode) {\n      if (this._keyPressHandled) {\n        return false;\n      }\n\n      // The key was handled so clear the dead key state, otherwise certain keystrokes like arrow\n      // keys could be ignored\n      this._unprocessedDeadKey = false;\n\n      const text = ev.data;\n      this.coreService.triggerDataEvent(text, true);\n\n      this.cancel(ev);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Ring the bell.\n   * Note: We could do sweet things with webaudio here\n   */\n  public bell(): void {\n    if (this._soundBell()) {\n      this._soundService?.playBellSound();\n    }\n\n    this._onBell.fire();\n\n    // if (this._visualBell()) {\n    //   this.element.classList.add('visual-bell-active');\n    //   clearTimeout(this._visualBellTimer);\n    //   this._visualBellTimer = window.setTimeout(() => {\n    //     this.element.classList.remove('visual-bell-active');\n    //   }, 200);\n    // }\n  }\n\n  /**\n   * Resizes the terminal.\n   *\n   * @param x The number of columns to resize to.\n   * @param y The number of rows to resize to.\n   */\n  public resize(x: number, y: number): void {\n    if (x === this.cols && y === this.rows) {\n      // Check if we still need to measure the char size (fixes #785).\n      if (this._charSizeService && !this._charSizeService.hasValidSize) {\n        this._charSizeService.measure();\n      }\n      return;\n    }\n\n    super.resize(x, y);\n  }\n\n  private _afterResize(x: number, y: number): void {\n    this._charSizeService?.measure();\n\n    // Sync the scroll area to make sure scroll events don't fire and scroll the viewport to an\n    // invalid location\n    this.viewport?.syncScrollArea(true);\n  }\n\n  /**\n   * Clear the entire buffer, making the prompt line the new first line.\n   */\n  public clear(): void {\n    if (this.buffer.ybase === 0 && this.buffer.y === 0) {\n      // Don't clear if it's already clear\n      return;\n    }\n    this.buffer.clearAllMarkers();\n    this.buffer.lines.set(0, this.buffer.lines.get(this.buffer.ybase + this.buffer.y)!);\n    this.buffer.lines.length = 1;\n    this.buffer.ydisp = 0;\n    this.buffer.ybase = 0;\n    this.buffer.y = 0;\n    for (let i = 1; i < this.rows; i++) {\n      this.buffer.lines.push(this.buffer.getBlankLine(DEFAULT_ATTR_DATA));\n    }\n    this.refresh(0, this.rows - 1);\n    this._onScroll.fire({ position: this.buffer.ydisp, source: ScrollSource.TERMINAL });\n  }\n\n  /**\n   * Reset terminal.\n   * Note: Calling this directly from JS is synchronous but does not clear\n   * input buffers and does not reset the parser, thus the terminal will\n   * continue to apply pending input data.\n   * If you need in band reset (synchronous with input data) consider\n   * using DECSTR (soft reset, CSI ! p) or RIS instead (hard reset, ESC c).\n   */\n  public reset(): void {\n    /**\n     * Since _setup handles a full terminal creation, we have to carry forward\n     * a few things that should not reset.\n     */\n    this.options.rows = this.rows;\n    this.options.cols = this.cols;\n    const customKeyEventHandler = this._customKeyEventHandler;\n\n    this._setup();\n    super.reset();\n    this._selectionService?.reset();\n    this._decorationService.reset();\n\n    // reattach\n    this._customKeyEventHandler = customKeyEventHandler;\n\n    // do a full screen refresh\n    this.refresh(0, this.rows - 1);\n    this.viewport?.syncScrollArea();\n  }\n\n  public clearTextureAtlas(): void {\n    this._renderService?.clearTextureAtlas();\n  }\n\n  private _reportFocus(): void {\n    if (this.element?.classList.contains('focus')) {\n      this.coreService.triggerDataEvent(C0.ESC + '[I');\n    } else {\n      this.coreService.triggerDataEvent(C0.ESC + '[O');\n    }\n  }\n\n  private _reportWindowsOptions(type: WindowsOptionsReportType): void {\n    if (!this._renderService) {\n      return;\n    }\n\n    switch (type) {\n      case WindowsOptionsReportType.GET_WIN_SIZE_PIXELS:\n        const canvasWidth = this._renderService.dimensions.scaledCanvasWidth.toFixed(0);\n        const canvasHeight = this._renderService.dimensions.scaledCanvasHeight.toFixed(0);\n        this.coreService.triggerDataEvent(`${C0.ESC}[4;${canvasHeight};${canvasWidth}t`);\n        break;\n      case WindowsOptionsReportType.GET_CELL_SIZE_PIXELS:\n        const cellWidth = this._renderService.dimensions.scaledCellWidth.toFixed(0);\n        const cellHeight = this._renderService.dimensions.scaledCellHeight.toFixed(0);\n        this.coreService.triggerDataEvent(`${C0.ESC}[6;${cellHeight};${cellWidth}t`);\n        break;\n    }\n  }\n\n  // TODO: Remove cancel function and cancelEvents option\n  public cancel(ev: Event, force?: boolean): boolean | undefined {\n    if (!this.options.cancelEvents && !force) {\n      return;\n    }\n    ev.preventDefault();\n    ev.stopPropagation();\n    return false;\n  }\n\n  private _visualBell(): boolean {\n    return false;\n    // return this.options.bellStyle === 'visual' ||\n    //     this.options.bellStyle === 'both';\n  }\n\n  private _soundBell(): boolean {\n    return this.options.bellStyle === 'sound';\n    // return this.options.bellStyle === 'sound' ||\n    //     this.options.bellStyle === 'both';\n  }\n}\n\n/**\n * Helpers\n */\n\nfunction wasModifierKeyOnlyEvent(ev: KeyboardEvent): boolean {\n  return ev.keyCode === 16 || // Shift\n    ev.keyCode === 17 || // Ctrl\n    ev.keyCode === 18; // Alt\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nconst RENDER_DEBOUNCE_THRESHOLD_MS = 1000; // 1 Second\n\nimport { IRenderDebouncer } from 'browser/Types';\n\n/**\n * Debounces calls to update screen readers to update at most once configurable interval of time.\n */\nexport class TimeBasedDebouncer implements IRenderDebouncer {\n  private _rowStart: number | undefined;\n  private _rowEnd: number | undefined;\n  private _rowCount: number | undefined;\n\n  // The last moment that the Terminal was refreshed at\n  private _lastRefreshMs = 0;\n  // Whether a trailing refresh should be triggered due to a refresh request that was throttled\n  private _additionalRefreshRequested = false;\n\n  private _refreshTimeoutID: number | undefined;\n\n  constructor(\n    private _renderCallback: (start: number, end: number) => void,\n    private readonly _debounceThresholdMS = RENDER_DEBOUNCE_THRESHOLD_MS\n  ) {\n  }\n\n  public dispose(): void {\n    if (this._refreshTimeoutID) {\n      clearTimeout(this._refreshTimeoutID);\n    }\n  }\n\n  public refresh(rowStart: number | undefined, rowEnd: number | undefined, rowCount: number): void {\n    this._rowCount = rowCount;\n    // Get the min/max row start/end for the arg values\n    rowStart = rowStart !== undefined ? rowStart : 0;\n    rowEnd = rowEnd !== undefined ? rowEnd : this._rowCount - 1;\n    // Set the properties to the updated values\n    this._rowStart = this._rowStart !== undefined ? Math.min(this._rowStart, rowStart) : rowStart;\n    this._rowEnd = this._rowEnd !== undefined ? Math.max(this._rowEnd, rowEnd) : rowEnd;\n\n    // Only refresh if the time since last refresh is above a threshold, otherwise wait for\n    // enough time to pass before refreshing again.\n    const refreshRequestTime: number = Date.now();\n    if (refreshRequestTime - this._lastRefreshMs >= this._debounceThresholdMS) {\n      // Enough time has lapsed since the last refresh; refresh immediately\n      this._lastRefreshMs = refreshRequestTime;\n      this._innerRefresh();\n    } else if (!this._additionalRefreshRequested) {\n      // This is the first additional request throttled; set up trailing refresh\n      const elapsed = refreshRequestTime - this._lastRefreshMs;\n      const waitPeriodBeforeTrailingRefresh = this._debounceThresholdMS - elapsed;\n      this._additionalRefreshRequested = true;\n\n      this._refreshTimeoutID = window.setTimeout(() => {\n        this._lastRefreshMs = Date.now();\n        this._innerRefresh();\n        this._additionalRefreshRequested = false;\n        this._refreshTimeoutID = undefined; // No longer need to clear the timeout\n      }, waitPeriodBeforeTrailingRefresh);\n    }\n  }\n\n  private _innerRefresh(): void {\n    // Make sure values are set\n    if (this._rowStart === undefined || this._rowEnd === undefined || this._rowCount === undefined) {\n      return;\n    }\n\n    // Clamp values\n    const start = Math.max(this._rowStart, 0);\n    const end = Math.min(this._rowEnd, this._rowCount - 1);\n\n    // Reset debouncer (this happens before render callback as the render could trigger it again)\n    this._rowStart = undefined;\n    this._rowEnd = undefined;\n\n    // Run render callback\n    this._renderCallback(start, end);\n  }\n}\n\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Disposable } from 'common/Lifecycle';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IColorSet, IViewport } from 'browser/Types';\nimport { ICharSizeService, IRenderService } from 'browser/services/Services';\nimport { IBufferService, IOptionsService } from 'common/services/Services';\nimport { IBuffer } from 'common/buffer/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\n\nconst FALLBACK_SCROLL_BAR_WIDTH = 15;\n\n/**\n * Represents the viewport of a terminal, the visible area within the larger buffer of output.\n * Logic for the virtual scroll bar is included in this object.\n */\nexport class Viewport extends Disposable implements IViewport {\n  public scrollBarWidth: number = 0;\n  private _currentRowHeight: number = 0;\n  private _currentScaledCellHeight: number = 0;\n  private _lastRecordedBufferLength: number = 0;\n  private _lastRecordedViewportHeight: number = 0;\n  private _lastRecordedBufferHeight: number = 0;\n  private _lastTouchY: number = 0;\n  private _lastScrollTop: number = 0;\n  private _activeBuffer: IBuffer;\n  private _renderDimensions: IRenderDimensions;\n\n  // Stores a partial line amount when scrolling, this is used to keep track of how much of a line\n  // is scrolled so we can \"scroll\" over partial lines and feel natural on touchpads. This is a\n  // quick fix and could have a more robust solution in place that reset the value when needed.\n  private _wheelPartialScroll: number = 0;\n\n  private _refreshAnimationFrame: number | null = null;\n  private _ignoreNextScrollEvent: boolean = false;\n\n  constructor(\n    private readonly _scrollLines: (amount: number) => void,\n    private readonly _viewportElement: HTMLElement,\n    private readonly _scrollArea: HTMLElement,\n    private readonly _element: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService,\n    @IRenderService private readonly _renderService: IRenderService\n  ) {\n    super();\n\n    // Measure the width of the scrollbar. If it is 0 we can assume it's an OSX overlay scrollbar.\n    // Unfortunately the overlay scrollbar would be hidden underneath the screen element in that case,\n    // therefore we account for a standard amount to make it visible\n    this.scrollBarWidth = (this._viewportElement.offsetWidth - this._scrollArea.offsetWidth) || FALLBACK_SCROLL_BAR_WIDTH;\n    this.register(addDisposableDomListener(this._viewportElement, 'scroll', this._onScroll.bind(this)));\n\n    // Track properties used in performance critical code manually to avoid using slow getters\n    this._activeBuffer = this._bufferService.buffer;\n    this.register(this._bufferService.buffers.onBufferActivate(e => this._activeBuffer = e.activeBuffer));\n    this._renderDimensions = this._renderService.dimensions;\n    this.register(this._renderService.onDimensionsChange(e => this._renderDimensions = e));\n\n    // Perform this async to ensure the ICharSizeService is ready.\n    setTimeout(() => this.syncScrollArea(), 0);\n  }\n\n  public onThemeChange(colors: IColorSet): void {\n    this._viewportElement.style.backgroundColor = colors.background.css;\n  }\n\n  /**\n   * Refreshes row height, setting line-height, viewport height and scroll area height if\n   * necessary.\n   */\n  private _refresh(immediate: boolean): void {\n    if (immediate) {\n      this._innerRefresh();\n      if (this._refreshAnimationFrame !== null) {\n        cancelAnimationFrame(this._refreshAnimationFrame);\n      }\n      return;\n    }\n    if (this._refreshAnimationFrame === null) {\n      this._refreshAnimationFrame = requestAnimationFrame(() => this._innerRefresh());\n    }\n  }\n\n  private _innerRefresh(): void {\n    if (this._charSizeService.height > 0) {\n      this._currentRowHeight = this._renderService.dimensions.scaledCellHeight / window.devicePixelRatio;\n      this._currentScaledCellHeight = this._renderService.dimensions.scaledCellHeight;\n      this._lastRecordedViewportHeight = this._viewportElement.offsetHeight;\n      const newBufferHeight = Math.round(this._currentRowHeight * this._lastRecordedBufferLength) + (this._lastRecordedViewportHeight - this._renderService.dimensions.canvasHeight);\n      if (this._lastRecordedBufferHeight !== newBufferHeight) {\n        this._lastRecordedBufferHeight = newBufferHeight;\n        this._scrollArea.style.height = this._lastRecordedBufferHeight + 'px';\n      }\n    }\n\n    // Sync scrollTop\n    const scrollTop = this._bufferService.buffer.ydisp * this._currentRowHeight;\n    if (this._viewportElement.scrollTop !== scrollTop) {\n      // Ignore the next scroll event which will be triggered by setting the scrollTop as we do not\n      // want this event to scroll the terminal\n      this._ignoreNextScrollEvent = true;\n      this._viewportElement.scrollTop = scrollTop;\n    }\n\n    this._refreshAnimationFrame = null;\n  }\n\n  /**\n   * Updates dimensions and synchronizes the scroll area if necessary.\n   */\n  public syncScrollArea(immediate: boolean = false): void {\n    // If buffer height changed\n    if (this._lastRecordedBufferLength !== this._bufferService.buffer.lines.length) {\n      this._lastRecordedBufferLength = this._bufferService.buffer.lines.length;\n      this._refresh(immediate);\n      return;\n    }\n\n    // If viewport height changed\n    if (this._lastRecordedViewportHeight !== this._renderService.dimensions.canvasHeight) {\n      this._refresh(immediate);\n      return;\n    }\n\n    // If the buffer position doesn't match last scroll top\n    if (this._lastScrollTop !== this._activeBuffer.ydisp * this._currentRowHeight) {\n      this._refresh(immediate);\n      return;\n    }\n\n    // If row height changed\n    if (this._renderDimensions.scaledCellHeight !== this._currentScaledCellHeight) {\n      this._refresh(immediate);\n      return;\n    }\n  }\n\n  /**\n   * Handles scroll events on the viewport, calculating the new viewport and requesting the\n   * terminal to scroll to it.\n   * @param ev The scroll event.\n   */\n  private _onScroll(ev: Event): void {\n    // Record current scroll top position\n    this._lastScrollTop = this._viewportElement.scrollTop;\n\n    // Don't attempt to scroll if the element is not visible, otherwise scrollTop will be corrupt\n    // which causes the terminal to scroll the buffer to the top\n    if (!this._viewportElement.offsetParent) {\n      return;\n    }\n\n    // Ignore the event if it was flagged to ignore (when the source of the event is from Viewport)\n    if (this._ignoreNextScrollEvent) {\n      this._ignoreNextScrollEvent = false;\n      // Still trigger the scroll so lines get refreshed\n      this._scrollLines(0);\n      return;\n    }\n\n    const newRow = Math.round(this._lastScrollTop / this._currentRowHeight);\n    const diff = newRow - this._bufferService.buffer.ydisp;\n    this._scrollLines(diff);\n  }\n\n  /**\n   * Handles bubbling of scroll event in case the viewport has reached top or bottom\n   * @param ev The scroll event.\n   * @param amount The amount scrolled\n   */\n  private _bubbleScroll(ev: Event, amount: number): boolean {\n    const scrollPosFromTop = this._viewportElement.scrollTop + this._lastRecordedViewportHeight;\n    if ((amount < 0 && this._viewportElement.scrollTop !== 0) ||\n      (amount > 0 && scrollPosFromTop < this._lastRecordedBufferHeight)) {\n      if (ev.cancelable) {\n        ev.preventDefault();\n      }\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Handles mouse wheel events by adjusting the viewport's scrollTop and delegating the actual\n   * scrolling to `onScroll`, this event needs to be attached manually by the consumer of\n   * `Viewport`.\n   * @param ev The mouse wheel event.\n   */\n  public onWheel(ev: WheelEvent): boolean {\n    const amount = this._getPixelsScrolled(ev);\n    if (amount === 0) {\n      return false;\n    }\n    this._viewportElement.scrollTop += amount;\n    return this._bubbleScroll(ev, amount);\n  }\n\n  private _getPixelsScrolled(ev: WheelEvent): number {\n    // Do nothing if it's not a vertical scroll event\n    if (ev.deltaY === 0 || ev.shiftKey) {\n      return 0;\n    }\n\n    // Fallback to WheelEvent.DOM_DELTA_PIXEL\n    let amount = this._applyScrollModifier(ev.deltaY, ev);\n    if (ev.deltaMode === WheelEvent.DOM_DELTA_LINE) {\n      amount *= this._currentRowHeight;\n    } else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\n      amount *= this._currentRowHeight * this._bufferService.rows;\n    }\n    return amount;\n  }\n\n  /**\n   * Gets the number of pixels scrolled by the mouse event taking into account what type of delta\n   * is being used.\n   * @param ev The mouse wheel event.\n   */\n  public getLinesScrolled(ev: WheelEvent): number {\n    // Do nothing if it's not a vertical scroll event\n    if (ev.deltaY === 0 || ev.shiftKey) {\n      return 0;\n    }\n\n    // Fallback to WheelEvent.DOM_DELTA_LINE\n    let amount = this._applyScrollModifier(ev.deltaY, ev);\n    if (ev.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {\n      amount /= this._currentRowHeight + 0.0; // Prevent integer division\n      this._wheelPartialScroll += amount;\n      amount = Math.floor(Math.abs(this._wheelPartialScroll)) * (this._wheelPartialScroll > 0 ? 1 : -1);\n      this._wheelPartialScroll %= 1;\n    } else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\n      amount *= this._bufferService.rows;\n    }\n    return amount;\n  }\n\n  private _applyScrollModifier(amount: number, ev: WheelEvent): number {\n    const modifier = this._optionsService.rawOptions.fastScrollModifier;\n    // Multiply the scroll speed when the modifier is down\n    if ((modifier === 'alt' && ev.altKey) ||\n      (modifier === 'ctrl' && ev.ctrlKey) ||\n      (modifier === 'shift' && ev.shiftKey)) {\n      return amount * this._optionsService.rawOptions.fastScrollSensitivity * this._optionsService.rawOptions.scrollSensitivity;\n    }\n\n    return amount * this._optionsService.rawOptions.scrollSensitivity;\n  }\n\n  /**\n   * Handles the touchstart event, recording the touch occurred.\n   * @param ev The touch event.\n   */\n  public onTouchStart(ev: TouchEvent): void {\n    this._lastTouchY = ev.touches[0].pageY;\n  }\n\n  /**\n   * Handles the touchmove event, scrolling the viewport if the position shifted.\n   * @param ev The touch event.\n   */\n  public onTouchMove(ev: TouchEvent): boolean {\n    const deltaY = this._lastTouchY - ev.touches[0].pageY;\n    this._lastTouchY = ev.touches[0].pageY;\n    if (deltaY === 0) {\n      return false;\n    }\n    this._viewportElement.scrollTop += deltaY;\n    return this._bubbleScroll(ev, deltaY);\n  }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IRenderService } from 'browser/services/Services';\nimport { Disposable } from 'common/Lifecycle';\nimport { IBufferService, IDecorationService, IInternalDecoration } from 'common/services/Services';\n\nexport class BufferDecorationRenderer extends Disposable {\n  private readonly _container: HTMLElement;\n  private readonly _decorationElements: Map<IInternalDecoration, HTMLElement> = new Map();\n\n  private _animationFrame: number | undefined;\n  private _altBufferIsActive: boolean = false;\n  private _dimensionsChanged: boolean = false;\n\n  constructor(\n    private readonly _screenElement: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IDecorationService private readonly _decorationService: IDecorationService,\n    @IRenderService private readonly _renderService: IRenderService\n  ) {\n    super();\n\n    this._container = document.createElement('div');\n    this._container.classList.add('xterm-decoration-container');\n    this._screenElement.appendChild(this._container);\n\n    this.register(this._renderService.onRenderedViewportChange(() => this._queueRefresh()));\n    this.register(this._renderService.onDimensionsChange(() => {\n      this._dimensionsChanged = true;\n      this._queueRefresh();\n    }));\n    this.register(addDisposableDomListener(window, 'resize', () => this._queueRefresh()));\n    this.register(this._bufferService.buffers.onBufferActivate(() => {\n      this._altBufferIsActive = this._bufferService.buffer === this._bufferService.buffers.alt;\n    }));\n    this.register(this._decorationService.onDecorationRegistered(() => this._queueRefresh()));\n    this.register(this._decorationService.onDecorationRemoved(decoration => this._removeDecoration(decoration)));\n  }\n\n  public override dispose(): void {\n    this._container.remove();\n    this._decorationElements.clear();\n    super.dispose();\n  }\n\n  private _queueRefresh(): void {\n    if (this._animationFrame !== undefined) {\n      return;\n    }\n    this._animationFrame = this._renderService.addRefreshCallback(() => {\n      this.refreshDecorations();\n      this._animationFrame = undefined;\n    });\n  }\n\n  public refreshDecorations(): void {\n    for (const decoration of this._decorationService.decorations) {\n      this._renderDecoration(decoration);\n    }\n    this._dimensionsChanged = false;\n  }\n\n  private _renderDecoration(decoration: IInternalDecoration): void {\n    this._refreshStyle(decoration);\n    if (this._dimensionsChanged) {\n      this._refreshXPosition(decoration);\n    }\n  }\n\n  private _createElement(decoration: IInternalDecoration): HTMLElement {\n    const element = document.createElement('div');\n    element.classList.add('xterm-decoration');\n    element.style.width = `${Math.round((decoration.options.width || 1) * this._renderService.dimensions.actualCellWidth)}px`;\n    element.style.height = `${(decoration.options.height || 1) * this._renderService.dimensions.actualCellHeight}px`;\n    element.style.top = `${(decoration.marker.line - this._bufferService.buffers.active.ydisp) * this._renderService.dimensions.actualCellHeight}px`;\n    element.style.lineHeight = `${this._renderService.dimensions.actualCellHeight}px`;\n\n    const x = decoration.options.x ?? 0;\n    if (x && x > this._bufferService.cols) {\n      // exceeded the container width, so hide\n      element.style.display = 'none';\n    }\n    this._refreshXPosition(decoration, element);\n\n    return element;\n  }\n\n  private _refreshStyle(decoration: IInternalDecoration): void {\n    const line = decoration.marker.line - this._bufferService.buffers.active.ydisp;\n    if (line < 0 || line >= this._bufferService.rows) {\n      // outside of viewport\n      if (decoration.element) {\n        decoration.element.style.display = 'none';\n        decoration.onRenderEmitter.fire(decoration.element);\n      }\n    } else {\n      let element = this._decorationElements.get(decoration);\n      if (!element) {\n        decoration.onDispose(() => this._removeDecoration(decoration));\n        element = this._createElement(decoration);\n        decoration.element = element;\n        this._decorationElements.set(decoration, element);\n        this._container.appendChild(element);\n      }\n      element.style.top = `${line * this._renderService.dimensions.actualCellHeight}px`;\n      element.style.display = this._altBufferIsActive ? 'none' : 'block';\n      decoration.onRenderEmitter.fire(element);\n    }\n  }\n\n  private _refreshXPosition(decoration: IInternalDecoration, element: HTMLElement | undefined = decoration.element): void {\n    if (!element) {\n      return;\n    }\n    const x = decoration.options.x ?? 0;\n    if ((decoration.options.anchor || 'left') === 'right') {\n      element.style.right = x ? `${x * this._renderService.dimensions.actualCellWidth}px` : '';\n    } else {\n      element.style.left = x ? `${x * this._renderService.dimensions.actualCellWidth}px` : '';\n    }\n  }\n\n  private _removeDecoration(decoration: IInternalDecoration): void {\n    this._decorationElements.get(decoration)?.remove();\n    this._decorationElements.delete(decoration);\n  }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IInternalDecoration } from 'common/services/Services';\n\nexport interface IColorZoneStore {\n  readonly zones: IColorZone[];\n  clear(): void;\n  addDecoration(decoration: IInternalDecoration): void;\n  /**\n   * Sets the amount of padding in lines that will be added between zones, if new lines intersect\n   * the padding they will be merged into the same zone.\n   */\n  setPadding(padding: { [position: string]: number }): void;\n}\n\nexport interface IColorZone {\n  /** Color in a format supported by canvas' fillStyle. */\n  color: string;\n  position: 'full' | 'left' | 'center' | 'right' | undefined;\n  startBufferLine: number;\n  endBufferLine: number;\n}\n\ninterface IMinimalDecorationForColorZone {\n  marker: Pick<IInternalDecoration['marker'], 'line'>;\n  options: Pick<IInternalDecoration['options'], 'overviewRulerOptions'>;\n}\n\nexport class ColorZoneStore implements IColorZoneStore {\n  private _zones: IColorZone[] = [];\n\n  // The zone pool is used to keep zone objects from being freed between clearing the color zone\n  // store and fetching the zones. This helps reduce GC pressure since the color zones are\n  // accumulated on potentially every scroll event.\n  private _zonePool: IColorZone[] = [];\n  private _zonePoolIndex = 0;\n\n  private _linePadding: { [position: string]: number } = {\n    full: 0,\n    left: 0,\n    center: 0,\n    right: 0\n  };\n\n  public get zones(): IColorZone[] {\n    // Trim the zone pool to free unused memory\n    this._zonePool.length = Math.min(this._zonePool.length, this._zones.length);\n    return this._zones;\n  }\n\n  public clear(): void {\n    this._zones.length = 0;\n    this._zonePoolIndex = 0;\n  }\n\n  public addDecoration(decoration: IMinimalDecorationForColorZone): void {\n    if (!decoration.options.overviewRulerOptions) {\n      return;\n    }\n    for (const z of this._zones) {\n      if (z.color === decoration.options.overviewRulerOptions.color &&\n          z.position === decoration.options.overviewRulerOptions.position) {\n        if (this._lineIntersectsZone(z, decoration.marker.line)) {\n          return;\n        }\n        if (this._lineAdjacentToZone(z, decoration.marker.line, decoration.options.overviewRulerOptions.position)) {\n          this._addLineToZone(z, decoration.marker.line);\n          return;\n        }\n      }\n    }\n    // Create using zone pool if possible\n    if (this._zonePoolIndex < this._zonePool.length) {\n      this._zonePool[this._zonePoolIndex].color = decoration.options.overviewRulerOptions.color;\n      this._zonePool[this._zonePoolIndex].position = decoration.options.overviewRulerOptions.position;\n      this._zonePool[this._zonePoolIndex].startBufferLine = decoration.marker.line;\n      this._zonePool[this._zonePoolIndex].endBufferLine = decoration.marker.line;\n      this._zones.push(this._zonePool[this._zonePoolIndex++]);\n      return;\n    }\n    // Create\n    this._zones.push({\n      color: decoration.options.overviewRulerOptions.color,\n      position: decoration.options.overviewRulerOptions.position,\n      startBufferLine: decoration.marker.line,\n      endBufferLine: decoration.marker.line\n    });\n    this._zonePool.push(this._zones[this._zones.length - 1]);\n    this._zonePoolIndex++;\n  }\n\n  public setPadding(padding: { [position: string]: number }): void {\n    this._linePadding = padding;\n  }\n\n  private _lineIntersectsZone(zone: IColorZone, line: number): boolean {\n    return (\n      line >= zone.startBufferLine &&\n      line <= zone.endBufferLine\n    );\n  }\n\n  private _lineAdjacentToZone(zone: IColorZone, line: number, position: IColorZone['position']): boolean {\n    return (\n      (line >= zone.startBufferLine - this._linePadding[position || 'full']) &&\n      (line <= zone.endBufferLine + this._linePadding[position || 'full'])\n    );\n  }\n\n  private _addLineToZone(zone: IColorZone, line: number): void {\n    zone.startBufferLine = Math.min(zone.startBufferLine, line);\n    zone.endBufferLine = Math.max(zone.endBufferLine, line);\n  }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ColorZoneStore, IColorZone, IColorZoneStore } from 'browser/decorations/ColorZoneStore';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IRenderService } from 'browser/services/Services';\nimport { Disposable } from 'common/Lifecycle';\nimport { IBufferService, IDecorationService, IInternalDecoration, IOptionsService } from 'common/services/Services';\n\n// Helper objects to avoid excessive calculation and garbage collection during rendering. These are\n// static values for each render and can be accessed using the decoration position as the key.\nconst drawHeight = {\n  full: 0,\n  left: 0,\n  center: 0,\n  right: 0\n};\nconst drawWidth = {\n  full: 0,\n  left: 0,\n  center: 0,\n  right: 0\n};\nconst drawX = {\n  full: 0,\n  left: 0,\n  center: 0,\n  right: 0\n};\n\nexport class OverviewRulerRenderer extends Disposable {\n  private readonly _canvas: HTMLCanvasElement;\n  private readonly _ctx: CanvasRenderingContext2D;\n  private readonly _colorZoneStore: IColorZoneStore = new ColorZoneStore();\n  private get _width(): number {\n    return this._optionsService.options.overviewRulerWidth || 0;\n  }\n  private _animationFrame: number | undefined;\n\n  private _shouldUpdateDimensions: boolean | undefined = true;\n  private _shouldUpdateAnchor: boolean | undefined = true;\n  private _lastKnownBufferLength: number = 0;\n\n  private _containerHeight: number | undefined;\n\n  constructor(\n    private readonly _viewportElement: HTMLElement,\n    private readonly _screenElement: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IDecorationService private readonly _decorationService: IDecorationService,\n    @IRenderService private readonly _renderService: IRenderService,\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n    this._canvas = document.createElement('canvas');\n    this._canvas.classList.add('xterm-decoration-overview-ruler');\n    this._refreshCanvasDimensions();\n    this._viewportElement.parentElement?.insertBefore(this._canvas, this._viewportElement);\n    const ctx = this._canvas.getContext('2d');\n    if (!ctx) {\n      throw new Error('Ctx cannot be null');\n    } else {\n      this._ctx = ctx;\n    }\n    this._registerDecorationListeners();\n    this._registerBufferChangeListeners();\n    this._registerDimensionChangeListeners();\n  }\n\n  /**\n   * On decoration add or remove, redraw\n   */\n  private _registerDecorationListeners(): void {\n    this.register(this._decorationService.onDecorationRegistered(() => this._queueRefresh(undefined, true)));\n    this.register(this._decorationService.onDecorationRemoved(() => this._queueRefresh(undefined, true)));\n  }\n\n  /**\n   * On buffer change, redraw\n   * and hide the canvas if the alt buffer is active\n   */\n  private _registerBufferChangeListeners(): void {\n    this.register(this._renderService.onRenderedViewportChange(() => this._queueRefresh()));\n    this.register(this._bufferService.buffers.onBufferActivate(() => {\n      this._canvas!.style.display = this._bufferService.buffer === this._bufferService.buffers.alt ? 'none' : 'block';\n    }));\n    this.register(this._bufferService.onScroll(() => {\n      if (this._lastKnownBufferLength !== this._bufferService.buffers.normal.lines.length) {\n        this._refreshDrawHeightConstants();\n        this._refreshColorZonePadding();\n      }\n    }));\n  }\n  /**\n   * On dimension change, update canvas dimensions\n   * and then redraw\n   */\n  private _registerDimensionChangeListeners(): void {\n    // container height changed\n    this.register(this._renderService.onRender((): void => {\n      if (!this._containerHeight || this._containerHeight !== this._screenElement.clientHeight) {\n        this._queueRefresh(true);\n        this._containerHeight = this._screenElement.clientHeight;\n      }\n    }));\n    // overview ruler width changed\n    this.register(this._optionsService.onOptionChange(o => {\n      if (o === 'overviewRulerWidth') {\n        this._queueRefresh(true);\n      }\n    }));\n    // device pixel ratio changed\n    this.register(addDisposableDomListener(window, 'resize', () => {\n      this._queueRefresh(true);\n    }));\n    // set the canvas dimensions\n    this._queueRefresh(true);\n  }\n\n  public override dispose(): void {\n    this._canvas?.remove();\n    super.dispose();\n  }\n\n  private _refreshDrawConstants(): void {\n    // width\n    const outerWidth = Math.floor(this._canvas.width / 3);\n    const innerWidth = Math.ceil(this._canvas.width / 3);\n    drawWidth.full = this._canvas.width;\n    drawWidth.left = outerWidth;\n    drawWidth.center = innerWidth;\n    drawWidth.right = outerWidth;\n    // height\n    this._refreshDrawHeightConstants();\n    // x\n    drawX.full = 0;\n    drawX.left = 0;\n    drawX.center = drawWidth.left;\n    drawX.right = drawWidth.left + drawWidth.center;\n  }\n\n  private _refreshDrawHeightConstants(): void {\n    drawHeight.full = Math.round(2 * window.devicePixelRatio);\n    // Calculate actual pixels per line\n    const pixelsPerLine = this._canvas.height / this._bufferService.buffer.lines.length;\n    // Clamp actual pixels within a range\n    const nonFullHeight = Math.round(Math.max(Math.min(pixelsPerLine, 12), 6) * window.devicePixelRatio);\n    drawHeight.left = nonFullHeight;\n    drawHeight.center = nonFullHeight;\n    drawHeight.right = nonFullHeight;\n  }\n\n  private _refreshColorZonePadding(): void {\n    this._colorZoneStore.setPadding({\n      full: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.full),\n      left: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.left),\n      center: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.center),\n      right: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.right)\n    });\n    this._lastKnownBufferLength = this._bufferService.buffers.normal.lines.length;\n  }\n\n  private _refreshCanvasDimensions(): void {\n    this._canvas.style.width = `${this._width}px`;\n    this._canvas.width = Math.round(this._width * window.devicePixelRatio);\n    this._canvas.style.height = `${this._screenElement.clientHeight}px`;\n    this._canvas.height = Math.round(this._screenElement.clientHeight * window.devicePixelRatio);\n    this._refreshDrawConstants();\n    this._refreshColorZonePadding();\n  }\n\n  private _refreshDecorations(): void {\n    if (this._shouldUpdateDimensions) {\n      this._refreshCanvasDimensions();\n    }\n    this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    this._colorZoneStore.clear();\n    for (const decoration of this._decorationService.decorations) {\n      this._colorZoneStore.addDecoration(decoration);\n    }\n    this._ctx.lineWidth = 1;\n    const zones = this._colorZoneStore.zones;\n    for (const zone of zones) {\n      if (zone.position !== 'full') {\n        this._renderColorZone(zone);\n      }\n    }\n    for (const zone of zones) {\n      if (zone.position === 'full') {\n        this._renderColorZone(zone);\n      }\n    }\n    this._shouldUpdateDimensions = false;\n    this._shouldUpdateAnchor = false;\n  }\n\n  private _renderColorZone(zone: IColorZone): void {\n    // TODO: Is _decorationElements needed?\n\n    this._ctx.fillStyle = zone.color;\n    this._ctx.fillRect(\n      /* x */ drawX[zone.position || 'full'],\n      /* y */ Math.round(\n        (this._canvas.height - 1) * // -1 to ensure at least 2px are allowed for decoration on last line\n        (zone.startBufferLine / this._bufferService.buffers.active.lines.length) - drawHeight[zone.position || 'full'] / 2\n      ),\n      /* w */ drawWidth[zone.position || 'full'],\n      /* h */ Math.round(\n        (this._canvas.height - 1) * // -1 to ensure at least 2px are allowed for decoration on last line\n        ((zone.endBufferLine - zone.startBufferLine) / this._bufferService.buffers.active.lines.length) + drawHeight[zone.position || 'full']\n      )\n    );\n  }\n\n  private _queueRefresh(updateCanvasDimensions?: boolean, updateAnchor?: boolean): void {\n    this._shouldUpdateDimensions = updateCanvasDimensions || this._shouldUpdateDimensions;\n    this._shouldUpdateAnchor = updateAnchor || this._shouldUpdateAnchor;\n    if (this._animationFrame !== undefined) {\n      return;\n    }\n    this._animationFrame = window.requestAnimationFrame(() => {\n      this._refreshDecorations();\n      this._animationFrame = undefined;\n    });\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderService } from 'browser/services/Services';\nimport { IBufferService, ICoreService, IOptionsService } from 'common/services/Services';\n\ninterface IPosition {\n  start: number;\n  end: number;\n}\n\n/**\n * Encapsulates the logic for handling compositionstart, compositionupdate and compositionend\n * events, displaying the in-progress composition to the UI and forwarding the final composition\n * to the handler.\n */\nexport class CompositionHelper {\n  /**\n   * Whether input composition is currently happening, eg. via a mobile keyboard, speech input or\n   * IME. This variable determines whether the compositionText should be displayed on the UI.\n   */\n  private _isComposing: boolean;\n  public get isComposing(): boolean { return this._isComposing; }\n\n  /**\n   * The position within the input textarea's value of the current composition.\n   */\n  private _compositionPosition: IPosition;\n\n  /**\n   * Whether a composition is in the process of being sent, setting this to false will cancel any\n   * in-progress composition.\n   */\n  private _isSendingComposition: boolean;\n\n  /**\n   * Data already sent due to keydown event.\n   */\n  private _dataAlreadySent: string;\n\n  constructor(\n    private readonly _textarea: HTMLTextAreaElement,\n    private readonly _compositionView: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICoreService private readonly _coreService: ICoreService,\n    @IRenderService private readonly _renderService: IRenderService\n  ) {\n    this._isComposing = false;\n    this._isSendingComposition = false;\n    this._compositionPosition = { start: 0, end: 0 };\n    this._dataAlreadySent = '';\n  }\n\n  /**\n   * Handles the compositionstart event, activating the composition view.\n   */\n  public compositionstart(): void {\n    this._isComposing = true;\n    this._compositionPosition.start = this._textarea.value.length;\n    this._compositionView.textContent = '';\n    this._dataAlreadySent = '';\n    this._compositionView.classList.add('active');\n  }\n\n  /**\n   * Handles the compositionupdate event, updating the composition view.\n   * @param ev The event.\n   */\n  public compositionupdate(ev: Pick<CompositionEvent, 'data'>): void {\n    this._compositionView.textContent = ev.data;\n    this.updateCompositionElements();\n    setTimeout(() => {\n      this._compositionPosition.end = this._textarea.value.length;\n    }, 0);\n  }\n\n  /**\n   * Handles the compositionend event, hiding the composition view and sending the composition to\n   * the handler.\n   */\n  public compositionend(): void {\n    this._finalizeComposition(true);\n  }\n\n  /**\n   * Handles the keydown event, routing any necessary events to the CompositionHelper functions.\n   * @param ev The keydown event.\n   * @return Whether the Terminal should continue processing the keydown event.\n   */\n  public keydown(ev: KeyboardEvent): boolean {\n    if (this._isComposing || this._isSendingComposition) {\n      if (ev.keyCode === 229) {\n        // Continue composing if the keyCode is the \"composition character\"\n        return false;\n      }\n      if (ev.keyCode === 16 || ev.keyCode === 17 || ev.keyCode === 18) {\n        // Continue composing if the keyCode is a modifier key\n        return false;\n      }\n      // Finish composition immediately. This is mainly here for the case where enter is\n      // pressed and the handler needs to be triggered before the command is executed.\n      this._finalizeComposition(false);\n    }\n\n    if (ev.keyCode === 229) {\n      // If the \"composition character\" is used but gets to this point it means a non-composition\n      // character (eg. numbers and punctuation) was pressed when the IME was active.\n      this._handleAnyTextareaChanges();\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Finalizes the composition, resuming regular input actions. This is called when a composition\n   * is ending.\n   * @param waitForPropagation Whether to wait for events to propagate before sending\n   *   the input. This should be false if a non-composition keystroke is entered before the\n   *   compositionend event is triggered, such as enter, so that the composition is sent before\n   *   the command is executed.\n   */\n  private _finalizeComposition(waitForPropagation: boolean): void {\n    this._compositionView.classList.remove('active');\n    this._isComposing = false;\n\n    if (!waitForPropagation) {\n      // Cancel any delayed composition send requests and send the input immediately.\n      this._isSendingComposition = false;\n      const input = this._textarea.value.substring(this._compositionPosition.start, this._compositionPosition.end);\n      this._coreService.triggerDataEvent(input, true);\n    } else {\n      // Make a deep copy of the composition position here as a new compositionstart event may\n      // fire before the setTimeout executes.\n      const currentCompositionPosition = {\n        start: this._compositionPosition.start,\n        end: this._compositionPosition.end\n      };\n\n      // Since composition* events happen before the changes take place in the textarea on most\n      // browsers, use a setTimeout with 0ms time to allow the native compositionend event to\n      // complete. This ensures the correct character is retrieved.\n      // This solution was used because:\n      // - The compositionend event's data property is unreliable, at least on Chromium\n      // - The last compositionupdate event's data property does not always accurately describe\n      //   the character, a counter example being Korean where an ending consonsant can move to\n      //   the following character if the following input is a vowel.\n      this._isSendingComposition = true;\n      setTimeout(() => {\n        // Ensure that the input has not already been sent\n        if (this._isSendingComposition) {\n          this._isSendingComposition = false;\n          let input;\n          // Add length of data already sent due to keydown event,\n          // otherwise input characters can be duplicated. (Issue #3191)\n          currentCompositionPosition.start += this._dataAlreadySent.length;\n          if (this._isComposing) {\n            // Use the end position to get the string if a new composition has started.\n            input = this._textarea.value.substring(currentCompositionPosition.start, currentCompositionPosition.end);\n          } else {\n            // Don't use the end position here in order to pick up any characters after the\n            // composition has finished, for example when typing a non-composition character\n            // (eg. 2) after a composition character.\n            input = this._textarea.value.substring(currentCompositionPosition.start);\n          }\n          if (input.length > 0) {\n            this._coreService.triggerDataEvent(input, true);\n          }\n        }\n      }, 0);\n    }\n  }\n\n  /**\n   * Apply any changes made to the textarea after the current event chain is allowed to complete.\n   * This should be called when not currently composing but a keydown event with the \"composition\n   * character\" (229) is triggered, in order to allow non-composition text to be entered when an\n   * IME is active.\n   */\n  private _handleAnyTextareaChanges(): void {\n    const oldValue = this._textarea.value;\n    setTimeout(() => {\n      // Ignore if a composition has started since the timeout\n      if (!this._isComposing) {\n        const newValue = this._textarea.value;\n        const diff = newValue.replace(oldValue, '');\n        if (diff.length > 0) {\n          this._dataAlreadySent = diff;\n          this._coreService.triggerDataEvent(diff, true);\n        }\n      }\n    }, 0);\n  }\n\n  /**\n   * Positions the composition view on top of the cursor and the textarea just below it (so the\n   * IME helper dialog is positioned correctly).\n   * @param dontRecurse Whether to use setTimeout to recursively trigger another update, this is\n   *   necessary as the IME events across browsers are not consistently triggered.\n   */\n  public updateCompositionElements(dontRecurse?: boolean): void {\n    if (!this._isComposing) {\n      return;\n    }\n\n    if (this._bufferService.buffer.isCursorInViewport) {\n      const cursorX = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1);\n\n      const cellHeight = this._renderService.dimensions.actualCellHeight;\n      const cursorTop = this._bufferService.buffer.y * this._renderService.dimensions.actualCellHeight;\n      const cursorLeft = cursorX * this._renderService.dimensions.actualCellWidth;\n\n      this._compositionView.style.left = cursorLeft + 'px';\n      this._compositionView.style.top = cursorTop + 'px';\n      this._compositionView.style.height = cellHeight + 'px';\n      this._compositionView.style.lineHeight = cellHeight + 'px';\n      this._compositionView.style.fontFamily = this._optionsService.rawOptions.fontFamily;\n      this._compositionView.style.fontSize = this._optionsService.rawOptions.fontSize + 'px';\n      // Sync the textarea to the exact position of the composition view so the IME knows where the\n      // text is.\n      const compositionViewBounds = this._compositionView.getBoundingClientRect();\n      this._textarea.style.left = cursorLeft + 'px';\n      this._textarea.style.top = cursorTop + 'px';\n      // Ensure the text area is at least 1x1, otherwise certain IMEs may break\n      this._textarea.style.width = Math.max(compositionViewBounds.width, 1) + 'px';\n      this._textarea.style.height = Math.max(compositionViewBounds.height, 1) + 'px';\n      this._textarea.style.lineHeight = compositionViewBounds.height + 'px';\n    }\n\n    if (!dontRecurse) {\n      setTimeout(() => this.updateCompositionElements(true), 0);\n    }\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport function getCoordsRelativeToElement(window: Pick<Window, 'getComputedStyle'>, event: {clientX: number, clientY: number}, element: HTMLElement): [number, number] {\n  const rect = element.getBoundingClientRect();\n  const elementStyle = window.getComputedStyle(element);\n  const leftPadding = parseInt(elementStyle.getPropertyValue('padding-left'));\n  const topPadding = parseInt(elementStyle.getPropertyValue('padding-top'));\n  return [\n    event.clientX - rect.left - leftPadding,\n    event.clientY - rect.top - topPadding\n  ];\n}\n\n/**\n * Gets coordinates within the terminal for a particular mouse event. The result\n * is returned as an array in the form [x, y] instead of an object as it's a\n * little faster and this function is used in some low level code.\n * @param event The mouse event.\n * @param element The terminal's container element.\n * @param colCount The number of columns in the terminal.\n * @param rowCount The number of rows n the terminal.\n * @param isSelection Whether the request is for the selection or not. This will\n * apply an offset to the x value such that the left half of the cell will\n * select that cell and the right half will select the next cell.\n */\nexport function getCoords(window: Pick<Window, 'getComputedStyle'>, event: {clientX: number, clientY: number}, element: HTMLElement, colCount: number, rowCount: number, hasValidCharSize: boolean, actualCellWidth: number, actualCellHeight: number, isSelection?: boolean): [number, number] | undefined {\n  // Coordinates cannot be measured if there are no valid\n  if (!hasValidCharSize) {\n    return undefined;\n  }\n\n  const coords = getCoordsRelativeToElement(window, event, element);\n  if (!coords) {\n    return undefined;\n  }\n\n  coords[0] = Math.ceil((coords[0] + (isSelection ? actualCellWidth / 2 : 0)) / actualCellWidth);\n  coords[1] = Math.ceil(coords[1] / actualCellHeight);\n\n  // Ensure coordinates are within the terminal viewport. Note that selections\n  // need an addition point of precision to cover the end point (as characters\n  // cover half of one char and half of the next).\n  coords[0] = Math.min(Math.max(coords[0], 1), colCount + (isSelection ? 1 : 0));\n  coords[1] = Math.min(Math.max(coords[1], 1), rowCount);\n\n  return coords;\n}\n\n/**\n * Gets coordinates within the terminal for a particular mouse event, wrapping\n * them to the bounds of the terminal and adding 32 to both the x and y values\n * as expected by xterm.\n */\nexport function getRawByteCoords(coords: [number, number] | undefined): { x: number, y: number } | undefined {\n  if (!coords) {\n    return undefined;\n  }\n\n  // xterm sends raw bytes and starts at 32 (SP) for each.\n  return { x: coords[0] + 32, y: coords[1] + 32 };\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { C0 } from 'common/data/EscapeSequences';\nimport { IBufferService } from 'common/services/Services';\n\nconst enum Direction {\n  UP = 'A',\n  DOWN = 'B',\n  RIGHT = 'C',\n  LEFT = 'D'\n}\n\n/**\n * Concatenates all the arrow sequences together.\n * Resets the starting row to an unwrapped row, moves to the requested row,\n * then moves to requested col.\n */\nexport function moveToCellSequence(targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  const startX = bufferService.buffer.x;\n  const startY = bufferService.buffer.y;\n\n  // The alt buffer should try to navigate between rows\n  if (!bufferService.buffer.hasScrollback) {\n    return resetStartingRow(startX, startY, targetX, targetY, bufferService, applicationCursor) +\n      moveToRequestedRow(startY, targetY, bufferService, applicationCursor) +\n      moveToRequestedCol(startX, startY, targetX, targetY, bufferService, applicationCursor);\n  }\n\n  // Only move horizontally for the normal buffer\n  let direction;\n  if (startY === targetY) {\n    direction = startX > targetX ? Direction.LEFT : Direction.RIGHT;\n    return repeat(Math.abs(startX - targetX), sequence(direction, applicationCursor));\n  }\n  direction = startY > targetY ? Direction.LEFT : Direction.RIGHT;\n  const rowDifference = Math.abs(startY - targetY);\n  const cellsToMove = colsFromRowEnd(startY > targetY ? targetX : startX, bufferService) +\n    (rowDifference - 1) * bufferService.cols + 1 /* wrap around 1 row */ +\n    colsFromRowBeginning(startY > targetY ? startX : targetX, bufferService);\n  return repeat(cellsToMove, sequence(direction, applicationCursor));\n}\n\n/**\n * Find the number of cols from a row beginning to a col.\n */\nfunction colsFromRowBeginning(currX: number, bufferService: IBufferService): number {\n  return currX - 1;\n}\n\n/**\n * Find the number of cols from a col to row end.\n */\nfunction colsFromRowEnd(currX: number, bufferService: IBufferService): number {\n  return bufferService.cols - currX;\n}\n\n/**\n * If the initial position of the cursor is on a row that is wrapped, move the\n * cursor up to the first row that is not wrapped to have accurate vertical\n * positioning.\n */\nfunction resetStartingRow(startX: number, startY: number, targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  if (moveToRequestedRow(startY, targetY, bufferService, applicationCursor).length === 0) {\n    return '';\n  }\n  return repeat(bufferLine(\n    startX, startY, startX,\n    startY - wrappedRowsForRow(bufferService, startY), false, bufferService\n  ).length, sequence(Direction.LEFT, applicationCursor));\n}\n\n/**\n * Using the reset starting and ending row, move to the requested row,\n * ignoring wrapped rows\n */\nfunction moveToRequestedRow(startY: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  const startRow = startY - wrappedRowsForRow(bufferService, startY);\n  const endRow = targetY - wrappedRowsForRow(bufferService, targetY);\n\n  const rowsToMove = Math.abs(startRow - endRow) - wrappedRowsCount(startY, targetY, bufferService);\n\n  return repeat(rowsToMove, sequence(verticalDirection(startY, targetY), applicationCursor));\n}\n\n/**\n * Move to the requested col on the ending row\n */\nfunction moveToRequestedCol(startX: number, startY: number, targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  let startRow;\n  if (moveToRequestedRow(startY, targetY, bufferService, applicationCursor).length > 0) {\n    startRow = targetY - wrappedRowsForRow(bufferService, targetY);\n  } else {\n    startRow = startY;\n  }\n\n  const endRow = targetY;\n  const direction = horizontalDirection(startX, startY, targetX, targetY, bufferService, applicationCursor);\n\n  return repeat(bufferLine(\n    startX, startRow, targetX, endRow,\n    direction === Direction.RIGHT, bufferService\n  ).length, sequence(direction, applicationCursor));\n}\n\n/**\n * Utility functions\n */\n\n/**\n * Calculates the number of wrapped rows between the unwrapped starting and\n * ending rows. These rows need to ignored since the cursor skips over them.\n */\nfunction wrappedRowsCount(startY: number, targetY: number, bufferService: IBufferService): number {\n  let wrappedRows = 0;\n  const startRow = startY - wrappedRowsForRow(bufferService, startY);\n  const endRow = targetY - wrappedRowsForRow(bufferService, targetY);\n\n  for (let i = 0; i < Math.abs(startRow - endRow); i++) {\n    const direction = verticalDirection(startY, targetY) === Direction.UP ? -1 : 1;\n    const line = bufferService.buffer.lines.get(startRow + (direction * i));\n    if (line?.isWrapped) {\n      wrappedRows++;\n    }\n  }\n\n  return wrappedRows;\n}\n\n/**\n * Calculates the number of wrapped rows that make up a given row.\n * @param currentRow The row to determine how many wrapped rows make it up\n */\nfunction wrappedRowsForRow(bufferService: IBufferService, currentRow: number): number {\n  let rowCount = 0;\n  let line = bufferService.buffer.lines.get(currentRow);\n  let lineWraps = line?.isWrapped;\n\n  while (lineWraps && currentRow >= 0 && currentRow < bufferService.rows) {\n    rowCount++;\n    line = bufferService.buffer.lines.get(--currentRow);\n    lineWraps = line?.isWrapped;\n  }\n\n  return rowCount;\n}\n\n/**\n * Direction determiners\n */\n\n/**\n * Determines if the right or left arrow is needed\n */\nfunction horizontalDirection(startX: number, startY: number, targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): Direction {\n  let startRow;\n  if (moveToRequestedRow(targetX, targetY, bufferService, applicationCursor).length > 0) {\n    startRow = targetY - wrappedRowsForRow(bufferService, targetY);\n  } else {\n    startRow = startY;\n  }\n\n  if ((startX < targetX &&\n    startRow <= targetY) || // down/right or same y/right\n    (startX >= targetX &&\n    startRow < targetY)) {  // down/left or same y/left\n    return Direction.RIGHT;\n  }\n  return Direction.LEFT;\n}\n\n/**\n * Determines if the up or down arrow is needed\n */\nfunction verticalDirection(startY: number, targetY: number): Direction {\n  return startY > targetY ? Direction.UP : Direction.DOWN;\n}\n\n/**\n * Constructs the string of chars in the buffer from a starting row and col\n * to an ending row and col\n * @param startCol The starting column position\n * @param startRow The starting row position\n * @param endCol The ending column position\n * @param endRow The ending row position\n * @param forward Direction to move\n */\nfunction bufferLine(\n  startCol: number,\n  startRow: number,\n  endCol: number,\n  endRow: number,\n  forward: boolean,\n  bufferService: IBufferService\n): string {\n  let currentCol = startCol;\n  let currentRow = startRow;\n  let bufferStr = '';\n\n  while (currentCol !== endCol || currentRow !== endRow) {\n    currentCol += forward ? 1 : -1;\n\n    if (forward && currentCol > bufferService.cols - 1) {\n      bufferStr += bufferService.buffer.translateBufferLineToString(\n        currentRow, false, startCol, currentCol\n      );\n      currentCol = 0;\n      startCol = 0;\n      currentRow++;\n    } else if (!forward && currentCol < 0) {\n      bufferStr += bufferService.buffer.translateBufferLineToString(\n        currentRow, false, 0, startCol + 1\n      );\n      currentCol = bufferService.cols - 1;\n      startCol = currentCol;\n      currentRow--;\n    }\n  }\n\n  return bufferStr + bufferService.buffer.translateBufferLineToString(\n    currentRow, false, startCol, currentCol\n  );\n}\n\n/**\n * Constructs the escape sequence for clicking an arrow\n * @param direction The direction to move\n */\nfunction sequence(direction: Direction, applicationCursor: boolean): string {\n  const mod =  applicationCursor ? 'O' : '[';\n  return C0.ESC + mod + direction;\n}\n\n/**\n * Returns a string repeated a given number of times\n * Polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\n * @param count The number of times to repeat the string\n * @param string The string that is to be repeated\n */\nfunction repeat(count: number, str: string): string {\n  count = Math.floor(count);\n  let rpt = '';\n  for (let i = 0; i < count; i++) {\n    rpt += str;\n  }\n  return rpt;\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal as ITerminalApi, IMarker, IDisposable, ILinkMatcherOptions, ITheme, ILocalizableStrings, ITerminalAddon, ISelectionPosition, IBufferNamespace as IBufferNamespaceApi, IParser, ILinkProvider, IUnicodeHandling, FontWeight, IModes, IDecorationOptions, IDecoration } from 'xterm';\nimport { ITerminal } from 'browser/Types';\nimport { Terminal as TerminalCore } from 'browser/Terminal';\nimport * as Strings from 'browser/LocalizableStrings';\nimport { IEvent } from 'common/EventEmitter';\nimport { ParserApi } from 'common/public/ParserApi';\nimport { UnicodeApi } from 'common/public/UnicodeApi';\nimport { AddonManager } from 'common/public/AddonManager';\nimport { BufferNamespaceApi } from 'common/public/BufferNamespaceApi';\nimport { ITerminalOptions } from 'common/Types';\n\n/**\n * The set of options that only have an effect when set in the Terminal constructor.\n */\nconst CONSTRUCTOR_ONLY_OPTIONS = ['cols', 'rows'];\n\nexport class Terminal implements ITerminalApi {\n  private _core: ITerminal;\n  private _addonManager: AddonManager;\n  private _parser: IParser | undefined;\n  private _buffer: BufferNamespaceApi | undefined;\n  private _publicOptions: ITerminalOptions;\n\n  constructor(options?: ITerminalOptions) {\n    this._core = new TerminalCore(options);\n    this._addonManager = new AddonManager();\n\n    this._publicOptions = { ... this._core.options };\n    const getter = (propName: string): any => {\n      return this._core.options[propName];\n    };\n    const setter = (propName: string, value: any): void => {\n      this._checkReadonlyOptions(propName);\n      this._core.options[propName] = value;\n    };\n\n    for (const propName in this._core.options) {\n      const desc = {\n        get: getter.bind(this, propName),\n        set: setter.bind(this, propName)\n      };\n      Object.defineProperty(this._publicOptions, propName, desc);\n    }\n  }\n\n  private _checkReadonlyOptions(propName: string): void {\n    // Throw an error if any constructor only option is modified\n    // from terminal.options\n    // Modifications from anywhere else are allowed\n    if (CONSTRUCTOR_ONLY_OPTIONS.includes(propName)) {\n      throw new Error(`Option \"${propName}\" can only be set in the constructor`);\n    }\n  }\n\n  private _checkProposedApi(): void {\n    if (!this._core.optionsService.rawOptions.allowProposedApi) {\n      throw new Error('You must set the allowProposedApi option to true to use proposed API');\n    }\n  }\n\n  public get onBell(): IEvent<void> { return this._core.onBell; }\n  public get onBinary(): IEvent<string> { return this._core.onBinary; }\n  public get onCursorMove(): IEvent<void> { return this._core.onCursorMove; }\n  public get onData(): IEvent<string> { return this._core.onData; }\n  public get onKey(): IEvent<{ key: string, domEvent: KeyboardEvent }> { return this._core.onKey; }\n  public get onLineFeed(): IEvent<void> { return this._core.onLineFeed; }\n  public get onRender(): IEvent<{ start: number, end: number }> { return this._core.onRender; }\n  public get onResize(): IEvent<{ cols: number, rows: number }> { return this._core.onResize; }\n  public get onScroll(): IEvent<number> { return this._core.onScroll; }\n  public get onSelectionChange(): IEvent<void> { return this._core.onSelectionChange; }\n  public get onTitleChange(): IEvent<string> { return this._core.onTitleChange; }\n  public get onWriteParsed(): IEvent<void> { return this._core.onWriteParsed; }\n\n  public get element(): HTMLElement | undefined { return this._core.element; }\n  public get parser(): IParser {\n    this._checkProposedApi();\n    if (!this._parser) {\n      this._parser = new ParserApi(this._core);\n    }\n    return this._parser;\n  }\n  public get unicode(): IUnicodeHandling {\n    this._checkProposedApi();\n    return new UnicodeApi(this._core);\n  }\n  public get textarea(): HTMLTextAreaElement | undefined { return this._core.textarea; }\n  public get rows(): number { return this._core.rows; }\n  public get cols(): number { return this._core.cols; }\n  public get buffer(): IBufferNamespaceApi {\n    this._checkProposedApi();\n    if (!this._buffer) {\n      this._buffer = new BufferNamespaceApi(this._core);\n    }\n    return this._buffer;\n  }\n  public get markers(): ReadonlyArray<IMarker> {\n    this._checkProposedApi();\n    return this._core.markers;\n  }\n  public get modes(): IModes {\n    const m = this._core.coreService.decPrivateModes;\n    let mouseTrackingMode: 'none' | 'x10' | 'vt200' | 'drag' | 'any' = 'none';\n    switch (this._core.coreMouseService.activeProtocol) {\n      case 'X10': mouseTrackingMode = 'x10'; break;\n      case 'VT200': mouseTrackingMode = 'vt200'; break;\n      case 'DRAG': mouseTrackingMode = 'drag'; break;\n      case 'ANY': mouseTrackingMode = 'any'; break;\n    }\n    return {\n      applicationCursorKeysMode: m.applicationCursorKeys,\n      applicationKeypadMode: m.applicationKeypad,\n      bracketedPasteMode: m.bracketedPasteMode,\n      insertMode: this._core.coreService.modes.insertMode,\n      mouseTrackingMode: mouseTrackingMode,\n      originMode: m.origin,\n      reverseWraparoundMode: m.reverseWraparound,\n      sendFocusMode: m.sendFocus,\n      wraparoundMode: m.wraparound\n    };\n  }\n  public get options(): ITerminalOptions {\n    return this._publicOptions;\n  }\n  public set options(options: ITerminalOptions) {\n    for (const propName in options) {\n      this._publicOptions[propName] = options[propName];\n    }\n  }\n  public blur(): void {\n    this._core.blur();\n  }\n  public focus(): void {\n    this._core.focus();\n  }\n  public resize(columns: number, rows: number): void {\n    this._verifyIntegers(columns, rows);\n    this._core.resize(columns, rows);\n  }\n  public open(parent: HTMLElement): void {\n    this._core.open(parent);\n  }\n  public attachCustomKeyEventHandler(customKeyEventHandler: (event: KeyboardEvent) => boolean): void {\n    this._core.attachCustomKeyEventHandler(customKeyEventHandler);\n  }\n  public registerLinkMatcher(regex: RegExp, handler: (event: MouseEvent, uri: string) => void, options?: ILinkMatcherOptions): number {\n    this._checkProposedApi();\n    return this._core.registerLinkMatcher(regex, handler, options);\n  }\n  public deregisterLinkMatcher(matcherId: number): void {\n    this._checkProposedApi();\n    this._core.deregisterLinkMatcher(matcherId);\n  }\n  public registerLinkProvider(linkProvider: ILinkProvider): IDisposable {\n    this._checkProposedApi();\n    return this._core.registerLinkProvider(linkProvider);\n  }\n  public registerCharacterJoiner(handler: (text: string) => [number, number][]): number {\n    this._checkProposedApi();\n    return this._core.registerCharacterJoiner(handler);\n  }\n  public deregisterCharacterJoiner(joinerId: number): void {\n    this._checkProposedApi();\n    this._core.deregisterCharacterJoiner(joinerId);\n  }\n  public registerMarker(cursorYOffset: number = 0): IMarker | undefined {\n    this._checkProposedApi();\n    this._verifyIntegers(cursorYOffset);\n    return this._core.addMarker(cursorYOffset);\n  }\n  public registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined {\n    this._checkProposedApi();\n    this._verifyPositiveIntegers(decorationOptions.x ?? 0, decorationOptions.width ?? 0, decorationOptions.height ?? 0);\n    return this._core.registerDecoration(decorationOptions);\n  }\n  public addMarker(cursorYOffset: number): IMarker | undefined {\n    return this.registerMarker(cursorYOffset);\n  }\n  public hasSelection(): boolean {\n    return this._core.hasSelection();\n  }\n  public select(column: number, row: number, length: number): void {\n    this._verifyIntegers(column, row, length);\n    this._core.select(column, row, length);\n  }\n  public getSelection(): string {\n    return this._core.getSelection();\n  }\n  public getSelectionPosition(): ISelectionPosition | undefined {\n    return this._core.getSelectionPosition();\n  }\n  public clearSelection(): void {\n    this._core.clearSelection();\n  }\n  public selectAll(): void {\n    this._core.selectAll();\n  }\n  public selectLines(start: number, end: number): void {\n    this._verifyIntegers(start, end);\n    this._core.selectLines(start, end);\n  }\n  public dispose(): void {\n    this._addonManager.dispose();\n    this._core.dispose();\n  }\n  public scrollLines(amount: number): void {\n    this._verifyIntegers(amount);\n    this._core.scrollLines(amount);\n  }\n  public scrollPages(pageCount: number): void {\n    this._verifyIntegers(pageCount);\n    this._core.scrollPages(pageCount);\n  }\n  public scrollToTop(): void {\n    this._core.scrollToTop();\n  }\n  public scrollToBottom(): void {\n    this._core.scrollToBottom();\n  }\n  public scrollToLine(line: number): void {\n    this._verifyIntegers(line);\n    this._core.scrollToLine(line);\n  }\n  public clear(): void {\n    this._core.clear();\n  }\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    this._core.write(data, callback);\n  }\n  public writeUtf8(data: Uint8Array, callback?: () => void): void {\n    this._core.write(data, callback);\n  }\n  public writeln(data: string | Uint8Array, callback?: () => void): void {\n    this._core.write(data);\n    this._core.write('\\r\\n', callback);\n  }\n  public paste(data: string): void {\n    this._core.paste(data);\n  }\n  public getOption(key: 'bellSound' | 'bellStyle' | 'cursorStyle' | 'fontFamily' | 'logLevel' | 'rendererType' | 'termName' | 'wordSeparator'): string;\n  public getOption(key: 'allowTransparency' | 'altClickMovesCursor' | 'cancelEvents' | 'convertEol' | 'cursorBlink' | 'disableStdin' | 'macOptionIsMeta' | 'rightClickSelectsWord' | 'popOnBell' | 'visualBell'): boolean;\n  public getOption(key: 'cols' | 'fontSize' | 'letterSpacing' | 'lineHeight' | 'rows' | 'tabStopWidth' | 'scrollback'): number;\n  public getOption(key: 'fontWeight' | 'fontWeightBold'): FontWeight;\n  public getOption(key: string): any;\n  public getOption(key: any): any {\n    return this._core.optionsService.getOption(key);\n  }\n  public setOption(key: 'bellSound' | 'fontFamily' | 'termName' | 'wordSeparator', value: string): void;\n  public setOption(key: 'fontWeight' | 'fontWeightBold', value: 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | number): void;\n  public setOption(key: 'logLevel', value: 'debug' | 'info' | 'warn' | 'error' | 'off'): void;\n  public setOption(key: 'bellStyle', value: 'none' | 'visual' | 'sound' | 'both'): void;\n  public setOption(key: 'cursorStyle', value: 'block' | 'underline' | 'bar'): void;\n  public setOption(key: 'allowTransparency' | 'altClickMovesCursor' | 'cancelEvents' | 'convertEol' | 'cursorBlink' | 'disableStdin' | 'macOptionIsMeta' | 'rightClickSelectsWord' | 'popOnBell' | 'visualBell', value: boolean): void;\n  public setOption(key: 'fontSize' | 'letterSpacing' | 'lineHeight' | 'tabStopWidth' | 'scrollback', value: number): void;\n  public setOption(key: 'theme', value: ITheme): void;\n  public setOption(key: 'cols' | 'rows', value: number): void;\n  public setOption(key: string, value: any): void;\n  public setOption(key: any, value: any): void {\n    this._checkReadonlyOptions(key);\n    this._core.optionsService.setOption(key, value);\n  }\n  public refresh(start: number, end: number): void {\n    this._verifyIntegers(start, end);\n    this._core.refresh(start, end);\n  }\n  public reset(): void {\n    this._core.reset();\n  }\n  public clearTextureAtlas(): void {\n    this._core.clearTextureAtlas();\n  }\n  public loadAddon(addon: ITerminalAddon): void {\n    return this._addonManager.loadAddon(this, addon);\n  }\n  public static get strings(): ILocalizableStrings {\n    return Strings;\n  }\n\n  private _verifyIntegers(...values: number[]): void {\n    for (const value of values) {\n      if (value === Infinity || isNaN(value) || value % 1 !== 0) {\n        throw new Error('This API only accepts integers');\n      }\n    }\n  }\n\n  private _verifyPositiveIntegers(...values: number[]): void {\n    for (const value of values) {\n      if (value && (value === Infinity || isNaN(value) || value % 1 !== 0 || value < 0)) {\n        throw new Error('This API only accepts positive integers');\n      }\n    }\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDimensions, IRenderLayer } from 'browser/renderer/Types';\nimport { ICellData, IColor } from 'common/Types';\nimport { DEFAULT_COLOR, WHITESPACE_CELL_CHAR, WHITESPACE_CELL_CODE, Attributes } from 'common/buffer/Constants';\nimport { IGlyphIdentifier } from 'browser/renderer/atlas/Types';\nimport { DIM_OPACITY, INVERTED_DEFAULT_COLOR, TEXT_BASELINE } from 'browser/renderer/atlas/Constants';\nimport { BaseCharAtlas } from 'browser/renderer/atlas/BaseCharAtlas';\nimport { acquireCharAtlas } from 'browser/renderer/atlas/CharAtlasCache';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { IColorSet } from 'browser/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferService, IDecorationService, IOptionsService } from 'common/services/Services';\nimport { excludeFromContrastRatioDemands, throwIfFalsy } from 'browser/renderer/RendererUtils';\nimport { channels, color, rgba } from 'common/Color';\nimport { removeElementFromParent } from 'browser/Dom';\nimport { tryDrawCustomChar } from 'browser/renderer/CustomGlyphs';\n\nexport abstract class BaseRenderLayer implements IRenderLayer {\n  private _canvas: HTMLCanvasElement;\n  protected _ctx!: CanvasRenderingContext2D;\n  private _scaledCharWidth: number = 0;\n  private _scaledCharHeight: number = 0;\n  private _scaledCellWidth: number = 0;\n  private _scaledCellHeight: number = 0;\n  private _scaledCharLeft: number = 0;\n  private _scaledCharTop: number = 0;\n\n  private _selectionStart: [number, number] | undefined;\n  private _selectionEnd: [number, number] | undefined;\n  private _columnSelectMode: boolean = false;\n\n  protected _charAtlas: BaseCharAtlas | undefined;\n\n  /**\n   * An object that's reused when drawing glyphs in order to reduce GC.\n   */\n  private _currentGlyphIdentifier: IGlyphIdentifier = {\n    chars: '',\n    code: 0,\n    bg: 0,\n    fg: 0,\n    bold: false,\n    dim: false,\n    italic: false\n  };\n\n  constructor(\n    private _container: HTMLElement,\n    id: string,\n    zIndex: number,\n    private _alpha: boolean,\n    protected _colors: IColorSet,\n    private _rendererId: number,\n    protected readonly _bufferService: IBufferService,\n    protected readonly _optionsService: IOptionsService,\n    protected readonly _decorationService: IDecorationService\n  ) {\n    this._canvas = document.createElement('canvas');\n    this._canvas.classList.add(`xterm-${id}-layer`);\n    this._canvas.style.zIndex = zIndex.toString();\n    this._initCanvas();\n    this._container.appendChild(this._canvas);\n  }\n\n  public dispose(): void {\n    removeElementFromParent(this._canvas);\n    this._charAtlas?.dispose();\n  }\n\n  private _initCanvas(): void {\n    this._ctx = throwIfFalsy(this._canvas.getContext('2d', { alpha: this._alpha }));\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n  }\n\n  public onOptionsChanged(): void {}\n  public onBlur(): void {}\n  public onFocus(): void {}\n  public onCursorMove(): void {}\n  public onGridChanged(startRow: number, endRow: number): void {}\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {\n    this._selectionStart = start;\n    this._selectionEnd = end;\n    this._columnSelectMode = columnSelectMode;\n  }\n\n  public setColors(colorSet: IColorSet): void {\n    this._refreshCharAtlas(colorSet);\n  }\n\n  protected _setTransparency(alpha: boolean): void {\n    // Do nothing when alpha doesn't change\n    if (alpha === this._alpha) {\n      return;\n    }\n\n    // Create new canvas and replace old one\n    const oldCanvas = this._canvas;\n    this._alpha = alpha;\n    // Cloning preserves properties\n    this._canvas = this._canvas.cloneNode() as HTMLCanvasElement;\n    this._initCanvas();\n    this._container.replaceChild(this._canvas, oldCanvas);\n\n    // Regenerate char atlas and force a full redraw\n    this._refreshCharAtlas(this._colors);\n    this.onGridChanged(0, this._bufferService.rows - 1);\n  }\n\n  /**\n   * Refreshes the char atlas, aquiring a new one if necessary.\n   * @param colorSet The color set to use for the char atlas.\n   */\n  private _refreshCharAtlas(colorSet: IColorSet): void {\n    if (this._scaledCharWidth <= 0 && this._scaledCharHeight <= 0) {\n      return;\n    }\n    this._charAtlas = acquireCharAtlas(this._optionsService.rawOptions, this._rendererId, colorSet, this._scaledCharWidth, this._scaledCharHeight);\n    this._charAtlas.warmUp();\n  }\n\n  public resize(dim: IRenderDimensions): void {\n    this._scaledCellWidth = dim.scaledCellWidth;\n    this._scaledCellHeight = dim.scaledCellHeight;\n    this._scaledCharWidth = dim.scaledCharWidth;\n    this._scaledCharHeight = dim.scaledCharHeight;\n    this._scaledCharLeft = dim.scaledCharLeft;\n    this._scaledCharTop = dim.scaledCharTop;\n    this._canvas.width = dim.scaledCanvasWidth;\n    this._canvas.height = dim.scaledCanvasHeight;\n    this._canvas.style.width = `${dim.canvasWidth}px`;\n    this._canvas.style.height = `${dim.canvasHeight}px`;\n\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n\n    this._refreshCharAtlas(this._colors);\n  }\n\n  public abstract reset(): void;\n\n  public clearTextureAtlas(): void {\n    this._charAtlas?.clear();\n  }\n\n  /**\n   * Fills 1+ cells completely. This uses the existing fillStyle on the context.\n   * @param x The column to start at.\n   * @param y The row to start at\n   * @param width The number of columns to fill.\n   * @param height The number of rows to fill.\n   */\n  protected _fillCells(x: number, y: number, width: number, height: number): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      y * this._scaledCellHeight,\n      width * this._scaledCellWidth,\n      height * this._scaledCellHeight);\n  }\n\n  /**\n     * Fills a 1px line (2px on HDPI) at the middle of the cell. This uses the\n     * existing fillStyle on the context.\n     * @param x The column to fill.\n     * @param y The row to fill.\n     */\n  protected _fillMiddleLineAtCells(x: number, y: number, width: number = 1): void {\n    const cellOffset = Math.ceil(this._scaledCellHeight * 0.5);\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      (y + 1) * this._scaledCellHeight - cellOffset - window.devicePixelRatio,\n      width * this._scaledCellWidth,\n      window.devicePixelRatio);\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the bottom of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillBottomLineAtCells(x: number, y: number, width: number = 1): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      (y + 1) * this._scaledCellHeight - window.devicePixelRatio - 1 /* Ensure it's drawn within the cell */,\n      width * this._scaledCellWidth,\n      window.devicePixelRatio);\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the left of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillLeftLineAtCell(x: number, y: number, width: number): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      y * this._scaledCellHeight,\n      window.devicePixelRatio * width,\n      this._scaledCellHeight);\n  }\n\n  /**\n   * Strokes a 1px rectangle (2px on HDPI) around a cell. This uses the existing\n   * strokeStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _strokeRectAtCell(x: number, y: number, width: number, height: number): void {\n    this._ctx.lineWidth = window.devicePixelRatio;\n    this._ctx.strokeRect(\n      x * this._scaledCellWidth + window.devicePixelRatio / 2,\n      y * this._scaledCellHeight + (window.devicePixelRatio / 2),\n      width * this._scaledCellWidth - window.devicePixelRatio,\n      (height * this._scaledCellHeight) - window.devicePixelRatio);\n  }\n\n  /**\n   * Clears the entire canvas.\n   */\n  protected _clearAll(): void {\n    if (this._alpha) {\n      this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    } else {\n      this._ctx.fillStyle = this._colors.background.css;\n      this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\n    }\n  }\n\n  /**\n   * Clears 1+ cells completely.\n   * @param x The column to start at.\n   * @param y The row to start at.\n   * @param width The number of columns to clear.\n   * @param height The number of rows to clear.\n   */\n  protected _clearCells(x: number, y: number, width: number, height: number): void {\n    if (this._alpha) {\n      this._ctx.clearRect(\n        x * this._scaledCellWidth,\n        y * this._scaledCellHeight,\n        width * this._scaledCellWidth,\n        height * this._scaledCellHeight);\n    } else {\n      this._ctx.fillStyle = this._colors.background.css;\n      this._ctx.fillRect(\n        x * this._scaledCellWidth,\n        y * this._scaledCellHeight,\n        width * this._scaledCellWidth,\n        height * this._scaledCellHeight);\n    }\n  }\n\n  /**\n   * Draws a truecolor character at the cell. The character will be clipped to\n   * ensure that it fits with the cell, including the cell to the right if it's\n   * a wide character. This uses the existing fillStyle on the context.\n   * @param cell The cell data for the character to draw.\n   * @param x The column to draw at.\n   * @param y The row to draw at.\n   * @param color The color of the character.\n   */\n  protected _fillCharTrueColor(cell: CellData, x: number, y: number): void {\n    this._ctx.font = this._getFont(false, false);\n    this._ctx.textBaseline = TEXT_BASELINE;\n    this._clipRow(y);\n\n    // Draw custom characters if applicable\n    let drawSuccess = false;\n    if (this._optionsService.rawOptions.customGlyphs !== false) {\n      drawSuccess = tryDrawCustomChar(this._ctx, cell.getChars(), x * this._scaledCellWidth, y * this._scaledCellHeight, this._scaledCellWidth, this._scaledCellHeight);\n    }\n\n    // Draw the character\n    if (!drawSuccess) {\n      this._ctx.fillText(\n        cell.getChars(),\n        x * this._scaledCellWidth + this._scaledCharLeft,\n        y * this._scaledCellHeight + this._scaledCharTop + this._scaledCharHeight);\n    }\n  }\n\n  /**\n   * Draws one or more characters at a cell. If possible this will draw using\n   * the character atlas to reduce draw time.\n   * @param chars The character or characters.\n   * @param code The character code.\n   * @param width The width of the characters.\n   * @param x The column to draw at.\n   * @param y The row to draw at.\n   * @param fg The foreground color, in the format stored within the attributes.\n   * @param bg The background color, in the format stored within the attributes.\n   * This is used to validate whether a cached image can be used.\n   * @param bold Whether the text is bold.\n   */\n  protected _drawChars(cell: ICellData, x: number, y: number): void {\n    const contrastColor = this._getContrastColor(cell, x, y);\n\n    // skip cache right away if we draw in RGB\n    // Note: to avoid bad runtime JoinedCellData will be skipped\n    //       in the cache handler itself (atlasDidDraw == false) and\n    //       fall through to uncached later down below\n    if (contrastColor || cell.isFgRGB() || cell.isBgRGB()) {\n      this._drawUncachedChars(cell, x, y, contrastColor);\n      return;\n    }\n\n    let fg;\n    let bg;\n    if (cell.isInverse()) {\n      fg = (cell.isBgDefault()) ? INVERTED_DEFAULT_COLOR : cell.getBgColor();\n      bg = (cell.isFgDefault()) ? INVERTED_DEFAULT_COLOR : cell.getFgColor();\n    } else {\n      bg = (cell.isBgDefault()) ? DEFAULT_COLOR : cell.getBgColor();\n      fg = (cell.isFgDefault()) ? DEFAULT_COLOR : cell.getFgColor();\n    }\n\n    const drawInBrightColor = this._optionsService.rawOptions.drawBoldTextInBrightColors && cell.isBold() && fg < 8;\n\n    fg += drawInBrightColor ? 8 : 0;\n    this._currentGlyphIdentifier.chars = cell.getChars() || WHITESPACE_CELL_CHAR;\n    this._currentGlyphIdentifier.code = cell.getCode() || WHITESPACE_CELL_CODE;\n    this._currentGlyphIdentifier.bg = bg;\n    this._currentGlyphIdentifier.fg = fg;\n    this._currentGlyphIdentifier.bold = !!cell.isBold();\n    this._currentGlyphIdentifier.dim = !!cell.isDim();\n    this._currentGlyphIdentifier.italic = !!cell.isItalic();\n\n    // Don't try cache the glyph if it uses any decoration foreground/background override.\n    let hasOverrides = false;\n    for (const d of this._decorationService.getDecorationsAtCell(x, y)) {\n      if (d.backgroundColorRGB || d.foregroundColorRGB) {\n        hasOverrides = true;\n        break;\n      }\n    }\n\n    const atlasDidDraw = hasOverrides ? false : this._charAtlas?.draw(this._ctx, this._currentGlyphIdentifier, x * this._scaledCellWidth + this._scaledCharLeft, y * this._scaledCellHeight + this._scaledCharTop);\n\n    if (!atlasDidDraw) {\n      this._drawUncachedChars(cell, x, y);\n    }\n  }\n\n  /**\n   * Draws one or more characters at one or more cells. The character(s) will be\n   * clipped to ensure that they fit with the cell(s), including the cell to the\n   * right if the last character is a wide character.\n   * @param chars The character.\n   * @param width The width of the character.\n   * @param fg The foreground color, in the format stored within the attributes.\n   * @param x The column to draw at.\n   * @param y The row to draw at.\n   */\n  private _drawUncachedChars(cell: ICellData, x: number, y: number, fgOverride?: IColor): void {\n    this._ctx.save();\n    this._ctx.font = this._getFont(!!cell.isBold(), !!cell.isItalic());\n    this._ctx.textBaseline = TEXT_BASELINE;\n\n    if (cell.isInverse()) {\n      if (fgOverride) {\n        this._ctx.fillStyle = fgOverride.css;\n      } else if (cell.isBgDefault()) {\n        this._ctx.fillStyle = color.opaque(this._colors.background).css;\n      } else if (cell.isBgRGB()) {\n        this._ctx.fillStyle = `rgb(${AttributeData.toColorRGB(cell.getBgColor()).join(',')})`;\n      } else {\n        let bg = cell.getBgColor();\n        if (this._optionsService.rawOptions.drawBoldTextInBrightColors && cell.isBold() && bg < 8) {\n          bg += 8;\n        }\n        this._ctx.fillStyle = this._colors.ansi[bg].css;\n      }\n    } else {\n      if (fgOverride) {\n        this._ctx.fillStyle = fgOverride.css;\n      } else if (cell.isFgDefault()) {\n        this._ctx.fillStyle = this._colors.foreground.css;\n      } else if (cell.isFgRGB()) {\n        this._ctx.fillStyle = `rgb(${AttributeData.toColorRGB(cell.getFgColor()).join(',')})`;\n      } else {\n        let fg = cell.getFgColor();\n        if (this._optionsService.rawOptions.drawBoldTextInBrightColors && cell.isBold() && fg < 8) {\n          fg += 8;\n        }\n        this._ctx.fillStyle = this._colors.ansi[fg].css;\n      }\n    }\n\n    this._clipRow(y);\n\n    // Apply alpha to dim the character\n    if (cell.isDim()) {\n      this._ctx.globalAlpha = DIM_OPACITY;\n    }\n\n    // Draw custom characters if applicable\n    let drawSuccess = false;\n    if (this._optionsService.rawOptions.customGlyphs !== false) {\n      drawSuccess = tryDrawCustomChar(this._ctx, cell.getChars(), x * this._scaledCellWidth, y * this._scaledCellHeight, this._scaledCellWidth, this._scaledCellHeight);\n    }\n\n    // Draw the character\n    if (!drawSuccess) {\n      this._ctx.fillText(\n        cell.getChars(),\n        x * this._scaledCellWidth + this._scaledCharLeft,\n        y * this._scaledCellHeight + this._scaledCharTop + this._scaledCharHeight);\n    }\n\n    this._ctx.restore();\n  }\n\n\n  /**\n   * Clips a row to ensure no pixels will be drawn outside the cells in the row.\n   * @param y The row to clip.\n   */\n  private _clipRow(y: number): void {\n    this._ctx.beginPath();\n    this._ctx.rect(\n      0,\n      y * this._scaledCellHeight,\n      this._bufferService.cols * this._scaledCellWidth,\n      this._scaledCellHeight);\n    this._ctx.clip();\n  }\n\n  /**\n   * Gets the current font.\n   * @param isBold If we should use the bold fontWeight.\n   */\n  protected _getFont(isBold: boolean, isItalic: boolean): string {\n    const fontWeight = isBold ? this._optionsService.rawOptions.fontWeightBold : this._optionsService.rawOptions.fontWeight;\n    const fontStyle = isItalic ? 'italic' : '';\n\n    return `${fontStyle} ${fontWeight} ${this._optionsService.rawOptions.fontSize * window.devicePixelRatio}px ${this._optionsService.rawOptions.fontFamily}`;\n  }\n\n  private _getContrastColor(cell: CellData, x: number, y: number): IColor | undefined {\n    // Get any decoration foreground/background overrides, this must be fetched before the early\n    // exist but applied after inverse\n    let bgOverride: number | undefined;\n    let fgOverride: number | undefined;\n    let isTop = false;\n    for (const d of this._decorationService.getDecorationsAtCell(x, y)) {\n      if (d.options.layer !== 'top' && isTop) {\n        continue;\n      }\n      if (d.backgroundColorRGB) {\n        bgOverride = d.backgroundColorRGB.rgba;\n      }\n      if (d.foregroundColorRGB) {\n        fgOverride = d.foregroundColorRGB.rgba;\n      }\n      isTop = d.options.layer === 'top';\n    }\n\n    // Apply selection foreground if applicable\n    if (!isTop) {\n      if (this._colors.selectionForeground && this._isCellInSelection(x, y)) {\n        fgOverride = this._colors.selectionForeground.rgba;\n      }\n    }\n\n    if (!bgOverride && !fgOverride && (this._optionsService.rawOptions.minimumContrastRatio === 1 || excludeFromContrastRatioDemands(cell.getCode()))) {\n      return undefined;\n    }\n\n    if (!bgOverride && !fgOverride) {\n      // Try get from cache\n      const adjustedColor = this._colors.contrastCache.getColor(cell.bg, cell.fg);\n      if (adjustedColor !== undefined) {\n        return adjustedColor || undefined;\n      }\n    }\n\n    let fgColor = cell.getFgColor();\n    let fgColorMode = cell.getFgColorMode();\n    let bgColor = cell.getBgColor();\n    let bgColorMode = cell.getBgColorMode();\n    const isInverse = !!cell.isInverse();\n    const isBold = !!cell.isInverse();\n    if (isInverse) {\n      const temp = fgColor;\n      fgColor = bgColor;\n      bgColor = temp;\n      const temp2 = fgColorMode;\n      fgColorMode = bgColorMode;\n      bgColorMode = temp2;\n    }\n\n    const bgRgba = this._resolveBackgroundRgba(bgOverride !== undefined ? Attributes.CM_RGB : bgColorMode, bgOverride ?? bgColor, isInverse);\n    const fgRgba = this._resolveForegroundRgba(fgColorMode, fgColor, isInverse, isBold);\n    let result = rgba.ensureContrastRatio(bgOverride ?? bgRgba, fgOverride ?? fgRgba, this._optionsService.rawOptions.minimumContrastRatio);\n\n    if (!result) {\n      if (!fgOverride) {\n        this._colors.contrastCache.setColor(cell.bg, cell.fg, null);\n        return undefined;\n      }\n      // If it was an override and there was no contrast change, set as the result\n      result = fgOverride;\n    }\n\n    const color: IColor = {\n      css: channels.toCss(\n        (result >> 24) & 0xFF,\n        (result >> 16) & 0xFF,\n        (result >> 8) & 0xFF\n      ),\n      rgba: result\n    };\n    if (!bgOverride && !fgOverride) {\n      this._colors.contrastCache.setColor(cell.bg, cell.fg, color);\n    }\n\n    return color;\n  }\n\n  private _resolveBackgroundRgba(bgColorMode: number, bgColor: number, inverse: boolean): number {\n    switch (bgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        return this._colors.ansi[bgColor].rgba;\n      case Attributes.CM_RGB:\n        return bgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._colors.foreground.rgba;\n        }\n        return this._colors.background.rgba;\n    }\n  }\n\n  private _resolveForegroundRgba(fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): number {\n    switch (fgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        if (this._optionsService.rawOptions.drawBoldTextInBrightColors && bold && fgColor < 8) {\n          fgColor += 8;\n        }\n        return this._colors.ansi[fgColor].rgba;\n      case Attributes.CM_RGB:\n        return fgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._colors.background.rgba;\n        }\n        return this._colors.foreground.rgba;\n    }\n  }\n\n  private _isCellInSelection(x: number, y: number): boolean {\n    const start = this._selectionStart;\n    const end = this._selectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    if (this._columnSelectMode) {\n      return x >= start[0] && y >= start[1] &&\n        x < end[0] && y < end[1];\n    }\n    return (y > start[1] && y < end[1]) ||\n        (start[1] === end[1] && y === start[1] && x >= start[0] && x < end[0]) ||\n        (start[1] < end[1] && y === end[1] && x < end[0]) ||\n        (start[1] < end[1] && y === start[1] && x >= start[0]);\n  }\n}\n\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDimensions, IRequestRedrawEvent } from 'browser/renderer/Types';\nimport { BaseRenderLayer } from 'browser/renderer/BaseRenderLayer';\nimport { ICellData } from 'common/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { IColorSet } from 'browser/Types';\nimport { IBufferService, IOptionsService, ICoreService, IDecorationService } from 'common/services/Services';\nimport { IEventEmitter } from 'common/EventEmitter';\nimport { ICoreBrowserService } from 'browser/services/Services';\n\ninterface ICursorState {\n  x: number;\n  y: number;\n  isFocused: boolean;\n  style: string;\n  width: number;\n}\n\n/**\n * The time between cursor blinks.\n */\nconst BLINK_INTERVAL = 600;\n\nexport class CursorRenderLayer extends BaseRenderLayer {\n  private _state: ICursorState;\n  private _cursorRenderers: {[key: string]: (x: number, y: number, cell: ICellData) => void};\n  private _cursorBlinkStateManager: CursorBlinkStateManager | undefined;\n  private _cell: ICellData = new CellData();\n\n  constructor(\n    container: HTMLElement,\n    zIndex: number,\n    colors: IColorSet,\n    rendererId: number,\n    private _onRequestRedraw: IEventEmitter<IRequestRedrawEvent>,\n    @IBufferService bufferService: IBufferService,\n    @IOptionsService optionsService: IOptionsService,\n    @ICoreService private readonly _coreService: ICoreService,\n    @ICoreBrowserService private readonly _coreBrowserService: ICoreBrowserService,\n    @IDecorationService decorationService: IDecorationService\n  ) {\n    super(container, 'cursor', zIndex, true, colors, rendererId, bufferService, optionsService, decorationService);\n    this._state = {\n      x: 0,\n      y: 0,\n      isFocused: false,\n      style: '',\n      width: 0\n    };\n    this._cursorRenderers = {\n      'bar': this._renderBarCursor.bind(this),\n      'block': this._renderBlockCursor.bind(this),\n      'underline': this._renderUnderlineCursor.bind(this)\n    };\n  }\n\n  public dispose(): void {\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.dispose();\n      this._cursorBlinkStateManager = undefined;\n    }\n    super.dispose();\n  }\n\n  public resize(dim: IRenderDimensions): void {\n    super.resize(dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = {\n      x: 0,\n      y: 0,\n      isFocused: false,\n      style: '',\n      width: 0\n    };\n  }\n\n  public reset(): void {\n    this._clearCursor();\n    this._cursorBlinkStateManager?.restartBlinkAnimation();\n    this.onOptionsChanged();\n  }\n\n  public onBlur(): void {\n    this._cursorBlinkStateManager?.pause();\n    this._onRequestRedraw.fire({ start: this._bufferService.buffer.y, end: this._bufferService.buffer.y });\n  }\n\n  public onFocus(): void {\n    this._cursorBlinkStateManager?.resume();\n    this._onRequestRedraw.fire({ start: this._bufferService.buffer.y, end: this._bufferService.buffer.y });\n  }\n\n  public onOptionsChanged(): void {\n    if (this._optionsService.rawOptions.cursorBlink) {\n      if (!this._cursorBlinkStateManager) {\n        this._cursorBlinkStateManager = new CursorBlinkStateManager(this._coreBrowserService.isFocused, () => {\n          this._render(true);\n        });\n      }\n    } else {\n      this._cursorBlinkStateManager?.dispose();\n      this._cursorBlinkStateManager = undefined;\n    }\n    // Request a refresh from the terminal as management of rendering is being\n    // moved back to the terminal\n    this._onRequestRedraw.fire({ start: this._bufferService.buffer.y, end: this._bufferService.buffer.y });\n  }\n\n  public onCursorMove(): void {\n    this._cursorBlinkStateManager?.restartBlinkAnimation();\n  }\n\n  public onGridChanged(startRow: number, endRow: number): void {\n    if (!this._cursorBlinkStateManager || this._cursorBlinkStateManager.isPaused) {\n      this._render(false);\n    } else {\n      this._cursorBlinkStateManager.restartBlinkAnimation();\n    }\n  }\n\n  private _render(triggeredByAnimationFrame: boolean): void {\n    // Don't draw the cursor if it's hidden\n    if (!this._coreService.isCursorInitialized || this._coreService.isCursorHidden) {\n      this._clearCursor();\n      return;\n    }\n\n    const cursorY = this._bufferService.buffer.ybase + this._bufferService.buffer.y;\n    const viewportRelativeCursorY = cursorY - this._bufferService.buffer.ydisp;\n\n    // Don't draw the cursor if it's off-screen\n    if (viewportRelativeCursorY < 0 || viewportRelativeCursorY >= this._bufferService.rows) {\n      this._clearCursor();\n      return;\n    }\n\n    // in case cursor.x == cols adjust visual cursor to cols - 1\n    const cursorX = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1);\n    this._bufferService.buffer.lines.get(cursorY)!.loadCell(cursorX, this._cell);\n    if (this._cell.content === undefined) {\n      return;\n    }\n\n    if (!this._coreBrowserService.isFocused) {\n      this._clearCursor();\n      this._ctx.save();\n      this._ctx.fillStyle = this._colors.cursor.css;\n      const cursorStyle = this._optionsService.rawOptions.cursorStyle;\n      if (cursorStyle && cursorStyle !== 'block') {\n        this._cursorRenderers[cursorStyle](cursorX, viewportRelativeCursorY, this._cell);\n      } else {\n        this._renderBlurCursor(cursorX, viewportRelativeCursorY, this._cell);\n      }\n      this._ctx.restore();\n      this._state.x = cursorX;\n      this._state.y = viewportRelativeCursorY;\n      this._state.isFocused = false;\n      this._state.style = cursorStyle;\n      this._state.width = this._cell.getWidth();\n      return;\n    }\n\n    // Don't draw the cursor if it's blinking\n    if (this._cursorBlinkStateManager && !this._cursorBlinkStateManager.isCursorVisible) {\n      this._clearCursor();\n      return;\n    }\n\n    if (this._state) {\n      // The cursor is already in the correct spot, don't redraw\n      if (this._state.x === cursorX &&\n          this._state.y === viewportRelativeCursorY &&\n          this._state.isFocused === this._coreBrowserService.isFocused &&\n          this._state.style === this._optionsService.rawOptions.cursorStyle &&\n          this._state.width === this._cell.getWidth()) {\n        return;\n      }\n      this._clearCursor();\n    }\n\n    this._ctx.save();\n    this._cursorRenderers[this._optionsService.rawOptions.cursorStyle || 'block'](cursorX, viewportRelativeCursorY, this._cell);\n    this._ctx.restore();\n\n    this._state.x = cursorX;\n    this._state.y = viewportRelativeCursorY;\n    this._state.isFocused = false;\n    this._state.style = this._optionsService.rawOptions.cursorStyle;\n    this._state.width = this._cell.getWidth();\n  }\n\n  private _clearCursor(): void {\n    if (this._state) {\n      // Avoid potential rounding errors when device pixel ratio is less than 1\n      if (window.devicePixelRatio < 1) {\n        this._clearAll();\n      } else {\n        this._clearCells(this._state.x, this._state.y, this._state.width, 1);\n      }\n      this._state = {\n        x: 0,\n        y: 0,\n        isFocused: false,\n        style: '',\n        width: 0\n      };\n    }\n  }\n\n  private _renderBarCursor(x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillLeftLineAtCell(x, y, this._optionsService.rawOptions.cursorWidth);\n    this._ctx.restore();\n  }\n\n  private _renderBlockCursor(x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillCells(x, y, cell.getWidth(), 1);\n    this._ctx.fillStyle = this._colors.cursorAccent.css;\n    this._fillCharTrueColor(cell, x, y);\n    this._ctx.restore();\n  }\n\n  private _renderUnderlineCursor(x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillBottomLineAtCells(x, y);\n    this._ctx.restore();\n  }\n\n  private _renderBlurCursor(x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.strokeStyle = this._colors.cursor.css;\n    this._strokeRectAtCell(x, y, cell.getWidth(), 1);\n    this._ctx.restore();\n  }\n}\n\nclass CursorBlinkStateManager {\n  public isCursorVisible: boolean;\n\n  private _animationFrame: number | undefined;\n  private _blinkStartTimeout: number | undefined;\n  private _blinkInterval: number | undefined;\n\n  /**\n   * The time at which the animation frame was restarted, this is used on the\n   * next render to restart the timers so they don't need to restart the timers\n   * multiple times over a short period.\n   */\n  private _animationTimeRestarted: number | undefined;\n\n  constructor(\n    isFocused: boolean,\n    private _renderCallback: () => void\n  ) {\n    this.isCursorVisible = true;\n    if (isFocused) {\n      this._restartInterval();\n    }\n  }\n\n  public get isPaused(): boolean { return !(this._blinkStartTimeout || this._blinkInterval); }\n\n  public dispose(): void {\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public restartBlinkAnimation(): void {\n    if (this.isPaused) {\n      return;\n    }\n    // Save a timestamp so that the restart can be done on the next interval\n    this._animationTimeRestarted = Date.now();\n    // Force a cursor render to ensure it's visible and in the correct position\n    this.isCursorVisible = true;\n    if (!this._animationFrame) {\n      this._animationFrame = window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n    }\n  }\n\n  private _restartInterval(timeToStart: number = BLINK_INTERVAL): void {\n    // Clear any existing interval\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n\n    // Setup the initial timeout which will hide the cursor, this is done before\n    // the regular interval is setup in order to support restarting the blink\n    // animation in a lightweight way (without thrashing clearInterval and\n    // setInterval).\n    this._blinkStartTimeout = window.setTimeout(() => {\n      // Check if another animation restart was requested while this was being\n      // started\n      if (this._animationTimeRestarted) {\n        const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n        this._animationTimeRestarted = undefined;\n        if (time > 0) {\n          this._restartInterval(time);\n          return;\n        }\n      }\n\n      // Hide the cursor\n      this.isCursorVisible = false;\n      this._animationFrame = window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n\n      // Setup the blink interval\n      this._blinkInterval = window.setInterval(() => {\n        // Adjust the animation time if it was restarted\n        if (this._animationTimeRestarted) {\n          // calc time diff\n          // Make restart interval do a setTimeout initially?\n          const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n          this._animationTimeRestarted = undefined;\n          this._restartInterval(time);\n          return;\n        }\n\n        // Invert visibility and render\n        this.isCursorVisible = !this.isCursorVisible;\n        this._animationFrame = window.requestAnimationFrame(() => {\n          this._renderCallback();\n          this._animationFrame = undefined;\n        });\n      }, BLINK_INTERVAL);\n    }, timeToStart);\n  }\n\n  public pause(): void {\n    this.isCursorVisible = true;\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public resume(): void {\n    // Clear out any existing timers just in case\n    this.pause();\n\n    this._animationTimeRestarted = undefined;\n    this._restartInterval();\n    this.restartBlinkAnimation();\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { throwIfFalsy } from 'browser/renderer/RendererUtils';\n\ninterface IBlockVector {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n}\n\nexport const blockElementDefinitions: { [index: string]: IBlockVector[] | undefined } = {\n  // Block elements (0x2580-0x2590)\n  '▀': [{ x: 0, y: 0, w: 8, h: 4 }], // UPPER HALF BLOCK\n  '▁': [{ x: 0, y: 7, w: 8, h: 1 }], // LOWER ONE EIGHTH BLOCK\n  '▂': [{ x: 0, y: 6, w: 8, h: 2 }], // LOWER ONE QUARTER BLOCK\n  '▃': [{ x: 0, y: 5, w: 8, h: 3 }], // LOWER THREE EIGHTHS BLOCK\n  '▄': [{ x: 0, y: 4, w: 8, h: 4 }], // LOWER HALF BLOCK\n  '▅': [{ x: 0, y: 3, w: 8, h: 5 }], // LOWER FIVE EIGHTHS BLOCK\n  '▆': [{ x: 0, y: 2, w: 8, h: 6 }], // LOWER THREE QUARTERS BLOCK\n  '▇': [{ x: 0, y: 1, w: 8, h: 7 }], // LOWER SEVEN EIGHTHS BLOCK\n  '█': [{ x: 0, y: 0, w: 8, h: 8 }], // FULL BLOCK\n  '▉': [{ x: 0, y: 0, w: 7, h: 8 }], // LEFT SEVEN EIGHTHS BLOCK\n  '▊': [{ x: 0, y: 0, w: 6, h: 8 }], // LEFT THREE QUARTERS BLOCK\n  '▋': [{ x: 0, y: 0, w: 5, h: 8 }], // LEFT FIVE EIGHTHS BLOCK\n  '▌': [{ x: 0, y: 0, w: 4, h: 8 }], // LEFT HALF BLOCK\n  '▍': [{ x: 0, y: 0, w: 3, h: 8 }], // LEFT THREE EIGHTHS BLOCK\n  '▎': [{ x: 0, y: 0, w: 2, h: 8 }], // LEFT ONE QUARTER BLOCK\n  '▏': [{ x: 0, y: 0, w: 1, h: 8 }], // LEFT ONE EIGHTH BLOCK\n  '▐': [{ x: 4, y: 0, w: 4, h: 8 }], // RIGHT HALF BLOCK\n\n  // Block elements (0x2594-0x2595)\n  '▔': [{ x: 0, y: 0, w: 9, h: 1 }], // UPPER ONE EIGHTH BLOCK\n  '▕': [{ x: 7, y: 0, w: 1, h: 8 }], // RIGHT ONE EIGHTH BLOCK\n\n  // Terminal graphic characters (0x2596-0x259F)\n  '▖': [{ x: 0, y: 4, w: 4, h: 4 }],                             // QUADRANT LOWER LEFT\n  '▗': [{ x: 4, y: 4, w: 4, h: 4 }],                             // QUADRANT LOWER RIGHT\n  '▘': [{ x: 0, y: 0, w: 4, h: 4 }],                             // QUADRANT UPPER LEFT\n  '▙': [{ x: 0, y: 0, w: 4, h: 8 }, { x: 0, y: 4, w: 8, h: 4 }], // QUADRANT UPPER LEFT AND LOWER LEFT AND LOWER RIGHT\n  '▚': [{ x: 0, y: 0, w: 4, h: 4 }, { x: 4, y: 4, w: 4, h: 4 }], // QUADRANT UPPER LEFT AND LOWER RIGHT\n  '▛': [{ x: 0, y: 0, w: 4, h: 8 }, { x: 0, y: 0, w: 4, h: 8 }], // QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER LEFT\n  '▜': [{ x: 0, y: 0, w: 8, h: 4 }, { x: 4, y: 0, w: 4, h: 8 }], // QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER RIGHT\n  '▝': [{ x: 4, y: 0, w: 4, h: 4 }],                             // QUADRANT UPPER RIGHT\n  '▞': [{ x: 4, y: 0, w: 4, h: 4 }, { x: 0, y: 4, w: 4, h: 4 }], // QUADRANT UPPER RIGHT AND LOWER LEFT\n  '▟': [{ x: 4, y: 0, w: 4, h: 8 }, { x: 0, y: 4, w: 8, h: 4 }], // QUADRANT UPPER RIGHT AND LOWER LEFT AND LOWER RIGHT\n\n  // VERTICAL ONE EIGHTH BLOCK-2 through VERTICAL ONE EIGHTH BLOCK-7\n  '\\u{1FB70}': [{ x: 1, y: 0, w: 1, h: 8 }],\n  '\\u{1FB71}': [{ x: 2, y: 0, w: 1, h: 8 }],\n  '\\u{1FB72}': [{ x: 3, y: 0, w: 1, h: 8 }],\n  '\\u{1FB73}': [{ x: 4, y: 0, w: 1, h: 8 }],\n  '\\u{1FB74}': [{ x: 5, y: 0, w: 1, h: 8 }],\n  '\\u{1FB75}': [{ x: 6, y: 0, w: 1, h: 8 }],\n\n  // HORIZONTAL ONE EIGHTH BLOCK-2 through HORIZONTAL ONE EIGHTH BLOCK-7\n  '\\u{1FB76}': [{ x: 0, y: 1, w: 8, h: 1 }],\n  '\\u{1FB77}': [{ x: 0, y: 2, w: 8, h: 1 }],\n  '\\u{1FB78}': [{ x: 0, y: 3, w: 8, h: 1 }],\n  '\\u{1FB79}': [{ x: 0, y: 4, w: 8, h: 1 }],\n  '\\u{1FB7A}': [{ x: 0, y: 5, w: 8, h: 1 }],\n  '\\u{1FB7B}': [{ x: 0, y: 6, w: 8, h: 1 }],\n\n  // LEFT AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB7C}': [{ x: 0, y: 0, w: 1, h: 8 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // LEFT AND UPPER ONE EIGHTH BLOCK\n  '\\u{1FB7D}': [{ x: 0, y: 0, w: 1, h: 8 }, { x: 0, y: 0, w: 8, h: 1 }],\n  // RIGHT AND UPPER ONE EIGHTH BLOCK\n  '\\u{1FB7E}': [{ x: 7, y: 0, w: 1, h: 8 }, { x: 0, y: 0, w: 8, h: 1 }],\n  // RIGHT AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB7F}': [{ x: 7, y: 0, w: 1, h: 8 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // UPPER AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB80}': [{ x: 0, y: 0, w: 8, h: 1 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // HORIZONTAL ONE EIGHTH BLOCK-1358\n  '\\u{1FB81}': [{ x: 0, y: 0, w: 8, h: 1 }, { x: 0, y: 2, w: 8, h: 1 }, { x: 0, y: 4, w: 8, h: 1 }, { x: 0, y: 7, w: 8, h: 1 }],\n\n  // UPPER ONE QUARTER BLOCK\n  '\\u{1FB82}': [{ x: 0, y: 0, w: 8, h: 2 }],\n  // UPPER THREE EIGHTHS BLOCK\n  '\\u{1FB83}': [{ x: 0, y: 0, w: 8, h: 3 }],\n  // UPPER FIVE EIGHTHS BLOCK\n  '\\u{1FB84}': [{ x: 0, y: 0, w: 8, h: 5 }],\n  // UPPER THREE QUARTERS BLOCK\n  '\\u{1FB85}': [{ x: 0, y: 0, w: 8, h: 6 }],\n  // UPPER SEVEN EIGHTHS BLOCK\n  '\\u{1FB86}': [{ x: 0, y: 0, w: 8, h: 7 }],\n\n  // RIGHT ONE QUARTER BLOCK\n  '\\u{1FB87}': [{ x: 6, y: 0, w: 2, h: 8 }],\n  // RIGHT THREE EIGHTHS B0OCK\n  '\\u{1FB88}': [{ x: 5, y: 0, w: 3, h: 8 }],\n  // RIGHT FIVE EIGHTHS BL0CK\n  '\\u{1FB89}': [{ x: 3, y: 0, w: 5, h: 8 }],\n  // RIGHT THREE QUARTERS 0LOCK\n  '\\u{1FB8A}': [{ x: 2, y: 0, w: 6, h: 8 }],\n  // RIGHT SEVEN EIGHTHS B0OCK\n  '\\u{1FB8B}': [{ x: 1, y: 0, w: 7, h: 8 }],\n\n  // CHECKER BOARD FILL\n  '\\u{1FB95}': [\n    { x: 0, y: 0, w: 2, h: 2 }, { x: 4, y: 0, w: 2, h: 2 },\n    { x: 2, y: 2, w: 2, h: 2 }, { x: 6, y: 2, w: 2, h: 2 },\n    { x: 0, y: 4, w: 2, h: 2 }, { x: 4, y: 4, w: 2, h: 2 },\n    { x: 2, y: 6, w: 2, h: 2 }, { x: 6, y: 6, w: 2, h: 2 }\n  ],\n  // INVERSE CHECKER BOARD FILL\n  '\\u{1FB96}': [\n    { x: 2, y: 0, w: 2, h: 2 }, { x: 6, y: 0, w: 2, h: 2 },\n    { x: 0, y: 2, w: 2, h: 2 }, { x: 4, y: 2, w: 2, h: 2 },\n    { x: 2, y: 4, w: 2, h: 2 }, { x: 6, y: 4, w: 2, h: 2 },\n    { x: 0, y: 6, w: 2, h: 2 }, { x: 4, y: 6, w: 2, h: 2 }\n  ],\n  // HEAVY HORIZONTAL FILL (upper middle and lower one quarter block)\n  '\\u{1FB97}': [{ x: 0, y: 2, w: 8, h: 2 }, { x: 0, y: 6, w: 8, h: 2 }]\n};\n\ntype PatternDefinition = number[][];\n\n/**\n * Defines the repeating pattern used by special characters, the pattern is made up of a 2d array of\n * pixel values to be filled (1) or not filled (0).\n */\nconst patternCharacterDefinitions: { [key: string]: PatternDefinition | undefined } = {\n  // Shade characters (0x2591-0x2593)\n  '░': [ // LIGHT SHADE (25%)\n    [1, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 1, 0],\n    [0, 0, 0, 0]\n  ],\n  '▒': [ // MEDIUM SHADE (50%)\n    [1, 0],\n    [0, 0],\n    [0, 1],\n    [0, 0]\n  ],\n  '▓': [ // DARK SHADE (75%)\n    [0, 1],\n    [1, 1],\n    [1, 0],\n    [1, 1]\n  ]\n};\n\nconst enum Shapes {\n  /** │ */ TOP_TO_BOTTOM = 'M.5,0 L.5,1',\n  /** ─ */ LEFT_TO_RIGHT = 'M0,.5 L1,.5',\n\n  /** └ */ TOP_TO_RIGHT = 'M.5,0 L.5,.5 L1,.5',\n  /** ┘ */ TOP_TO_LEFT = 'M.5,0 L.5,.5 L0,.5',\n  /** ┐ */ LEFT_TO_BOTTOM = 'M0,.5 L.5,.5 L.5,1',\n  /** ┌ */ RIGHT_TO_BOTTOM = 'M0.5,1 L.5,.5 L1,.5',\n\n  /** ╵ */ MIDDLE_TO_TOP = 'M.5,.5 L.5,0',\n  /** ╴ */ MIDDLE_TO_LEFT = 'M.5,.5 L0,.5',\n  /** ╶ */ MIDDLE_TO_RIGHT = 'M.5,.5 L1,.5',\n  /** ╷ */ MIDDLE_TO_BOTTOM = 'M.5,.5 L.5,1',\n\n  /** ┴ */ T_TOP = 'M0,.5 L1,.5 M.5,.5 L.5,0',\n  /** ┤ */ T_LEFT = 'M.5,0 L.5,1 M.5,.5 L0,.5',\n  /** ├ */ T_RIGHT = 'M.5,0 L.5,1 M.5,.5 L1,.5',\n  /** ┬ */ T_BOTTOM = 'M0,.5 L1,.5 M.5,.5 L.5,1',\n\n  /** ┼ */ CROSS = 'M0,.5 L1,.5 M.5,0 L.5,1',\n\n  /** ╌ */ TWO_DASHES_HORIZONTAL = 'M.1,.5 L.4,.5 M.6,.5 L.9,.5', // .2 empty, .3 filled\n  /** ┄ */ THREE_DASHES_HORIZONTAL = 'M.0667,.5 L.2667,.5 M.4,.5 L.6,.5 M.7333,.5 L.9333,.5', // .1333 empty, .2 filled\n  /** ┉ */ FOUR_DASHES_HORIZONTAL = 'M.05,.5 L.2,.5 M.3,.5 L.45,.5 M.55,.5 L.7,.5 M.8,.5 L.95,.5', // .1 empty, .15 filled\n  /** ╎ */ TWO_DASHES_VERTICAL = 'M.5,.1 L.5,.4 M.5,.6 L.5,.9',\n  /** ┆ */ THREE_DASHES_VERTICAL = 'M.5,.0667 L.5,.2667 M.5,.4 L.5,.6 M.5,.7333 L.5,.9333',\n  /** ┊ */ FOUR_DASHES_VERTICAL = 'M.5,.05 L.5,.2 M.5,.3 L.5,.45 L.5,.55 M.5,.7 L.5,.95',\n}\n\nconst enum Style {\n  NORMAL = 1,\n  BOLD = 3\n}\n\n/**\n * This contains the definitions of all box drawing characters in the format of SVG paths (ie. the\n * svg d attribute).\n */\nexport const boxDrawingDefinitions: { [character: string]: { [fontWeight: number]: string | ((xp: number, yp: number) => string) } | undefined } = {\n  // Uniform normal and bold\n  '─': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT },\n  '━': { [Style.BOLD]:   Shapes.LEFT_TO_RIGHT },\n  '│': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM },\n  '┃': { [Style.BOLD]:   Shapes.TOP_TO_BOTTOM },\n  '┌': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM },\n  '┏': { [Style.BOLD]:   Shapes.RIGHT_TO_BOTTOM },\n  '┐': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM },\n  '┓': { [Style.BOLD]:   Shapes.LEFT_TO_BOTTOM },\n  '└': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT },\n  '┗': { [Style.BOLD]:   Shapes.TOP_TO_RIGHT },\n  '┘': { [Style.NORMAL]: Shapes.TOP_TO_LEFT },\n  '┛': { [Style.BOLD]:   Shapes.TOP_TO_LEFT },\n  '├': { [Style.NORMAL]: Shapes.T_RIGHT },\n  '┣': { [Style.BOLD]:   Shapes.T_RIGHT },\n  '┤': { [Style.NORMAL]: Shapes.T_LEFT },\n  '┫': { [Style.BOLD]:   Shapes.T_LEFT },\n  '┬': { [Style.NORMAL]: Shapes.T_BOTTOM },\n  '┳': { [Style.BOLD]:   Shapes.T_BOTTOM },\n  '┴': { [Style.NORMAL]: Shapes.T_TOP },\n  '┻': { [Style.BOLD]:   Shapes.T_TOP },\n  '┼': { [Style.NORMAL]: Shapes.CROSS },\n  '╋': { [Style.BOLD]:   Shapes.CROSS },\n  '╴': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT },\n  '╸': { [Style.BOLD]:   Shapes.MIDDLE_TO_LEFT },\n  '╵': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP },\n  '╹': { [Style.BOLD]:   Shapes.MIDDLE_TO_TOP },\n  '╶': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT },\n  '╺': { [Style.BOLD]:   Shapes.MIDDLE_TO_RIGHT },\n  '╷': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM },\n  '╻': { [Style.BOLD]:   Shapes.MIDDLE_TO_BOTTOM },\n\n  // Double border\n  '═': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '║': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '╒': { [Style.NORMAL]: (xp, yp) => `M.5,1 L.5,${.5 - yp} L1,${.5 - yp} M.5,${.5 + yp} L1,${.5 + yp}` },\n  '╓': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},1 L${.5 - xp},.5 L1,.5 M${.5 + xp},.5 L${.5 + xp},1` },\n  '╔': { [Style.NORMAL]: (xp, yp) => `M1,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1` },\n  '╕': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L.5,${.5 - yp} L.5,1 M0,${.5 + yp} L.5,${.5 + yp}` },\n  '╖': { [Style.NORMAL]: (xp, yp) => `M${.5 + xp},1 L${.5 + xp},.5 L0,.5 M${.5 - xp},.5 L${.5 - xp},1` },\n  '╗': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M0,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},1` },\n  '╘': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 + yp} L1,${.5 + yp} M.5,${.5 - yp} L1,${.5 - yp}` },\n  '╙': { [Style.NORMAL]: (xp, yp) => `M1,.5 L${.5 - xp},.5 L${.5 - xp},0 M${.5 + xp},.5 L${.5 + xp},0` },\n  '╚': { [Style.NORMAL]: (xp, yp) => `M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0 M1,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},0` },\n  '╛': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L.5,${.5 + yp} L.5,0 M0,${.5 - yp} L.5,${.5 - yp}` },\n  '╜': { [Style.NORMAL]: (xp, yp) => `M0,.5 L${.5 + xp},.5 L${.5 + xp},0 M${.5 - xp},.5 L${.5 - xp},0` },\n  '╝': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M0,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},0` },\n  '╞': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M.5,${.5 - yp} L1,${.5 - yp} M.5,${.5 + yp} L1,${.5 + yp}` },\n  '╟': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1 M${.5 + xp},.5 L1,.5` },\n  '╠': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n  '╡': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M0,${.5 - yp} L.5,${.5 - yp} M0,${.5 + yp} L.5,${.5 + yp}` },\n  '╢': { [Style.NORMAL]: (xp, yp) => `M0,.5 L${.5 - xp},.5 M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '╣': { [Style.NORMAL]: (xp, yp) => `M${.5 + xp},0 L${.5 + xp},1 M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0` },\n  '╤': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp} M.5,${.5 + yp} L.5,1` },\n  '╥': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},.5 L${.5 - xp},1 M${.5 + xp},.5 L${.5 + xp},1` },\n  '╦': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1` },\n  '╧': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 - yp} M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '╨': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},.5 L${.5 - xp},0 M${.5 + xp},.5 L${.5 + xp},0` },\n  '╩': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L1,${.5 + yp} M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n  '╪': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '╫': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '╬': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1 M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n\n  // Diagonal\n  '╱': { [Style.NORMAL]: 'M1,0 L0,1' },\n  '╲': { [Style.NORMAL]: 'M0,0 L1,1' },\n  '╳': { [Style.NORMAL]: 'M1,0 L0,1 M0,0 L1,1' },\n\n  // Mixed weight\n  '╼': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '╽': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '╾': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '╿': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┍': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┎': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┑': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┒': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┕': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┖': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┙': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┚': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┝': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┞': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┟': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┠': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '┡': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '┢': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '┥': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┦': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┧': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┨': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '┩': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '┪': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '┭': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┮': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┯': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '┰': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '┱': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '┲': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '┵': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┶': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┷': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '┸': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '┹': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '┺': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '┽': { [Style.NORMAL]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_RIGHT}`,  [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '┾': { [Style.NORMAL]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_LEFT}`,   [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '┿': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '╀': { [Style.NORMAL]: `${Shapes.LEFT_TO_RIGHT} ${Shapes.MIDDLE_TO_BOTTOM}`, [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '╁': { [Style.NORMAL]: `${Shapes.MIDDLE_TO_TOP} ${Shapes.LEFT_TO_RIGHT}`,    [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '╂': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '╃': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '╄': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '╅': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '╆': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '╇': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: `${Shapes.MIDDLE_TO_TOP} ${Shapes.LEFT_TO_RIGHT}` },\n  '╈': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: `${Shapes.LEFT_TO_RIGHT} ${Shapes.MIDDLE_TO_BOTTOM}` },\n  '╉': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_LEFT}` },\n  '╊': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_RIGHT}` },\n\n  // Dashed\n  '╌': { [Style.NORMAL]: Shapes.TWO_DASHES_HORIZONTAL },\n  '╍': { [Style.BOLD]:   Shapes.TWO_DASHES_HORIZONTAL },\n  '┄': { [Style.NORMAL]: Shapes.THREE_DASHES_HORIZONTAL },\n  '┅': { [Style.BOLD]:   Shapes.THREE_DASHES_HORIZONTAL },\n  '┈': { [Style.NORMAL]: Shapes.FOUR_DASHES_HORIZONTAL },\n  '┉': { [Style.BOLD]:   Shapes.FOUR_DASHES_HORIZONTAL },\n  '╎': { [Style.NORMAL]: Shapes.TWO_DASHES_VERTICAL },\n  '╏': { [Style.BOLD]:   Shapes.TWO_DASHES_VERTICAL },\n  '┆': { [Style.NORMAL]: Shapes.THREE_DASHES_VERTICAL  },\n  '┇': { [Style.BOLD]:   Shapes.THREE_DASHES_VERTICAL },\n  '┊': { [Style.NORMAL]: Shapes.FOUR_DASHES_VERTICAL },\n  '┋': { [Style.BOLD]:   Shapes.FOUR_DASHES_VERTICAL },\n\n  // Curved\n  '╭': { [Style.NORMAL]: 'C.5,1,.5,.5,1,.5' },\n  '╮': { [Style.NORMAL]: 'C.5,1,.5,.5,0,.5' },\n  '╯': { [Style.NORMAL]: 'C.5,0,.5,.5,0,.5' },\n  '╰': { [Style.NORMAL]: 'C.5,0,.5,.5,1,.5' }\n};\n\ninterface IVectorShape {\n  d: string;\n  type: VectorType;\n  /** Padding to apply to the vector's x axis in CSS pixels. */\n  horizontalPadding?: number;\n}\n\nconst enum VectorType {\n  FILL,\n  STROKE\n}\n\n/**\n * This contains the definitions of the primarily used box drawing characters as vector shapes. The\n * reason these characters are defined specially is to avoid common problems if a user's font has\n * not been patched with powerline characters and also to get pixel perfect rendering as rendering\n * issues can occur around AA/SPAA.\n *\n * Original symbols defined in https://github.com/powerline/fontpatcher\n */\nexport const powerlineDefinitions: { [index: string]: IVectorShape } = {\n  // Right triangle solid\n  '\\u{E0B0}': { d: 'M0,0 L1,.5 L0,1', type: VectorType.FILL },\n  // Right triangle line\n  '\\u{E0B1}': { d: 'M0,0 L1,.5 L0,1', type: VectorType.STROKE, horizontalPadding: 0.5 },\n  // Left triangle solid\n  '\\u{E0B2}': { d: 'M1,0 L0,.5 L1,1', type: VectorType.FILL },\n  // Left triangle line\n  '\\u{E0B3}': { d: 'M1,0 L0,.5 L1,1', type: VectorType.STROKE, horizontalPadding: 0.5 }\n};\n\n/**\n * Try drawing a custom block element or box drawing character, returning whether it was\n * successfully drawn.\n */\nexport function tryDrawCustomChar(\n  ctx: CanvasRenderingContext2D,\n  c: string,\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number\n): boolean {\n  const blockElementDefinition = blockElementDefinitions[c];\n  if (blockElementDefinition) {\n    drawBlockElementChar(ctx, blockElementDefinition, xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n    return true;\n  }\n\n  const patternDefinition = patternCharacterDefinitions[c];\n  if (patternDefinition) {\n    drawPatternChar(ctx, patternDefinition, xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n    return true;\n  }\n\n  const boxDrawingDefinition = boxDrawingDefinitions[c];\n  if (boxDrawingDefinition) {\n    drawBoxDrawingChar(ctx, boxDrawingDefinition, xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n    return true;\n  }\n\n  const powerlineDefinition = powerlineDefinitions[c];\n  if (powerlineDefinition) {\n    drawPowerlineChar(ctx, powerlineDefinition, xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n    return true;\n  }\n\n  return false;\n}\n\nfunction drawBlockElementChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: IBlockVector[],\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number\n): void {\n  for (let i = 0; i < charDefinition.length; i++) {\n    const box = charDefinition[i];\n    const xEighth = scaledCellWidth / 8;\n    const yEighth = scaledCellHeight / 8;\n    ctx.fillRect(\n      xOffset + box.x * xEighth,\n      yOffset + box.y * yEighth,\n      box.w * xEighth,\n      box.h * yEighth\n    );\n  }\n}\n\nconst cachedPatterns: Map<PatternDefinition, Map</* fillStyle */string, CanvasPattern>> = new Map();\n\nfunction drawPatternChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: number[][],\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number\n): void {\n  let patternSet = cachedPatterns.get(charDefinition);\n  if (!patternSet) {\n    patternSet = new Map();\n    cachedPatterns.set(charDefinition, patternSet);\n  }\n  const fillStyle = ctx.fillStyle;\n  if (typeof fillStyle !== 'string') {\n    throw new Error(`Unexpected fillStyle type \"${fillStyle}\"`);\n  }\n  let pattern = patternSet.get(fillStyle);\n  if (!pattern) {\n    const width = charDefinition[0].length;\n    const height = charDefinition.length;\n    const tmpCanvas = document.createElement('canvas');\n    tmpCanvas.width = width;\n    tmpCanvas.height = height;\n    const tmpCtx = throwIfFalsy(tmpCanvas.getContext('2d'));\n    const imageData = new ImageData(width, height);\n\n    // Extract rgba from fillStyle\n    let r: number;\n    let g: number;\n    let b: number;\n    let a: number;\n    if (fillStyle.startsWith('#')) {\n      r = parseInt(fillStyle.slice(1, 3), 16);\n      g = parseInt(fillStyle.slice(3, 5), 16);\n      b = parseInt(fillStyle.slice(5, 7), 16);\n      a = fillStyle.length > 7 && parseInt(fillStyle.slice(7, 9), 16) || 1;\n    } else if (fillStyle.startsWith('rgba')) {\n      ([r, g, b, a] = fillStyle.substring(5, fillStyle.length - 1).split(',').map(e => parseFloat(e)));\n    } else {\n      throw new Error(`Unexpected fillStyle color format \"${fillStyle}\" when drawing pattern glyph`);\n    }\n\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        imageData.data[(y * width + x) * 4    ] = r;\n        imageData.data[(y * width + x) * 4 + 1] = g;\n        imageData.data[(y * width + x) * 4 + 2] = b;\n        imageData.data[(y * width + x) * 4 + 3] = charDefinition[y][x] * (a * 255);\n      }\n    }\n    tmpCtx.putImageData(imageData, 0, 0);\n    pattern = throwIfFalsy(ctx.createPattern(tmpCanvas, null));\n    patternSet.set(fillStyle, pattern);\n  }\n  ctx.fillStyle = pattern;\n  ctx.fillRect(xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n}\n\n/**\n * Draws the following box drawing characters by mapping a subset of SVG d attribute instructions to\n * canvas draw calls.\n *\n * Box styles:       ┎┰┒┍┯┑╓╥╖╒╤╕ ┏┳┓┌┲┓┌┬┐┏┱┐\n * ┌─┬─┐ ┏━┳━┓ ╔═╦═╗ ┠╂┨┝┿┥╟╫╢╞╪╡ ┡╇┩├╊┫┢╈┪┣╉┤\n * │ │ │ ┃ ┃ ┃ ║ ║ ║ ┖┸┚┕┷┙╙╨╜╘╧╛ └┴┘└┺┛┗┻┛┗┹┘\n * ├─┼─┤ ┣━╋━┫ ╠═╬═╣ ┏┱┐┌┲┓┌┬┐┌┬┐ ┏┳┓┌┮┓┌┬┐┏┭┐\n * │ │ │ ┃ ┃ ┃ ║ ║ ║ ┡╃┤├╄┩├╆┪┢╅┤ ┞╀┦├┾┫┟╁┧┣┽┤\n * └─┴─┘ ┗━┻━┛ ╚═╩═╝ └┴┘└┴┘└┺┛┗┹┘ └┴┘└┶┛┗┻┛┗┵┘\n *\n * Other:\n * ╭─╮ ╲ ╱ ╷╻╎╏┆┇┊┋ ╺╾╴ ╌╌╌ ┄┄┄ ┈┈┈\n * │ │  ╳  ╽╿╎╏┆┇┊┋ ╶╼╸ ╍╍╍ ┅┅┅ ┉┉┉\n * ╰─╯ ╱ ╲ ╹╵╎╏┆┇┊┋\n *\n * All box drawing characters:\n * ─ ━ │ ┃ ┄ ┅ ┆ ┇ ┈ ┉ ┊ ┋ ┌ ┍ ┎ ┏\n * ┐ ┑ ┒ ┓ └ ┕ ┖ ┗ ┘ ┙ ┚ ┛ ├ ┝ ┞ ┟\n * ┠ ┡ ┢ ┣ ┤ ┥ ┦ ┧ ┨ ┩ ┪ ┫ ┬ ┭ ┮ ┯\n * ┰ ┱ ┲ ┳ ┴ ┵ ┶ ┷ ┸ ┹ ┺ ┻ ┼ ┽ ┾ ┿\n * ╀ ╁ ╂ ╃ ╄ ╅ ╆ ╇ ╈ ╉ ╊ ╋ ╌ ╍ ╎ ╏\n * ═ ║ ╒ ╓ ╔ ╕ ╖ ╗ ╘ ╙ ╚ ╛ ╜ ╝ ╞ ╟\n * ╠ ╡ ╢ ╣ ╤ ╥ ╦ ╧ ╨ ╩ ╪ ╫ ╬ ╭ ╮ ╯\n * ╰ ╱ ╲ ╳ ╴ ╵ ╶ ╷ ╸ ╹ ╺ ╻ ╼ ╽ ╾ ╿\n *\n * ---\n *\n * Box drawing alignment tests:                                          █\n *                                                                       ▉\n *   ╔══╦══╗  ┌──┬──┐  ╭──┬──╮  ╭──┬──╮  ┏━━┳━━┓  ┎┒┏┑   ╷  ╻ ┏┯┓ ┌┰┐    ▊ ╱╲╱╲╳╳╳\n *   ║┌─╨─┐║  │╔═╧═╗│  │╒═╪═╕│  │╓─╁─╖│  ┃┌─╂─┐┃  ┗╃╄┙  ╶┼╴╺╋╸┠┼┨ ┝╋┥    ▋ ╲╱╲╱╳╳╳\n *   ║│╲ ╱│║  │║   ║│  ││ │ ││  │║ ┃ ║│  ┃│ ╿ │┃  ┍╅╆┓   ╵  ╹ ┗┷┛ └┸┘    ▌ ╱╲╱╲╳╳╳\n *   ╠╡ ╳ ╞╣  ├╢   ╟┤  ├┼─┼─┼┤  ├╫─╂─╫┤  ┣┿╾┼╼┿┫  ┕┛┖┚     ┌┄┄┐ ╎ ┏┅┅┓ ┋ ▍ ╲╱╲╱╳╳╳\n *   ║│╱ ╲│║  │║   ║│  ││ │ ││  │║ ┃ ║│  ┃│ ╽ │┃  ░░▒▒▓▓██ ┊  ┆ ╎ ╏  ┇ ┋ ▎\n *   ║└─╥─┘║  │╚═╤═╝│  │╘═╪═╛│  │╙─╀─╜│  ┃└─╂─┘┃  ░░▒▒▓▓██ ┊  ┆ ╎ ╏  ┇ ┋ ▏\n *   ╚══╩══╝  └──┴──┘  ╰──┴──╯  ╰──┴──╯  ┗━━┻━━┛           └╌╌┘ ╎ ┗╍╍┛ ┋  ▁▂▃▄▅▆▇█\n *\n * Source: https://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html\n */\nfunction drawBoxDrawingChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: { [fontWeight: number]: string | ((xp: number, yp: number) => string) },\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number\n): void {\n  ctx.strokeStyle = ctx.fillStyle;\n  for (const [fontWeight, instructions] of Object.entries(charDefinition)) {\n    ctx.beginPath();\n    ctx.lineWidth = window.devicePixelRatio * Number.parseInt(fontWeight);\n    let actualInstructions: string;\n    if (typeof instructions === 'function') {\n      const xp = .15;\n      const yp = .15 / scaledCellHeight * scaledCellWidth;\n      actualInstructions = instructions(xp, yp);\n    } else {\n      actualInstructions = instructions;\n    }\n    for (const instruction of actualInstructions.split(' ')) {\n      const type = instruction[0];\n      const f = svgToCanvasInstructionMap[type];\n      if (!f) {\n        console.error(`Could not find drawing instructions for \"${type}\"`);\n        continue;\n      }\n      const args: string[] = instruction.substring(1).split(',');\n      if (!args[0] || !args[1]) {\n        continue;\n      }\n      f(ctx, translateArgs(args, scaledCellWidth, scaledCellHeight, xOffset, yOffset));\n    }\n    ctx.stroke();\n    ctx.closePath();\n  }\n}\n\nfunction drawPowerlineChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: IVectorShape,\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number\n): void {\n  ctx.beginPath();\n  ctx.lineWidth = window.devicePixelRatio;\n  for (const instruction of charDefinition.d.split(' ')) {\n    const type = instruction[0];\n    const f = svgToCanvasInstructionMap[type];\n    if (!f) {\n      console.error(`Could not find drawing instructions for \"${type}\"`);\n      continue;\n    }\n    const args: string[] = instruction.substring(1).split(',');\n    if (!args[0] || !args[1]) {\n      continue;\n    }\n    f(ctx, translateArgs(args, scaledCellWidth, scaledCellHeight, xOffset, yOffset, charDefinition.horizontalPadding));\n  }\n  if (charDefinition.type === VectorType.STROKE) {\n    ctx.strokeStyle = ctx.fillStyle;\n    ctx.stroke();\n  } else {\n    ctx.fill();\n  }\n  ctx.closePath();\n}\n\nfunction clamp(value: number, max: number, min: number = 0): number {\n  return Math.max(Math.min(value, max), min);\n}\n\nconst svgToCanvasInstructionMap: { [index: string]: any } = {\n  'C': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.bezierCurveTo(args[0], args[1], args[2], args[3], args[4], args[5]),\n  'L': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.lineTo(args[0], args[1]),\n  'M': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.moveTo(args[0], args[1])\n};\n\nfunction translateArgs(args: string[], cellWidth: number, cellHeight: number, xOffset: number, yOffset: number, horizontalPadding: number = 0): number[] {\n  const result = args.map(e => parseFloat(e) || parseInt(e));\n\n  if (result.length < 2) {\n    throw new Error('Too few arguments for instruction');\n  }\n\n  for (let x = 0; x < result.length; x += 2) {\n    // Translate from 0-1 to 0-cellWidth\n    result[x] *= cellWidth - (horizontalPadding * 2 * window.devicePixelRatio);\n    // Ensure coordinate doesn't escape cell bounds and round to the nearest 0.5 to ensure a crisp\n    // line at 100% devicePixelRatio\n    if (result[x] !== 0) {\n      result[x] = clamp(Math.round(result[x] + 0.5) - 0.5, cellWidth, 0);\n    }\n    // Apply the cell's offset (ie. x*cellWidth)\n    result[x] += xOffset + (horizontalPadding * window.devicePixelRatio);\n  }\n\n  for (let y = 1; y < result.length; y += 2) {\n    // Translate from 0-1 to 0-cellHeight\n    result[y] *= cellHeight;\n    // Ensure coordinate doesn't escape cell bounds and round to the nearest 0.5 to ensure a crisp\n    // line at 100% devicePixelRatio\n    if (result[y] !== 0) {\n      result[y] = clamp(Math.round(result[y] + 0.5) - 0.5, cellHeight, 0);\n    }\n    // Apply the cell's offset (ie. x*cellHeight)\n    result[y] += yOffset;\n  }\n\n  return result;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport class GridCache<T> {\n  public cache: (T | undefined)[][];\n\n  public constructor() {\n    this.cache = [];\n  }\n\n  public resize(width: number, height: number): void {\n    for (let x = 0; x < width; x++) {\n      if (this.cache.length <= x) {\n        this.cache.push([]);\n      }\n      for (let y = this.cache[x].length; y < height; y++) {\n        this.cache[x].push(undefined);\n      }\n      this.cache[x].length = height;\n    }\n    this.cache.length = width;\n  }\n\n  public clear(): void {\n    for (let x = 0; x < this.cache.length; x++) {\n      for (let y = 0; y < this.cache[x].length; y++) {\n        this.cache[x][y] = undefined;\n      }\n    }\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { BaseRenderLayer } from './BaseRenderLayer';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/atlas/Constants';\nimport { is256Color } from 'browser/renderer/atlas/CharAtlasUtils';\nimport { IColorSet, ILinkifierEvent, ILinkifier, ILinkifier2 } from 'browser/Types';\nimport { IBufferService, IDecorationService, IOptionsService } from 'common/services/Services';\n\nexport class LinkRenderLayer extends BaseRenderLayer {\n  private _state: ILinkifierEvent | undefined;\n\n  constructor(\n    container: HTMLElement,\n    zIndex: number,\n    colors: IColorSet,\n    rendererId: number,\n    linkifier: ILinkifier,\n    linkifier2: ILinkifier2,\n    @IBufferService bufferService: IBufferService,\n    @IOptionsService optionsService: IOptionsService,\n    @IDecorationService decorationService: IDecorationService\n  ) {\n    super(container, 'link', zIndex, true, colors, rendererId, bufferService, optionsService, decorationService);\n    linkifier.onShowLinkUnderline(e => this._onShowLinkUnderline(e));\n    linkifier.onHideLinkUnderline(e => this._onHideLinkUnderline(e));\n\n    linkifier2.onShowLinkUnderline(e => this._onShowLinkUnderline(e));\n    linkifier2.onHideLinkUnderline(e => this._onHideLinkUnderline(e));\n  }\n\n  public resize(dim: IRenderDimensions): void {\n    super.resize(dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = undefined;\n  }\n\n  public reset(): void {\n    this._clearCurrentLink();\n  }\n\n  private _clearCurrentLink(): void {\n    if (this._state) {\n      this._clearCells(this._state.x1, this._state.y1, this._state.cols - this._state.x1, 1);\n      const middleRowCount = this._state.y2 - this._state.y1 - 1;\n      if (middleRowCount > 0) {\n        this._clearCells(0, this._state.y1 + 1, this._state.cols, middleRowCount);\n      }\n      this._clearCells(0, this._state.y2, this._state.x2, 1);\n      this._state = undefined;\n    }\n  }\n\n  private _onShowLinkUnderline(e: ILinkifierEvent): void {\n    if (e.fg === INVERTED_DEFAULT_COLOR) {\n      this._ctx.fillStyle = this._colors.background.css;\n    } else if (e.fg && is256Color(e.fg)) {\n      // 256 color support\n      this._ctx.fillStyle = this._colors.ansi[e.fg].css;\n    } else {\n      this._ctx.fillStyle = this._colors.foreground.css;\n    }\n\n    if (e.y1 === e.y2) {\n      // Single line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.x2 - e.x1);\n    } else {\n      // Multi-line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.cols - e.x1);\n      for (let y = e.y1 + 1; y < e.y2; y++) {\n        this._fillBottomLineAtCells(0, y, e.cols);\n      }\n      this._fillBottomLineAtCells(0, e.y2, e.x2);\n    }\n    this._state = e;\n  }\n\n  private _onHideLinkUnderline(e: ILinkifierEvent): void {\n    this._clearCurrentLink();\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { TextRenderLayer } from 'browser/renderer/TextRenderLayer';\nimport { SelectionRenderLayer } from 'browser/renderer/SelectionRenderLayer';\nimport { CursorRenderLayer } from 'browser/renderer/CursorRenderLayer';\nimport { IRenderLayer, IRenderer, IRenderDimensions, IRequestRedrawEvent } from 'browser/renderer/Types';\nimport { LinkRenderLayer } from 'browser/renderer/LinkRenderLayer';\nimport { Disposable } from 'common/Lifecycle';\nimport { IColorSet, ILinkifier, ILinkifier2 } from 'browser/Types';\nimport { ICharSizeService } from 'browser/services/Services';\nimport { IBufferService, IOptionsService, IInstantiationService } from 'common/services/Services';\nimport { removeTerminalFromCache } from 'browser/renderer/atlas/CharAtlasCache';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\n\nlet nextRendererId = 1;\n\nexport class Renderer extends Disposable implements IRenderer {\n  private _id = nextRendererId++;\n\n  private _renderLayers: IRenderLayer[];\n  private _devicePixelRatio: number;\n\n  public dimensions: IRenderDimensions;\n\n  private _onRequestRedraw = new EventEmitter<IRequestRedrawEvent>();\n  public get onRequestRedraw(): IEvent<IRequestRedrawEvent> { return this._onRequestRedraw.event; }\n\n  constructor(\n    private _colors: IColorSet,\n    private readonly _screenElement: HTMLElement,\n    linkifier: ILinkifier,\n    linkifier2: ILinkifier2,\n    @IInstantiationService instantiationService: IInstantiationService,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService,\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n    const allowTransparency = this._optionsService.rawOptions.allowTransparency;\n    this._renderLayers = [\n      instantiationService.createInstance(TextRenderLayer, this._screenElement, 0, this._colors, allowTransparency, this._id),\n      instantiationService.createInstance(SelectionRenderLayer, this._screenElement, 1, this._colors, this._id),\n      instantiationService.createInstance(LinkRenderLayer, this._screenElement, 2, this._colors, this._id, linkifier, linkifier2),\n      instantiationService.createInstance(CursorRenderLayer, this._screenElement, 3, this._colors, this._id, this._onRequestRedraw)\n    ];\n    this.dimensions = {\n      scaledCharWidth: 0,\n      scaledCharHeight: 0,\n      scaledCellWidth: 0,\n      scaledCellHeight: 0,\n      scaledCharLeft: 0,\n      scaledCharTop: 0,\n      scaledCanvasWidth: 0,\n      scaledCanvasHeight: 0,\n      canvasWidth: 0,\n      canvasHeight: 0,\n      actualCellWidth: 0,\n      actualCellHeight: 0\n    };\n    this._devicePixelRatio = window.devicePixelRatio;\n    this._updateDimensions();\n    this.onOptionsChanged();\n  }\n\n  public dispose(): void {\n    for (const l of this._renderLayers) {\n      l.dispose();\n    }\n    super.dispose();\n    removeTerminalFromCache(this._id);\n  }\n\n  public onDevicePixelRatioChange(): void {\n    // If the device pixel ratio changed, the char atlas needs to be regenerated\n    // and the terminal needs to refreshed\n    if (this._devicePixelRatio !== window.devicePixelRatio) {\n      this._devicePixelRatio = window.devicePixelRatio;\n      this.onResize(this._bufferService.cols, this._bufferService.rows);\n    }\n  }\n\n  public setColors(colors: IColorSet): void {\n    this._colors = colors;\n    // Clear layers and force a full render\n    for (const l of this._renderLayers) {\n      l.setColors(this._colors);\n      l.reset();\n    }\n  }\n\n  public onResize(cols: number, rows: number): void {\n    // Update character and canvas dimensions\n    this._updateDimensions();\n\n    // Resize all render layers\n    for (const l of this._renderLayers) {\n      l.resize(this.dimensions);\n    }\n\n    // Resize the screen\n    this._screenElement.style.width = `${this.dimensions.canvasWidth}px`;\n    this._screenElement.style.height = `${this.dimensions.canvasHeight}px`;\n  }\n\n  public onCharSizeChanged(): void {\n    this.onResize(this._bufferService.cols, this._bufferService.rows);\n  }\n\n  public onBlur(): void {\n    this._runOperation(l => l.onBlur());\n  }\n\n  public onFocus(): void {\n    this._runOperation(l => l.onFocus());\n  }\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {\n    this._runOperation(l => l.onSelectionChanged(start, end, columnSelectMode));\n    // Selection foreground requires a full re-render\n    if (this._colors.selectionForeground) {\n      this._onRequestRedraw.fire({ start: 0, end: this._bufferService.rows - 1 });\n    }\n  }\n\n  public onCursorMove(): void {\n    this._runOperation(l => l.onCursorMove());\n  }\n\n  public onOptionsChanged(): void {\n    this._runOperation(l => l.onOptionsChanged());\n  }\n\n  public clear(): void {\n    this._runOperation(l => l.reset());\n  }\n\n  private _runOperation(operation: (layer: IRenderLayer) => void): void {\n    for (const l of this._renderLayers) {\n      operation(l);\n    }\n  }\n\n  /**\n   * Performs the refresh loop callback, calling refresh only if a refresh is\n   * necessary before queueing up the next one.\n   */\n  public renderRows(start: number, end: number): void {\n    for (const l of this._renderLayers) {\n      l.onGridChanged(start, end);\n    }\n  }\n\n  public clearTextureAtlas(): void {\n    for (const layer of this._renderLayers) {\n      layer.clearTextureAtlas();\n    }\n  }\n\n  /**\n   * Recalculates the character and canvas dimensions.\n   */\n  private _updateDimensions(): void {\n    if (!this._charSizeService.hasValidSize) {\n      return;\n    }\n\n    // Calculate the scaled character width. Width is floored as it must be\n    // drawn to an integer grid in order for the CharAtlas \"stamps\" to not be\n    // blurry. When text is drawn to the grid not using the CharAtlas, it is\n    // clipped to ensure there is no overlap with the next cell.\n    this.dimensions.scaledCharWidth = Math.floor(this._charSizeService.width * window.devicePixelRatio);\n\n    // Calculate the scaled character height. Height is ceiled in case\n    // devicePixelRatio is a floating point number in order to ensure there is\n    // enough space to draw the character to the cell.\n    this.dimensions.scaledCharHeight = Math.ceil(this._charSizeService.height * window.devicePixelRatio);\n\n    // Calculate the scaled cell height, if lineHeight is not 1 then the value\n    // will be floored because since lineHeight can never be lower then 1, there\n    // is a guarentee that the scaled line height will always be larger than\n    // scaled char height.\n    this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._optionsService.rawOptions.lineHeight);\n\n    // Calculate the y coordinate within a cell that text should draw from in\n    // order to draw in the center of a cell.\n    this.dimensions.scaledCharTop = this._optionsService.rawOptions.lineHeight === 1 ? 0 : Math.round((this.dimensions.scaledCellHeight - this.dimensions.scaledCharHeight) / 2);\n\n    // Calculate the scaled cell width, taking the letterSpacing into account.\n    this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._optionsService.rawOptions.letterSpacing);\n\n    // Calculate the x coordinate with a cell that text should draw from in\n    // order to draw in the center of a cell.\n    this.dimensions.scaledCharLeft = Math.floor(this._optionsService.rawOptions.letterSpacing / 2);\n\n    // Recalculate the canvas dimensions; scaled* define the actual number of\n    // pixel in the canvas\n    this.dimensions.scaledCanvasHeight = this._bufferService.rows * this.dimensions.scaledCellHeight;\n    this.dimensions.scaledCanvasWidth = this._bufferService.cols * this.dimensions.scaledCellWidth;\n\n    // The the size of the canvas on the page. It's very important that this\n    // rounds to nearest integer and not ceils as browsers often set\n    // window.devicePixelRatio as something like 1.100000023841858, when it's\n    // actually 1.1. Ceiling causes blurriness as the backing canvas image is 1\n    // pixel too large for the canvas element size.\n    this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / window.devicePixelRatio);\n    this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / window.devicePixelRatio);\n\n    // Get the _actual_ dimensions of an individual cell. This needs to be\n    // derived from the canvasWidth/Height calculated above which takes into\n    // account window.devicePixelRatio. ICharSizeService.width/height by itself\n    // is insufficient when the page is not at 100% zoom level as it's measured\n    // in CSS pixels, but the actual char size on the canvas can differ.\n    this.dimensions.actualCellHeight = this.dimensions.canvasHeight / this._bufferService.rows;\n    this.dimensions.actualCellWidth = this.dimensions.canvasWidth / this._bufferService.cols;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport function throwIfFalsy<T>(value: T | undefined | null): T {\n  if (!value) {\n    throw new Error('value must not be falsy');\n  }\n  return value;\n}\n\nexport function isPowerlineGlyph(codepoint: number): boolean {\n  // Only return true for Powerline symbols which require\n  // different padding and should be excluded from minimum contrast\n  // ratio standards\n  return 0xE0A4 <= codepoint && codepoint <=  0xE0D6;\n}\n\nfunction isBoxOrBlockGlyph(codepoint: number): boolean {\n  return (0x2500 <= codepoint && codepoint <= 0x259F);\n}\n\nexport function excludeFromContrastRatioDemands(codepoint: number): boolean {\n  return isPowerlineGlyph(codepoint) || isBoxOrBlockGlyph(codepoint);\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { BaseRenderLayer } from 'browser/renderer/BaseRenderLayer';\nimport { IColorSet } from 'browser/Types';\nimport { IBufferService, IDecorationService, IOptionsService } from 'common/services/Services';\n\ninterface ISelectionState {\n  start?: [number, number];\n  end?: [number, number];\n  columnSelectMode?: boolean;\n  ydisp?: number;\n}\n\nexport class SelectionRenderLayer extends BaseRenderLayer {\n  private _state!: ISelectionState;\n\n  constructor(\n    container: HTMLElement,\n    zIndex: number,\n    colors: IColorSet,\n    rendererId: number,\n    @IBufferService bufferService: IBufferService,\n    @IOptionsService optionsService: IOptionsService,\n    @IDecorationService decorationService: IDecorationService\n  ) {\n    super(container, 'selection', zIndex, true, colors, rendererId, bufferService, optionsService, decorationService);\n    this._clearState();\n  }\n\n  private _clearState(): void {\n    this._state = {\n      start: undefined,\n      end: undefined,\n      columnSelectMode: undefined,\n      ydisp: undefined\n    };\n  }\n\n  public resize(dim: IRenderDimensions): void {\n    super.resize(dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._clearState();\n  }\n\n  public reset(): void {\n    if (this._state.start && this._state.end) {\n      this._clearState();\n      this._clearAll();\n    }\n  }\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    super.onSelectionChanged(start, end, columnSelectMode);\n\n    // Selection has not changed\n    if (!this._didStateChange(start, end, columnSelectMode, this._bufferService.buffer.ydisp)) {\n      return;\n    }\n\n    // Remove all selections\n    this._clearAll();\n\n    // Selection does not exist\n    if (!start || !end) {\n      this._clearState();\n      return;\n    }\n\n    // Translate from buffer position to viewport position\n    const viewportStartRow = start[1] - this._bufferService.buffer.ydisp;\n    const viewportEndRow = end[1] - this._bufferService.buffer.ydisp;\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\n    const viewportCappedEndRow = Math.min(viewportEndRow, this._bufferService.rows - 1);\n\n    // No need to draw the selection\n    if (viewportCappedStartRow >= this._bufferService.rows || viewportCappedEndRow < 0) {\n      this._state.ydisp = this._bufferService.buffer.ydisp;\n      return;\n    }\n\n    this._ctx.fillStyle = this._colors.selectionTransparent.css;\n\n    if (columnSelectMode) {\n      const startCol = start[0];\n      const width = end[0] - startCol;\n      const height = viewportCappedEndRow - viewportCappedStartRow + 1;\n      this._fillCells(startCol, viewportCappedStartRow, width, height);\n    } else {\n      // Draw first row\n      const startCol = viewportStartRow === viewportCappedStartRow ? start[0] : 0;\n      const startRowEndCol = viewportCappedStartRow === viewportEndRow ? end[0] : this._bufferService.cols;\n      this._fillCells(startCol, viewportCappedStartRow, startRowEndCol - startCol, 1);\n\n      // Draw middle rows\n      const middleRowsCount = Math.max(viewportCappedEndRow - viewportCappedStartRow - 1, 0);\n      this._fillCells(0, viewportCappedStartRow + 1, this._bufferService.cols, middleRowsCount);\n\n      // Draw final row\n      if (viewportCappedStartRow !== viewportCappedEndRow) {\n        // Only draw viewportEndRow if it's not the same as viewportStartRow\n        const endCol = viewportEndRow === viewportCappedEndRow ? end[0] : this._bufferService.cols;\n        this._fillCells(0, viewportCappedEndRow, endCol, 1);\n      }\n    }\n\n    // Save state for next render\n    this._state.start = [start[0], start[1]];\n    this._state.end = [end[0], end[1]];\n    this._state.columnSelectMode = columnSelectMode;\n    this._state.ydisp = this._bufferService.buffer.ydisp;\n  }\n\n  private _didStateChange(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean, ydisp: number): boolean {\n    return !this._areCoordinatesEqual(start, this._state.start) ||\n      !this._areCoordinatesEqual(end, this._state.end) ||\n      columnSelectMode !== this._state.columnSelectMode ||\n      ydisp !== this._state.ydisp;\n  }\n\n  private _areCoordinatesEqual(coord1: [number, number] | undefined, coord2: [number, number] | undefined): boolean {\n    if (!coord1 || !coord2) {\n      return false;\n    }\n\n    return coord1[0] === coord2[0] && coord1[1] === coord2[1];\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { CharData, ICellData } from 'common/Types';\nimport { GridCache } from 'browser/renderer/GridCache';\nimport { BaseRenderLayer } from 'browser/renderer/BaseRenderLayer';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { NULL_CELL_CODE, Content } from 'common/buffer/Constants';\nimport { IColorSet } from 'browser/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { IOptionsService, IBufferService, IDecorationService } from 'common/services/Services';\nimport { ICharacterJoinerService } from 'browser/services/Services';\nimport { JoinedCellData } from 'browser/services/CharacterJoinerService';\n\n/**\n * This CharData looks like a null character, which will forc a clear and render\n * when the character changes (a regular space ' ' character may not as it's\n * drawn state is a cleared cell).\n */\n// const OVERLAP_OWNED_CHAR_DATA: CharData = [null, '', 0, -1];\n\nexport class TextRenderLayer extends BaseRenderLayer {\n  private _state: GridCache<CharData>;\n  private _characterWidth: number = 0;\n  private _characterFont: string = '';\n  private _characterOverlapCache: { [key: string]: boolean } = {};\n  private _workCell = new CellData();\n\n  constructor(\n    container: HTMLElement,\n    zIndex: number,\n    colors: IColorSet,\n    alpha: boolean,\n    rendererId: number,\n    @IBufferService bufferService: IBufferService,\n    @IOptionsService optionsService: IOptionsService,\n    @ICharacterJoinerService private readonly _characterJoinerService: ICharacterJoinerService,\n    @IDecorationService decorationService: IDecorationService\n  ) {\n    super(container, 'text', zIndex, alpha, colors, rendererId, bufferService, optionsService, decorationService);\n    this._state = new GridCache<CharData>();\n  }\n\n  public resize(dim: IRenderDimensions): void {\n    super.resize(dim);\n\n    // Clear the character width cache if the font or width has changed\n    const terminalFont = this._getFont(false, false);\n    if (this._characterWidth !== dim.scaledCharWidth || this._characterFont !== terminalFont) {\n      this._characterWidth = dim.scaledCharWidth;\n      this._characterFont = terminalFont;\n      this._characterOverlapCache = {};\n    }\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state.clear();\n    this._state.resize(this._bufferService.cols, this._bufferService.rows);\n  }\n\n  public reset(): void {\n    this._state.clear();\n    this._clearAll();\n  }\n\n  private _forEachCell(\n    firstRow: number,\n    lastRow: number,\n    callback: (\n      cell: ICellData,\n      x: number,\n      y: number\n    ) => void\n  ): void {\n    for (let y = firstRow; y <= lastRow; y++) {\n      const row = y + this._bufferService.buffer.ydisp;\n      const line = this._bufferService.buffer.lines.get(row);\n      const joinedRanges = this._characterJoinerService.getJoinedCharacters(row);\n      for (let x = 0; x < this._bufferService.cols; x++) {\n        line!.loadCell(x, this._workCell);\n        let cell = this._workCell;\n\n        // If true, indicates that the current character(s) to draw were joined.\n        let isJoined = false;\n        let lastCharX = x;\n\n        // The character to the left is a wide character, drawing is owned by\n        // the char at x-1\n        if (cell.getWidth() === 0) {\n          continue;\n        }\n\n        // Process any joined character ranges as needed. Because of how the\n        // ranges are produced, we know that they are valid for the characters\n        // and attributes of our input.\n        if (joinedRanges.length > 0 && x === joinedRanges[0][0]) {\n          isJoined = true;\n          const range = joinedRanges.shift()!;\n\n          // We already know the exact start and end column of the joined range,\n          // so we get the string and width representing it directly\n          cell = new JoinedCellData(\n            this._workCell,\n            line!.translateToString(true, range[0], range[1]),\n            range[1] - range[0]\n          );\n\n          // Skip over the cells occupied by this range in the loop\n          lastCharX = range[1] - 1;\n        }\n\n        // If the character is an overlapping char and the character to the\n        // right is a space, take ownership of the cell to the right. We skip\n        // this check for joined characters because their rendering likely won't\n        // yield the same result as rendering the last character individually.\n        if (!isJoined && this._isOverlapping(cell)) {\n          // If the character is overlapping, we want to force a re-render on every\n          // frame. This is specifically to work around the case where two\n          // overlaping chars `a` and `b` are adjacent, the cursor is moved to b and a\n          // space is added. Without this, the first half of `b` would never\n          // get removed, and `a` would not re-render because it thinks it's\n          // already in the correct state.\n          // this._state.cache[x][y] = OVERLAP_OWNED_CHAR_DATA;\n          if (lastCharX < line!.length - 1 && line!.getCodePoint(lastCharX + 1) === NULL_CELL_CODE) {\n            // patch width to 2\n            cell.content &= ~Content.WIDTH_MASK;\n            cell.content |= 2 << Content.WIDTH_SHIFT;\n            // this._clearChar(x + 1, y);\n            // The overlapping char's char data will force a clear and render when the\n            // overlapping char is no longer to the left of the character and also when\n            // the space changes to another character.\n            // this._state.cache[x + 1][y] = OVERLAP_OWNED_CHAR_DATA;\n          }\n        }\n\n        callback(\n          cell,\n          x,\n          y\n        );\n\n        x = lastCharX;\n      }\n    }\n  }\n\n  /**\n   * Draws the background for a specified range of columns. Tries to batch adjacent cells of the\n   * same color together to reduce draw calls.\n   */\n  private _drawBackground(firstRow: number, lastRow: number): void {\n    const ctx = this._ctx;\n    const cols = this._bufferService.cols;\n    let startX: number = 0;\n    let startY: number = 0;\n    let prevFillStyle: string | null = null;\n\n    ctx.save();\n\n    this._forEachCell(firstRow, lastRow, (cell, x, y) => {\n      // libvte and xterm both draw the background (but not foreground) of invisible characters,\n      // so we should too.\n      let nextFillStyle = null; // null represents default background color\n\n      if (cell.isInverse()) {\n        if (cell.isFgDefault()) {\n          nextFillStyle = this._colors.foreground.css;\n        } else if (cell.isFgRGB()) {\n          nextFillStyle = `rgb(${AttributeData.toColorRGB(cell.getFgColor()).join(',')})`;\n        } else {\n          nextFillStyle = this._colors.ansi[cell.getFgColor()].css;\n        }\n      } else if (cell.isBgRGB()) {\n        nextFillStyle = `rgb(${AttributeData.toColorRGB(cell.getBgColor()).join(',')})`;\n      } else if (cell.isBgPalette()) {\n        nextFillStyle = this._colors.ansi[cell.getBgColor()].css;\n      }\n\n      // Get any decoration foreground/background overrides, this must be fetched before the early\n      // exist but applied after inverse\n      let isTop = false;\n      for (const d of this._decorationService.getDecorationsAtCell(x, this._bufferService.buffer.ydisp + y)) {\n        if (d.options.layer !== 'top' && isTop) {\n          continue;\n        }\n        if (d.backgroundColorRGB) {\n          nextFillStyle = d.backgroundColorRGB.css;\n        }\n        isTop = d.options.layer === 'top';\n      }\n\n      if (prevFillStyle === null) {\n        // This is either the first iteration, or the default background was set. Either way, we\n        // don't need to draw anything.\n        startX = x;\n        startY = y;\n      }\n\n      if (y !== startY) {\n        // our row changed, draw the previous row\n        ctx.fillStyle = prevFillStyle || '';\n        this._fillCells(startX, startY, cols - startX, 1);\n        startX = x;\n        startY = y;\n      } else if (prevFillStyle !== nextFillStyle) {\n        // our color changed, draw the previous characters in this row\n        ctx.fillStyle = prevFillStyle || '';\n        this._fillCells(startX, startY, x - startX, 1);\n        startX = x;\n        startY = y;\n      }\n\n      prevFillStyle = nextFillStyle;\n    });\n\n    // flush the last color we encountered\n    if (prevFillStyle !== null) {\n      ctx.fillStyle = prevFillStyle;\n      this._fillCells(startX, startY, cols - startX, 1);\n    }\n\n    ctx.restore();\n  }\n\n  private _drawForeground(firstRow: number, lastRow: number): void {\n    this._forEachCell(firstRow, lastRow, (cell, x, y) => {\n      if (cell.isInvisible()) {\n        return;\n      }\n      this._drawChars(cell, x, y);\n      if (cell.isUnderline() || cell.isStrikethrough()) {\n        this._ctx.save();\n\n        if (cell.isInverse()) {\n          if (cell.isBgDefault()) {\n            this._ctx.fillStyle = this._colors.background.css;\n          } else if (cell.isBgRGB()) {\n            this._ctx.fillStyle = `rgb(${AttributeData.toColorRGB(cell.getBgColor()).join(',')})`;\n          } else {\n            let bg = cell.getBgColor();\n            if (this._optionsService.rawOptions.drawBoldTextInBrightColors && cell.isBold() && bg < 8) {\n              bg += 8;\n            }\n            this._ctx.fillStyle = this._colors.ansi[bg].css;\n          }\n        } else {\n          if (cell.isFgDefault()) {\n            this._ctx.fillStyle = this._colors.foreground.css;\n          } else if (cell.isFgRGB()) {\n            this._ctx.fillStyle = `rgb(${AttributeData.toColorRGB(cell.getFgColor()).join(',')})`;\n          } else {\n            let fg = cell.getFgColor();\n            if (this._optionsService.rawOptions.drawBoldTextInBrightColors && cell.isBold() && fg < 8) {\n              fg += 8;\n            }\n            this._ctx.fillStyle = this._colors.ansi[fg].css;\n          }\n        }\n\n        if (cell.isStrikethrough()) {\n          this._fillMiddleLineAtCells(x, y, cell.getWidth());\n        }\n        if (cell.isUnderline()) {\n          this._fillBottomLineAtCells(x, y, cell.getWidth());\n        }\n        this._ctx.restore();\n      }\n    });\n  }\n\n  public onGridChanged(firstRow: number, lastRow: number): void {\n    // Resize has not been called yet\n    if (this._state.cache.length === 0) {\n      return;\n    }\n\n    if (this._charAtlas) {\n      this._charAtlas.beginFrame();\n    }\n\n    this._clearCells(0, firstRow, this._bufferService.cols, lastRow - firstRow + 1);\n    this._drawBackground(firstRow, lastRow);\n    this._drawForeground(firstRow, lastRow);\n  }\n\n  public onOptionsChanged(): void {\n    this._setTransparency(this._optionsService.rawOptions.allowTransparency);\n  }\n\n  /**\n   * Whether a character is overlapping to the next cell.\n   */\n  private _isOverlapping(cell: ICellData): boolean {\n    // Only single cell characters can be overlapping, rendering issues can\n    // occur without this check\n    if (cell.getWidth() !== 1) {\n      return false;\n    }\n\n    // We assume that any ascii character will not overlap\n    if (cell.getCode() < 256) {\n      return false;\n    }\n\n    const chars = cell.getChars();\n\n    // Deliver from cache if available\n    if (this._characterOverlapCache.hasOwnProperty(chars)) {\n      return this._characterOverlapCache[chars];\n    }\n\n    // Setup the font\n    this._ctx.save();\n    this._ctx.font = this._characterFont;\n\n    // Measure the width of the character, but Math.floor it\n    // because that is what the renderer does when it calculates\n    // the character dimensions we are comparing against\n    const overlaps = Math.floor(this._ctx.measureText(chars).width) > this._characterWidth;\n\n    // Restore the original context\n    this._ctx.restore();\n\n    // Cache and return\n    this._characterOverlapCache[chars] = overlaps;\n    return overlaps;\n  }\n\n  /**\n   * Clear the charcater at the cell specified.\n   * @param x The column of the char.\n   * @param y The row of the char.\n   */\n  // private _clearChar(x: number, y: number): void {\n  //   let colsToClear = 1;\n  //   // Clear the adjacent character if it was wide\n  //   const state = this._state.cache[x][y];\n  //   if (state && state[CHAR_DATA_WIDTH_INDEX] === 2) {\n  //     colsToClear = 2;\n  //   }\n  //   this.clearCells(x, y, colsToClear, 1);\n  // }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IGlyphIdentifier } from 'browser/renderer/atlas/Types';\nimport { IDisposable } from 'common/Types';\n\nexport abstract class BaseCharAtlas implements IDisposable {\n  private _didWarmUp: boolean = false;\n\n  public dispose(): void { }\n\n  /**\n   * Perform any work needed to warm the cache before it can be used. May be called multiple times.\n   * Implement _doWarmUp instead if you only want to get called once.\n   */\n  public warmUp(): void {\n    if (!this._didWarmUp) {\n      this._doWarmUp();\n      this._didWarmUp = true;\n    }\n  }\n\n  /**\n   * Perform any work needed to warm the cache before it can be used. Used by the default\n   * implementation of warmUp(), and will only be called once.\n   */\n  private _doWarmUp(): void { }\n\n  public clear(): void { }\n\n  /**\n   * Called when we start drawing a new frame.\n   *\n   * TODO: We rely on this getting called by TextRenderLayer. This should really be called by\n   * Renderer instead, but we need to make Renderer the source-of-truth for the char atlas, instead\n   * of BaseRenderLayer.\n   */\n  public beginFrame(): void { }\n\n  /**\n   * May be called before warmUp finishes, however it is okay for the implementation to\n   * do nothing and return false in that case.\n   *\n   * @param ctx Where to draw the character onto.\n   * @param glyph Information about what to draw\n   * @param x The position on the context to start drawing at\n   * @param y The position on the context to start drawing at\n   * @returns The success state. True if we drew the character.\n   */\n  public abstract draw(\n    ctx: CanvasRenderingContext2D,\n    glyph: IGlyphIdentifier,\n    x: number,\n    y: number\n  ): boolean;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { generateConfig, configEquals } from 'browser/renderer/atlas/CharAtlasUtils';\nimport { BaseCharAtlas } from 'browser/renderer/atlas/BaseCharAtlas';\nimport { DynamicCharAtlas } from 'browser/renderer/atlas/DynamicCharAtlas';\nimport { ICharAtlasConfig } from 'browser/renderer/atlas/Types';\nimport { IColorSet } from 'browser/Types';\nimport { ITerminalOptions } from 'common/services/Services';\n\ninterface ICharAtlasCacheEntry {\n  atlas: BaseCharAtlas;\n  config: ICharAtlasConfig;\n  // N.B. This implementation potentially holds onto copies of the terminal forever, so\n  // this may cause memory leaks.\n  ownedBy: number[];\n}\n\nconst charAtlasCache: ICharAtlasCacheEntry[] = [];\n\n/**\n * Acquires a char atlas, either generating a new one or returning an existing\n * one that is in use by another terminal.\n */\nexport function acquireCharAtlas(\n  options: ITerminalOptions,\n  rendererId: number,\n  colors: IColorSet,\n  scaledCharWidth: number,\n  scaledCharHeight: number\n): BaseCharAtlas {\n  const newConfig = generateConfig(scaledCharWidth, scaledCharHeight, options, colors);\n\n  // Check to see if the renderer already owns this config\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    const ownedByIndex = entry.ownedBy.indexOf(rendererId);\n    if (ownedByIndex >= 0) {\n      if (configEquals(entry.config, newConfig)) {\n        return entry.atlas;\n      }\n      // The configs differ, release the renderer from the entry\n      if (entry.ownedBy.length === 1) {\n        entry.atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        entry.ownedBy.splice(ownedByIndex, 1);\n      }\n      break;\n    }\n  }\n\n  // Try match a char atlas from the cache\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    if (configEquals(entry.config, newConfig)) {\n      // Add the renderer to the cache entry and return\n      entry.ownedBy.push(rendererId);\n      return entry.atlas;\n    }\n  }\n\n  const newEntry: ICharAtlasCacheEntry = {\n    atlas: new DynamicCharAtlas(\n      document,\n      newConfig\n    ),\n    config: newConfig,\n    ownedBy: [rendererId]\n  };\n  charAtlasCache.push(newEntry);\n  return newEntry.atlas;\n}\n\n/**\n * Removes a terminal reference from the cache, allowing its memory to be freed.\n */\nexport function removeTerminalFromCache(rendererId: number): void {\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const index = charAtlasCache[i].ownedBy.indexOf(rendererId);\n    if (index !== -1) {\n      if (charAtlasCache[i].ownedBy.length === 1) {\n        // Remove the cache entry if it's the only renderer\n        charAtlasCache[i].atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        // Remove the reference from the cache entry\n        charAtlasCache[i].ownedBy.splice(index, 1);\n      }\n      break;\n    }\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharAtlasConfig } from 'browser/renderer/atlas/Types';\nimport { DEFAULT_COLOR } from 'common/buffer/Constants';\nimport { IColorSet, IPartialColorSet } from 'browser/Types';\nimport { ITerminalOptions } from 'common/services/Services';\n\nexport function generateConfig(scaledCharWidth: number, scaledCharHeight: number, options: ITerminalOptions, colors: IColorSet): ICharAtlasConfig {\n  // null out some fields that don't matter\n  const clonedColors: IPartialColorSet = {\n    foreground: colors.foreground,\n    background: colors.background,\n    cursor: undefined,\n    cursorAccent: undefined,\n    selection: undefined,\n    ansi: colors.ansi.slice()\n  };\n  return {\n    devicePixelRatio: window.devicePixelRatio,\n    scaledCharWidth,\n    scaledCharHeight,\n    fontFamily: options.fontFamily,\n    fontSize: options.fontSize,\n    fontWeight: options.fontWeight,\n    fontWeightBold: options.fontWeightBold,\n    allowTransparency: options.allowTransparency,\n    colors: clonedColors\n  };\n}\n\nexport function configEquals(a: ICharAtlasConfig, b: ICharAtlasConfig): boolean {\n  for (let i = 0; i < a.colors.ansi.length; i++) {\n    if (a.colors.ansi[i].rgba !== b.colors.ansi[i].rgba) {\n      return false;\n    }\n  }\n  return a.devicePixelRatio === b.devicePixelRatio &&\n      a.fontFamily === b.fontFamily &&\n      a.fontSize === b.fontSize &&\n      a.fontWeight === b.fontWeight &&\n      a.fontWeightBold === b.fontWeightBold &&\n      a.allowTransparency === b.allowTransparency &&\n      a.scaledCharWidth === b.scaledCharWidth &&\n      a.scaledCharHeight === b.scaledCharHeight &&\n      a.colors.foreground === b.colors.foreground &&\n      a.colors.background === b.colors.background;\n}\n\nexport function is256Color(colorCode: number): boolean {\n  return colorCode < DEFAULT_COLOR;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isFirefox, isLegacyEdge } from 'common/Platform';\n\nexport const INVERTED_DEFAULT_COLOR = 257;\nexport const DIM_OPACITY = 0.5;\n// The text baseline is set conditionally by browser. Using 'ideographic' for Firefox or Legacy Edge would\n// result in truncated text (Issue 3353). Using 'bottom' for Chrome would result in slightly\n// unaligned Powerline fonts (PR 3356#issuecomment-850928179).\nexport const TEXT_BASELINE: CanvasTextBaseline = isFirefox || isLegacyEdge ? 'bottom' : 'ideographic';\n\nexport const CHAR_ATLAS_CELL_SPACING = 1;\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { DIM_OPACITY, INVERTED_DEFAULT_COLOR, TEXT_BASELINE } from 'browser/renderer/atlas/Constants';\nimport { IGlyphIdentifier, ICharAtlasConfig } from 'browser/renderer/atlas/Types';\nimport { BaseCharAtlas } from 'browser/renderer/atlas/BaseCharAtlas';\nimport { DEFAULT_ANSI_COLORS } from 'browser/ColorManager';\nimport { LRUMap } from 'browser/renderer/atlas/LRUMap';\nimport { isFirefox, isSafari } from 'common/Platform';\nimport { IColor } from 'common/Types';\nimport { throwIfFalsy } from 'browser/renderer/RendererUtils';\nimport { color } from 'common/Color';\n\n// In practice we're probably never going to exhaust a texture this large. For debugging purposes,\n// however, it can be useful to set this to a really tiny value, to verify that LRU eviction works.\nconst TEXTURE_WIDTH = 1024;\nconst TEXTURE_HEIGHT = 1024;\n\nconst TRANSPARENT_COLOR = {\n  css: 'rgba(0, 0, 0, 0)',\n  rgba: 0\n};\n\n// Drawing to the cache is expensive: If we have to draw more than this number of glyphs to the\n// cache in a single frame, give up on trying to cache anything else, and try to finish the current\n// frame ASAP.\n//\n// This helps to limit the amount of damage a program can do when it would otherwise thrash the\n// cache.\nconst FRAME_CACHE_DRAW_LIMIT = 100;\n\n/**\n * The number of milliseconds to wait before generating the ImageBitmap, this is to debounce/batch\n * the operation as window.createImageBitmap is asynchronous.\n */\nconst GLYPH_BITMAP_COMMIT_DELAY = 100;\n\ninterface IGlyphCacheValue {\n  index: number;\n  isEmpty: boolean;\n  inBitmap: boolean;\n}\n\nexport function getGlyphCacheKey(glyph: IGlyphIdentifier): number {\n  // Note that this only returns a valid key when code < 256\n  // Layout:\n  // 0b00000000000000000000000000000001: italic (1)\n  // 0b00000000000000000000000000000010: dim (1)\n  // 0b00000000000000000000000000000100: bold (1)\n  // 0b00000000000000000000111111111000: fg (9)\n  // 0b00000000000111111111000000000000: bg (9)\n  // 0b00011111111000000000000000000000: code (8)\n  // 0b11100000000000000000000000000000: unused (3)\n  return glyph.code << 21 | glyph.bg << 12 | glyph.fg << 3 | (glyph.bold ? 0 : 4) + (glyph.dim ? 0 : 2) + (glyph.italic ? 0 : 1);\n}\n\nexport class DynamicCharAtlas extends BaseCharAtlas {\n  // An ordered map that we're using to keep track of where each glyph is in the atlas texture.\n  // It's ordered so that we can determine when to remove the old entries.\n  private _cacheMap: LRUMap<IGlyphCacheValue>;\n\n  // The texture that the atlas is drawn to\n  private _cacheCanvas: HTMLCanvasElement;\n  private _cacheCtx: CanvasRenderingContext2D;\n\n  // A temporary context that glyphs are drawn to before being transfered to the atlas.\n  private _tmpCtx: CanvasRenderingContext2D;\n\n  // The number of characters stored in the atlas by width/height\n  private _width: number;\n  private _height: number;\n\n  private _drawToCacheCount: number = 0;\n\n  // An array of glyph keys that are waiting on the bitmap to be generated.\n  private _glyphsWaitingOnBitmap: IGlyphCacheValue[] = [];\n\n  // The timeout that is used to batch bitmap generation so it's not requested for every new glyph.\n  private _bitmapCommitTimeout: number | null = null;\n\n  // The bitmap to draw from, this is much faster on other browsers than others.\n  private _bitmap: ImageBitmap | null = null;\n\n  constructor(document: Document, private _config: ICharAtlasConfig) {\n    super();\n    this._cacheCanvas = document.createElement('canvas');\n    this._cacheCanvas.width = TEXTURE_WIDTH;\n    this._cacheCanvas.height = TEXTURE_HEIGHT;\n    // The canvas needs alpha because we use clearColor to convert the background color to alpha.\n    // It might also contain some characters with transparent backgrounds if allowTransparency is\n    // set.\n    this._cacheCtx = throwIfFalsy(this._cacheCanvas.getContext('2d', { alpha: true }));\n\n    const tmpCanvas = document.createElement('canvas');\n    tmpCanvas.width = this._config.scaledCharWidth;\n    tmpCanvas.height = this._config.scaledCharHeight;\n    this._tmpCtx = throwIfFalsy(tmpCanvas.getContext('2d', { alpha: this._config.allowTransparency }));\n\n    this._width = Math.floor(TEXTURE_WIDTH / this._config.scaledCharWidth);\n    this._height = Math.floor(TEXTURE_HEIGHT / this._config.scaledCharHeight);\n    const capacity = this._width * this._height;\n    this._cacheMap = new LRUMap(capacity);\n    this._cacheMap.prealloc(capacity);\n\n    // This is useful for debugging\n    // document.body.appendChild(this._cacheCanvas);\n  }\n\n  public dispose(): void {\n    if (this._bitmapCommitTimeout !== null) {\n      window.clearTimeout(this._bitmapCommitTimeout);\n      this._bitmapCommitTimeout = null;\n    }\n  }\n\n  public beginFrame(): void {\n    this._drawToCacheCount = 0;\n  }\n\n  public clear(): void {\n    if (this._cacheMap.size > 0) {\n      const capacity = this._width * this._height;\n      this._cacheMap = new LRUMap(capacity);\n      this._cacheMap.prealloc(capacity);\n    }\n    this._cacheCtx.clearRect(0, 0, TEXTURE_WIDTH, TEXTURE_HEIGHT);\n    this._tmpCtx.clearRect(0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight);\n  }\n\n  public draw(\n    ctx: CanvasRenderingContext2D,\n    glyph: IGlyphIdentifier,\n    x: number,\n    y: number\n  ): boolean {\n    // Space is always an empty cell, special case this as it's so common\n    if (glyph.code === 32) {\n      return true;\n    }\n\n    // Exit early for uncachable glyphs\n    if (!this._canCache(glyph)) {\n      return false;\n    }\n\n    const glyphKey = getGlyphCacheKey(glyph);\n    const cacheValue = this._cacheMap.get(glyphKey);\n    if (cacheValue !== null && cacheValue !== undefined) {\n      this._drawFromCache(ctx, cacheValue, x, y);\n      return true;\n    }\n    if (this._drawToCacheCount < FRAME_CACHE_DRAW_LIMIT) {\n      let index;\n      if (this._cacheMap.size < this._cacheMap.capacity) {\n        index = this._cacheMap.size;\n      } else {\n        // we're out of space, so our call to set will delete this item\n        index = this._cacheMap.peek()!.index;\n      }\n      const cacheValue = this._drawToCache(glyph, index);\n      this._cacheMap.set(glyphKey, cacheValue);\n      this._drawFromCache(ctx, cacheValue, x, y);\n      return true;\n    }\n    return false;\n  }\n\n  private _canCache(glyph: IGlyphIdentifier): boolean {\n    // Only cache ascii and extended characters for now, to be safe. In the future, we could do\n    // something more complicated to determine the expected width of a character.\n    //\n    // If we switch the renderer over to webgl at some point, we may be able to use blending modes\n    // to draw overlapping glyphs from the atlas:\n    // https://github.com/servo/webrender/issues/464#issuecomment-255632875\n    // https://webglfundamentals.org/webgl/lessons/webgl-text-texture.html\n    return glyph.code < 256;\n  }\n\n  private _toCoordinateX(index: number): number {\n    return (index % this._width) * this._config.scaledCharWidth;\n  }\n\n  private _toCoordinateY(index: number): number {\n    return Math.floor(index / this._width) * this._config.scaledCharHeight;\n  }\n\n  private _drawFromCache(\n    ctx: CanvasRenderingContext2D,\n    cacheValue: IGlyphCacheValue,\n    x: number,\n    y: number\n  ): void {\n    // We don't actually need to do anything if this is whitespace.\n    if (cacheValue.isEmpty) {\n      return;\n    }\n    const cacheX = this._toCoordinateX(cacheValue.index);\n    const cacheY = this._toCoordinateY(cacheValue.index);\n    ctx.drawImage(\n      cacheValue.inBitmap ? this._bitmap! : this._cacheCanvas,\n      cacheX,\n      cacheY,\n      this._config.scaledCharWidth,\n      this._config.scaledCharHeight,\n      x,\n      y,\n      this._config.scaledCharWidth,\n      this._config.scaledCharHeight\n    );\n  }\n\n  private _getColorFromAnsiIndex(idx: number): IColor {\n    if (idx < this._config.colors.ansi.length) {\n      return this._config.colors.ansi[idx];\n    }\n    return DEFAULT_ANSI_COLORS[idx];\n  }\n\n  private _getBackgroundColor(glyph: IGlyphIdentifier): IColor {\n    if (this._config.allowTransparency) {\n      // The background color might have some transparency, so we need to render it as fully\n      // transparent in the atlas. Otherwise we'd end up drawing the transparent background twice\n      // around the anti-aliased edges of the glyph, and it would look too dark.\n      return TRANSPARENT_COLOR;\n    }\n    if (glyph.bg === INVERTED_DEFAULT_COLOR) {\n      return this._config.colors.foreground;\n    }\n    if (glyph.bg < 256) {\n      return this._getColorFromAnsiIndex(glyph.bg);\n    }\n    return this._config.colors.background;\n  }\n\n  private _getForegroundColor(glyph: IGlyphIdentifier): IColor {\n    if (glyph.fg === INVERTED_DEFAULT_COLOR) {\n      return color.opaque(this._config.colors.background);\n    }\n    if (glyph.fg < 256) {\n      // 256 color support\n      return this._getColorFromAnsiIndex(glyph.fg);\n    }\n    return this._config.colors.foreground;\n  }\n\n  // TODO: We do this (or something similar) in multiple places. We should split this off\n  // into a shared function.\n  private _drawToCache(glyph: IGlyphIdentifier, index: number): IGlyphCacheValue {\n    this._drawToCacheCount++;\n\n    this._tmpCtx.save();\n\n    // draw the background\n    const backgroundColor = this._getBackgroundColor(glyph);\n    // Use a 'copy' composite operation to clear any existing glyph out of _tmpCtxWithAlpha, regardless of\n    // transparency in backgroundColor\n    this._tmpCtx.globalCompositeOperation = 'copy';\n    this._tmpCtx.fillStyle = backgroundColor.css;\n    this._tmpCtx.fillRect(0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight);\n    this._tmpCtx.globalCompositeOperation = 'source-over';\n\n    // draw the foreground/glyph\n    const fontWeight = glyph.bold ? this._config.fontWeightBold : this._config.fontWeight;\n    const fontStyle = glyph.italic ? 'italic' : '';\n    this._tmpCtx.font =\n      `${fontStyle} ${fontWeight} ${this._config.fontSize * this._config.devicePixelRatio}px ${this._config.fontFamily}`;\n    this._tmpCtx.textBaseline = TEXT_BASELINE;\n\n    this._tmpCtx.fillStyle = this._getForegroundColor(glyph).css;\n\n    // Apply alpha to dim the character\n    if (glyph.dim) {\n      this._tmpCtx.globalAlpha = DIM_OPACITY;\n    }\n    // Draw the character\n    this._tmpCtx.fillText(glyph.chars, 0, this._config.scaledCharHeight);\n\n    // clear the background from the character to avoid issues with drawing over the previous\n    // character if it extends past it's bounds\n    let imageData = this._tmpCtx.getImageData(\n      0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight\n    );\n    let isEmpty = false;\n    if (!this._config.allowTransparency) {\n      isEmpty = clearColor(imageData, backgroundColor);\n    }\n\n    // If this charcater is underscore and empty, shift it up until it is visible, try for a maximum\n    // of 5 pixels.\n    if (isEmpty && glyph.chars === '_' && !this._config.allowTransparency) {\n      for (let offset = 1; offset <= 5; offset++) {\n        // Draw the character\n        this._tmpCtx.fillText(glyph.chars, 0, this._config.scaledCharHeight - offset);\n\n        // clear the background from the character to avoid issues with drawing over the previous\n        // character if it extends past it's bounds\n        imageData = this._tmpCtx.getImageData(\n          0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight\n        );\n        isEmpty = clearColor(imageData, backgroundColor);\n        if (!isEmpty) {\n          break;\n        }\n      }\n    }\n\n    this._tmpCtx.restore();\n\n    // copy the data from imageData to _cacheCanvas\n    const x = this._toCoordinateX(index);\n    const y = this._toCoordinateY(index);\n    // putImageData doesn't do any blending, so it will overwrite any existing cache entry for us\n    this._cacheCtx.putImageData(imageData, x, y);\n\n    // Add the glyph and queue it to the bitmap (if the browser supports it)\n    const cacheValue = {\n      index,\n      isEmpty,\n      inBitmap: false\n    };\n    this._addGlyphToBitmap(cacheValue);\n\n    return cacheValue;\n  }\n\n  private _addGlyphToBitmap(cacheValue: IGlyphCacheValue): void {\n    // Support is patchy for createImageBitmap at the moment, pass a canvas back\n    // if support is lacking as drawImage works there too. Firefox is also\n    // included here as ImageBitmap appears both buggy and has horrible\n    // performance (tested on v55).\n    if (!('createImageBitmap' in window) || isFirefox || isSafari) {\n      return;\n    }\n\n    // Add the glyph to the queue\n    this._glyphsWaitingOnBitmap.push(cacheValue);\n\n    // Check if bitmap generation timeout already exists\n    if (this._bitmapCommitTimeout !== null) {\n      return;\n    }\n\n    this._bitmapCommitTimeout = window.setTimeout(() => this._generateBitmap(), GLYPH_BITMAP_COMMIT_DELAY);\n  }\n\n  private _generateBitmap(): void {\n    const glyphsMovingToBitmap = this._glyphsWaitingOnBitmap;\n    this._glyphsWaitingOnBitmap = [];\n    window.createImageBitmap(this._cacheCanvas).then(bitmap => {\n      // Set bitmap\n      this._bitmap = bitmap;\n\n      // Mark all new glyphs as in bitmap, excluding glyphs that came in after\n      // the bitmap was requested\n      for (let i = 0; i < glyphsMovingToBitmap.length; i++) {\n        const value = glyphsMovingToBitmap[i];\n        // It doesn't matter if the value was already evicted, it will be\n        // released from memory after this block if so.\n        value.inBitmap = true;\n      }\n    });\n    this._bitmapCommitTimeout = null;\n  }\n}\n\n// This is used for debugging the renderer, just swap out `new DynamicCharAtlas` with\n// `new NoneCharAtlas`.\nexport class NoneCharAtlas extends BaseCharAtlas {\n  constructor(document: Document, config: ICharAtlasConfig) {\n    super();\n  }\n\n  public draw(\n    ctx: CanvasRenderingContext2D,\n    glyph: IGlyphIdentifier,\n    x: number,\n    y: number\n  ): boolean {\n    return false;\n  }\n}\n\n/**\n * Makes a partiicular rgb color in an ImageData completely transparent.\n * @returns True if the result is \"empty\", meaning all pixels are fully transparent.\n */\nfunction clearColor(imageData: ImageData, color: IColor): boolean {\n  let isEmpty = true;\n  const r = color.rgba >>> 24;\n  const g = color.rgba >>> 16 & 0xFF;\n  const b = color.rgba >>> 8 & 0xFF;\n  for (let offset = 0; offset < imageData.data.length; offset += 4) {\n    if (imageData.data[offset] === r &&\n        imageData.data[offset + 1] === g &&\n        imageData.data[offset + 2] === b) {\n      imageData.data[offset + 3] = 0;\n    } else {\n      isEmpty = false;\n    }\n  }\n  return isEmpty;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\ninterface ILinkedListNode<T> {\n  prev: ILinkedListNode<T> | null;\n  next: ILinkedListNode<T> | null;\n  key: number | null;\n  value: T | null;\n}\n\nexport class LRUMap<T> {\n  private _map: { [key: number]: ILinkedListNode<T> } = {};\n  private _head: ILinkedListNode<T> | null = null;\n  private _tail: ILinkedListNode<T> | null = null;\n  private _nodePool: ILinkedListNode<T>[] = [];\n  public size: number = 0;\n\n  constructor(public capacity: number) { }\n\n  private _unlinkNode(node: ILinkedListNode<T>): void {\n    const prev = node.prev;\n    const next = node.next;\n    if (node === this._head) {\n      this._head = next;\n    }\n    if (node === this._tail) {\n      this._tail = prev;\n    }\n    if (prev !== null) {\n      prev.next = next;\n    }\n    if (next !== null) {\n      next.prev = prev;\n    }\n  }\n\n  private _appendNode(node: ILinkedListNode<T>): void {\n    const tail = this._tail;\n    if (tail !== null) {\n      tail.next = node;\n    }\n    node.prev = tail;\n    node.next = null;\n    this._tail = node;\n    if (this._head === null) {\n      this._head = node;\n    }\n  }\n\n  /**\n   * Preallocate a bunch of linked-list nodes. Allocating these nodes ahead of time means that\n   * they're more likely to live next to each other in memory, which seems to improve performance.\n   *\n   * Each empty object only consumes about 60 bytes of memory, so this is pretty cheap, even for\n   * large maps.\n   */\n  public prealloc(count: number): void {\n    const nodePool = this._nodePool;\n    for (let i = 0; i < count; i++) {\n      nodePool.push({\n        prev: null,\n        next: null,\n        key: null,\n        value: null\n      });\n    }\n  }\n\n  public get(key: number): T | null {\n    // This is unsafe: We're assuming our keyspace doesn't overlap with Object.prototype. However,\n    // it's faster than calling hasOwnProperty, and in our case, it would never overlap.\n    const node = this._map[key];\n    if (node !== undefined) {\n      this._unlinkNode(node);\n      this._appendNode(node);\n      return node.value;\n    }\n    return null;\n  }\n\n  /**\n   * Gets a value from a key without marking it as the most recently used item.\n   */\n  public peekValue(key: number): T | null {\n    const node = this._map[key];\n    if (node !== undefined) {\n      return node.value;\n    }\n    return null;\n  }\n\n  public peek(): T | null {\n    const head = this._head;\n    return head === null ? null : head.value;\n  }\n\n  public set(key: number, value: T): void {\n    // This is unsafe: See note above.\n    let node = this._map[key];\n    if (node !== undefined) {\n      // already exists, we just need to mutate it and move it to the end of the list\n      node = this._map[key];\n      this._unlinkNode(node);\n      node.value = value;\n    } else if (this.size >= this.capacity) {\n      // we're out of space: recycle the head node, move it to the tail\n      node = this._head!;\n      this._unlinkNode(node);\n      delete this._map[node.key!];\n      node.key = key;\n      node.value = value;\n      this._map[key] = node;\n    } else {\n      // make a new element\n      const nodePool = this._nodePool;\n      if (nodePool.length > 0) {\n        // use a preallocated node if we can\n        node = nodePool.pop()!;\n        node.key = key;\n        node.value = value;\n      } else {\n        node = {\n          prev: null,\n          next: null,\n          key,\n          value\n        };\n      }\n      this._map[key] = node;\n      this.size++;\n    }\n    this._appendNode(node);\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderer, IRenderDimensions, IRequestRedrawEvent } from 'browser/renderer/Types';\nimport { BOLD_CLASS, ITALIC_CLASS, CURSOR_CLASS, CURSOR_STYLE_BLOCK_CLASS, CURSOR_BLINK_CLASS, CURSOR_STYLE_BAR_CLASS, CURSOR_STYLE_UNDERLINE_CLASS, DomRendererRowFactory } from 'browser/renderer/dom/DomRendererRowFactory';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/atlas/Constants';\nimport { Disposable } from 'common/Lifecycle';\nimport { IColorSet, ILinkifierEvent, ILinkifier, ILinkifier2 } from 'browser/Types';\nimport { ICharSizeService } from 'browser/services/Services';\nimport { IOptionsService, IBufferService, IInstantiationService, IDecorationService } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { color } from 'common/Color';\nimport { removeElementFromParent } from 'browser/Dom';\n\nconst TERMINAL_CLASS_PREFIX = 'xterm-dom-renderer-owner-';\nconst ROW_CONTAINER_CLASS = 'xterm-rows';\nconst FG_CLASS_PREFIX = 'xterm-fg-';\nconst BG_CLASS_PREFIX = 'xterm-bg-';\nconst FOCUS_CLASS = 'xterm-focus';\nconst SELECTION_CLASS = 'xterm-selection';\n\nlet nextTerminalId = 1;\n\n/**\n * A fallback renderer for when canvas is slow. This is not meant to be\n * particularly fast or feature complete, more just stable and usable for when\n * canvas is not an option.\n */\nexport class DomRenderer extends Disposable implements IRenderer {\n  private _rowFactory: DomRendererRowFactory;\n  private _terminalClass: number = nextTerminalId++;\n\n  private _themeStyleElement!: HTMLStyleElement;\n  private _dimensionsStyleElement!: HTMLStyleElement;\n  private _rowContainer: HTMLElement;\n  private _rowElements: HTMLElement[] = [];\n  private _selectionContainer: HTMLElement;\n\n  public dimensions: IRenderDimensions;\n\n  public get onRequestRedraw(): IEvent<IRequestRedrawEvent> { return new EventEmitter<IRequestRedrawEvent>().event; }\n\n  constructor(\n    private _colors: IColorSet,\n    private readonly _element: HTMLElement,\n    private readonly _screenElement: HTMLElement,\n    private readonly _viewportElement: HTMLElement,\n    private readonly _linkifier: ILinkifier,\n    private readonly _linkifier2: ILinkifier2,\n    @IInstantiationService instantiationService: IInstantiationService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @IBufferService private readonly _bufferService: IBufferService\n  ) {\n    super();\n    this._rowContainer = document.createElement('div');\n    this._rowContainer.classList.add(ROW_CONTAINER_CLASS);\n    this._rowContainer.style.lineHeight = 'normal';\n    this._rowContainer.setAttribute('aria-hidden', 'true');\n    this._refreshRowElements(this._bufferService.cols, this._bufferService.rows);\n    this._selectionContainer = document.createElement('div');\n    this._selectionContainer.classList.add(SELECTION_CLASS);\n    this._selectionContainer.setAttribute('aria-hidden', 'true');\n\n    this.dimensions = {\n      scaledCharWidth: 0,\n      scaledCharHeight: 0,\n      scaledCellWidth: 0,\n      scaledCellHeight: 0,\n      scaledCharLeft: 0,\n      scaledCharTop: 0,\n      scaledCanvasWidth: 0,\n      scaledCanvasHeight: 0,\n      canvasWidth: 0,\n      canvasHeight: 0,\n      actualCellWidth: 0,\n      actualCellHeight: 0\n    };\n    this._updateDimensions();\n    this._injectCss();\n\n    this._rowFactory = instantiationService.createInstance(DomRendererRowFactory, document, this._colors);\n\n    this._element.classList.add(TERMINAL_CLASS_PREFIX + this._terminalClass);\n    this._screenElement.appendChild(this._rowContainer);\n    this._screenElement.appendChild(this._selectionContainer);\n\n    this.register(this._linkifier.onShowLinkUnderline(e => this._onLinkHover(e)));\n    this.register(this._linkifier.onHideLinkUnderline(e => this._onLinkLeave(e)));\n\n    this.register(this._linkifier2.onShowLinkUnderline(e => this._onLinkHover(e)));\n    this.register(this._linkifier2.onHideLinkUnderline(e => this._onLinkLeave(e)));\n  }\n\n  public dispose(): void {\n    this._element.classList.remove(TERMINAL_CLASS_PREFIX + this._terminalClass);\n\n    // Outside influences such as React unmounts may manipulate the DOM before our disposal.\n    // https://github.com/xtermjs/xterm.js/issues/2960\n    removeElementFromParent(this._rowContainer, this._selectionContainer, this._themeStyleElement, this._dimensionsStyleElement);\n\n    super.dispose();\n  }\n\n  private _updateDimensions(): void {\n    this.dimensions.scaledCharWidth = this._charSizeService.width * window.devicePixelRatio;\n    this.dimensions.scaledCharHeight = Math.ceil(this._charSizeService.height * window.devicePixelRatio);\n    this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._optionsService.rawOptions.letterSpacing);\n    this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._optionsService.rawOptions.lineHeight);\n    this.dimensions.scaledCharLeft = 0;\n    this.dimensions.scaledCharTop = 0;\n    this.dimensions.scaledCanvasWidth = this.dimensions.scaledCellWidth * this._bufferService.cols;\n    this.dimensions.scaledCanvasHeight = this.dimensions.scaledCellHeight * this._bufferService.rows;\n    this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / window.devicePixelRatio);\n    this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / window.devicePixelRatio);\n    this.dimensions.actualCellWidth = this.dimensions.canvasWidth / this._bufferService.cols;\n    this.dimensions.actualCellHeight = this.dimensions.canvasHeight / this._bufferService.rows;\n\n    for (const element of this._rowElements) {\n      element.style.width = `${this.dimensions.canvasWidth}px`;\n      element.style.height = `${this.dimensions.actualCellHeight}px`;\n      element.style.lineHeight = `${this.dimensions.actualCellHeight}px`;\n      // Make sure rows don't overflow onto following row\n      element.style.overflow = 'hidden';\n    }\n\n    if (!this._dimensionsStyleElement) {\n      this._dimensionsStyleElement = document.createElement('style');\n      this._screenElement.appendChild(this._dimensionsStyleElement);\n    }\n\n    const styles =\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} span {` +\n      ` display: inline-block;` +\n      ` height: 100%;` +\n      ` vertical-align: top;` +\n      ` width: ${this.dimensions.actualCellWidth}px` +\n      `}`;\n\n    this._dimensionsStyleElement.textContent = styles;\n\n    this._selectionContainer.style.height = this._viewportElement.style.height;\n    this._screenElement.style.width = `${this.dimensions.canvasWidth}px`;\n    this._screenElement.style.height = `${this.dimensions.canvasHeight}px`;\n  }\n\n  public setColors(colors: IColorSet): void {\n    this._colors = colors;\n    this._injectCss();\n  }\n\n  private _injectCss(): void {\n    if (!this._themeStyleElement) {\n      this._themeStyleElement = document.createElement('style');\n      this._screenElement.appendChild(this._themeStyleElement);\n    }\n\n    // Base CSS\n    let styles =\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} {` +\n      ` color: ${this._colors.foreground.css};` +\n      ` font-family: ${this._optionsService.rawOptions.fontFamily};` +\n      ` font-size: ${this._optionsService.rawOptions.fontSize}px;` +\n      `}`;\n    // Text styles\n    styles +=\n      `${this._terminalSelector} span:not(.${BOLD_CLASS}) {` +\n      ` font-weight: ${this._optionsService.rawOptions.fontWeight};` +\n      `}` +\n      `${this._terminalSelector} span.${BOLD_CLASS} {` +\n      ` font-weight: ${this._optionsService.rawOptions.fontWeightBold};` +\n      `}` +\n      `${this._terminalSelector} span.${ITALIC_CLASS} {` +\n      ` font-style: italic;` +\n      `}`;\n    // Blink animation\n    styles +=\n      `@keyframes blink_box_shadow` + `_` + this._terminalClass + ` {` +\n      ` 50% {` +\n      `  box-shadow: none;` +\n      ` }` +\n      `}`;\n    styles +=\n      `@keyframes blink_block` + `_` + this._terminalClass + ` {` +\n      ` 0% {` +\n      `  background-color: ${this._colors.cursor.css};` +\n      `  color: ${this._colors.cursorAccent.css};` +\n      ` }` +\n      ` 50% {` +\n      `  background-color: ${this._colors.cursorAccent.css};` +\n      `  color: ${this._colors.cursor.css};` +\n      ` }` +\n      `}`;\n    // Cursor\n    styles +=\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS}:not(.${FOCUS_CLASS}) .${CURSOR_CLASS}.${CURSOR_STYLE_BLOCK_CLASS} {` +\n      ` outline: 1px solid ${this._colors.cursor.css};` +\n      ` outline-offset: -1px;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS}.${FOCUS_CLASS} .${CURSOR_CLASS}.${CURSOR_BLINK_CLASS}:not(.${CURSOR_STYLE_BLOCK_CLASS}) {` +\n      ` animation: blink_box_shadow` + `_` + this._terminalClass + ` 1s step-end infinite;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS}.${FOCUS_CLASS} .${CURSOR_CLASS}.${CURSOR_BLINK_CLASS}.${CURSOR_STYLE_BLOCK_CLASS} {` +\n      ` animation: blink_block` + `_` + this._terminalClass + ` 1s step-end infinite;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS}.${FOCUS_CLASS} .${CURSOR_CLASS}.${CURSOR_STYLE_BLOCK_CLASS} {` +\n      ` background-color: ${this._colors.cursor.css};` +\n      ` color: ${this._colors.cursorAccent.css};` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} .${CURSOR_CLASS}.${CURSOR_STYLE_BAR_CLASS} {` +\n      ` box-shadow: ${this._optionsService.rawOptions.cursorWidth}px 0 0 ${this._colors.cursor.css} inset;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} .${CURSOR_CLASS}.${CURSOR_STYLE_UNDERLINE_CLASS} {` +\n      ` box-shadow: 0 -1px 0 ${this._colors.cursor.css} inset;` +\n      `}`;\n    // Selection\n    styles +=\n      `${this._terminalSelector} .${SELECTION_CLASS} {` +\n      ` position: absolute;` +\n      ` top: 0;` +\n      ` left: 0;` +\n      ` z-index: 1;` +\n      ` pointer-events: none;` +\n      `}` +\n      `${this._terminalSelector} .${SELECTION_CLASS} div {` +\n      ` position: absolute;` +\n      ` background-color: ${this._colors.selectionOpaque.css};` +\n      `}`;\n    // Colors\n    this._colors.ansi.forEach((c, i) => {\n      styles +=\n        `${this._terminalSelector} .${FG_CLASS_PREFIX}${i} { color: ${c.css}; }` +\n        `${this._terminalSelector} .${BG_CLASS_PREFIX}${i} { background-color: ${c.css}; }`;\n    });\n    styles +=\n      `${this._terminalSelector} .${FG_CLASS_PREFIX}${INVERTED_DEFAULT_COLOR} { color: ${color.opaque(this._colors.background).css}; }` +\n      `${this._terminalSelector} .${BG_CLASS_PREFIX}${INVERTED_DEFAULT_COLOR} { background-color: ${this._colors.foreground.css}; }`;\n\n    this._themeStyleElement.textContent = styles;\n  }\n\n  public onDevicePixelRatioChange(): void {\n    this._updateDimensions();\n  }\n\n  private _refreshRowElements(cols: number, rows: number): void {\n    // Add missing elements\n    for (let i = this._rowElements.length; i <= rows; i++) {\n      const row = document.createElement('div');\n      this._rowContainer.appendChild(row);\n      this._rowElements.push(row);\n    }\n    // Remove excess elements\n    while (this._rowElements.length > rows) {\n      this._rowContainer.removeChild(this._rowElements.pop()!);\n    }\n  }\n\n  public onResize(cols: number, rows: number): void {\n    this._refreshRowElements(cols, rows);\n    this._updateDimensions();\n  }\n\n  public onCharSizeChanged(): void {\n    this._updateDimensions();\n  }\n\n  public onBlur(): void {\n    this._rowContainer.classList.remove(FOCUS_CLASS);\n  }\n\n  public onFocus(): void {\n    this._rowContainer.classList.add(FOCUS_CLASS);\n  }\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    // Remove all selections\n    while (this._selectionContainer.children.length) {\n      this._selectionContainer.removeChild(this._selectionContainer.children[0]);\n    }\n\n    this._rowFactory.onSelectionChanged(start, end, columnSelectMode);\n    this.renderRows(0, this._bufferService.rows - 1);\n\n    // Selection does not exist\n    if (!start || !end) {\n      return;\n    }\n\n    // Translate from buffer position to viewport position\n    const viewportStartRow = start[1] - this._bufferService.buffer.ydisp;\n    const viewportEndRow = end[1] - this._bufferService.buffer.ydisp;\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\n    const viewportCappedEndRow = Math.min(viewportEndRow, this._bufferService.rows - 1);\n\n    // No need to draw the selection\n    if (viewportCappedStartRow >= this._bufferService.rows || viewportCappedEndRow < 0) {\n      return;\n    }\n\n    // Create the selections\n    const documentFragment = document.createDocumentFragment();\n\n    if (columnSelectMode) {\n      const isXFlipped = start[0] > end[0];\n      documentFragment.appendChild(\n        this._createSelectionElement(viewportCappedStartRow, isXFlipped ? end[0] : start[0], isXFlipped ? start[0] : end[0], viewportCappedEndRow - viewportCappedStartRow + 1)\n      );\n    } else {\n      // Draw first row\n      const startCol = viewportStartRow === viewportCappedStartRow ? start[0] : 0;\n      const endCol = viewportCappedStartRow === viewportEndRow ? end[0] : this._bufferService.cols;\n      documentFragment.appendChild(this._createSelectionElement(viewportCappedStartRow, startCol, endCol));\n      // Draw middle rows\n      const middleRowsCount = viewportCappedEndRow - viewportCappedStartRow - 1;\n      documentFragment.appendChild(this._createSelectionElement(viewportCappedStartRow + 1, 0, this._bufferService.cols, middleRowsCount));\n      // Draw final row\n      if (viewportCappedStartRow !== viewportCappedEndRow) {\n        // Only draw viewportEndRow if it's not the same as viewporttartRow\n        const endCol = viewportEndRow === viewportCappedEndRow ? end[0] : this._bufferService.cols;\n        documentFragment.appendChild(this._createSelectionElement(viewportCappedEndRow, 0, endCol));\n      }\n    }\n    this._selectionContainer.appendChild(documentFragment);\n  }\n\n  /**\n   * Creates a selection element at the specified position.\n   * @param row The row of the selection.\n   * @param colStart The start column.\n   * @param colEnd The end columns.\n   */\n  private _createSelectionElement(row: number, colStart: number, colEnd: number, rowCount: number = 1): HTMLElement {\n    const element = document.createElement('div');\n    element.style.height = `${rowCount * this.dimensions.actualCellHeight}px`;\n    element.style.top = `${row * this.dimensions.actualCellHeight}px`;\n    element.style.left = `${colStart * this.dimensions.actualCellWidth}px`;\n    element.style.width = `${this.dimensions.actualCellWidth * (colEnd - colStart)}px`;\n    return element;\n  }\n\n  public onCursorMove(): void {\n    // No-op, the cursor is drawn when rows are drawn\n  }\n\n  public onOptionsChanged(): void {\n    // Force a refresh\n    this._updateDimensions();\n    this._injectCss();\n  }\n\n  public clear(): void {\n    for (const e of this._rowElements) {\n      e.innerText = '';\n    }\n  }\n\n  public renderRows(start: number, end: number): void {\n    const cursorAbsoluteY = this._bufferService.buffer.ybase + this._bufferService.buffer.y;\n    const cursorX = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1);\n    const cursorBlink = this._optionsService.rawOptions.cursorBlink;\n\n    for (let y = start; y <= end; y++) {\n      const rowElement = this._rowElements[y];\n      rowElement.innerText = '';\n      const row = y + this._bufferService.buffer.ydisp;\n      const lineData = this._bufferService.buffer.lines.get(row);\n      const cursorStyle = this._optionsService.rawOptions.cursorStyle;\n      rowElement.appendChild(this._rowFactory.createRow(lineData!, row, row === cursorAbsoluteY, cursorStyle, cursorX, cursorBlink, this.dimensions.actualCellWidth, this._bufferService.cols));\n    }\n  }\n\n  private get _terminalSelector(): string {\n    return `.${TERMINAL_CLASS_PREFIX}${this._terminalClass}`;\n  }\n\n  private _onLinkHover(e: ILinkifierEvent): void {\n    this._setCellUnderline(e.x1, e.x2, e.y1, e.y2, e.cols, true);\n  }\n\n  private _onLinkLeave(e: ILinkifierEvent): void {\n    this._setCellUnderline(e.x1, e.x2, e.y1, e.y2, e.cols, false);\n  }\n\n  private _setCellUnderline(x: number, x2: number, y: number, y2: number, cols: number, enabled: boolean): void {\n    while (x !== x2 || y !== y2) {\n      const row = this._rowElements[y];\n      if (!row) {\n        return;\n      }\n      const span = row.children[x] as HTMLElement;\n      if (span) {\n        span.style.textDecoration = enabled ? 'underline' : 'none';\n      }\n      if (++x >= cols) {\n        x = 0;\n        y++;\n      }\n    }\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferLine, ICellData, IColor } from 'common/Types';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/atlas/Constants';\nimport { NULL_CELL_CODE, WHITESPACE_CELL_CHAR, Attributes } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferService, ICoreService, IDecorationService, IOptionsService } from 'common/services/Services';\nimport { color, rgba } from 'common/Color';\nimport { IColorSet } from 'browser/Types';\nimport { ICharacterJoinerService, ISelectionService } from 'browser/services/Services';\nimport { JoinedCellData } from 'browser/services/CharacterJoinerService';\nimport { excludeFromContrastRatioDemands } from 'browser/renderer/RendererUtils';\n\nexport const BOLD_CLASS = 'xterm-bold';\nexport const DIM_CLASS = 'xterm-dim';\nexport const ITALIC_CLASS = 'xterm-italic';\nexport const UNDERLINE_CLASS = 'xterm-underline';\nexport const STRIKETHROUGH_CLASS = 'xterm-strikethrough';\nexport const CURSOR_CLASS = 'xterm-cursor';\nexport const CURSOR_BLINK_CLASS = 'xterm-cursor-blink';\nexport const CURSOR_STYLE_BLOCK_CLASS = 'xterm-cursor-block';\nexport const CURSOR_STYLE_BAR_CLASS = 'xterm-cursor-bar';\nexport const CURSOR_STYLE_UNDERLINE_CLASS = 'xterm-cursor-underline';\n\nexport class DomRendererRowFactory {\n  private _workCell: CellData = new CellData();\n\n  private _selectionStart: [number, number] | undefined;\n  private _selectionEnd: [number, number] | undefined;\n  private _columnSelectMode: boolean = false;\n\n  constructor(\n    private readonly _document: Document,\n    private _colors: IColorSet,\n    @ICharacterJoinerService private readonly _characterJoinerService: ICharacterJoinerService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICoreService private readonly _coreService: ICoreService,\n    @IDecorationService private readonly _decorationService: IDecorationService\n  ) {\n  }\n\n  public setColors(colors: IColorSet): void {\n    this._colors = colors;\n  }\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    this._selectionStart = start;\n    this._selectionEnd = end;\n    this._columnSelectMode = columnSelectMode;\n  }\n\n  public createRow(lineData: IBufferLine, row: number, isCursorRow: boolean, cursorStyle: string | undefined, cursorX: number, cursorBlink: boolean, cellWidth: number, cols: number): DocumentFragment {\n    const fragment = this._document.createDocumentFragment();\n\n    const joinedRanges = this._characterJoinerService.getJoinedCharacters(row);\n    // Find the line length first, this prevents the need to output a bunch of\n    // empty cells at the end. This cannot easily be integrated into the main\n    // loop below because of the colCount feature (which can be removed after we\n    // properly support reflow and disallow data to go beyond the right-side of\n    // the viewport).\n    let lineLength = 0;\n    for (let x = Math.min(lineData.length, cols) - 1; x >= 0; x--) {\n      if (lineData.loadCell(x, this._workCell).getCode() !== NULL_CELL_CODE || (isCursorRow && x === cursorX)) {\n        lineLength = x + 1;\n        break;\n      }\n    }\n\n    for (let x = 0; x < lineLength; x++) {\n      lineData.loadCell(x, this._workCell);\n      let width = this._workCell.getWidth();\n\n      // The character to the left is a wide character, drawing is owned by the char at x-1\n      if (width === 0) {\n        continue;\n      }\n\n      // If true, indicates that the current character(s) to draw were joined.\n      let isJoined = false;\n      let lastCharX = x;\n\n      // Process any joined character ranges as needed. Because of how the\n      // ranges are produced, we know that they are valid for the characters\n      // and attributes of our input.\n      let cell = this._workCell;\n      if (joinedRanges.length > 0 && x === joinedRanges[0][0]) {\n        isJoined = true;\n        const range = joinedRanges.shift()!;\n\n        // We already know the exact start and end column of the joined range,\n        // so we get the string and width representing it directly\n        cell = new JoinedCellData(\n          this._workCell,\n          lineData.translateToString(true, range[0], range[1]),\n          range[1] - range[0]\n        );\n\n        // Skip over the cells occupied by this range in the loop\n        lastCharX = range[1] - 1;\n\n        // Recalculate width\n        width = cell.getWidth();\n      }\n\n      const charElement = this._document.createElement('span');\n      if (width > 1) {\n        charElement.style.width = `${cellWidth * width}px`;\n      }\n\n      if (isJoined) {\n        // Ligatures in the DOM renderer must use display inline, as they may not show with\n        // inline-block if they are outside the bounds of the element\n        charElement.style.display = 'inline';\n\n        // The DOM renderer colors the background of the cursor but for ligatures all cells are\n        // joined. The workaround here is to show a cursor around the whole ligature so it shows up,\n        // the cursor looks the same when on any character of the ligature though\n        if (cursorX >= x && cursorX <= lastCharX) {\n          cursorX = x;\n        }\n      }\n\n      if (!this._coreService.isCursorHidden && isCursorRow && x === cursorX) {\n        charElement.classList.add(CURSOR_CLASS);\n\n        if (cursorBlink) {\n          charElement.classList.add(CURSOR_BLINK_CLASS);\n        }\n\n        switch (cursorStyle) {\n          case 'bar':\n            charElement.classList.add(CURSOR_STYLE_BAR_CLASS);\n            break;\n          case 'underline':\n            charElement.classList.add(CURSOR_STYLE_UNDERLINE_CLASS);\n            break;\n          default:\n            charElement.classList.add(CURSOR_STYLE_BLOCK_CLASS);\n            break;\n        }\n      }\n\n      if (cell.isBold()) {\n        charElement.classList.add(BOLD_CLASS);\n      }\n\n      if (cell.isItalic()) {\n        charElement.classList.add(ITALIC_CLASS);\n      }\n\n      if (cell.isDim()) {\n        charElement.classList.add(DIM_CLASS);\n      }\n\n      if (cell.isUnderline()) {\n        charElement.classList.add(UNDERLINE_CLASS);\n      }\n\n      if (cell.isInvisible()) {\n        charElement.textContent = WHITESPACE_CELL_CHAR;\n      } else {\n        charElement.textContent = cell.getChars() || WHITESPACE_CELL_CHAR;\n      }\n\n      if (cell.isStrikethrough()) {\n        charElement.classList.add(STRIKETHROUGH_CLASS);\n      }\n\n      let fg = cell.getFgColor();\n      let fgColorMode = cell.getFgColorMode();\n      let bg = cell.getBgColor();\n      let bgColorMode = cell.getBgColorMode();\n      const isInverse = !!cell.isInverse();\n      if (isInverse) {\n        const temp = fg;\n        fg = bg;\n        bg = temp;\n        const temp2 = fgColorMode;\n        fgColorMode = bgColorMode;\n        bgColorMode = temp2;\n      }\n\n      // Apply any decoration foreground/background overrides, this must happen after inverse has\n      // been applied\n      let bgOverride: IColor | undefined;\n      let fgOverride: IColor | undefined;\n      let isTop = false;\n      for (const d of this._decorationService.getDecorationsAtCell(x, row)) {\n        if (d.options.layer !== 'top' && isTop) {\n          continue;\n        }\n        if (d.backgroundColorRGB) {\n          bgColorMode = Attributes.CM_RGB;\n          bg = d.backgroundColorRGB.rgba >> 8 & 0xFFFFFF;\n          bgOverride = d.backgroundColorRGB;\n        }\n        if (d.foregroundColorRGB) {\n          fgColorMode = Attributes.CM_RGB;\n          fg = d.foregroundColorRGB.rgba >> 8 & 0xFFFFFF;\n          fgOverride = d.foregroundColorRGB;\n        }\n        isTop = d.options.layer === 'top';\n      }\n\n      // Apply selection foreground if applicable\n      const isInSelection = this._isCellInSelection(x, row);\n      if (!isTop) {\n        if (this._colors.selectionForeground && isInSelection) {\n          fgColorMode = Attributes.CM_RGB;\n          fg = this._colors.selectionForeground.rgba >> 8 & 0xFFFFFF;\n          fgOverride = this._colors.selectionForeground;\n        }\n      }\n\n      // If in the selection, force the element to be above the selection to improve contrast and\n      // support opaque selections\n      if (isInSelection) {\n        bgOverride = this._colors.selectionOpaque;\n        isTop = true;\n      }\n\n      // If it's a top decoration, render above the selection\n      if (isTop) {\n        charElement.classList.add(`xterm-decoration-top`);\n      }\n\n      // Background\n      let resolvedBg: IColor;\n      switch (bgColorMode) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          resolvedBg = this._colors.ansi[bg];\n          charElement.classList.add(`xterm-bg-${bg}`);\n          break;\n        case Attributes.CM_RGB:\n          resolvedBg = rgba.toColor(bg >> 16, bg >> 8 & 0xFF, bg & 0xFF);\n          this._addStyle(charElement, `background-color:#${padStart((bg >>> 0).toString(16), '0', 6)}`);\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          if (isInverse) {\n            resolvedBg = this._colors.foreground;\n            charElement.classList.add(`xterm-bg-${INVERTED_DEFAULT_COLOR}`);\n          } else {\n            resolvedBg = this._colors.background;\n          }\n      }\n\n      // Foreground\n      switch (fgColorMode) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          if (cell.isBold() && fg < 8 && this._optionsService.rawOptions.drawBoldTextInBrightColors) {\n            fg += 8;\n          }\n          if (!this._applyMinimumContrast(charElement, resolvedBg, this._colors.ansi[fg], cell, bgOverride, undefined)) {\n            charElement.classList.add(`xterm-fg-${fg}`);\n          }\n          break;\n        case Attributes.CM_RGB:\n          const color = rgba.toColor(\n            (fg >> 16) & 0xFF,\n            (fg >>  8) & 0xFF,\n            (fg      ) & 0xFF\n          );\n          if (!this._applyMinimumContrast(charElement, resolvedBg, color, cell, bgOverride, fgOverride)) {\n            this._addStyle(charElement, `color:#${padStart(fg.toString(16), '0', 6)}`);\n          }\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          if (!this._applyMinimumContrast(charElement, resolvedBg, this._colors.foreground, cell, bgOverride, undefined)) {\n            if (isInverse) {\n              charElement.classList.add(`xterm-fg-${INVERTED_DEFAULT_COLOR}`);\n            }\n          }\n      }\n\n      fragment.appendChild(charElement);\n\n      x = lastCharX;\n    }\n    return fragment;\n  }\n\n  private _applyMinimumContrast(element: HTMLElement, bg: IColor, fg: IColor, cell: ICellData, bgOverride: IColor | undefined, fgOverride: IColor | undefined): boolean {\n    if (this._optionsService.rawOptions.minimumContrastRatio === 1 || excludeFromContrastRatioDemands(cell.getCode())) {\n      return false;\n    }\n\n    // Try get from cache first, only use the cache when there are no decoration overrides\n    let adjustedColor: IColor | undefined | null = undefined;\n    if (!bgOverride && !fgOverride) {\n      adjustedColor = this._colors.contrastCache.getColor(bg.rgba, fg.rgba);\n    }\n\n    // Calculate and store in cache\n    if (adjustedColor === undefined) {\n      adjustedColor = color.ensureContrastRatio(bgOverride || bg, fgOverride || fg, this._optionsService.rawOptions.minimumContrastRatio);\n      this._colors.contrastCache.setColor((bgOverride || bg).rgba, (fgOverride || fg).rgba, adjustedColor ?? null);\n    }\n\n    if (adjustedColor) {\n      this._addStyle(element, `color:${adjustedColor.css}`);\n      return true;\n    }\n\n    return false;\n  }\n\n  private _addStyle(element: HTMLElement, style: string): void {\n    element.setAttribute('style', `${element.getAttribute('style') || ''}${style};`);\n  }\n\n  private _isCellInSelection(x: number, y: number): boolean {\n    const start = this._selectionStart;\n    const end = this._selectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    if (this._columnSelectMode) {\n      if (start[0] <= end[0]) {\n        return x >= start[0] && y >= start[1] &&\n          x < end[0] && y <= end[1];\n      }\n      return x < start[0] && y >= start[1] &&\n        x >= end[0] && y <= end[1];\n    }\n    return (y > start[1] && y < end[1]) ||\n        (start[1] === end[1] && y === start[1] && x >= start[0] && x < end[0]) ||\n        (start[1] < end[1] && y === end[1] && x < end[0]) ||\n        (start[1] < end[1] && y === start[1] && x >= start[0]);\n  }\n}\n\nfunction padStart(text: string, padChar: string, length: number): string {\n  while (text.length < length) {\n    text = padChar + text;\n  }\n  return text;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferService } from 'common/services/Services';\n\n/**\n * Represents a selection within the buffer. This model only cares about column\n * and row coordinates, not wide characters.\n */\nexport class SelectionModel {\n  /**\n   * Whether select all is currently active.\n   */\n  public isSelectAllActive: boolean = false;\n\n  /**\n   * The minimal length of the selection from the start position. When double\n   * clicking on a word, the word will be selected which makes the selection\n   * start at the start of the word and makes this variable the length.\n   */\n  public selectionStartLength: number = 0;\n\n  /**\n   * The [x, y] position the selection starts at.\n   */\n  public selectionStart: [number, number] | undefined;\n\n  /**\n   * The [x, y] position the selection ends at.\n   */\n  public selectionEnd: [number, number] | undefined;\n\n  constructor(\n    private _bufferService: IBufferService\n  ) {\n  }\n\n  /**\n   * Clears the current selection.\n   */\n  public clearSelection(): void {\n    this.selectionStart = undefined;\n    this.selectionEnd = undefined;\n    this.isSelectAllActive = false;\n    this.selectionStartLength = 0;\n  }\n\n  /**\n   * The final selection start, taking into consideration select all.\n   */\n  public get finalSelectionStart(): [number, number] | undefined {\n    if (this.isSelectAllActive) {\n      return [0, 0];\n    }\n\n    if (!this.selectionEnd || !this.selectionStart) {\n      return this.selectionStart;\n    }\n\n    return this.areSelectionValuesReversed() ? this.selectionEnd : this.selectionStart;\n  }\n\n  /**\n   * The final selection end, taking into consideration select all, double click\n   * word selection and triple click line selection.\n   */\n  public get finalSelectionEnd(): [number, number] | undefined {\n    if (this.isSelectAllActive) {\n      return [this._bufferService.cols, this._bufferService.buffer.ybase + this._bufferService.rows - 1];\n    }\n\n    if (!this.selectionStart) {\n      return undefined;\n    }\n\n    // Use the selection start + length if the end doesn't exist or they're reversed\n    if (!this.selectionEnd || this.areSelectionValuesReversed()) {\n      const startPlusLength = this.selectionStart[0] + this.selectionStartLength;\n      if (startPlusLength > this._bufferService.cols) {\n        // Ensure the trailing EOL isn't included when the selection ends on the right edge\n        if (startPlusLength % this._bufferService.cols === 0) {\n          return [this._bufferService.cols, this.selectionStart[1] + Math.floor(startPlusLength / this._bufferService.cols) - 1];\n        }\n        return [startPlusLength % this._bufferService.cols, this.selectionStart[1] + Math.floor(startPlusLength / this._bufferService.cols)];\n      }\n      return [startPlusLength, this.selectionStart[1]];\n    }\n\n    // Ensure the the word/line is selected after a double/triple click\n    if (this.selectionStartLength) {\n      // Select the larger of the two when start and end are on the same line\n      if (this.selectionEnd[1] === this.selectionStart[1]) {\n        // Keep the whole wrapped word/line selected if the content wraps multiple lines\n        const startPlusLength = this.selectionStart[0] + this.selectionStartLength;\n        if (startPlusLength > this._bufferService.cols) {\n          return [startPlusLength % this._bufferService.cols, this.selectionStart[1] + Math.floor(startPlusLength / this._bufferService.cols)];\n        }\n        return [Math.max(startPlusLength, this.selectionEnd[0]), this.selectionEnd[1]];\n      }\n    }\n    return this.selectionEnd;\n  }\n\n  /**\n   * Returns whether the selection start and end are reversed.\n   */\n  public areSelectionValuesReversed(): boolean {\n    const start = this.selectionStart;\n    const end = this.selectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    return start[1] > end[1] || (start[1] === end[1] && start[0] > end[0]);\n  }\n\n  /**\n   * Handle the buffer being trimmed, adjust the selection position.\n   * @param amount The amount the buffer is being trimmed.\n   * @return Whether a refresh is necessary.\n   */\n  public onTrim(amount: number): boolean {\n    // Adjust the selection position based on the trimmed amount.\n    if (this.selectionStart) {\n      this.selectionStart[1] -= amount;\n    }\n    if (this.selectionEnd) {\n      this.selectionEnd[1] -= amount;\n    }\n\n    // The selection has moved off the buffer, clear it.\n    if (this.selectionEnd && this.selectionEnd[1] < 0) {\n      this.clearSelection();\n      return true;\n    }\n\n    // If the selection start is trimmed, ensure the start column is 0.\n    if (this.selectionStart && this.selectionStart[1] < 0) {\n      this.selectionStart[1] = 0;\n    }\n    return false;\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOptionsService } from 'common/services/Services';\nimport { IEvent, EventEmitter } from 'common/EventEmitter';\nimport { ICharSizeService } from 'browser/services/Services';\n\nexport class CharSizeService implements ICharSizeService {\n  public serviceBrand: undefined;\n\n  public width: number = 0;\n  public height: number = 0;\n  private _measureStrategy: IMeasureStrategy;\n\n  public get hasValidSize(): boolean { return this.width > 0 && this.height > 0; }\n\n  private _onCharSizeChange = new EventEmitter<void>();\n  public get onCharSizeChange(): IEvent<void> { return this._onCharSizeChange.event; }\n\n  constructor(\n    document: Document,\n    parentElement: HTMLElement,\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    this._measureStrategy = new DomMeasureStrategy(document, parentElement, this._optionsService);\n  }\n\n  public measure(): void {\n    const result = this._measureStrategy.measure();\n    if (result.width !== this.width || result.height !== this.height) {\n      this.width = result.width;\n      this.height = result.height;\n      this._onCharSizeChange.fire();\n    }\n  }\n}\n\ninterface IMeasureStrategy {\n  measure(): IReadonlyMeasureResult;\n}\n\ninterface IReadonlyMeasureResult {\n  readonly width: number;\n  readonly height: number;\n}\n\ninterface IMeasureResult {\n  width: number;\n  height: number;\n}\n\n// TODO: For supporting browsers we should also provide a CanvasCharDimensionsProvider that uses ctx.measureText\nclass DomMeasureStrategy implements IMeasureStrategy {\n  private _result: IMeasureResult = { width: 0, height: 0 };\n  private _measureElement: HTMLElement;\n\n  constructor(\n    private _document: Document,\n    private _parentElement: HTMLElement,\n    private _optionsService: IOptionsService\n  ) {\n    this._measureElement = this._document.createElement('span');\n    this._measureElement.classList.add('xterm-char-measure-element');\n    this._measureElement.textContent = 'W';\n    this._measureElement.setAttribute('aria-hidden', 'true');\n    this._parentElement.appendChild(this._measureElement);\n  }\n\n  public measure(): IReadonlyMeasureResult {\n    this._measureElement.style.fontFamily = this._optionsService.rawOptions.fontFamily;\n    this._measureElement.style.fontSize = `${this._optionsService.rawOptions.fontSize}px`;\n\n    // Note that this triggers a synchronous layout\n    const geometry = this._measureElement.getBoundingClientRect();\n\n    // If values are 0 then the element is likely currently display:none, in which case we should\n    // retain the previous value.\n    if (geometry.width !== 0 && geometry.height !== 0) {\n      this._result.width = geometry.width;\n      this._result.height = Math.ceil(geometry.height);\n    }\n\n    return this._result;\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferLine, ICellData, CharData } from 'common/Types';\nimport { ICharacterJoiner } from 'browser/Types';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { WHITESPACE_CELL_CHAR, Content } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferService } from 'common/services/Services';\nimport { ICharacterJoinerService } from 'browser/services/Services';\n\nexport class JoinedCellData extends AttributeData implements ICellData {\n  private _width: number;\n  // .content carries no meaning for joined CellData, simply nullify it\n  // thus we have to overload all other .content accessors\n  public content: number = 0;\n  public fg: number;\n  public bg: number;\n  public combinedData: string = '';\n\n  constructor(firstCell: ICellData, chars: string, width: number) {\n    super();\n    this.fg = firstCell.fg;\n    this.bg = firstCell.bg;\n    this.combinedData = chars;\n    this._width = width;\n  }\n\n  public isCombined(): number {\n    // always mark joined cell data as combined\n    return Content.IS_COMBINED_MASK;\n  }\n\n  public getWidth(): number {\n    return this._width;\n  }\n\n  public getChars(): string {\n    return this.combinedData;\n  }\n\n  public getCode(): number {\n    // code always gets the highest possible fake codepoint (read as -1)\n    // this is needed as code is used by caches as identifier\n    return 0x1FFFFF;\n  }\n\n  public setFromCharData(value: CharData): void {\n    throw new Error('not implemented');\n  }\n\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n\nexport class CharacterJoinerService implements ICharacterJoinerService {\n  public serviceBrand: undefined;\n\n  private _characterJoiners: ICharacterJoiner[] = [];\n  private _nextCharacterJoinerId: number = 0;\n  private _workCell: CellData = new CellData();\n\n  constructor(\n    @IBufferService private _bufferService: IBufferService\n  ) { }\n\n  public register(handler: (text: string) => [number, number][]): number {\n    const joiner: ICharacterJoiner = {\n      id: this._nextCharacterJoinerId++,\n      handler\n    };\n\n    this._characterJoiners.push(joiner);\n    return joiner.id;\n  }\n\n  public deregister(joinerId: number): boolean {\n    for (let i = 0; i < this._characterJoiners.length; i++) {\n      if (this._characterJoiners[i].id === joinerId) {\n        this._characterJoiners.splice(i, 1);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public getJoinedCharacters(row: number): [number, number][] {\n    if (this._characterJoiners.length === 0) {\n      return [];\n    }\n\n    const line = this._bufferService.buffer.lines.get(row);\n    if (!line || line.length === 0) {\n      return [];\n    }\n\n    const ranges: [number, number][] = [];\n    const lineStr = line.translateToString(true);\n\n    // Because some cells can be represented by multiple javascript characters,\n    // we track the cell and the string indexes separately. This allows us to\n    // translate the string ranges we get from the joiners back into cell ranges\n    // for use when rendering\n    let rangeStartColumn = 0;\n    let currentStringIndex = 0;\n    let rangeStartStringIndex = 0;\n    let rangeAttrFG = line.getFg(0);\n    let rangeAttrBG = line.getBg(0);\n\n    for (let x = 0; x < line.getTrimmedLength(); x++) {\n      line.loadCell(x, this._workCell);\n\n      if (this._workCell.getWidth() === 0) {\n        // If this character is of width 0, skip it.\n        continue;\n      }\n\n      // End of range\n      if (this._workCell.fg !== rangeAttrFG || this._workCell.bg !== rangeAttrBG) {\n        // If we ended up with a sequence of more than one character,\n        // look for ranges to join.\n        if (x - rangeStartColumn > 1) {\n          const joinedRanges = this._getJoinedRanges(\n            lineStr,\n            rangeStartStringIndex,\n            currentStringIndex,\n            line,\n            rangeStartColumn\n          );\n          for (let i = 0; i < joinedRanges.length; i++) {\n            ranges.push(joinedRanges[i]);\n          }\n        }\n\n        // Reset our markers for a new range.\n        rangeStartColumn = x;\n        rangeStartStringIndex = currentStringIndex;\n        rangeAttrFG = this._workCell.fg;\n        rangeAttrBG = this._workCell.bg;\n      }\n\n      currentStringIndex += this._workCell.getChars().length || WHITESPACE_CELL_CHAR.length;\n    }\n\n    // Process any trailing ranges.\n    if (this._bufferService.cols - rangeStartColumn > 1) {\n      const joinedRanges = this._getJoinedRanges(\n        lineStr,\n        rangeStartStringIndex,\n        currentStringIndex,\n        line,\n        rangeStartColumn\n      );\n      for (let i = 0; i < joinedRanges.length; i++) {\n        ranges.push(joinedRanges[i]);\n      }\n    }\n\n    return ranges;\n  }\n\n  /**\n   * Given a segment of a line of text, find all ranges of text that should be\n   * joined in a single rendering unit. Ranges are internally converted to\n   * column ranges, rather than string ranges.\n   * @param line String representation of the full line of text\n   * @param startIndex Start position of the range to search in the string (inclusive)\n   * @param endIndex End position of the range to search in the string (exclusive)\n   */\n  private _getJoinedRanges(line: string, startIndex: number, endIndex: number, lineData: IBufferLine, startCol: number): [number, number][] {\n    const text = line.substring(startIndex, endIndex);\n    // At this point we already know that there is at least one joiner so\n    // we can just pull its value and assign it directly rather than\n    // merging it into an empty array, which incurs unnecessary writes.\n    let allJoinedRanges: [number, number][] = [];\n    try {\n      allJoinedRanges = this._characterJoiners[0].handler(text);\n    } catch (error) {\n      console.error(error);\n    }\n    for (let i = 1; i < this._characterJoiners.length; i++) {\n      // We merge any overlapping ranges across the different joiners\n      try {\n        const joinerRanges = this._characterJoiners[i].handler(text);\n        for (let j = 0; j < joinerRanges.length; j++) {\n          CharacterJoinerService._mergeRanges(allJoinedRanges, joinerRanges[j]);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    this._stringRangesToCellRanges(allJoinedRanges, lineData, startCol);\n    return allJoinedRanges;\n  }\n\n  /**\n   * Modifies the provided ranges in-place to adjust for variations between\n   * string length and cell width so that the range represents a cell range,\n   * rather than the string range the joiner provides.\n   * @param ranges String ranges containing start (inclusive) and end (exclusive) index\n   * @param line Cell data for the relevant line in the terminal\n   * @param startCol Offset within the line to start from\n   */\n  private _stringRangesToCellRanges(ranges: [number, number][], line: IBufferLine, startCol: number): void {\n    let currentRangeIndex = 0;\n    let currentRangeStarted = false;\n    let currentStringIndex = 0;\n    let currentRange = ranges[currentRangeIndex];\n\n    // If we got through all of the ranges, stop searching\n    if (!currentRange) {\n      return;\n    }\n\n    for (let x = startCol; x < this._bufferService.cols; x++) {\n      const width = line.getWidth(x);\n      const length = line.getString(x).length || WHITESPACE_CELL_CHAR.length;\n\n      // We skip zero-width characters when creating the string to join the text\n      // so we do the same here\n      if (width === 0) {\n        continue;\n      }\n\n      // Adjust the start of the range\n      if (!currentRangeStarted && currentRange[0] <= currentStringIndex) {\n        currentRange[0] = x;\n        currentRangeStarted = true;\n      }\n\n      // Adjust the end of the range\n      if (currentRange[1] <= currentStringIndex) {\n        currentRange[1] = x;\n\n        // We're finished with this range, so we move to the next one\n        currentRange = ranges[++currentRangeIndex];\n\n        // If there are no more ranges left, stop searching\n        if (!currentRange) {\n          break;\n        }\n\n        // Ranges can be on adjacent characters. Because the end index of the\n        // ranges are exclusive, this means that the index for the start of a\n        // range can be the same as the end index of the previous range. To\n        // account for the start of the next range, we check here just in case.\n        if (currentRange[0] <= currentStringIndex) {\n          currentRange[0] = x;\n          currentRangeStarted = true;\n        } else {\n          currentRangeStarted = false;\n        }\n      }\n\n      // Adjust the string index based on the character length to line up with\n      // the column adjustment\n      currentStringIndex += length;\n    }\n\n    // If there is still a range left at the end, it must extend all the way to\n    // the end of the line.\n    if (currentRange) {\n      currentRange[1] = this._bufferService.cols;\n    }\n  }\n\n  /**\n   * Merges the range defined by the provided start and end into the list of\n   * existing ranges. The merge is done in place on the existing range for\n   * performance and is also returned.\n   * @param ranges Existing range list\n   * @param newRange Tuple of two numbers representing the new range to merge in.\n   * @returns The ranges input with the new range merged in place\n   */\n  private static _mergeRanges(ranges: [number, number][], newRange: [number, number]): [number, number][] {\n    let inRange = false;\n    for (let i = 0; i < ranges.length; i++) {\n      const range = ranges[i];\n      if (!inRange) {\n        if (newRange[1] <= range[0]) {\n          // Case 1: New range is before the search range\n          ranges.splice(i, 0, newRange);\n          return ranges;\n        }\n\n        if (newRange[1] <= range[1]) {\n          // Case 2: New range is either wholly contained within the\n          // search range or overlaps with the front of it\n          range[0] = Math.min(newRange[0], range[0]);\n          return ranges;\n        }\n\n        if (newRange[0] < range[1]) {\n          // Case 3: New range either wholly contains the search range\n          // or overlaps with the end of it\n          range[0] = Math.min(newRange[0], range[0]);\n          inRange = true;\n        }\n\n        // Case 4: New range starts after the search range\n        continue;\n      } else {\n        if (newRange[1] <= range[0]) {\n          // Case 5: New range extends from previous range but doesn't\n          // reach the current one\n          ranges[i - 1][1] = newRange[1];\n          return ranges;\n        }\n\n        if (newRange[1] <= range[1]) {\n          // Case 6: New range extends from prvious range into the\n          // current range\n          ranges[i - 1][1] = Math.max(newRange[1], range[1]);\n          ranges.splice(i, 1);\n          return ranges;\n        }\n\n        // Case 7: New range extends from previous range past the\n        // end of the current range\n        ranges.splice(i, 1);\n        i--;\n      }\n    }\n\n    if (inRange) {\n      // Case 8: New range extends past the last existing range\n      ranges[ranges.length - 1][1] = newRange[1];\n    } else {\n      // Case 9: New range starts after the last existing range\n      ranges.push(newRange);\n    }\n\n    return ranges;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICoreBrowserService } from './Services';\n\nexport class CoreBrowserService implements ICoreBrowserService {\n  public serviceBrand: undefined;\n\n  constructor(\n    private _textarea: HTMLTextAreaElement\n  ) {\n  }\n\n  public get isFocused(): boolean {\n    const docOrShadowRoot = this._textarea.getRootNode ? this._textarea.getRootNode() as Document | ShadowRoot : document;\n    return docOrShadowRoot.activeElement === this._textarea && document.hasFocus();\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharSizeService, IRenderService, IMouseService } from './Services';\nimport { getCoords, getRawByteCoords } from 'browser/input/Mouse';\n\nexport class MouseService implements IMouseService {\n  public serviceBrand: undefined;\n\n  constructor(\n    @IRenderService private readonly _renderService: IRenderService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService\n  ) {\n  }\n\n  public getCoords(event: {clientX: number, clientY: number}, element: HTMLElement, colCount: number, rowCount: number, isSelection?: boolean): [number, number] | undefined {\n    return getCoords(\n      window,\n      event,\n      element,\n      colCount,\n      rowCount,\n      this._charSizeService.hasValidSize,\n      this._renderService.dimensions.actualCellWidth,\n      this._renderService.dimensions.actualCellHeight,\n      isSelection\n    );\n  }\n\n  public getRawByteCoords(event: MouseEvent, element: HTMLElement, colCount: number, rowCount: number): { x: number, y: number } | undefined {\n    const coords = this.getCoords(event, element, colCount, rowCount);\n    return getRawByteCoords(coords);\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderer, IRenderDimensions } from 'browser/renderer/Types';\nimport { RenderDebouncer } from 'browser/RenderDebouncer';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { ScreenDprMonitor } from 'browser/ScreenDprMonitor';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IColorSet, IRenderDebouncer, IRenderDebouncerWithCallback } from 'browser/Types';\nimport { IOptionsService, IBufferService, IDecorationService } from 'common/services/Services';\nimport { ICharSizeService, IRenderService } from 'browser/services/Services';\n\ninterface ISelectionState {\n  start: [number, number] | undefined;\n  end: [number, number] | undefined;\n  columnSelectMode: boolean;\n}\n\nexport class RenderService extends Disposable implements IRenderService {\n  public serviceBrand: undefined;\n\n  private _renderDebouncer: IRenderDebouncerWithCallback;\n  private _screenDprMonitor: ScreenDprMonitor;\n\n  private _isPaused: boolean = false;\n  private _needsFullRefresh: boolean = false;\n  private _isNextRenderRedrawOnly: boolean = true;\n  private _needsSelectionRefresh: boolean = false;\n  private _canvasWidth: number = 0;\n  private _canvasHeight: number = 0;\n  private _selectionState: ISelectionState = {\n    start: undefined,\n    end: undefined,\n    columnSelectMode: false\n  };\n\n  private _onDimensionsChange = new EventEmitter<IRenderDimensions>();\n  public get onDimensionsChange(): IEvent<IRenderDimensions> { return this._onDimensionsChange.event; }\n  private _onRenderedViewportChange = new EventEmitter<{ start: number, end: number }>();\n  public get onRenderedViewportChange(): IEvent<{ start: number, end: number }> { return this._onRenderedViewportChange.event; }\n  private _onRender = new EventEmitter<{ start: number, end: number }>();\n  public get onRender(): IEvent<{ start: number, end: number }> { return this._onRender.event; }\n  private _onRefreshRequest = new EventEmitter<{ start: number, end: number }>();\n  public get onRefreshRequest(): IEvent<{ start: number, end: number }> { return this._onRefreshRequest.event; }\n\n  public get dimensions(): IRenderDimensions { return this._renderer.dimensions; }\n\n  constructor(\n    private _renderer: IRenderer,\n    private _rowCount: number,\n    screenElement: HTMLElement,\n    @IOptionsService optionsService: IOptionsService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService,\n    @IDecorationService decorationService: IDecorationService,\n    @IBufferService bufferService: IBufferService\n  ) {\n    super();\n\n    this.register({ dispose: () => this._renderer.dispose() });\n\n    this._renderDebouncer = new RenderDebouncer((start, end) => this._renderRows(start, end));\n    this.register(this._renderDebouncer);\n\n    this._screenDprMonitor = new ScreenDprMonitor();\n    this._screenDprMonitor.setListener(() => this.onDevicePixelRatioChange());\n    this.register(this._screenDprMonitor);\n\n    this.register(bufferService.onResize(() => this._fullRefresh()));\n    this.register(bufferService.buffers.onBufferActivate(() => this._renderer?.clear()));\n    this.register(optionsService.onOptionChange(() => this._handleOptionsChanged()));\n    this.register(this._charSizeService.onCharSizeChange(() => this.onCharSizeChanged()));\n\n    // Do a full refresh whenever any decoration is added or removed. This may not actually result\n    // in changes but since decorations should be used sparingly or added/removed all in the same\n    // frame this should have minimal performance impact.\n    this.register(decorationService.onDecorationRegistered(() => this._fullRefresh()));\n    this.register(decorationService.onDecorationRemoved(() => this._fullRefresh()));\n\n    // No need to register this as renderer is explicitly disposed in RenderService.dispose\n    this._renderer.onRequestRedraw(e => this.refreshRows(e.start, e.end, true));\n\n    // dprchange should handle this case, we need this as well for browsers that don't support the\n    // matchMedia query.\n    this.register(addDisposableDomListener(window, 'resize', () => this.onDevicePixelRatioChange()));\n\n    // Detect whether IntersectionObserver is detected and enable renderer pause\n    // and resume based on terminal visibility if so\n    if ('IntersectionObserver' in window) {\n      const observer = new IntersectionObserver(e => this._onIntersectionChange(e[e.length - 1]), { threshold: 0 });\n      observer.observe(screenElement);\n      this.register({ dispose: () => observer.disconnect() });\n    }\n  }\n\n  private _onIntersectionChange(entry: IntersectionObserverEntry): void {\n    this._isPaused = entry.isIntersecting === undefined ? (entry.intersectionRatio === 0) : !entry.isIntersecting;\n\n    // Terminal was hidden on open\n    if (!this._isPaused && !this._charSizeService.hasValidSize) {\n      this._charSizeService.measure();\n    }\n\n    if (!this._isPaused && this._needsFullRefresh) {\n      this.refreshRows(0, this._rowCount - 1);\n      this._needsFullRefresh = false;\n    }\n  }\n\n  public refreshRows(start: number, end: number, isRedrawOnly: boolean = false): void {\n    if (this._isPaused) {\n      this._needsFullRefresh = true;\n      return;\n    }\n    if (!isRedrawOnly) {\n      this._isNextRenderRedrawOnly = false;\n    }\n    this._renderDebouncer.refresh(start, end, this._rowCount);\n  }\n\n  private _renderRows(start: number, end: number): void {\n    this._renderer.renderRows(start, end);\n\n    // Update selection if needed\n    if (this._needsSelectionRefresh) {\n      this._renderer.onSelectionChanged(this._selectionState.start, this._selectionState.end, this._selectionState.columnSelectMode);\n      this._needsSelectionRefresh = false;\n    }\n\n    // Fire render event only if it was not a redraw\n    if (!this._isNextRenderRedrawOnly) {\n      this._onRenderedViewportChange.fire({ start, end });\n    }\n    this._onRender.fire({ start, end });\n    this._isNextRenderRedrawOnly = true;\n  }\n\n  public resize(cols: number, rows: number): void {\n    this._rowCount = rows;\n    this._fireOnCanvasResize();\n  }\n\n  private _handleOptionsChanged(): void {\n    this._renderer.onOptionsChanged();\n    this.refreshRows(0, this._rowCount - 1);\n    this._fireOnCanvasResize();\n  }\n\n  private _fireOnCanvasResize(): void {\n    // Don't fire the event if the dimensions haven't changed\n    if (this._renderer.dimensions.canvasWidth === this._canvasWidth && this._renderer.dimensions.canvasHeight === this._canvasHeight) {\n      return;\n    }\n    this._onDimensionsChange.fire(this._renderer.dimensions);\n  }\n\n  public dispose(): void {\n    super.dispose();\n  }\n\n  public setRenderer(renderer: IRenderer): void {\n    // TODO: RenderService should be the only one to dispose the renderer\n    this._renderer.dispose();\n    this._renderer = renderer;\n    this._renderer.onRequestRedraw(e => this.refreshRows(e.start, e.end, true));\n\n    // Force a refresh\n    this._needsSelectionRefresh = true;\n    this._fullRefresh();\n  }\n\n  public addRefreshCallback(callback: FrameRequestCallback): number {\n    return this._renderDebouncer.addRefreshCallback(callback);\n  }\n\n  private _fullRefresh(): void {\n    if (this._isPaused) {\n      this._needsFullRefresh = true;\n    } else {\n      this.refreshRows(0, this._rowCount - 1);\n    }\n  }\n\n  public clearTextureAtlas(): void {\n    this._renderer?.clearTextureAtlas?.();\n    this._fullRefresh();\n  }\n\n  public setColors(colors: IColorSet): void {\n    this._renderer.setColors(colors);\n    this._fullRefresh();\n  }\n\n  public onDevicePixelRatioChange(): void {\n    // Force char size measurement as DomMeasureStrategy(getBoundingClientRect) is not stable\n    // when devicePixelRatio changes\n    this._charSizeService.measure();\n\n    this._renderer.onDevicePixelRatioChange();\n    this.refreshRows(0, this._rowCount - 1);\n  }\n\n  public onResize(cols: number, rows: number): void {\n    this._renderer.onResize(cols, rows);\n    this._fullRefresh();\n  }\n\n  // TODO: Is this useful when we have onResize?\n  public onCharSizeChanged(): void {\n    this._renderer.onCharSizeChanged();\n  }\n\n  public onBlur(): void {\n    this._renderer.onBlur();\n  }\n\n  public onFocus(): void {\n    this._renderer.onFocus();\n  }\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    this._selectionState.start = start;\n    this._selectionState.end = end;\n    this._selectionState.columnSelectMode = columnSelectMode;\n    this._renderer.onSelectionChanged(start, end, columnSelectMode);\n  }\n\n  public onCursorMove(): void {\n    this._renderer.onCursorMove();\n  }\n\n  public clear(): void {\n    this._renderer.clear();\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ISelectionRedrawRequestEvent, ISelectionRequestScrollLinesEvent } from 'browser/selection/Types';\nimport { IBuffer } from 'common/buffer/Types';\nimport { IBufferLine, IDisposable } from 'common/Types';\nimport * as Browser from 'common/Platform';\nimport { SelectionModel } from 'browser/selection/SelectionModel';\nimport { CellData } from 'common/buffer/CellData';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { IMouseService, ISelectionService, IRenderService } from 'browser/services/Services';\nimport { IBufferRange, ILinkifier2 } from 'browser/Types';\nimport { IBufferService, IOptionsService, ICoreService } from 'common/services/Services';\nimport { getCoordsRelativeToElement } from 'browser/input/Mouse';\nimport { moveToCellSequence } from 'browser/input/MoveToCell';\nimport { Disposable } from 'common/Lifecycle';\nimport { getRangeLength } from 'common/buffer/BufferRange';\n\n/**\n * The number of pixels the mouse needs to be above or below the viewport in\n * order to scroll at the maximum speed.\n */\nconst DRAG_SCROLL_MAX_THRESHOLD = 50;\n\n/**\n * The maximum scrolling speed\n */\nconst DRAG_SCROLL_MAX_SPEED = 15;\n\n/**\n * The number of milliseconds between drag scroll updates.\n */\nconst DRAG_SCROLL_INTERVAL = 50;\n\n/**\n * The maximum amount of time that can have elapsed for an alt click to move the\n * cursor.\n */\nconst ALT_CLICK_MOVE_CURSOR_TIME = 500;\n\nconst NON_BREAKING_SPACE_CHAR = String.fromCharCode(160);\nconst ALL_NON_BREAKING_SPACE_REGEX = new RegExp(NON_BREAKING_SPACE_CHAR, 'g');\n\n/**\n * Represents a position of a word on a line.\n */\ninterface IWordPosition {\n  start: number;\n  length: number;\n}\n\n/**\n * A selection mode, this drives how the selection behaves on mouse move.\n */\nexport const enum SelectionMode {\n  NORMAL,\n  WORD,\n  LINE,\n  COLUMN\n}\n\n/**\n * A class that manages the selection of the terminal. With help from\n * SelectionModel, SelectionService handles with all logic associated with\n * dealing with the selection, including handling mouse interaction, wide\n * characters and fetching the actual text within the selection. Rendering is\n * not handled by the SelectionService but the onRedrawRequest event is fired\n * when the selection is ready to be redrawn (on an animation frame).\n */\nexport class SelectionService extends Disposable implements ISelectionService {\n  public serviceBrand: undefined;\n\n  protected _model: SelectionModel;\n\n  /**\n   * The amount to scroll every drag scroll update (depends on how far the mouse\n   * drag is above or below the terminal).\n   */\n  private _dragScrollAmount: number = 0;\n\n  /**\n   * The current selection mode.\n   */\n  protected _activeSelectionMode: SelectionMode;\n\n  /**\n   * A setInterval timer that is active while the mouse is down whose callback\n   * scrolls the viewport when necessary.\n   */\n  private _dragScrollIntervalTimer: number | undefined;\n\n  /**\n   * The animation frame ID used for refreshing the selection.\n   */\n  private _refreshAnimationFrame: number | undefined;\n\n  /**\n   * Whether selection is enabled.\n   */\n  private _enabled = true;\n\n  private _mouseMoveListener: EventListener;\n  private _mouseUpListener: EventListener;\n  private _trimListener: IDisposable;\n  private _workCell: CellData = new CellData();\n\n  private _mouseDownTimeStamp: number = 0;\n  private _oldHasSelection: boolean = false;\n  private _oldSelectionStart: [number, number] | undefined = undefined;\n  private _oldSelectionEnd: [number, number] | undefined = undefined;\n\n  private _onLinuxMouseSelection = this.register(new EventEmitter<string>());\n  public get onLinuxMouseSelection(): IEvent<string> { return this._onLinuxMouseSelection.event; }\n  private _onRedrawRequest = this.register(new EventEmitter<ISelectionRedrawRequestEvent>());\n  public get onRequestRedraw(): IEvent<ISelectionRedrawRequestEvent> { return this._onRedrawRequest.event; }\n  private _onSelectionChange = this.register(new EventEmitter<void>());\n  public get onSelectionChange(): IEvent<void> { return this._onSelectionChange.event; }\n  private _onRequestScrollLines = this.register(new EventEmitter<ISelectionRequestScrollLinesEvent>());\n  public get onRequestScrollLines(): IEvent<ISelectionRequestScrollLinesEvent> { return this._onRequestScrollLines.event; }\n\n  constructor(\n    private readonly _element: HTMLElement,\n    private readonly _screenElement: HTMLElement,\n    private readonly _linkifier: ILinkifier2,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ICoreService private readonly _coreService: ICoreService,\n    @IMouseService private readonly _mouseService: IMouseService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @IRenderService private readonly _renderService: IRenderService\n  ) {\n    super();\n\n    // Init listeners\n    this._mouseMoveListener = event => this._onMouseMove(event as MouseEvent);\n    this._mouseUpListener = event => this._onMouseUp(event as MouseEvent);\n    this._coreService.onUserInput(() => {\n      if (this.hasSelection) {\n        this.clearSelection();\n      }\n    });\n    this._trimListener = this._bufferService.buffer.lines.onTrim(amount => this._onTrim(amount));\n    this.register(this._bufferService.buffers.onBufferActivate(e => this._onBufferActivate(e)));\n\n    this.enable();\n\n    this._model = new SelectionModel(this._bufferService);\n    this._activeSelectionMode = SelectionMode.NORMAL;\n  }\n\n  public dispose(): void {\n    this._removeMouseDownListeners();\n  }\n\n  public reset(): void {\n    this.clearSelection();\n  }\n\n  /**\n   * Disables the selection manager. This is useful for when terminal mouse\n   * are enabled.\n   */\n  public disable(): void {\n    this.clearSelection();\n    this._enabled = false;\n  }\n\n  /**\n   * Enable the selection manager.\n   */\n  public enable(): void {\n    this._enabled = true;\n  }\n\n  public get selectionStart(): [number, number] | undefined { return this._model.finalSelectionStart; }\n  public get selectionEnd(): [number, number] | undefined { return this._model.finalSelectionEnd; }\n\n  /**\n   * Gets whether there is an active text selection.\n   */\n  public get hasSelection(): boolean {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    return start[0] !== end[0] || start[1] !== end[1];\n  }\n\n  /**\n   * Gets the text currently selected.\n   */\n  public get selectionText(): string {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    if (!start || !end) {\n      return '';\n    }\n\n    const buffer = this._bufferService.buffer;\n    const result: string[] = [];\n\n    if (this._activeSelectionMode === SelectionMode.COLUMN) {\n      // Ignore zero width selections\n      if (start[0] === end[0]) {\n        return '';\n      }\n\n      // For column selection it's not enough to rely on final selection's swapping of reversed\n      // values, it also needs the x coordinates to swap independently of the y coordinate is needed\n      const startCol = start[0] < end[0] ? start[0] : end[0];\n      const endCol = start[0] < end[0] ? end[0] : start[0];\n      for (let i = start[1]; i <= end[1]; i++) {\n        const lineText = buffer.translateBufferLineToString(i, true, startCol, endCol);\n        result.push(lineText);\n      }\n    } else {\n      // Get first row\n      const startRowEndCol = start[1] === end[1] ? end[0] : undefined;\n      result.push(buffer.translateBufferLineToString(start[1], true, start[0], startRowEndCol));\n\n      // Get middle rows\n      for (let i = start[1] + 1; i <= end[1] - 1; i++) {\n        const bufferLine = buffer.lines.get(i);\n        const lineText = buffer.translateBufferLineToString(i, true);\n        if (bufferLine?.isWrapped) {\n          result[result.length - 1] += lineText;\n        } else {\n          result.push(lineText);\n        }\n      }\n\n      // Get final row\n      if (start[1] !== end[1]) {\n        const bufferLine = buffer.lines.get(end[1]);\n        const lineText = buffer.translateBufferLineToString(end[1], true, 0, end[0]);\n        if (bufferLine && bufferLine!.isWrapped) {\n          result[result.length - 1] += lineText;\n        } else {\n          result.push(lineText);\n        }\n      }\n    }\n\n    // Format string by replacing non-breaking space chars with regular spaces\n    // and joining the array into a multi-line string.\n    const formattedResult = result.map(line => {\n      return line.replace(ALL_NON_BREAKING_SPACE_REGEX, ' ');\n    }).join(Browser.isWindows ? '\\r\\n' : '\\n');\n\n    return formattedResult;\n  }\n\n  /**\n   * Clears the current terminal selection.\n   */\n  public clearSelection(): void {\n    this._model.clearSelection();\n    this._removeMouseDownListeners();\n    this.refresh();\n    this._onSelectionChange.fire();\n  }\n\n  /**\n   * Queues a refresh, redrawing the selection on the next opportunity.\n   * @param isLinuxMouseSelection Whether the selection should be registered as a new\n   * selection on Linux.\n   */\n  public refresh(isLinuxMouseSelection?: boolean): void {\n    // Queue the refresh for the renderer\n    if (!this._refreshAnimationFrame) {\n      this._refreshAnimationFrame = window.requestAnimationFrame(() => this._refresh());\n    }\n\n    // If the platform is Linux and the refresh call comes from a mouse event,\n    // we need to update the selection for middle click to paste selection.\n    if (Browser.isLinux && isLinuxMouseSelection) {\n      const selectionText = this.selectionText;\n      if (selectionText.length) {\n        this._onLinuxMouseSelection.fire(this.selectionText);\n      }\n    }\n  }\n\n  /**\n   * Fires the refresh event, causing consumers to pick it up and redraw the\n   * selection state.\n   */\n  private _refresh(): void {\n    this._refreshAnimationFrame = undefined;\n    this._onRedrawRequest.fire({\n      start: this._model.finalSelectionStart,\n      end: this._model.finalSelectionEnd,\n      columnSelectMode: this._activeSelectionMode === SelectionMode.COLUMN\n    });\n  }\n\n  /**\n   * Checks if the current click was inside the current selection\n   * @param event The mouse event\n   */\n  private _isClickInSelection(event: MouseEvent): boolean {\n    const coords = this._getMouseBufferCoords(event);\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n\n    if (!start || !end || !coords) {\n      return false;\n    }\n\n    return this._areCoordsInSelection(coords, start, end);\n  }\n\n  public isCellInSelection(x: number, y: number): boolean {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    return this._areCoordsInSelection([x, y], start, end);\n  }\n\n  protected _areCoordsInSelection(coords: [number, number], start: [number, number], end: [number, number]): boolean {\n    return (coords[1] > start[1] && coords[1] < end[1]) ||\n        (start[1] === end[1] && coords[1] === start[1] && coords[0] >= start[0] && coords[0] < end[0]) ||\n        (start[1] < end[1] && coords[1] === end[1] && coords[0] < end[0]) ||\n        (start[1] < end[1] && coords[1] === start[1] && coords[0] >= start[0]);\n  }\n\n  /**\n   * Selects word at the current mouse event coordinates.\n   * @param event The mouse event.\n   */\n  private _selectWordAtCursor(event: MouseEvent, allowWhitespaceOnlySelection: boolean): boolean {\n    // Check if there is a link under the cursor first and select that if so\n    const range = this._linkifier.currentLink?.link?.range;\n    if (range) {\n      this._model.selectionStart = [range.start.x - 1, range.start.y - 1];\n      this._model.selectionStartLength = getRangeLength(range, this._bufferService.cols);\n      this._model.selectionEnd = undefined;\n      return true;\n    }\n\n    const coords = this._getMouseBufferCoords(event);\n    if (coords) {\n      this._selectWordAt(coords, allowWhitespaceOnlySelection);\n      this._model.selectionEnd = undefined;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Selects all text within the terminal.\n   */\n  public selectAll(): void {\n    this._model.isSelectAllActive = true;\n    this.refresh();\n    this._onSelectionChange.fire();\n  }\n\n  public selectLines(start: number, end: number): void {\n    this._model.clearSelection();\n    start = Math.max(start, 0);\n    end = Math.min(end, this._bufferService.buffer.lines.length - 1);\n    this._model.selectionStart = [0, start];\n    this._model.selectionEnd = [this._bufferService.cols, end];\n    this.refresh();\n    this._onSelectionChange.fire();\n  }\n\n  /**\n   * Handle the buffer being trimmed, adjust the selection position.\n   * @param amount The amount the buffer is being trimmed.\n   */\n  private _onTrim(amount: number): void {\n    const needsRefresh = this._model.onTrim(amount);\n    if (needsRefresh) {\n      this.refresh();\n    }\n  }\n\n  /**\n   * Gets the 0-based [x, y] buffer coordinates of the current mouse event.\n   * @param event The mouse event.\n   */\n  private _getMouseBufferCoords(event: MouseEvent): [number, number] | undefined {\n    const coords = this._mouseService.getCoords(event, this._screenElement, this._bufferService.cols, this._bufferService.rows, true);\n    if (!coords) {\n      return undefined;\n    }\n\n    // Convert to 0-based\n    coords[0]--;\n    coords[1]--;\n\n    // Convert viewport coords to buffer coords\n    coords[1] += this._bufferService.buffer.ydisp;\n    return coords;\n  }\n\n  /**\n   * Gets the amount the viewport should be scrolled based on how far out of the\n   * terminal the mouse is.\n   * @param event The mouse event.\n   */\n  private _getMouseEventScrollAmount(event: MouseEvent): number {\n    let offset = getCoordsRelativeToElement(window, event, this._screenElement)[1];\n    const terminalHeight = this._renderService.dimensions.canvasHeight;\n    if (offset >= 0 && offset <= terminalHeight) {\n      return 0;\n    }\n    if (offset > terminalHeight) {\n      offset -= terminalHeight;\n    }\n\n    offset = Math.min(Math.max(offset, -DRAG_SCROLL_MAX_THRESHOLD), DRAG_SCROLL_MAX_THRESHOLD);\n    offset /= DRAG_SCROLL_MAX_THRESHOLD;\n    return (offset / Math.abs(offset)) + Math.round(offset * (DRAG_SCROLL_MAX_SPEED - 1));\n  }\n\n  /**\n   * Returns whether the selection manager should force selection, regardless of\n   * whether the terminal is in mouse events mode.\n   * @param event The mouse event.\n   */\n  public shouldForceSelection(event: MouseEvent): boolean {\n    if (Browser.isMac) {\n      return event.altKey && this._optionsService.rawOptions.macOptionClickForcesSelection;\n    }\n\n    return event.shiftKey;\n  }\n\n  /**\n   * Handles te mousedown event, setting up for a new selection.\n   * @param event The mousedown event.\n   */\n  public onMouseDown(event: MouseEvent): void {\n    this._mouseDownTimeStamp = event.timeStamp;\n    // If we have selection, we want the context menu on right click even if the\n    // terminal is in mouse mode.\n    if (event.button === 2 && this.hasSelection) {\n      return;\n    }\n\n    // Only action the primary button\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Allow selection when using a specific modifier key, even when disabled\n    if (!this._enabled) {\n      if (!this.shouldForceSelection(event)) {\n        return;\n      }\n\n      // Don't send the mouse down event to the current process, we want to select\n      event.stopPropagation();\n    }\n\n    // Tell the browser not to start a regular selection\n    event.preventDefault();\n\n    // Reset drag scroll state\n    this._dragScrollAmount = 0;\n\n    if (this._enabled && event.shiftKey) {\n      this._onIncrementalClick(event);\n    } else {\n      if (event.detail === 1) {\n        this._onSingleClick(event);\n      } else if (event.detail === 2) {\n        this._onDoubleClick(event);\n      } else if (event.detail === 3) {\n        this._onTripleClick(event);\n      }\n    }\n\n    this._addMouseDownListeners();\n    this.refresh(true);\n  }\n\n  /**\n   * Adds listeners when mousedown is triggered.\n   */\n  private _addMouseDownListeners(): void {\n    // Listen on the document so that dragging outside of viewport works\n    if (this._screenElement.ownerDocument) {\n      this._screenElement.ownerDocument.addEventListener('mousemove', this._mouseMoveListener);\n      this._screenElement.ownerDocument.addEventListener('mouseup', this._mouseUpListener);\n    }\n    this._dragScrollIntervalTimer = window.setInterval(() => this._dragScroll(), DRAG_SCROLL_INTERVAL);\n  }\n\n  /**\n   * Removes the listeners that are registered when mousedown is triggered.\n   */\n  private _removeMouseDownListeners(): void {\n    if (this._screenElement.ownerDocument) {\n      this._screenElement.ownerDocument.removeEventListener('mousemove', this._mouseMoveListener);\n      this._screenElement.ownerDocument.removeEventListener('mouseup', this._mouseUpListener);\n    }\n    clearInterval(this._dragScrollIntervalTimer);\n    this._dragScrollIntervalTimer = undefined;\n  }\n\n  /**\n   * Performs an incremental click, setting the selection end position to the mouse\n   * position.\n   * @param event The mouse event.\n   */\n  private _onIncrementalClick(event: MouseEvent): void {\n    if (this._model.selectionStart) {\n      this._model.selectionEnd = this._getMouseBufferCoords(event);\n    }\n  }\n\n  /**\n   * Performs a single click, resetting relevant state and setting the selection\n   * start position.\n   * @param event The mouse event.\n   */\n  private _onSingleClick(event: MouseEvent): void {\n    this._model.selectionStartLength = 0;\n    this._model.isSelectAllActive = false;\n    this._activeSelectionMode = this.shouldColumnSelect(event) ? SelectionMode.COLUMN : SelectionMode.NORMAL;\n\n    // Initialize the new selection\n    this._model.selectionStart = this._getMouseBufferCoords(event);\n    if (!this._model.selectionStart) {\n      return;\n    }\n    this._model.selectionEnd = undefined;\n\n    // Ensure the line exists\n    const line = this._bufferService.buffer.lines.get(this._model.selectionStart[1]);\n    if (!line) {\n      return;\n    }\n\n    // Return early if the click event is not in the buffer (eg. in scroll bar)\n    if (line.length === this._model.selectionStart[0]) {\n      return;\n    }\n\n    // If the mouse is over the second half of a wide character, adjust the\n    // selection to cover the whole character\n    if (line.hasWidth(this._model.selectionStart[0]) === 0) {\n      this._model.selectionStart[0]++;\n    }\n  }\n\n  /**\n   * Performs a double click, selecting the current word.\n   * @param event The mouse event.\n   */\n  private _onDoubleClick(event: MouseEvent): void {\n    if (this._selectWordAtCursor(event, true)) {\n      this._activeSelectionMode = SelectionMode.WORD;\n    }\n  }\n\n  /**\n   * Performs a triple click, selecting the current line and activating line\n   * select mode.\n   * @param event The mouse event.\n   */\n  private _onTripleClick(event: MouseEvent): void {\n    const coords = this._getMouseBufferCoords(event);\n    if (coords) {\n      this._activeSelectionMode = SelectionMode.LINE;\n      this._selectLineAt(coords[1]);\n    }\n  }\n\n  /**\n   * Returns whether the selection manager should operate in column select mode\n   * @param event the mouse or keyboard event\n   */\n  public shouldColumnSelect(event: KeyboardEvent | MouseEvent): boolean {\n    return event.altKey && !(Browser.isMac && this._optionsService.rawOptions.macOptionClickForcesSelection);\n  }\n\n  /**\n   * Handles the mousemove event when the mouse button is down, recording the\n   * end of the selection and refreshing the selection.\n   * @param event The mousemove event.\n   */\n  private _onMouseMove(event: MouseEvent): void {\n    // If the mousemove listener is active it means that a selection is\n    // currently being made, we should stop propagation to prevent mouse events\n    // to be sent to the pty.\n    event.stopImmediatePropagation();\n\n    // Do nothing if there is no selection start, this can happen if the first\n    // click in the terminal is an incremental click\n    if (!this._model.selectionStart) {\n      return;\n    }\n\n    // Record the previous position so we know whether to redraw the selection\n    // at the end.\n    const previousSelectionEnd = this._model.selectionEnd ? [this._model.selectionEnd[0], this._model.selectionEnd[1]] : null;\n\n    // Set the initial selection end based on the mouse coordinates\n    this._model.selectionEnd = this._getMouseBufferCoords(event);\n    if (!this._model.selectionEnd) {\n      this.refresh(true);\n      return;\n    }\n\n    // Select the entire line if line select mode is active.\n    if (this._activeSelectionMode === SelectionMode.LINE) {\n      if (this._model.selectionEnd[1] < this._model.selectionStart[1]) {\n        this._model.selectionEnd[0] = 0;\n      } else {\n        this._model.selectionEnd[0] = this._bufferService.cols;\n      }\n    } else if (this._activeSelectionMode === SelectionMode.WORD) {\n      this._selectToWordAt(this._model.selectionEnd);\n    }\n\n    // Determine the amount of scrolling that will happen.\n    this._dragScrollAmount = this._getMouseEventScrollAmount(event);\n\n    // If the cursor was above or below the viewport, make sure it's at the\n    // start or end of the viewport respectively. This should only happen when\n    // NOT in column select mode.\n    if (this._activeSelectionMode !== SelectionMode.COLUMN) {\n      if (this._dragScrollAmount > 0) {\n        this._model.selectionEnd[0] = this._bufferService.cols;\n      } else if (this._dragScrollAmount < 0) {\n        this._model.selectionEnd[0] = 0;\n      }\n    }\n\n    // If the character is a wide character include the cell to the right in the\n    // selection. Note that selections at the very end of the line will never\n    // have a character.\n    const buffer = this._bufferService.buffer;\n    if (this._model.selectionEnd[1] < buffer.lines.length) {\n      const line = buffer.lines.get(this._model.selectionEnd[1]);\n      if (line && line.hasWidth(this._model.selectionEnd[0]) === 0) {\n        this._model.selectionEnd[0]++;\n      }\n    }\n\n    // Only draw here if the selection changes.\n    if (!previousSelectionEnd ||\n      previousSelectionEnd[0] !== this._model.selectionEnd[0] ||\n      previousSelectionEnd[1] !== this._model.selectionEnd[1]) {\n      this.refresh(true);\n    }\n  }\n\n  /**\n   * The callback that occurs every DRAG_SCROLL_INTERVAL ms that does the\n   * scrolling of the viewport.\n   */\n  private _dragScroll(): void {\n    if (!this._model.selectionEnd || !this._model.selectionStart) {\n      return;\n    }\n    if (this._dragScrollAmount) {\n      this._onRequestScrollLines.fire({ amount: this._dragScrollAmount, suppressScrollEvent: false });\n      // Re-evaluate selection\n      // If the cursor was above or below the viewport, make sure it's at the\n      // start or end of the viewport respectively. This should only happen when\n      // NOT in column select mode.\n      const buffer = this._bufferService.buffer;\n      if (this._dragScrollAmount > 0) {\n        if (this._activeSelectionMode !== SelectionMode.COLUMN) {\n          this._model.selectionEnd[0] = this._bufferService.cols;\n        }\n        this._model.selectionEnd[1] = Math.min(buffer.ydisp + this._bufferService.rows, buffer.lines.length - 1);\n      } else {\n        if (this._activeSelectionMode !== SelectionMode.COLUMN) {\n          this._model.selectionEnd[0] = 0;\n        }\n        this._model.selectionEnd[1] = buffer.ydisp;\n      }\n      this.refresh();\n    }\n  }\n\n  /**\n   * Handles the mouseup event, removing the mousedown listeners.\n   * @param event The mouseup event.\n   */\n  private _onMouseUp(event: MouseEvent): void {\n    const timeElapsed = event.timeStamp - this._mouseDownTimeStamp;\n\n    this._removeMouseDownListeners();\n\n    if (this.selectionText.length <= 1 && timeElapsed < ALT_CLICK_MOVE_CURSOR_TIME && event.altKey && this._optionsService.getOption('altClickMovesCursor')) {\n      if (this._bufferService.buffer.ybase === this._bufferService.buffer.ydisp) {\n        const coordinates = this._mouseService.getCoords(\n          event,\n          this._element,\n          this._bufferService.cols,\n          this._bufferService.rows,\n          false\n        );\n        if (coordinates && coordinates[0] !== undefined && coordinates[1] !== undefined) {\n          const sequence = moveToCellSequence(coordinates[0] - 1, coordinates[1] - 1, this._bufferService, this._coreService.decPrivateModes.applicationCursorKeys);\n          this._coreService.triggerDataEvent(sequence, true);\n        }\n      }\n    } else {\n      this._fireEventIfSelectionChanged();\n    }\n  }\n\n  private _fireEventIfSelectionChanged(): void {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    const hasSelection = !!start && !!end && (start[0] !== end[0] || start[1] !== end[1]);\n\n    if (!hasSelection) {\n      if (this._oldHasSelection) {\n        this._fireOnSelectionChange(start, end, hasSelection);\n      }\n      return;\n    }\n\n    // Sanity check, these should not be undefined as there is a selection\n    if (!start || !end) {\n      return;\n    }\n\n    if (!this._oldSelectionStart || !this._oldSelectionEnd || (\n      start[0] !== this._oldSelectionStart[0] || start[1] !== this._oldSelectionStart[1] ||\n      end[0] !== this._oldSelectionEnd[0] || end[1] !== this._oldSelectionEnd[1])) {\n\n      this._fireOnSelectionChange(start, end, hasSelection);\n    }\n  }\n\n  private _fireOnSelectionChange(start: [number, number] | undefined, end: [number, number] | undefined, hasSelection: boolean): void {\n    this._oldSelectionStart = start;\n    this._oldSelectionEnd = end;\n    this._oldHasSelection = hasSelection;\n    this._onSelectionChange.fire();\n  }\n\n  private _onBufferActivate(e: {activeBuffer: IBuffer, inactiveBuffer: IBuffer}): void {\n    this.clearSelection();\n    // Only adjust the selection on trim, shiftElements is rarely used (only in\n    // reverseIndex) and delete in a splice is only ever used when the same\n    // number of elements was just added. Given this is could actually be\n    // beneficial to leave the selection as is for these cases.\n    this._trimListener.dispose();\n    this._trimListener = e.activeBuffer.lines.onTrim(amount => this._onTrim(amount));\n  }\n\n  /**\n   * Converts a viewport column to the character index on the buffer line, the\n   * latter takes into account wide characters.\n   * @param coords The coordinates to find the 2 index for.\n   */\n  private _convertViewportColToCharacterIndex(bufferLine: IBufferLine, coords: [number, number]): number {\n    let charIndex = coords[0];\n    for (let i = 0; coords[0] >= i; i++) {\n      const length = bufferLine.loadCell(i, this._workCell).getChars().length;\n      if (this._workCell.getWidth() === 0) {\n        // Wide characters aren't included in the line string so decrement the\n        // index so the index is back on the wide character.\n        charIndex--;\n      } else if (length > 1 && coords[0] !== i) {\n        // Emojis take up multiple characters, so adjust accordingly. For these\n        // we don't want ot include the character at the column as we're\n        // returning the start index in the string, not the end index.\n        charIndex += length - 1;\n      }\n    }\n    return charIndex;\n  }\n\n  public setSelection(col: number, row: number, length: number): void {\n    this._model.clearSelection();\n    this._removeMouseDownListeners();\n    this._model.selectionStart = [col, row];\n    this._model.selectionStartLength = length;\n    this.refresh();\n    this._fireEventIfSelectionChanged();\n  }\n\n  public rightClickSelect(ev: MouseEvent): void {\n    if (!this._isClickInSelection(ev)) {\n      if (this._selectWordAtCursor(ev, false)) {\n        this.refresh(true);\n      }\n      this._fireEventIfSelectionChanged();\n    }\n  }\n\n  /**\n   * Gets positional information for the word at the coordinated specified.\n   * @param coords The coordinates to get the word at.\n   */\n  private _getWordAt(coords: [number, number], allowWhitespaceOnlySelection: boolean, followWrappedLinesAbove: boolean = true, followWrappedLinesBelow: boolean = true): IWordPosition | undefined {\n    // Ensure coords are within viewport (eg. not within scroll bar)\n    if (coords[0] >= this._bufferService.cols) {\n      return undefined;\n    }\n\n    const buffer = this._bufferService.buffer;\n    const bufferLine = buffer.lines.get(coords[1]);\n    if (!bufferLine) {\n      return undefined;\n    }\n\n    const line = buffer.translateBufferLineToString(coords[1], false);\n\n    // Get actual index, taking into consideration wide characters\n    let startIndex = this._convertViewportColToCharacterIndex(bufferLine, coords);\n    let endIndex = startIndex;\n\n    // Record offset to be used later\n    const charOffset = coords[0] - startIndex;\n    let leftWideCharCount = 0;\n    let rightWideCharCount = 0;\n    let leftLongCharOffset = 0;\n    let rightLongCharOffset = 0;\n\n    if (line.charAt(startIndex) === ' ') {\n      // Expand until non-whitespace is hit\n      while (startIndex > 0 && line.charAt(startIndex - 1) === ' ') {\n        startIndex--;\n      }\n      while (endIndex < line.length && line.charAt(endIndex + 1) === ' ') {\n        endIndex++;\n      }\n    } else {\n      // Expand until whitespace is hit. This algorithm works by scanning left\n      // and right from the starting position, keeping both the index format\n      // (line) and the column format (bufferLine) in sync. When a wide\n      // character is hit, it is recorded and the column index is adjusted.\n      let startCol = coords[0];\n      let endCol = coords[0];\n\n      // Consider the initial position, skip it and increment the wide char\n      // variable\n      if (bufferLine.getWidth(startCol) === 0) {\n        leftWideCharCount++;\n        startCol--;\n      }\n      if (bufferLine.getWidth(endCol) === 2) {\n        rightWideCharCount++;\n        endCol++;\n      }\n\n      // Adjust the end index for characters whose length are > 1 (emojis)\n      const length = bufferLine.getString(endCol).length;\n      if (length > 1) {\n        rightLongCharOffset += length - 1;\n        endIndex += length - 1;\n      }\n\n      // Expand the string in both directions until a space is hit\n      while (startCol > 0 && startIndex > 0 && !this._isCharWordSeparator(bufferLine.loadCell(startCol - 1, this._workCell))) {\n        bufferLine.loadCell(startCol - 1, this._workCell);\n        const length = this._workCell.getChars().length;\n        if (this._workCell.getWidth() === 0) {\n          // If the next character is a wide char, record it and skip the column\n          leftWideCharCount++;\n          startCol--;\n        } else if (length > 1) {\n          // If the next character's string is longer than 1 char (eg. emoji),\n          // adjust the index\n          leftLongCharOffset += length - 1;\n          startIndex -= length - 1;\n        }\n        startIndex--;\n        startCol--;\n      }\n      while (endCol < bufferLine.length && endIndex + 1 < line.length && !this._isCharWordSeparator(bufferLine.loadCell(endCol + 1, this._workCell))) {\n        bufferLine.loadCell(endCol + 1, this._workCell);\n        const length = this._workCell.getChars().length;\n        if (this._workCell.getWidth() === 2) {\n          // If the next character is a wide char, record it and skip the column\n          rightWideCharCount++;\n          endCol++;\n        } else if (length > 1) {\n          // If the next character's string is longer than 1 char (eg. emoji),\n          // adjust the index\n          rightLongCharOffset += length - 1;\n          endIndex += length - 1;\n        }\n        endIndex++;\n        endCol++;\n      }\n    }\n\n    // Incremenet the end index so it is at the start of the next character\n    endIndex++;\n\n    // Calculate the start _column_, converting the the string indexes back to\n    // column coordinates.\n    let start =\n        startIndex // The index of the selection's start char in the line string\n        + charOffset // The difference between the initial char's column and index\n        - leftWideCharCount // The number of wide chars left of the initial char\n        + leftLongCharOffset; // The number of additional chars left of the initial char added by columns with strings longer than 1 (emojis)\n\n    // Calculate the length in _columns_, converting the the string indexes back\n    // to column coordinates.\n    let length = Math.min(this._bufferService.cols, // Disallow lengths larger than the terminal cols\n      endIndex // The index of the selection's end char in the line string\n      - startIndex // The index of the selection's start char in the line string\n      + leftWideCharCount // The number of wide chars left of the initial char\n      + rightWideCharCount // The number of wide chars right of the initial char (inclusive)\n      - leftLongCharOffset // The number of additional chars left of the initial char added by columns with strings longer than 1 (emojis)\n      - rightLongCharOffset); // The number of additional chars right of the initial char (inclusive) added by columns with strings longer than 1 (emojis)\n\n    if (!allowWhitespaceOnlySelection && line.slice(startIndex, endIndex).trim() === '') {\n      return undefined;\n    }\n\n    // Recurse upwards if the line is wrapped and the word wraps to the above line\n    if (followWrappedLinesAbove) {\n      if (start === 0 && bufferLine.getCodePoint(0) !== 32 /* ' ' */) {\n        const previousBufferLine = buffer.lines.get(coords[1] - 1);\n        if (previousBufferLine && bufferLine.isWrapped && previousBufferLine.getCodePoint(this._bufferService.cols - 1) !== 32 /* ' ' */) {\n          const previousLineWordPosition = this._getWordAt([this._bufferService.cols - 1, coords[1] - 1], false, true, false);\n          if (previousLineWordPosition) {\n            const offset = this._bufferService.cols - previousLineWordPosition.start;\n            start -= offset;\n            length += offset;\n          }\n        }\n      }\n    }\n\n    // Recurse downwards if the line is wrapped and the word wraps to the next line\n    if (followWrappedLinesBelow) {\n      if (start + length === this._bufferService.cols && bufferLine.getCodePoint(this._bufferService.cols - 1) !== 32 /* ' ' */) {\n        const nextBufferLine = buffer.lines.get(coords[1] + 1);\n        if (nextBufferLine?.isWrapped && nextBufferLine.getCodePoint(0) !== 32 /* ' ' */) {\n          const nextLineWordPosition = this._getWordAt([0, coords[1] + 1], false, false, true);\n          if (nextLineWordPosition) {\n            length += nextLineWordPosition.length;\n          }\n        }\n      }\n    }\n\n    return { start, length };\n  }\n\n  /**\n   * Selects the word at the coordinates specified.\n   * @param coords The coordinates to get the word at.\n   * @param allowWhitespaceOnlySelection If whitespace should be selected\n   */\n  protected _selectWordAt(coords: [number, number], allowWhitespaceOnlySelection: boolean): void {\n    const wordPosition = this._getWordAt(coords, allowWhitespaceOnlySelection);\n    if (wordPosition) {\n      // Adjust negative start value\n      while (wordPosition.start < 0) {\n        wordPosition.start += this._bufferService.cols;\n        coords[1]--;\n      }\n      this._model.selectionStart = [wordPosition.start, coords[1]];\n      this._model.selectionStartLength = wordPosition.length;\n    }\n  }\n\n  /**\n   * Sets the selection end to the word at the coordinated specified.\n   * @param coords The coordinates to get the word at.\n   */\n  private _selectToWordAt(coords: [number, number]): void {\n    const wordPosition = this._getWordAt(coords, true);\n    if (wordPosition) {\n      let endRow = coords[1];\n\n      // Adjust negative start value\n      while (wordPosition.start < 0) {\n        wordPosition.start += this._bufferService.cols;\n        endRow--;\n      }\n\n      // Adjust wrapped length value, this only needs to happen when values are reversed as in that\n      // case we're interested in the start of the word, not the end\n      if (!this._model.areSelectionValuesReversed()) {\n        while (wordPosition.start + wordPosition.length > this._bufferService.cols) {\n          wordPosition.length -= this._bufferService.cols;\n          endRow++;\n        }\n      }\n\n      this._model.selectionEnd = [this._model.areSelectionValuesReversed() ? wordPosition.start : wordPosition.start + wordPosition.length, endRow];\n    }\n  }\n\n  /**\n   * Gets whether the character is considered a word separator by the select\n   * word logic.\n   * @param char The character to check.\n   */\n  private _isCharWordSeparator(cell: CellData): boolean {\n    // Zero width characters are never separators as they are always to the\n    // right of wide characters\n    if (cell.getWidth() === 0) {\n      return false;\n    }\n    return this._optionsService.rawOptions.wordSeparator.indexOf(cell.getChars()) >= 0;\n  }\n\n  /**\n   * Selects the line specified.\n   * @param line The line index.\n   */\n  protected _selectLineAt(line: number): void {\n    const wrappedRange = this._bufferService.buffer.getWrappedRangeForLine(line);\n    const range: IBufferRange = {\n      start: { x: 0, y: wrappedRange.first },\n      end: { x: this._bufferService.cols - 1, y: wrappedRange.last }\n    };\n    this._model.selectionStart = [0, wrappedRange.first];\n    this._model.selectionEnd = undefined;\n    this._model.selectionStartLength = getRangeLength(range, this._bufferService.cols);\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IEvent } from 'common/EventEmitter';\nimport { IRenderDimensions, IRenderer } from 'browser/renderer/Types';\nimport { IColorSet, IRenderDebouncer } from 'browser/Types';\nimport { ISelectionRedrawRequestEvent as ISelectionRequestRedrawEvent, ISelectionRequestScrollLinesEvent } from 'browser/selection/Types';\nimport { createDecorator } from 'common/services/ServiceRegistry';\nimport { IDisposable } from 'common/Types';\nimport { IDecorationOptions, IDecoration } from 'xterm';\nimport { IBufferService } from 'common/services/Services';\n\nexport const ICharSizeService = createDecorator<ICharSizeService>('CharSizeService');\nexport interface ICharSizeService {\n  serviceBrand: undefined;\n\n  readonly width: number;\n  readonly height: number;\n  readonly hasValidSize: boolean;\n\n  readonly onCharSizeChange: IEvent<void>;\n\n  measure(): void;\n}\n\nexport const ICoreBrowserService = createDecorator<ICoreBrowserService>('CoreBrowserService');\nexport interface ICoreBrowserService {\n  serviceBrand: undefined;\n\n  readonly isFocused: boolean;\n}\n\nexport const IMouseService = createDecorator<IMouseService>('MouseService');\nexport interface IMouseService {\n  serviceBrand: undefined;\n\n  getCoords(event: {clientX: number, clientY: number}, element: HTMLElement, colCount: number, rowCount: number, isSelection?: boolean): [number, number] | undefined;\n  getRawByteCoords(event: MouseEvent, element: HTMLElement, colCount: number, rowCount: number): { x: number, y: number } | undefined;\n}\n\nexport const IRenderService = createDecorator<IRenderService>('RenderService');\nexport interface IRenderService extends IDisposable {\n  serviceBrand: undefined;\n\n  onDimensionsChange: IEvent<IRenderDimensions>;\n  /**\n   * Fires when buffer changes are rendered. This does not fire when only cursor\n   * or selections are rendered.\n   */\n  onRenderedViewportChange: IEvent<{ start: number, end: number }>;\n  /**\n   * Fires on render\n   */\n  onRender: IEvent<{ start: number, end: number }>;\n  onRefreshRequest: IEvent<{ start: number, end: number }>;\n\n  dimensions: IRenderDimensions;\n\n  addRefreshCallback(callback: FrameRequestCallback): number;\n\n  refreshRows(start: number, end: number): void;\n  clearTextureAtlas(): void;\n  resize(cols: number, rows: number): void;\n  setRenderer(renderer: IRenderer): void;\n  setColors(colors: IColorSet): void;\n  onDevicePixelRatioChange(): void;\n  onResize(cols: number, rows: number): void;\n  // TODO: Is this useful when we have onResize?\n  onCharSizeChanged(): void;\n  onBlur(): void;\n  onFocus(): void;\n  onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void;\n  onCursorMove(): void;\n  clear(): void;\n}\n\nexport const ISelectionService = createDecorator<ISelectionService>('SelectionService');\nexport interface ISelectionService {\n  serviceBrand: undefined;\n\n  readonly selectionText: string;\n  readonly hasSelection: boolean;\n  readonly selectionStart: [number, number] | undefined;\n  readonly selectionEnd: [number, number] | undefined;\n\n  readonly onLinuxMouseSelection: IEvent<string>;\n  readonly onRequestRedraw: IEvent<ISelectionRequestRedrawEvent>;\n  readonly onRequestScrollLines: IEvent<ISelectionRequestScrollLinesEvent>;\n  readonly onSelectionChange: IEvent<void>;\n\n  disable(): void;\n  enable(): void;\n  reset(): void;\n  setSelection(row: number, col: number, length: number): void;\n  selectAll(): void;\n  selectLines(start: number, end: number): void;\n  clearSelection(): void;\n  rightClickSelect(event: MouseEvent): void;\n  shouldColumnSelect(event: KeyboardEvent | MouseEvent): boolean;\n  shouldForceSelection(event: MouseEvent): boolean;\n  refresh(isLinuxMouseSelection?: boolean): void;\n  onMouseDown(event: MouseEvent): void;\n  isCellInSelection(x: number, y: number): boolean;\n}\n\nexport const ISoundService = createDecorator<ISoundService>('SoundService');\nexport interface ISoundService {\n  serviceBrand: undefined;\n\n  playBellSound(): void;\n}\n\n\nexport const ICharacterJoinerService = createDecorator<ICharacterJoinerService>('CharacterJoinerService');\nexport interface ICharacterJoinerService {\n  serviceBrand: undefined;\n\n  register(handler: (text: string) => [number, number][]): number;\n  deregister(joinerId: number): boolean;\n  getJoinedCharacters(row: number): [number, number][];\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOptionsService } from 'common/services/Services';\nimport { ISoundService } from 'browser/services/Services';\n\nexport class SoundService implements ISoundService {\n  public serviceBrand: undefined;\n\n  private static _audioContext: AudioContext;\n\n  public static get audioContext(): AudioContext | null {\n    if (!SoundService._audioContext) {\n      const audioContextCtor: typeof AudioContext = (window as any).AudioContext || (window as any).webkitAudioContext;\n      if (!audioContextCtor) {\n        console.warn('Web Audio API is not supported by this browser. Consider upgrading to the latest version');\n        return null;\n      }\n      SoundService._audioContext = new audioContextCtor();\n    }\n    return SoundService._audioContext;\n  }\n\n  constructor(\n    @IOptionsService private _optionsService: IOptionsService\n  ) {\n  }\n\n  public playBellSound(): void {\n    const ctx = SoundService.audioContext;\n    if (!ctx) {\n      return;\n    }\n    const bellAudioSource = ctx.createBufferSource();\n    ctx.decodeAudioData(this._base64ToArrayBuffer(this._removeMimeType(this._optionsService.rawOptions.bellSound)), (buffer) => {\n      bellAudioSource.buffer = buffer;\n      bellAudioSource.connect(ctx.destination);\n      bellAudioSource.start(0);\n    });\n  }\n\n  private _base64ToArrayBuffer(base64: string): ArrayBuffer {\n    const binaryString = window.atob(base64);\n    const len = binaryString.length;\n    const bytes = new Uint8Array(len);\n\n    for (let i = 0; i < len; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n\n    return bytes.buffer;\n  }\n\n  private _removeMimeType(dataURI: string): string {\n    // Split the input to get the mime-type and the data itself\n    const splitUri = dataURI.split(',');\n\n    // Return only the data\n    return splitUri[1];\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICircularList } from 'common/Types';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\n\nexport interface IInsertEvent {\n  index: number;\n  amount: number;\n}\n\nexport interface IDeleteEvent {\n  index: number;\n  amount: number;\n}\n\n/**\n * Represents a circular list; a list with a maximum size that wraps around when push is called,\n * overriding values at the start of the list.\n */\nexport class CircularList<T> implements ICircularList<T> {\n  protected _array: (T | undefined)[];\n  private _startIndex: number;\n  private _length: number;\n\n  public onDeleteEmitter = new EventEmitter<IDeleteEvent>();\n  public get onDelete(): IEvent<IDeleteEvent> { return this.onDeleteEmitter.event; }\n  public onInsertEmitter = new EventEmitter<IInsertEvent>();\n  public get onInsert(): IEvent<IInsertEvent> { return this.onInsertEmitter.event; }\n  public onTrimEmitter = new EventEmitter<number>();\n  public get onTrim(): IEvent<number> { return this.onTrimEmitter.event; }\n\n  constructor(\n    private _maxLength: number\n  ) {\n    this._array = new Array<T>(this._maxLength);\n    this._startIndex = 0;\n    this._length = 0;\n  }\n\n  public get maxLength(): number {\n    return this._maxLength;\n  }\n\n  public set maxLength(newMaxLength: number) {\n    // There was no change in maxLength, return early.\n    if (this._maxLength === newMaxLength) {\n      return;\n    }\n\n    // Reconstruct array, starting at index 0. Only transfer values from the\n    // indexes 0 to length.\n    const newArray = new Array<T | undefined>(newMaxLength);\n    for (let i = 0; i < Math.min(newMaxLength, this.length); i++) {\n      newArray[i] = this._array[this._getCyclicIndex(i)];\n    }\n    this._array = newArray;\n    this._maxLength = newMaxLength;\n    this._startIndex = 0;\n  }\n\n  public get length(): number {\n    return this._length;\n  }\n\n  public set length(newLength: number) {\n    if (newLength > this._length) {\n      for (let i = this._length; i < newLength; i++) {\n        this._array[i] = undefined;\n      }\n    }\n    this._length = newLength;\n  }\n\n  /**\n   * Gets the value at an index.\n   *\n   * Note that for performance reasons there is no bounds checking here, the index reference is\n   * circular so this should always return a value and never throw.\n   * @param index The index of the value to get.\n   * @return The value corresponding to the index.\n   */\n  public get(index: number): T | undefined {\n    return this._array[this._getCyclicIndex(index)];\n  }\n\n  /**\n   * Sets the value at an index.\n   *\n   * Note that for performance reasons there is no bounds checking here, the index reference is\n   * circular so this should always return a value and never throw.\n   * @param index The index to set.\n   * @param value The value to set.\n   */\n  public set(index: number, value: T | undefined): void {\n    this._array[this._getCyclicIndex(index)] = value;\n  }\n\n  /**\n   * Pushes a new value onto the list, wrapping around to the start of the array, overriding index 0\n   * if the maximum length is reached.\n   * @param value The value to push onto the list.\n   */\n  public push(value: T): void {\n    this._array[this._getCyclicIndex(this._length)] = value;\n    if (this._length === this._maxLength) {\n      this._startIndex = ++this._startIndex % this._maxLength;\n      this.onTrimEmitter.fire(1);\n    } else {\n      this._length++;\n    }\n  }\n\n  /**\n   * Advance ringbuffer index and return current element for recycling.\n   * Note: The buffer must be full for this method to work.\n   * @throws When the buffer is not full.\n   */\n  public recycle(): T {\n    if (this._length !== this._maxLength) {\n      throw new Error('Can only recycle when the buffer is full');\n    }\n    this._startIndex = ++this._startIndex % this._maxLength;\n    this.onTrimEmitter.fire(1);\n    return this._array[this._getCyclicIndex(this._length - 1)]!;\n  }\n\n  /**\n   * Ringbuffer is at max length.\n   */\n  public get isFull(): boolean {\n    return this._length === this._maxLength;\n  }\n\n  /**\n   * Removes and returns the last value on the list.\n   * @return The popped value.\n   */\n  public pop(): T | undefined {\n    return this._array[this._getCyclicIndex(this._length-- - 1)];\n  }\n\n  /**\n   * Deletes and/or inserts items at a particular index (in that order). Unlike\n   * Array.prototype.splice, this operation does not return the deleted items as a new array in\n   * order to save creating a new array. Note that this operation may shift all values in the list\n   * in the worst case.\n   * @param start The index to delete and/or insert.\n   * @param deleteCount The number of elements to delete.\n   * @param items The items to insert.\n   */\n  public splice(start: number, deleteCount: number, ...items: T[]): void {\n    // Delete items\n    if (deleteCount) {\n      for (let i = start; i < this._length - deleteCount; i++) {\n        this._array[this._getCyclicIndex(i)] = this._array[this._getCyclicIndex(i + deleteCount)];\n      }\n      this._length -= deleteCount;\n      this.onDeleteEmitter.fire({ index: start, amount: deleteCount });\n    }\n\n    // Add items\n    for (let i = this._length - 1; i >= start; i--) {\n      this._array[this._getCyclicIndex(i + items.length)] = this._array[this._getCyclicIndex(i)];\n    }\n    for (let i = 0; i < items.length; i++) {\n      this._array[this._getCyclicIndex(start + i)] = items[i];\n    }\n    if (items.length) {\n      this.onInsertEmitter.fire({ index: start, amount: items.length });\n    }\n\n    // Adjust length as needed\n    if (this._length + items.length > this._maxLength) {\n      const countToTrim = (this._length + items.length) - this._maxLength;\n      this._startIndex += countToTrim;\n      this._length = this._maxLength;\n      this.onTrimEmitter.fire(countToTrim);\n    } else {\n      this._length += items.length;\n    }\n  }\n\n  /**\n   * Trims a number of items from the start of the list.\n   * @param count The number of items to remove.\n   */\n  public trimStart(count: number): void {\n    if (count > this._length) {\n      count = this._length;\n    }\n    this._startIndex += count;\n    this._length -= count;\n    this.onTrimEmitter.fire(count);\n  }\n\n  public shiftElements(start: number, count: number, offset: number): void {\n    if (count <= 0) {\n      return;\n    }\n    if (start < 0 || start >= this._length) {\n      throw new Error('start argument out of range');\n    }\n    if (start + offset < 0) {\n      throw new Error('Cannot shift elements in list beyond index 0');\n    }\n\n    if (offset > 0) {\n      for (let i = count - 1; i >= 0; i--) {\n        this.set(start + i + offset, this.get(start + i));\n      }\n      const expandListBy = (start + count + offset) - this._length;\n      if (expandListBy > 0) {\n        this._length += expandListBy;\n        while (this._length > this._maxLength) {\n          this._length--;\n          this._startIndex++;\n          this.onTrimEmitter.fire(1);\n        }\n      }\n    } else {\n      for (let i = 0; i < count; i++) {\n        this.set(start + i + offset, this.get(start + i));\n      }\n    }\n  }\n\n  /**\n   * Gets the cyclic index for the specified regular index. The cyclic index can then be used on the\n   * backing array to get the element associated with the regular index.\n   * @param index The regular index.\n   * @returns The cyclic index.\n   */\n  private _getCyclicIndex(index: number): number {\n    return (this._startIndex + index) % this._maxLength;\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/*\n * A simple utility for cloning values\n */\nexport function clone<T>(val: T, depth: number = 5): T {\n  if (typeof val !== 'object') {\n    return val;\n  }\n\n  // If we're cloning an array, use an array as the base, otherwise use an object\n  const clonedObject: any = Array.isArray(val) ? [] : {};\n\n  for (const key in val) {\n    // Recursively clone eack item unless we're at the maximum depth\n    clonedObject[key] = depth <= 1 ? val[key] : (val[key] && clone(val[key], depth - 1));\n  }\n\n  return clonedObject as T;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColor, IColorRGB } from 'common/Types';\n\n/**\n * Helper functions where the source type is \"channels\" (individual color channels as numbers).\n */\nexport namespace channels {\n  export function toCss(r: number, g: number, b: number, a?: number): string {\n    if (a !== undefined) {\n      return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}${toPaddedHex(a)}`;\n    }\n    return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}`;\n  }\n\n  export function toRgba(r: number, g: number, b: number, a: number = 0xFF): number {\n    // Note: The aggregated number is RGBA32 (BE), thus needs to be converted to ABGR32\n    // on LE systems, before it can be used for direct 32-bit buffer writes.\n    // >>> 0 forces an unsigned int\n    return (r << 24 | g << 16 | b << 8 | a) >>> 0;\n  }\n}\n\n/**\n * Helper functions where the source type is `IColor`.\n */\nexport namespace color {\n  export function blend(bg: IColor, fg: IColor): IColor {\n    const a = (fg.rgba & 0xFF) / 255;\n    if (a === 1) {\n      return {\n        css: fg.css,\n        rgba: fg.rgba\n      };\n    }\n    const fgR = (fg.rgba >> 24) & 0xFF;\n    const fgG = (fg.rgba >> 16) & 0xFF;\n    const fgB = (fg.rgba >> 8) & 0xFF;\n    const bgR = (bg.rgba >> 24) & 0xFF;\n    const bgG = (bg.rgba >> 16) & 0xFF;\n    const bgB = (bg.rgba >> 8) & 0xFF;\n    const r = bgR + Math.round((fgR - bgR) * a);\n    const g = bgG + Math.round((fgG - bgG) * a);\n    const b = bgB + Math.round((fgB - bgB) * a);\n    const css = channels.toCss(r, g, b);\n    const rgba = channels.toRgba(r, g, b);\n    return { css, rgba };\n  }\n\n  export function isOpaque(color: IColor): boolean {\n    return (color.rgba & 0xFF) === 0xFF;\n  }\n\n  export function ensureContrastRatio(bg: IColor, fg: IColor, ratio: number): IColor | undefined {\n    const result = rgba.ensureContrastRatio(bg.rgba, fg.rgba, ratio);\n    if (!result) {\n      return undefined;\n    }\n    return rgba.toColor(\n      (result >> 24 & 0xFF),\n      (result >> 16 & 0xFF),\n      (result >> 8  & 0xFF)\n    );\n  }\n\n  export function opaque(color: IColor): IColor {\n    const rgbaColor = (color.rgba | 0xFF) >>> 0;\n    const [r, g, b] = rgba.toChannels(rgbaColor);\n    return {\n      css: channels.toCss(r, g, b),\n      rgba: rgbaColor\n    };\n  }\n\n  export function opacity(color: IColor, opacity: number): IColor {\n    const a = Math.round(opacity * 0xFF);\n    const [r, g, b] = rgba.toChannels(color.rgba);\n    return {\n      css: channels.toCss(r, g, b, a),\n      rgba: channels.toRgba(r, g, b, a)\n    };\n  }\n\n  export function toColorRGB(color: IColor): IColorRGB {\n    return [(color.rgba >> 24) & 0xFF, (color.rgba >> 16) & 0xFF, (color.rgba >> 8) & 0xFF];\n  }\n}\n\n/**\n * Helper functions where the source type is \"css\" (string: '#rgb', '#rgba', '#rrggbb', '#rrggbbaa').\n */\nexport namespace css {\n  export function toColor(css: string): IColor {\n    if (css.match(/#[0-9a-f]{3,8}/i)) {\n      switch (css.length) {\n        case 4: { // #rgb\n          const r = parseInt(css.slice(1, 2).repeat(2), 16);\n          const g = parseInt(css.slice(2, 3).repeat(2), 16);\n          const b = parseInt(css.slice(3, 4).repeat(2), 16);\n          return rgba.toColor(r, g, b);\n        }\n        case 5: { // #rgba\n          const r = parseInt(css.slice(1, 2).repeat(2), 16);\n          const g = parseInt(css.slice(2, 3).repeat(2), 16);\n          const b = parseInt(css.slice(3, 4).repeat(2), 16);\n          const a = parseInt(css.slice(4, 5).repeat(2), 16);\n          return rgba.toColor(r, g, b, a);\n        }\n        case 7: // #rrggbb\n          return {\n            css,\n            rgba: (parseInt(css.slice(1), 16) << 8 | 0xFF) >>> 0\n          };\n        case 9: // #rrggbbaa\n          return {\n            css,\n            rgba: parseInt(css.slice(1), 16) >>> 0\n          };\n      }\n    }\n    const rgbaMatch = css.match(/rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(,\\s*(0|1|\\d?\\.(\\d+))\\s*)?\\)/);\n    if (rgbaMatch) { // rgb() or rgba()\n      const r = parseInt(rgbaMatch[1]);\n      const g = parseInt(rgbaMatch[2]);\n      const b = parseInt(rgbaMatch[3]);\n      const a = Math.round((rgbaMatch[5] === undefined ? 1 : parseFloat(rgbaMatch[5])) * 0xFF);\n      return rgba.toColor(r, g, b, a);\n    }\n    throw new Error('css.toColor: Unsupported css format');\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgb\" (number: 0xrrggbb).\n */\nexport namespace rgb {\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param rgb The color to use.\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance(rgb: number): number {\n    return relativeLuminance2(\n      (rgb >> 16) & 0xFF,\n      (rgb >> 8 ) & 0xFF,\n      (rgb      ) & 0xFF);\n  }\n\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param r The red channel (0x00 to 0xFF).\n   * @param g The green channel (0x00 to 0xFF).\n   * @param b The blue channel (0x00 to 0xFF).\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance2(r: number, g: number, b: number): number {\n    const rs = r / 255;\n    const gs = g / 255;\n    const bs = b / 255;\n    const rr = rs <= 0.03928 ? rs / 12.92 : Math.pow((rs + 0.055) / 1.055, 2.4);\n    const rg = gs <= 0.03928 ? gs / 12.92 : Math.pow((gs + 0.055) / 1.055, 2.4);\n    const rb = bs <= 0.03928 ? bs / 12.92 : Math.pow((bs + 0.055) / 1.055, 2.4);\n    return rr * 0.2126 + rg * 0.7152 + rb * 0.0722;\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgba\" (number: 0xrrggbbaa).\n */\nexport namespace rgba {\n  /**\n   * Given a foreground color and a background color, either increase or reduce the luminance of the\n   * foreground color until the specified contrast ratio is met. If pure white or black is hit\n   * without the contrast ratio being met, go the other direction using the background color as the\n   * foreground color and take either the first or second result depending on which has the higher\n   * contrast ratio.\n   *\n   * `undefined` will be returned if the contrast ratio is already met.\n   *\n   * @param bgRgba The background color in rgba format.\n   * @param fgRgba The foreground color in rgba format.\n   * @param ratio The contrast ratio to achieve.\n   */\n  export function ensureContrastRatio(bgRgba: number, fgRgba: number, ratio: number): number | undefined {\n    const bgL = rgb.relativeLuminance(bgRgba >> 8);\n    const fgL = rgb.relativeLuminance(fgRgba >> 8);\n    const cr = contrastRatio(bgL, fgL);\n    if (cr < ratio) {\n      if (fgL < bgL) {\n        const resultA = reduceLuminance(bgRgba, fgRgba, ratio);\n        const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n        if (resultARatio < ratio) {\n          const resultB = increaseLuminance(bgRgba, bgRgba, ratio);\n          const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n          return resultARatio > resultBRatio ? resultA : resultB;\n        }\n        return resultA;\n      }\n      const resultA = increaseLuminance(bgRgba, fgRgba, ratio);\n      const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n      if (resultARatio < ratio) {\n        const resultB = reduceLuminance(bgRgba, bgRgba, ratio);\n        const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n        return resultARatio > resultBRatio ? resultA : resultB;\n      }\n      return resultA;\n    }\n    return undefined;\n  }\n\n  export function reduceLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to reducing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR > 0 || fgG > 0 || fgB > 0)) {\n      // Reduce by 10% until the ratio is hit\n      fgR -= Math.max(0, Math.ceil(fgR * 0.1));\n      fgG -= Math.max(0, Math.ceil(fgG * 0.1));\n      fgB -= Math.max(0, Math.ceil(fgB * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function increaseLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to increasing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR < 0xFF || fgG < 0xFF || fgB < 0xFF)) {\n      // Increase by 10% until the ratio is hit\n      fgR = Math.min(0xFF, fgR + Math.ceil((255 - fgR) * 0.1));\n      fgG = Math.min(0xFF, fgG + Math.ceil((255 - fgG) * 0.1));\n      fgB = Math.min(0xFF, fgB + Math.ceil((255 - fgB) * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  // FIXME: Move this to channels NS?\n  export function toChannels(value: number): [number, number, number, number] {\n    return [(value >> 24) & 0xFF, (value >> 16) & 0xFF, (value >> 8) & 0xFF, value & 0xFF];\n  }\n\n  export function toColor(r: number, g: number, b: number, a?: number): IColor {\n    return {\n      css: channels.toCss(r, g, b, a),\n      rgba: channels.toRgba(r, g, b, a)\n    };\n  }\n}\n\nexport function toPaddedHex(c: number): string {\n  const s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n\n/**\n * Gets the contrast ratio between two relative luminance values.\n * @param l1 The first relative luminance.\n * @param l2 The first relative luminance.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\nexport function contrastRatio(l1: number, l2: number): number {\n  if (l1 < l2) {\n    return (l2 + 0.05) / (l1 + 0.05);\n  }\n  return (l1 + 0.05) / (l2 + 0.05);\n}\n", "/**\n * Copyright (c) 2014-2020 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n *\n * Originally forked from (with the author's permission):\n *   Fabrice Bellard's javascript vt100 for jslinux:\n *   http://bellard.org/jslinux/\n *   Copyright (c) 2011 Fabrice Bellard\n *   The original design remains. The terminal itself\n *   has been extended to include xterm CSI codes, among\n *   other features.\n *\n * Terminal Emulation References:\n *   http://vt100.net/\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.txt\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n *   http://invisible-island.net/vttest/\n *   http://www.inwap.com/pdp10/ansicode.txt\n *   http://linux.die.net/man/4/console_codes\n *   http://linux.die.net/man/7/urxvt\n */\n\nimport { Disposable } from 'common/Lifecycle';\nimport { IInstantiationService, IOptionsService, IBufferService, ILogService, ICharsetService, ICoreService, ICoreMouseService, IUnicodeService, IDirtyRowService, LogLevelEnum, ITerminalOptions } from 'common/services/Services';\nimport { InstantiationService } from 'common/services/InstantiationService';\nimport { LogService } from 'common/services/LogService';\nimport { BufferService, MINIMUM_COLS, MINIMUM_ROWS } from 'common/services/BufferService';\nimport { OptionsService } from 'common/services/OptionsService';\nimport { IDisposable, IBufferLine, IAttributeData, ICoreTerminal, IKeyboardEvent, IScrollEvent, ScrollSource, ITerminalOptions as IPublicTerminalOptions } from 'common/Types';\nimport { CoreService } from 'common/services/CoreService';\nimport { EventEmitter, IEvent, forwardEvent } from 'common/EventEmitter';\nimport { CoreMouseService } from 'common/services/CoreMouseService';\nimport { DirtyRowService } from 'common/services/DirtyRowService';\nimport { UnicodeService } from 'common/services/UnicodeService';\nimport { CharsetService } from 'common/services/CharsetService';\nimport { updateWindowsModeWrappedState } from 'common/WindowsMode';\nimport { IFunctionIdentifier, IParams } from 'common/parser/Types';\nimport { IBufferSet } from 'common/buffer/Types';\nimport { InputHandler } from 'common/InputHandler';\nimport { WriteBuffer } from 'common/input/WriteBuffer';\n\n// Only trigger this warning a single time per session\nlet hasWriteSyncWarnHappened = false;\n\nexport abstract class CoreTerminal extends Disposable implements ICoreTerminal {\n  protected readonly _instantiationService: IInstantiationService;\n  protected readonly _bufferService: IBufferService;\n  protected readonly _logService: ILogService;\n  protected readonly _charsetService: ICharsetService;\n  protected readonly _dirtyRowService: IDirtyRowService;\n\n  public readonly coreMouseService: ICoreMouseService;\n  public readonly coreService: ICoreService;\n  public readonly unicodeService: IUnicodeService;\n  public readonly optionsService: IOptionsService;\n\n  protected _inputHandler: InputHandler;\n  private _writeBuffer: WriteBuffer;\n  private _windowsMode: IDisposable | undefined;\n\n  private _onBinary = new EventEmitter<string>();\n  public get onBinary(): IEvent<string> { return this._onBinary.event; }\n  private _onData = new EventEmitter<string>();\n  public get onData(): IEvent<string> { return this._onData.event; }\n  protected _onLineFeed = new EventEmitter<void>();\n  public get onLineFeed(): IEvent<void> { return this._onLineFeed.event; }\n  private _onResize = new EventEmitter<{ cols: number, rows: number }>();\n  public get onResize(): IEvent<{ cols: number, rows: number }> { return this._onResize.event; }\n  protected _onScroll = new EventEmitter<IScrollEvent, void>();\n  public get onWriteParsed(): IEvent<void> { return this._onWriteParsed.event; }\n  protected _onWriteParsed = new EventEmitter<void>();\n  /**\n   * Internally we track the source of the scroll but this is meaningless outside the library so\n   * it's filtered out.\n   */\n  protected _onScrollApi?: EventEmitter<number, void>;\n  public get onScroll(): IEvent<number, void> {\n    if (!this._onScrollApi) {\n      this._onScrollApi = new EventEmitter<number, void>();\n      this.register(this._onScroll.event(ev => {\n        this._onScrollApi?.fire(ev.position);\n      }));\n    }\n    return this._onScrollApi.event;\n  }\n\n  public get cols(): number { return this._bufferService.cols; }\n  public get rows(): number { return this._bufferService.rows; }\n  public get buffers(): IBufferSet { return this._bufferService.buffers; }\n  public get options(): ITerminalOptions { return this.optionsService.options; }\n  public set options(options: ITerminalOptions) {\n    for (const key in options) {\n      this.optionsService.options[key] = options[key];\n    }\n  }\n\n  constructor(\n    options: Partial<ITerminalOptions>\n  ) {\n    super();\n\n    // Setup and initialize services\n    this._instantiationService = new InstantiationService();\n    this.optionsService = new OptionsService(options);\n    this._instantiationService.setService(IOptionsService, this.optionsService);\n    this._bufferService = this.register(this._instantiationService.createInstance(BufferService));\n    this._instantiationService.setService(IBufferService, this._bufferService);\n    this._logService = this._instantiationService.createInstance(LogService);\n    this._instantiationService.setService(ILogService, this._logService);\n    this.coreService = this.register(this._instantiationService.createInstance(CoreService, () => this.scrollToBottom()));\n    this._instantiationService.setService(ICoreService, this.coreService);\n    this.coreMouseService = this._instantiationService.createInstance(CoreMouseService);\n    this._instantiationService.setService(ICoreMouseService, this.coreMouseService);\n    this._dirtyRowService = this._instantiationService.createInstance(DirtyRowService);\n    this._instantiationService.setService(IDirtyRowService, this._dirtyRowService);\n    this.unicodeService = this._instantiationService.createInstance(UnicodeService);\n    this._instantiationService.setService(IUnicodeService, this.unicodeService);\n    this._charsetService = this._instantiationService.createInstance(CharsetService);\n    this._instantiationService.setService(ICharsetService, this._charsetService);\n\n    // Register input handler and handle/forward events\n    this._inputHandler = new InputHandler(this._bufferService, this._charsetService, this.coreService, this._dirtyRowService, this._logService, this.optionsService, this.coreMouseService, this.unicodeService);\n    this.register(forwardEvent(this._inputHandler.onLineFeed, this._onLineFeed));\n    this.register(this._inputHandler);\n\n    // Setup listeners\n    this.register(forwardEvent(this._bufferService.onResize, this._onResize));\n    this.register(forwardEvent(this.coreService.onData, this._onData));\n    this.register(forwardEvent(this.coreService.onBinary, this._onBinary));\n    this.register(this.optionsService.onOptionChange(key => this._updateOptions(key)));\n    this.register(this._bufferService.onScroll(event => {\n      this._onScroll.fire({ position: this._bufferService.buffer.ydisp, source: ScrollSource.TERMINAL });\n      this._dirtyRowService.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);\n    }));\n    this.register(this._inputHandler.onScroll(event => {\n      this._onScroll.fire({ position: this._bufferService.buffer.ydisp, source: ScrollSource.TERMINAL });\n      this._dirtyRowService.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);\n    }));\n\n    // Setup WriteBuffer\n    this._writeBuffer = new WriteBuffer((data, promiseResult) => this._inputHandler.parse(data, promiseResult));\n    this.register(forwardEvent(this._writeBuffer.onWriteParsed, this._onWriteParsed));\n  }\n\n  public dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n    super.dispose();\n    this._windowsMode?.dispose();\n    this._windowsMode = undefined;\n  }\n\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    this._writeBuffer.write(data, callback);\n  }\n\n  /**\n   * Write data to terminal synchonously.\n   *\n   * This method is unreliable with async parser handlers, thus should not\n   * be used anymore. If you need blocking semantics on data input consider\n   * `write` with a callback instead.\n   *\n   * @deprecated Unreliable, will be removed soon.\n   */\n  public writeSync(data: string | Uint8Array, maxSubsequentCalls?: number): void {\n    if (this._logService.logLevel <= LogLevelEnum.WARN && !hasWriteSyncWarnHappened) {\n      this._logService.warn('writeSync is unreliable and will be removed soon.');\n      hasWriteSyncWarnHappened = true;\n    }\n    this._writeBuffer.writeSync(data, maxSubsequentCalls);\n  }\n\n  public resize(x: number, y: number): void {\n    if (isNaN(x) || isNaN(y)) {\n      return;\n    }\n\n    x = Math.max(x, MINIMUM_COLS);\n    y = Math.max(y, MINIMUM_ROWS);\n\n    this._bufferService.resize(x, y);\n  }\n\n  /**\n   * Scroll the terminal down 1 row, creating a blank line.\n   * @param isWrapped Whether the new line is wrapped from the previous line.\n   */\n  public scroll(eraseAttr: IAttributeData, isWrapped: boolean = false): void {\n    this._bufferService.scroll(eraseAttr, isWrapped);\n  }\n\n  /**\n   * Scroll the display of the terminal\n   * @param disp The number of lines to scroll down (negative scroll up).\n   * @param suppressScrollEvent Don't emit the scroll event as scrollLines. This is used\n   * to avoid unwanted events being handled by the viewport when the event was triggered from the\n   * viewport originally.\n   */\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void {\n    this._bufferService.scrollLines(disp, suppressScrollEvent, source);\n  }\n\n  /**\n   * Scroll the display of the terminal by a number of pages.\n   * @param pageCount The number of pages to scroll (negative scrolls up).\n   */\n  public scrollPages(pageCount: number): void {\n    this._bufferService.scrollPages(pageCount);\n  }\n\n  /**\n   * Scrolls the display of the terminal to the top.\n   */\n  public scrollToTop(): void {\n    this._bufferService.scrollToTop();\n  }\n\n  /**\n   * Scrolls the display of the terminal to the bottom.\n   */\n  public scrollToBottom(): void {\n    this._bufferService.scrollToBottom();\n  }\n\n  public scrollToLine(line: number): void {\n    this._bufferService.scrollToLine(line);\n  }\n\n  /** Add handler for ESC escape sequence. See xterm.d.ts for details. */\n  public registerEscHandler(id: IFunctionIdentifier, callback: () => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerEscHandler(id, callback);\n  }\n\n  /** Add handler for DCS escape sequence. See xterm.d.ts for details. */\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerDcsHandler(id, callback);\n  }\n\n  /** Add handler for CSI escape sequence. See xterm.d.ts for details. */\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerCsiHandler(id, callback);\n  }\n\n  /** Add handler for OSC escape sequence. See xterm.d.ts for details. */\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerOscHandler(ident, callback);\n  }\n\n  protected _setup(): void {\n    if (this.optionsService.rawOptions.windowsMode) {\n      this._enableWindowsMode();\n    }\n  }\n\n  public reset(): void {\n    this._inputHandler.reset();\n    this._bufferService.reset();\n    this._charsetService.reset();\n    this.coreService.reset();\n    this.coreMouseService.reset();\n  }\n\n  protected _updateOptions(key: string): void {\n    // TODO: These listeners should be owned by individual components\n    switch (key) {\n      case 'scrollback':\n        this.buffers.resize(this.cols, this.rows);\n        break;\n      case 'windowsMode':\n        if (this.optionsService.rawOptions.windowsMode) {\n          this._enableWindowsMode();\n        } else {\n          this._windowsMode?.dispose();\n          this._windowsMode = undefined;\n        }\n        break;\n    }\n  }\n\n  protected _enableWindowsMode(): void {\n    if (!this._windowsMode) {\n      const disposables: IDisposable[] = [];\n      disposables.push(this.onLineFeed(updateWindowsModeWrappedState.bind(null, this._bufferService)));\n      disposables.push(this.registerCsiHandler({ final: 'H' }, () => {\n        updateWindowsModeWrappedState(this._bufferService);\n        return false;\n      }));\n      this._windowsMode = {\n        dispose: () => {\n          for (const d of disposables) {\n            d.dispose();\n          }\n        }\n      };\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\ninterface IListener<T, U = void> {\n  (arg1: T, arg2: U): void;\n}\n\nexport interface IEvent<T, U = void> {\n  (listener: (arg1: T, arg2: U) => any): IDisposable;\n}\n\nexport interface IEventEmitter<T, U = void> {\n  event: IEvent<T, U>;\n  fire(arg1: T, arg2: U): void;\n  dispose(): void;\n}\n\nexport class EventEmitter<T, U = void> implements IEventEmitter<T, U> {\n  private _listeners: IListener<T, U>[] = [];\n  private _event?: IEvent<T, U>;\n  private _disposed: boolean = false;\n\n  public get event(): IEvent<T, U> {\n    if (!this._event) {\n      this._event = (listener: (arg1: T, arg2: U) => any) => {\n        this._listeners.push(listener);\n        const disposable = {\n          dispose: () => {\n            if (!this._disposed) {\n              for (let i = 0; i < this._listeners.length; i++) {\n                if (this._listeners[i] === listener) {\n                  this._listeners.splice(i, 1);\n                  return;\n                }\n              }\n            }\n          }\n        };\n        return disposable;\n      };\n    }\n    return this._event;\n  }\n\n  public fire(arg1: T, arg2: U): void {\n    const queue: IListener<T, U>[] = [];\n    for (let i = 0; i < this._listeners.length; i++) {\n      queue.push(this._listeners[i]);\n    }\n    for (let i = 0; i < queue.length; i++) {\n      queue[i].call(undefined, arg1, arg2);\n    }\n  }\n\n  public dispose(): void {\n    if (this._listeners) {\n      this._listeners.length = 0;\n    }\n    this._disposed = true;\n  }\n}\n\nexport function forwardEvent<T>(from: IEvent<T>, to: IEventEmitter<T>): IDisposable {\n  return from(e => to.fire(e));\n}\n", "/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n */\n\nimport { IInputHandler, IAttributeData, IDisposable, IWindowOptions, IColorEvent, IParseStack, ColorIndex, ColorRequestType } from 'common/Types';\nimport { C0, C1 } from 'common/data/EscapeSequences';\nimport { CHARSETS, DEFAULT_CHARSET } from 'common/data/Charsets';\nimport { EscapeSequenceParser } from 'common/parser/EscapeSequenceParser';\nimport { Disposable } from 'common/Lifecycle';\nimport { concat } from 'common/TypedArrayUtils';\nimport { StringToUtf32, stringFromCodePoint, utf32ToString, Utf8ToUtf32 } from 'common/input/TextDecoder';\nimport { DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { IParsingState, IDcsHandler, IEscapeSequenceParser, IParams, IFunctionIdentifier } from 'common/parser/Types';\nimport { NULL_CELL_CODE, NULL_CELL_WIDTH, Attributes, FgFlags, BgFlags, Content, UnderlineStyle } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { ICoreService, IBufferService, IOptionsService, ILogService, IDirtyRowService, ICoreMouseService, ICharsetService, IUnicodeService, LogLevelEnum } from 'common/services/Services';\nimport { OscHandler } from 'common/parser/OscParser';\nimport { DcsHandler } from 'common/parser/DcsParser';\nimport { IBuffer } from 'common/buffer/Types';\nimport { parseColor } from 'common/input/XParseColor';\n\n/**\n * Map collect to glevel. Used in `selectCharset`.\n */\nconst GLEVEL: { [key: string]: number } = { '(': 0, ')': 1, '*': 2, '+': 3, '-': 1, '.': 2 };\n\n/**\n * VT commands done by the parser - FIXME: move this to the parser?\n */\n// @vt: #Y   ESC   CSI   \"Control Sequence Introducer\"   \"ESC [\"   \"Start of a CSI sequence.\"\n// @vt: #Y   ESC   OSC   \"Operating System Command\"      \"ESC ]\"   \"Start of an OSC sequence.\"\n// @vt: #Y   ESC   DCS   \"Device Control String\"         \"ESC P\"   \"Start of a DCS sequence.\"\n// @vt: #Y   ESC   ST    \"String Terminator\"             \"ESC \\\"   \"Terminator used for string type sequences.\"\n// @vt: #Y   ESC   PM    \"Privacy Message\"               \"ESC ^\"   \"Start of a privacy message.\"\n// @vt: #Y   ESC   APC   \"Application Program Command\"   \"ESC _\"   \"Start of an APC sequence.\"\n// @vt: #Y   C1    CSI   \"Control Sequence Introducer\"   \"\\x9B\"    \"Start of a CSI sequence.\"\n// @vt: #Y   C1    OSC   \"Operating System Command\"      \"\\x9D\"    \"Start of an OSC sequence.\"\n// @vt: #Y   C1    DCS   \"Device Control String\"         \"\\x90\"    \"Start of a DCS sequence.\"\n// @vt: #Y   C1    ST    \"String Terminator\"             \"\\x9C\"    \"Terminator used for string type sequences.\"\n// @vt: #Y   C1    PM    \"Privacy Message\"               \"\\x9E\"    \"Start of a privacy message.\"\n// @vt: #Y   C1    APC   \"Application Program Command\"   \"\\x9F\"    \"Start of an APC sequence.\"\n// @vt: #Y   C0    NUL   \"Null\"                          \"\\0, \\x00\"  \"NUL is ignored.\"\n// @vt: #Y   C0    ESC   \"Escape\"                        \"\\e, \\x1B\"  \"Start of a sequence. Cancels any other sequence.\"\n\n/**\n * Document common VT features here that are currently unsupported\n */\n// @vt: #N   DCS   SIXEL   \"SIXEL Graphics\"  \"DCS Ps ; Ps ; Ps ; q \tPt ST\"   \"Draw SIXEL image starting at cursor position.\"\n// @vt: #N   OSC    1   \"Set Icon Name\"  \"OSC 1 ; Pt BEL\"  \"Set icon name.\"\n\n/**\n * Max length of the UTF32 input buffer. Real memory consumption is 4 times higher.\n */\nconst MAX_PARSEBUFFER_LENGTH = 131072;\n\n/**\n * Limit length of title and icon name stacks.\n */\nconst STACK_LIMIT = 10;\n\n// map params to window option\nfunction paramToWindowOption(n: number, opts: IWindowOptions): boolean {\n  if (n > 24) {\n    return opts.setWinLines || false;\n  }\n  switch (n) {\n    case 1: return !!opts.restoreWin;\n    case 2: return !!opts.minimizeWin;\n    case 3: return !!opts.setWinPosition;\n    case 4: return !!opts.setWinSizePixels;\n    case 5: return !!opts.raiseWin;\n    case 6: return !!opts.lowerWin;\n    case 7: return !!opts.refreshWin;\n    case 8: return !!opts.setWinSizeChars;\n    case 9: return !!opts.maximizeWin;\n    case 10: return !!opts.fullscreenWin;\n    case 11: return !!opts.getWinState;\n    case 13: return !!opts.getWinPosition;\n    case 14: return !!opts.getWinSizePixels;\n    case 15: return !!opts.getScreenSizePixels;\n    case 16: return !!opts.getCellSizePixels;\n    case 18: return !!opts.getWinSizeChars;\n    case 19: return !!opts.getScreenSizeChars;\n    case 20: return !!opts.getIconTitle;\n    case 21: return !!opts.getWinTitle;\n    case 22: return !!opts.pushTitle;\n    case 23: return !!opts.popTitle;\n    case 24: return !!opts.setWinLines;\n  }\n  return false;\n}\n\nexport enum WindowsOptionsReportType {\n  GET_WIN_SIZE_PIXELS = 0,\n  GET_CELL_SIZE_PIXELS = 1\n}\n\n// create a warning log if an async handler takes longer than the limit (in ms)\nconst SLOW_ASYNC_LIMIT = 5000;\n\n/**\n * DCS subparser implementations\n */\n\n/**\n * DCS $ q Pt ST\n *   DECRQSS (https://vt100.net/docs/vt510-rm/DECRQSS.html)\n *   Request Status String (DECRQSS), VT420 and up.\n *   Response: DECRPSS (https://vt100.net/docs/vt510-rm/DECRPSS.html)\n *\n * @vt: #P[See limited support below.]  DCS   DECRQSS   \"Request Selection or Setting\"  \"DCS $ q Pt ST\"   \"Request several terminal settings.\"\n * Response is in the form `ESC P 1 $ r Pt ST` for valid requests, where `Pt` contains the corresponding CSI string,\n * `ESC P 0 ST` for invalid requests.\n *\n * Supported requests and responses:\n *\n * | Type                             | Request           | Response (`Pt`)                                       |\n * | -------------------------------- | ----------------- | ----------------------------------------------------- |\n * | Graphic Rendition (SGR)          | `DCS $ q m ST`    | always reporting `0m` (currently broken)              |\n * | Top and Bottom Margins (DECSTBM) | `DCS $ q r ST`    | `Ps ; Ps r`                                           |\n * | Cursor Style (DECSCUSR)          | `DCS $ q SP q ST` | `Ps SP q`                                             |\n * | Protection Attribute (DECSCA)    | `DCS $ q \" q ST`  | always reporting `0 \" q` (DECSCA is unsupported)      |\n * | Conformance Level (DECSCL)       | `DCS $ q \" p ST`  | always reporting `61 ; 1 \" p` (DECSCL is unsupported) |\n *\n *\n * TODO:\n * - fix SGR report\n * - either implement DECSCA or remove the report\n * - either check which conformance is better suited or remove the report completely\n *   --> we are currently a mixture of all up to VT400 but dont follow anyone strictly\n */\nclass DECRQSS implements IDcsHandler {\n  private _data: Uint32Array = new Uint32Array(0);\n\n  constructor(\n    private _bufferService: IBufferService,\n    private _coreService: ICoreService,\n    private _logService: ILogService,\n    private _optionsService: IOptionsService\n  ) { }\n\n  public hook(params: IParams): void {\n    this._data = new Uint32Array(0);\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    this._data = concat(this._data, data.subarray(start, end));\n  }\n\n  public unhook(success: boolean): boolean {\n    if (!success) {\n      this._data = new Uint32Array(0);\n      return true;\n    }\n    const data = utf32ToString(this._data);\n    this._data = new Uint32Array(0);\n    switch (data) {\n      // valid: DCS 1 $ r Pt ST (xterm)\n      case '\"q': // DECSCA\n        this._coreService.triggerDataEvent(`${C0.ESC}P1$r0\"q${C0.ESC}\\\\`);\n        break;\n      case '\"p': // DECSCL\n        this._coreService.triggerDataEvent(`${C0.ESC}P1$r61;1\"p${C0.ESC}\\\\`);\n        break;\n      case 'r': // DECSTBM\n        const pt = '' + (this._bufferService.buffer.scrollTop + 1) +\n          ';' + (this._bufferService.buffer.scrollBottom + 1) + 'r';\n        this._coreService.triggerDataEvent(`${C0.ESC}P1$r${pt}${C0.ESC}\\\\`);\n        break;\n      case 'm': // SGR\n        // TODO: report real settings instead of 0m\n        this._coreService.triggerDataEvent(`${C0.ESC}P1$r0m${C0.ESC}\\\\`);\n        break;\n      case ' q': // DECSCUSR\n        const STYLES: { [key: string]: number } = { 'block': 2, 'underline': 4, 'bar': 6 };\n        let style = STYLES[this._optionsService.rawOptions.cursorStyle];\n        style -= this._optionsService.rawOptions.cursorBlink ? 1 : 0;\n        this._coreService.triggerDataEvent(`${C0.ESC}P1$r${style} q${C0.ESC}\\\\`);\n        break;\n      default:\n        // invalid: DCS 0 $ r Pt ST (xterm)\n        this._logService.debug('Unknown DCS $q %s', data);\n        this._coreService.triggerDataEvent(`${C0.ESC}P0$r${C0.ESC}\\\\`);\n    }\n    return true;\n  }\n}\n\n/**\n * DCS Ps; Ps| Pt ST\n *   DECUDK (https://vt100.net/docs/vt510-rm/DECUDK.html)\n *   not supported\n *\n * @vt: #N  DCS   DECUDK   \"User Defined Keys\"  \"DCS Ps ; Ps | Pt ST\"   \"Definitions for user-defined keys.\"\n */\n\n/**\n * DCS + q Pt ST (xterm)\n *   Request Terminfo String\n *   not implemented\n *\n * @vt: #N  DCS   XTGETTCAP   \"Request Terminfo String\"  \"DCS + q Pt ST\"   \"Request Terminfo String.\"\n */\n\n/**\n * DCS + p Pt ST (xterm)\n *   Set Terminfo Data\n *   not supported\n *\n * @vt: #N  DCS   XTSETTCAP   \"Set Terminfo Data\"  \"DCS + p Pt ST\"   \"Set Terminfo Data.\"\n */\n\n\n\n/**\n * The terminal's standard implementation of IInputHandler, this handles all\n * input from the Parser.\n *\n * Refer to http://invisible-island.net/xterm/ctlseqs/ctlseqs.html to understand\n * each function's header comment.\n */\nexport class InputHandler extends Disposable implements IInputHandler {\n  private _parseBuffer: Uint32Array = new Uint32Array(4096);\n  private _stringDecoder: StringToUtf32 = new StringToUtf32();\n  private _utf8Decoder: Utf8ToUtf32 = new Utf8ToUtf32();\n  private _workCell: CellData = new CellData();\n  private _windowTitle = '';\n  private _iconName = '';\n  protected _windowTitleStack: string[] = [];\n  protected _iconNameStack: string[] = [];\n\n  private _curAttrData: IAttributeData = DEFAULT_ATTR_DATA.clone();\n  private _eraseAttrDataInternal: IAttributeData = DEFAULT_ATTR_DATA.clone();\n\n  private _activeBuffer: IBuffer;\n\n  private _onRequestBell = new EventEmitter<void>();\n  public get onRequestBell(): IEvent<void> { return this._onRequestBell.event; }\n  private _onRequestRefreshRows = new EventEmitter<number, number>();\n  public get onRequestRefreshRows(): IEvent<number, number> { return this._onRequestRefreshRows.event; }\n  private _onRequestReset = new EventEmitter<void>();\n  public get onRequestReset(): IEvent<void> { return this._onRequestReset.event; }\n  private _onRequestSendFocus = new EventEmitter<void>();\n  public get onRequestSendFocus(): IEvent<void> { return this._onRequestSendFocus.event; }\n  private _onRequestSyncScrollBar = new EventEmitter<void>();\n  public get onRequestSyncScrollBar(): IEvent<void> { return this._onRequestSyncScrollBar.event; }\n  private _onRequestWindowsOptionsReport = new EventEmitter<WindowsOptionsReportType>();\n  public get onRequestWindowsOptionsReport(): IEvent<WindowsOptionsReportType> { return this._onRequestWindowsOptionsReport.event; }\n\n  private _onA11yChar = new EventEmitter<string>();\n  public get onA11yChar(): IEvent<string> { return this._onA11yChar.event; }\n  private _onA11yTab = new EventEmitter<number>();\n  public get onA11yTab(): IEvent<number> { return this._onA11yTab.event; }\n  private _onCursorMove = new EventEmitter<void>();\n  public get onCursorMove(): IEvent<void> { return this._onCursorMove.event; }\n  private _onLineFeed = new EventEmitter<void>();\n  public get onLineFeed(): IEvent<void> { return this._onLineFeed.event; }\n  private _onScroll = new EventEmitter<number>();\n  public get onScroll(): IEvent<number> { return this._onScroll.event; }\n  private _onTitleChange = new EventEmitter<string>();\n  public get onTitleChange(): IEvent<string> { return this._onTitleChange.event; }\n  private _onColor = new EventEmitter<IColorEvent>();\n  public get onColor(): IEvent<IColorEvent> { return this._onColor.event; }\n\n  private _parseStack: IParseStack = {\n    paused: false,\n    cursorStartX: 0,\n    cursorStartY: 0,\n    decodedLength: 0,\n    position: 0\n  };\n\n  constructor(\n    private readonly _bufferService: IBufferService,\n    private readonly _charsetService: ICharsetService,\n    private readonly _coreService: ICoreService,\n    private readonly _dirtyRowService: IDirtyRowService,\n    private readonly _logService: ILogService,\n    private readonly _optionsService: IOptionsService,\n    private readonly _coreMouseService: ICoreMouseService,\n    private readonly _unicodeService: IUnicodeService,\n    private readonly _parser: IEscapeSequenceParser = new EscapeSequenceParser()\n  ) {\n    super();\n    this.register(this._parser);\n\n    // Track properties used in performance critical code manually to avoid using slow getters\n    this._activeBuffer = this._bufferService.buffer;\n    this.register(this._bufferService.buffers.onBufferActivate(e => this._activeBuffer = e.activeBuffer));\n\n    /**\n     * custom fallback handlers\n     */\n    this._parser.setCsiHandlerFallback((ident, params) => {\n      this._logService.debug('Unknown CSI code: ', { identifier: this._parser.identToString(ident), params: params.toArray() });\n    });\n    this._parser.setEscHandlerFallback(ident => {\n      this._logService.debug('Unknown ESC code: ', { identifier: this._parser.identToString(ident) });\n    });\n    this._parser.setExecuteHandlerFallback(code => {\n      this._logService.debug('Unknown EXECUTE code: ', { code });\n    });\n    this._parser.setOscHandlerFallback((identifier, action, data) => {\n      this._logService.debug('Unknown OSC code: ', { identifier, action, data });\n    });\n    this._parser.setDcsHandlerFallback((ident, action, payload) => {\n      if (action === 'HOOK') {\n        payload = payload.toArray();\n      }\n      this._logService.debug('Unknown DCS code: ', { identifier: this._parser.identToString(ident), action, payload });\n    });\n\n    /**\n     * print handler\n     */\n    this._parser.setPrintHandler((data, start, end) => this.print(data, start, end));\n\n    /**\n     * CSI handler\n     */\n    this._parser.registerCsiHandler({ final: '@' }, params => this.insertChars(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: '@' }, params => this.scrollLeft(params));\n    this._parser.registerCsiHandler({ final: 'A' }, params => this.cursorUp(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: 'A' }, params => this.scrollRight(params));\n    this._parser.registerCsiHandler({ final: 'B' }, params => this.cursorDown(params));\n    this._parser.registerCsiHandler({ final: 'C' }, params => this.cursorForward(params));\n    this._parser.registerCsiHandler({ final: 'D' }, params => this.cursorBackward(params));\n    this._parser.registerCsiHandler({ final: 'E' }, params => this.cursorNextLine(params));\n    this._parser.registerCsiHandler({ final: 'F' }, params => this.cursorPrecedingLine(params));\n    this._parser.registerCsiHandler({ final: 'G' }, params => this.cursorCharAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'H' }, params => this.cursorPosition(params));\n    this._parser.registerCsiHandler({ final: 'I' }, params => this.cursorForwardTab(params));\n    this._parser.registerCsiHandler({ final: 'J' }, params => this.eraseInDisplay(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'J' }, params => this.eraseInDisplay(params));\n    this._parser.registerCsiHandler({ final: 'K' }, params => this.eraseInLine(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'K' }, params => this.eraseInLine(params));\n    this._parser.registerCsiHandler({ final: 'L' }, params => this.insertLines(params));\n    this._parser.registerCsiHandler({ final: 'M' }, params => this.deleteLines(params));\n    this._parser.registerCsiHandler({ final: 'P' }, params => this.deleteChars(params));\n    this._parser.registerCsiHandler({ final: 'S' }, params => this.scrollUp(params));\n    this._parser.registerCsiHandler({ final: 'T' }, params => this.scrollDown(params));\n    this._parser.registerCsiHandler({ final: 'X' }, params => this.eraseChars(params));\n    this._parser.registerCsiHandler({ final: 'Z' }, params => this.cursorBackwardTab(params));\n    this._parser.registerCsiHandler({ final: '`' }, params => this.charPosAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'a' }, params => this.hPositionRelative(params));\n    this._parser.registerCsiHandler({ final: 'b' }, params => this.repeatPrecedingCharacter(params));\n    this._parser.registerCsiHandler({ final: 'c' }, params => this.sendDeviceAttributesPrimary(params));\n    this._parser.registerCsiHandler({ prefix: '>', final: 'c' }, params => this.sendDeviceAttributesSecondary(params));\n    this._parser.registerCsiHandler({ final: 'd' }, params => this.linePosAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'e' }, params => this.vPositionRelative(params));\n    this._parser.registerCsiHandler({ final: 'f' }, params => this.hVPosition(params));\n    this._parser.registerCsiHandler({ final: 'g' }, params => this.tabClear(params));\n    this._parser.registerCsiHandler({ final: 'h' }, params => this.setMode(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'h' }, params => this.setModePrivate(params));\n    this._parser.registerCsiHandler({ final: 'l' }, params => this.resetMode(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'l' }, params => this.resetModePrivate(params));\n    this._parser.registerCsiHandler({ final: 'm' }, params => this.charAttributes(params));\n    this._parser.registerCsiHandler({ final: 'n' }, params => this.deviceStatus(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'n' }, params => this.deviceStatusPrivate(params));\n    this._parser.registerCsiHandler({ intermediates: '!', final: 'p' }, params => this.softReset(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: 'q' }, params => this.setCursorStyle(params));\n    this._parser.registerCsiHandler({ final: 'r' }, params => this.setScrollRegion(params));\n    this._parser.registerCsiHandler({ final: 's' }, params => this.saveCursor(params));\n    this._parser.registerCsiHandler({ final: 't' }, params => this.windowOptions(params));\n    this._parser.registerCsiHandler({ final: 'u' }, params => this.restoreCursor(params));\n    this._parser.registerCsiHandler({ intermediates: '\\'', final: '}' }, params => this.insertColumns(params));\n    this._parser.registerCsiHandler({ intermediates: '\\'', final: '~' }, params => this.deleteColumns(params));\n\n    /**\n     * execute handler\n     */\n    this._parser.setExecuteHandler(C0.BEL, () => this.bell());\n    this._parser.setExecuteHandler(C0.LF, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.VT, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.FF, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.CR, () => this.carriageReturn());\n    this._parser.setExecuteHandler(C0.BS, () => this.backspace());\n    this._parser.setExecuteHandler(C0.HT, () => this.tab());\n    this._parser.setExecuteHandler(C0.SO, () => this.shiftOut());\n    this._parser.setExecuteHandler(C0.SI, () => this.shiftIn());\n    // FIXME:   What do to with missing? Old code just added those to print.\n\n    this._parser.setExecuteHandler(C1.IND, () => this.index());\n    this._parser.setExecuteHandler(C1.NEL, () => this.nextLine());\n    this._parser.setExecuteHandler(C1.HTS, () => this.tabSet());\n\n    /**\n     * OSC handler\n     */\n    //   0 - icon name + title\n    this._parser.registerOscHandler(0, new OscHandler(data => { this.setTitle(data); this.setIconName(data); return true; }));\n    //   1 - icon name\n    this._parser.registerOscHandler(1, new OscHandler(data => this.setIconName(data)));\n    //   2 - title\n    this._parser.registerOscHandler(2, new OscHandler(data => this.setTitle(data)));\n    //   3 - set property X in the form \"prop=value\"\n    //   4 - Change Color Number\n    this._parser.registerOscHandler(4, new OscHandler(data => this.setOrReportIndexedColor(data)));\n    //   5 - Change Special Color Number\n    //   6 - Enable/disable Special Color Number c\n    //   7 - current directory? (not in xterm spec, see https://gitlab.com/gnachman/iterm2/issues/3939)\n    //  10 - Change VT100 text foreground color to Pt.\n    this._parser.registerOscHandler(10, new OscHandler(data => this.setOrReportFgColor(data)));\n    //  11 - Change VT100 text background color to Pt.\n    this._parser.registerOscHandler(11, new OscHandler(data => this.setOrReportBgColor(data)));\n    //  12 - Change text cursor color to Pt.\n    this._parser.registerOscHandler(12, new OscHandler(data => this.setOrReportCursorColor(data)));\n    //  13 - Change mouse foreground color to Pt.\n    //  14 - Change mouse background color to Pt.\n    //  15 - Change Tektronix foreground color to Pt.\n    //  16 - Change Tektronix background color to Pt.\n    //  17 - Change highlight background color to Pt.\n    //  18 - Change Tektronix cursor color to Pt.\n    //  19 - Change highlight foreground color to Pt.\n    //  46 - Change Log File to Pt.\n    //  50 - Set Font to Pt.\n    //  51 - reserved for Emacs shell.\n    //  52 - Manipulate Selection Data.\n    // 104 ; c - Reset Color Number c.\n    this._parser.registerOscHandler(104, new OscHandler(data => this.restoreIndexedColor(data)));\n    // 105 ; c - Reset Special Color Number c.\n    // 106 ; c; f - Enable/disable Special Color Number c.\n    // 110 - Reset VT100 text foreground color.\n    this._parser.registerOscHandler(110, new OscHandler(data => this.restoreFgColor(data)));\n    // 111 - Reset VT100 text background color.\n    this._parser.registerOscHandler(111, new OscHandler(data => this.restoreBgColor(data)));\n    // 112 - Reset text cursor color.\n    this._parser.registerOscHandler(112, new OscHandler(data => this.restoreCursorColor(data)));\n    // 113 - Reset mouse foreground color.\n    // 114 - Reset mouse background color.\n    // 115 - Reset Tektronix foreground color.\n    // 116 - Reset Tektronix background color.\n    // 117 - Reset highlight color.\n    // 118 - Reset Tektronix cursor color.\n    // 119 - Reset highlight foreground color.\n\n    /**\n     * ESC handlers\n     */\n    this._parser.registerEscHandler({ final: '7' }, () => this.saveCursor());\n    this._parser.registerEscHandler({ final: '8' }, () => this.restoreCursor());\n    this._parser.registerEscHandler({ final: 'D' }, () => this.index());\n    this._parser.registerEscHandler({ final: 'E' }, () => this.nextLine());\n    this._parser.registerEscHandler({ final: 'H' }, () => this.tabSet());\n    this._parser.registerEscHandler({ final: 'M' }, () => this.reverseIndex());\n    this._parser.registerEscHandler({ final: '=' }, () => this.keypadApplicationMode());\n    this._parser.registerEscHandler({ final: '>' }, () => this.keypadNumericMode());\n    this._parser.registerEscHandler({ final: 'c' }, () => this.fullReset());\n    this._parser.registerEscHandler({ final: 'n' }, () => this.setgLevel(2));\n    this._parser.registerEscHandler({ final: 'o' }, () => this.setgLevel(3));\n    this._parser.registerEscHandler({ final: '|' }, () => this.setgLevel(3));\n    this._parser.registerEscHandler({ final: '}' }, () => this.setgLevel(2));\n    this._parser.registerEscHandler({ final: '~' }, () => this.setgLevel(1));\n    this._parser.registerEscHandler({ intermediates: '%', final: '@' }, () => this.selectDefaultCharset());\n    this._parser.registerEscHandler({ intermediates: '%', final: 'G' }, () => this.selectDefaultCharset());\n    for (const flag in CHARSETS) {\n      this._parser.registerEscHandler({ intermediates: '(', final: flag }, () => this.selectCharset('(' + flag));\n      this._parser.registerEscHandler({ intermediates: ')', final: flag }, () => this.selectCharset(')' + flag));\n      this._parser.registerEscHandler({ intermediates: '*', final: flag }, () => this.selectCharset('*' + flag));\n      this._parser.registerEscHandler({ intermediates: '+', final: flag }, () => this.selectCharset('+' + flag));\n      this._parser.registerEscHandler({ intermediates: '-', final: flag }, () => this.selectCharset('-' + flag));\n      this._parser.registerEscHandler({ intermediates: '.', final: flag }, () => this.selectCharset('.' + flag));\n      this._parser.registerEscHandler({ intermediates: '/', final: flag }, () => this.selectCharset('/' + flag)); // TODO: supported?\n    }\n    this._parser.registerEscHandler({ intermediates: '#', final: '8' }, () => this.screenAlignmentPattern());\n\n    /**\n     * error handler\n     */\n    this._parser.setErrorHandler((state: IParsingState) => {\n      this._logService.error('Parsing error: ', state);\n      return state;\n    });\n\n    /**\n     * DCS handler\n     */\n    this._parser.registerDcsHandler({ intermediates: '$', final: 'q' }, new DECRQSS(this._bufferService, this._coreService, this._logService, this._optionsService));\n  }\n\n  public dispose(): void {\n    super.dispose();\n  }\n\n  /**\n   * Async parse support.\n   */\n  private _preserveStack(cursorStartX: number, cursorStartY: number, decodedLength: number, position: number): void {\n    this._parseStack.paused = true;\n    this._parseStack.cursorStartX = cursorStartX;\n    this._parseStack.cursorStartY = cursorStartY;\n    this._parseStack.decodedLength = decodedLength;\n    this._parseStack.position = position;\n  }\n\n  private _logSlowResolvingAsync(p: Promise<boolean>): void {\n    // log a limited warning about an async handler taking too long\n    if (this._logService.logLevel <= LogLevelEnum.WARN) {\n      Promise.race([p, new Promise((res, rej) => setTimeout(() => rej('#SLOW_TIMEOUT'), SLOW_ASYNC_LIMIT))])\n        .catch(err => {\n          if (err !== '#SLOW_TIMEOUT') {\n            throw err;\n          }\n          console.warn(`async parser handler taking longer than ${SLOW_ASYNC_LIMIT} ms`);\n        });\n    }\n  }\n\n  /**\n   * Parse call with async handler support.\n   *\n   * Whether the stack state got preserved for the next call, is indicated by the return value:\n   * - undefined (void):\n   *   all handlers were sync, no stack save, continue normally with next chunk\n   * - Promise\\<boolean\\>:\n   *   execution stopped at async handler, stack saved, continue with\n   *   same chunk and the promise resolve value as `promiseResult` until the method returns `undefined`\n   *\n   * Note: This method should only be called by `Terminal.write` to ensure correct execution order and\n   * proper continuation of async parser handlers.\n   */\n  public parse(data: string | Uint8Array, promiseResult?: boolean): void | Promise<boolean> {\n    let result: void | Promise<boolean>;\n    let cursorStartX = this._activeBuffer.x;\n    let cursorStartY = this._activeBuffer.y;\n    let start = 0;\n    const wasPaused = this._parseStack.paused;\n\n    if (wasPaused) {\n      // assumption: _parseBuffer never mutates between async calls\n      if (result = this._parser.parse(this._parseBuffer, this._parseStack.decodedLength, promiseResult)) {\n        this._logSlowResolvingAsync(result);\n        return result;\n      }\n      cursorStartX = this._parseStack.cursorStartX;\n      cursorStartY = this._parseStack.cursorStartY;\n      this._parseStack.paused = false;\n      if (data.length > MAX_PARSEBUFFER_LENGTH) {\n        start = this._parseStack.position + MAX_PARSEBUFFER_LENGTH;\n      }\n    }\n\n    // Log debug data, the log level gate is to prevent extra work in this hot path\n    if (this._logService.logLevel <= LogLevelEnum.DEBUG) {\n      this._logService.debug(`parsing data${typeof data === 'string' ? ` \"${data}\"` : ` \"${Array.prototype.map.call(data, e => String.fromCharCode(e)).join('')}\"`}`, typeof data === 'string'\n        ? data.split('').map(e => e.charCodeAt(0))\n        : data\n      );\n    }\n\n    // resize input buffer if needed\n    if (this._parseBuffer.length < data.length) {\n      if (this._parseBuffer.length < MAX_PARSEBUFFER_LENGTH) {\n        this._parseBuffer = new Uint32Array(Math.min(data.length, MAX_PARSEBUFFER_LENGTH));\n      }\n    }\n\n    // Clear the dirty row service so we know which lines changed as a result of parsing\n    // Important: do not clear between async calls, otherwise we lost pending update information.\n    if (!wasPaused) {\n      this._dirtyRowService.clearRange();\n    }\n\n    // process big data in smaller chunks\n    if (data.length > MAX_PARSEBUFFER_LENGTH) {\n      for (let i = start; i < data.length; i += MAX_PARSEBUFFER_LENGTH) {\n        const end = i + MAX_PARSEBUFFER_LENGTH < data.length ? i + MAX_PARSEBUFFER_LENGTH : data.length;\n        const len = (typeof data === 'string')\n          ? this._stringDecoder.decode(data.substring(i, end), this._parseBuffer)\n          : this._utf8Decoder.decode(data.subarray(i, end), this._parseBuffer);\n        if (result = this._parser.parse(this._parseBuffer, len)) {\n          this._preserveStack(cursorStartX, cursorStartY, len, i);\n          this._logSlowResolvingAsync(result);\n          return result;\n        }\n      }\n    } else {\n      if (!wasPaused) {\n        const len = (typeof data === 'string')\n          ? this._stringDecoder.decode(data, this._parseBuffer)\n          : this._utf8Decoder.decode(data, this._parseBuffer);\n        if (result = this._parser.parse(this._parseBuffer, len)) {\n          this._preserveStack(cursorStartX, cursorStartY, len, 0);\n          this._logSlowResolvingAsync(result);\n          return result;\n        }\n      }\n    }\n\n    if (this._activeBuffer.x !== cursorStartX || this._activeBuffer.y !== cursorStartY) {\n      this._onCursorMove.fire();\n    }\n\n    // Refresh any dirty rows accumulated as part of parsing\n    this._onRequestRefreshRows.fire(this._dirtyRowService.start, this._dirtyRowService.end);\n  }\n\n  public print(data: Uint32Array, start: number, end: number): void {\n    let code: number;\n    let chWidth: number;\n    const charset = this._charsetService.charset;\n    const screenReaderMode = this._optionsService.rawOptions.screenReaderMode;\n    const cols = this._bufferService.cols;\n    const wraparoundMode = this._coreService.decPrivateModes.wraparound;\n    const insertMode = this._coreService.modes.insertMode;\n    const curAttr = this._curAttrData;\n    let bufferRow = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n\n    // handle wide chars: reset start_cell-1 if we would overwrite the second cell of a wide char\n    if (this._activeBuffer.x && end - start > 0 && bufferRow.getWidth(this._activeBuffer.x - 1) === 2) {\n      bufferRow.setCellFromCodePoint(this._activeBuffer.x - 1, 0, 1, curAttr.fg, curAttr.bg, curAttr.extended);\n    }\n\n    for (let pos = start; pos < end; ++pos) {\n      code = data[pos];\n\n      // calculate print space\n      // expensive call, therefore we save width in line buffer\n      chWidth = this._unicodeService.wcwidth(code);\n\n      // get charset replacement character\n      // charset is only defined for ASCII, therefore we only\n      // search for an replacement char if code < 127\n      if (code < 127 && charset) {\n        const ch = charset[String.fromCharCode(code)];\n        if (ch) {\n          code = ch.charCodeAt(0);\n        }\n      }\n\n      if (screenReaderMode) {\n        this._onA11yChar.fire(stringFromCodePoint(code));\n      }\n\n      // insert combining char at last cursor position\n      // this._activeBuffer.x should never be 0 for a combining char\n      // since they always follow a cell consuming char\n      // therefore we can test for this._activeBuffer.x to avoid overflow left\n      if (!chWidth && this._activeBuffer.x) {\n        if (!bufferRow.getWidth(this._activeBuffer.x - 1)) {\n          // found empty cell after fullwidth, need to go 2 cells back\n          // it is save to step 2 cells back here\n          // since an empty cell is only set by fullwidth chars\n          bufferRow.addCodepointToCell(this._activeBuffer.x - 2, code);\n        } else {\n          bufferRow.addCodepointToCell(this._activeBuffer.x - 1, code);\n        }\n        continue;\n      }\n\n      // goto next line if ch would overflow\n      // NOTE: To avoid costly width checks here,\n      // the terminal does not allow a cols < 2.\n      if (this._activeBuffer.x + chWidth - 1 >= cols) {\n        // autowrap - DECAWM\n        // automatically wraps to the beginning of the next line\n        if (wraparoundMode) {\n          // clear left over cells to the right\n          while (this._activeBuffer.x < cols) {\n            bufferRow.setCellFromCodePoint(this._activeBuffer.x++, 0, 1, curAttr.fg, curAttr.bg, curAttr.extended);\n          }\n          this._activeBuffer.x = 0;\n          this._activeBuffer.y++;\n          if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n            this._activeBuffer.y--;\n            this._bufferService.scroll(this._eraseAttrData(), true);\n          } else {\n            if (this._activeBuffer.y >= this._bufferService.rows) {\n              this._activeBuffer.y = this._bufferService.rows - 1;\n            }\n            // The line already exists (eg. the initial viewport), mark it as a\n            // wrapped line\n            this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!.isWrapped = true;\n          }\n          // row changed, get it again\n          bufferRow = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n        } else {\n          this._activeBuffer.x = cols - 1;\n          if (chWidth === 2) {\n            // FIXME: check for xterm behavior\n            // What to do here? We got a wide char that does not fit into last cell\n            continue;\n          }\n        }\n      }\n\n      // insert mode: move characters to right\n      if (insertMode) {\n        // right shift cells according to the width\n        bufferRow.insertCells(this._activeBuffer.x, chWidth, this._activeBuffer.getNullCell(curAttr), curAttr);\n        // test last cell - since the last cell has only room for\n        // a halfwidth char any fullwidth shifted there is lost\n        // and will be set to empty cell\n        if (bufferRow.getWidth(cols - 1) === 2) {\n          bufferRow.setCellFromCodePoint(cols - 1, NULL_CELL_CODE, NULL_CELL_WIDTH, curAttr.fg, curAttr.bg, curAttr.extended);\n        }\n      }\n\n      // write current char to buffer and advance cursor\n      bufferRow.setCellFromCodePoint(this._activeBuffer.x++, code, chWidth, curAttr.fg, curAttr.bg, curAttr.extended);\n\n      // fullwidth char - also set next cell to placeholder stub and advance cursor\n      // for graphemes bigger than fullwidth we can simply loop to zero\n      // we already made sure above, that this._activeBuffer.x + chWidth will not overflow right\n      if (chWidth > 0) {\n        while (--chWidth) {\n          // other than a regular empty cell a cell following a wide char has no width\n          bufferRow.setCellFromCodePoint(this._activeBuffer.x++, 0, 0, curAttr.fg, curAttr.bg, curAttr.extended);\n        }\n      }\n    }\n    // store last char in Parser.precedingCodepoint for REP to work correctly\n    // This needs to check whether:\n    //  - fullwidth + surrogates: reset\n    //  - combining: only base char gets carried on (bug in xterm?)\n    if (end - start > 0) {\n      bufferRow.loadCell(this._activeBuffer.x - 1, this._workCell);\n      if (this._workCell.getWidth() === 2 || this._workCell.getCode() > 0xFFFF) {\n        this._parser.precedingCodepoint = 0;\n      } else if (this._workCell.isCombined()) {\n        this._parser.precedingCodepoint = this._workCell.getChars().charCodeAt(0);\n      } else {\n        this._parser.precedingCodepoint = this._workCell.content;\n      }\n    }\n\n    // handle wide chars: reset cell to the right if it is second cell of a wide char\n    if (this._activeBuffer.x < cols && end - start > 0 && bufferRow.getWidth(this._activeBuffer.x) === 0 && !bufferRow.hasContent(this._activeBuffer.x)) {\n      bufferRow.setCellFromCodePoint(this._activeBuffer.x, 0, 1, curAttr.fg, curAttr.bg, curAttr.extended);\n    }\n\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Forward registerCsiHandler from parser.\n   */\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: IParams) => boolean | Promise<boolean>): IDisposable {\n    if (id.final === 't' && !id.prefix && !id.intermediates) {\n      // security: always check whether window option is allowed\n      return this._parser.registerCsiHandler(id, params => {\n        if (!paramToWindowOption(params.params[0], this._optionsService.rawOptions.windowOptions)) {\n          return true;\n        }\n        return callback(params);\n      });\n    }\n    return this._parser.registerCsiHandler(id, callback);\n  }\n\n  /**\n   * Forward registerDcsHandler from parser.\n   */\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerDcsHandler(id, new DcsHandler(callback));\n  }\n\n  /**\n   * Forward registerEscHandler from parser.\n   */\n  public registerEscHandler(id: IFunctionIdentifier, callback: () => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerEscHandler(id, callback);\n  }\n\n  /**\n   * Forward registerOscHandler from parser.\n   */\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerOscHandler(ident, new OscHandler(callback));\n  }\n\n  /**\n   * BEL\n   * Bell (Ctrl-G).\n   *\n   * @vt: #Y   C0    BEL   \"Bell\"  \"\\a, \\x07\"  \"Ring the bell.\"\n   * The behavior of the bell is further customizable with `ITerminalOptions.bellStyle`\n   * and `ITerminalOptions.bellSound`.\n   */\n  public bell(): boolean {\n    this._onRequestBell.fire();\n    return true;\n  }\n\n  /**\n   * LF\n   * Line Feed or New Line (NL).  (LF  is Ctrl-J).\n   *\n   * @vt: #Y   C0    LF   \"Line Feed\"            \"\\n, \\x0A\"  \"Move the cursor one row down, scrolling if needed.\"\n   * Scrolling is restricted to scroll margins and will only happen on the bottom line.\n   *\n   * @vt: #Y   C0    VT   \"Vertical Tabulation\"  \"\\v, \\x0B\"  \"Treated as LF.\"\n   * @vt: #Y   C0    FF   \"Form Feed\"            \"\\f, \\x0C\"  \"Treated as LF.\"\n   */\n  public lineFeed(): boolean {\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n    if (this._optionsService.rawOptions.convertEol) {\n      this._activeBuffer.x = 0;\n    }\n    this._activeBuffer.y++;\n    if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n      this._activeBuffer.y--;\n      this._bufferService.scroll(this._eraseAttrData());\n    } else if (this._activeBuffer.y >= this._bufferService.rows) {\n      this._activeBuffer.y = this._bufferService.rows - 1;\n    }\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      this._activeBuffer.x--;\n    }\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n\n    this._onLineFeed.fire();\n    return true;\n  }\n\n  /**\n   * CR\n   * Carriage Return (Ctrl-M).\n   *\n   * @vt: #Y   C0    CR   \"Carriage Return\"  \"\\r, \\x0D\"  \"Move the cursor to the beginning of the row.\"\n   */\n  public carriageReturn(): boolean {\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * BS\n   * Backspace (Ctrl-H).\n   *\n   * @vt: #Y   C0    BS   \"Backspace\"  \"\\b, \\x08\"  \"Move the cursor one position to the left.\"\n   * By default it is not possible to move the cursor past the leftmost position.\n   * If `reverse wrap-around` (`CSI ? 45 h`) is set, a previous soft line wrap (DECAWM)\n   * can be undone with BS within the scroll margins. In that case the cursor will wrap back\n   * to the end of the previous row. Note that it is not possible to peek back into the scrollbuffer\n   * with the cursor, thus at the home position (top-leftmost cell) this has no effect.\n   */\n  public backspace(): boolean {\n    // reverse wrap-around is disabled\n    if (!this._coreService.decPrivateModes.reverseWraparound) {\n      this._restrictCursor();\n      if (this._activeBuffer.x > 0) {\n        this._activeBuffer.x--;\n      }\n      return true;\n    }\n\n    // reverse wrap-around is enabled\n    // other than for normal operation mode, reverse wrap-around allows the cursor\n    // to be at x=cols to be able to address the last cell of a row by BS\n    this._restrictCursor(this._bufferService.cols);\n\n    if (this._activeBuffer.x > 0) {\n      this._activeBuffer.x--;\n    } else {\n      /**\n       * reverse wrap-around handling:\n       * Our implementation deviates from xterm on purpose. Details:\n       * - only previous soft NLs can be reversed (isWrapped=true)\n       * - only works within scrollborders (top/bottom, left/right not yet supported)\n       * - cannot peek into scrollbuffer\n       * - any cursor movement sequence keeps working as expected\n       */\n      if (this._activeBuffer.x === 0\n        && this._activeBuffer.y > this._activeBuffer.scrollTop\n        && this._activeBuffer.y <= this._activeBuffer.scrollBottom\n        && this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)?.isWrapped) {\n        this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!.isWrapped = false;\n        this._activeBuffer.y--;\n        this._activeBuffer.x = this._bufferService.cols - 1;\n        // find last taken cell - last cell can have 3 different states:\n        // - hasContent(true) + hasWidth(1): narrow char - we are done\n        // - hasWidth(0): second part of wide char - we are done\n        // - hasContent(false) + hasWidth(1): empty cell due to early wrapping wide char, go one cell further back\n        const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n        if (line.hasWidth(this._activeBuffer.x) && !line.hasContent(this._activeBuffer.x)) {\n          this._activeBuffer.x--;\n          // We do this only once, since width=1 + hasContent=false currently happens only once before\n          // early wrapping of a wide char.\n          // This needs to be fixed once we support graphemes taking more than 2 cells.\n        }\n      }\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n  /**\n   * TAB\n   * Horizontal Tab (HT) (Ctrl-I).\n   *\n   * @vt: #Y   C0    HT   \"Horizontal Tabulation\"  \"\\t, \\x09\"  \"Move the cursor to the next character tab stop.\"\n   */\n  public tab(): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    const originalX = this._activeBuffer.x;\n    this._activeBuffer.x = this._activeBuffer.nextStop();\n    if (this._optionsService.rawOptions.screenReaderMode) {\n      this._onA11yTab.fire(this._activeBuffer.x - originalX);\n    }\n    return true;\n  }\n\n  /**\n   * SO\n   * Shift Out (Ctrl-N) -> Switch to Alternate Character Set.  This invokes the\n   * G1 character set.\n   *\n   * @vt: #P[Only limited ISO-2022 charset support.]  C0    SO   \"Shift Out\"  \"\\x0E\"  \"Switch to an alternative character set.\"\n   */\n  public shiftOut(): boolean {\n    this._charsetService.setgLevel(1);\n    return true;\n  }\n\n  /**\n   * SI\n   * Shift In (Ctrl-O) -> Switch to Standard Character Set.  This invokes the G0\n   * character set (the default).\n   *\n   * @vt: #Y   C0    SI   \"Shift In\"   \"\\x0F\"  \"Return to regular character set after Shift Out.\"\n   */\n  public shiftIn(): boolean {\n    this._charsetService.setgLevel(0);\n    return true;\n  }\n\n  /**\n   * Restrict cursor to viewport size / scroll margin (origin mode).\n   */\n  private _restrictCursor(maxCol: number = this._bufferService.cols - 1): void {\n    this._activeBuffer.x = Math.min(maxCol, Math.max(0, this._activeBuffer.x));\n    this._activeBuffer.y = this._coreService.decPrivateModes.origin\n      ? Math.min(this._activeBuffer.scrollBottom, Math.max(this._activeBuffer.scrollTop, this._activeBuffer.y))\n      : Math.min(this._bufferService.rows - 1, Math.max(0, this._activeBuffer.y));\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Set absolute cursor position.\n   */\n  private _setCursor(x: number, y: number): void {\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n    if (this._coreService.decPrivateModes.origin) {\n      this._activeBuffer.x = x;\n      this._activeBuffer.y = this._activeBuffer.scrollTop + y;\n    } else {\n      this._activeBuffer.x = x;\n      this._activeBuffer.y = y;\n    }\n    this._restrictCursor();\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Set relative cursor position.\n   */\n  private _moveCursor(x: number, y: number): void {\n    // for relative changes we have to make sure we are within 0 .. cols/rows - 1\n    // before calculating the new position\n    this._restrictCursor();\n    this._setCursor(this._activeBuffer.x + x, this._activeBuffer.y + y);\n  }\n\n  /**\n   * CSI Ps A\n   * Cursor Up Ps Times (default = 1) (CUU).\n   *\n   * @vt: #Y CSI CUU   \"Cursor Up\"   \"CSI Ps A\"  \"Move cursor `Ps` times up (default=1).\"\n   * If the cursor would pass the top scroll margin, it will stop there.\n   */\n  public cursorUp(params: IParams): boolean {\n    // stop at scrollTop\n    const diffToTop = this._activeBuffer.y - this._activeBuffer.scrollTop;\n    if (diffToTop >= 0) {\n      this._moveCursor(0, -Math.min(diffToTop, params.params[0] || 1));\n    } else {\n      this._moveCursor(0, -(params.params[0] || 1));\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps B\n   * Cursor Down Ps Times (default = 1) (CUD).\n   *\n   * @vt: #Y CSI CUD   \"Cursor Down\"   \"CSI Ps B\"  \"Move cursor `Ps` times down (default=1).\"\n   * If the cursor would pass the bottom scroll margin, it will stop there.\n   */\n  public cursorDown(params: IParams): boolean {\n    // stop at scrollBottom\n    const diffToBottom = this._activeBuffer.scrollBottom - this._activeBuffer.y;\n    if (diffToBottom >= 0) {\n      this._moveCursor(0, Math.min(diffToBottom, params.params[0] || 1));\n    } else {\n      this._moveCursor(0, params.params[0] || 1);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps C\n   * Cursor Forward Ps Times (default = 1) (CUF).\n   *\n   * @vt: #Y CSI CUF   \"Cursor Forward\"    \"CSI Ps C\"  \"Move cursor `Ps` times forward (default=1).\"\n   */\n  public cursorForward(params: IParams): boolean {\n    this._moveCursor(params.params[0] || 1, 0);\n    return true;\n  }\n\n  /**\n   * CSI Ps D\n   * Cursor Backward Ps Times (default = 1) (CUB).\n   *\n   * @vt: #Y CSI CUB   \"Cursor Backward\"   \"CSI Ps D\"  \"Move cursor `Ps` times backward (default=1).\"\n   */\n  public cursorBackward(params: IParams): boolean {\n    this._moveCursor(-(params.params[0] || 1), 0);\n    return true;\n  }\n\n  /**\n   * CSI Ps E\n   * Cursor Next Line Ps Times (default = 1) (CNL).\n   * Other than cursorDown (CUD) also set the cursor to first column.\n   *\n   * @vt: #Y CSI CNL   \"Cursor Next Line\"  \"CSI Ps E\"  \"Move cursor `Ps` times down (default=1) and to the first column.\"\n   * Same as CUD, additionally places the cursor at the first column.\n   */\n  public cursorNextLine(params: IParams): boolean {\n    this.cursorDown(params);\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * CSI Ps F\n   * Cursor Previous Line Ps Times (default = 1) (CPL).\n   * Other than cursorUp (CUU) also set the cursor to first column.\n   *\n   * @vt: #Y CSI CPL   \"Cursor Backward\"   \"CSI Ps F\"  \"Move cursor `Ps` times up (default=1) and to the first column.\"\n   * Same as CUU, additionally places the cursor at the first column.\n   */\n  public cursorPrecedingLine(params: IParams): boolean {\n    this.cursorUp(params);\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * CSI Ps G\n   * Cursor Character Absolute  [column] (default = [row,1]) (CHA).\n   *\n   * @vt: #Y CSI CHA   \"Cursor Horizontal Absolute\" \"CSI Ps G\" \"Move cursor to `Ps`-th column of the active row (default=1).\"\n   */\n  public cursorCharAbsolute(params: IParams): boolean {\n    this._setCursor((params.params[0] || 1) - 1, this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps H\n   * Cursor Position [row;column] (default = [1,1]) (CUP).\n   *\n   * @vt: #Y CSI CUP   \"Cursor Position\"   \"CSI Ps ; Ps H\"  \"Set cursor to position [`Ps`, `Ps`] (default = [1, 1]).\"\n   * If ORIGIN mode is set, places the cursor to the absolute position within the scroll margins.\n   * If ORIGIN mode is not set, places the cursor to the absolute position within the viewport.\n   * Note that the coordinates are 1-based, thus the top left position starts at `1 ; 1`.\n   */\n  public cursorPosition(params: IParams): boolean {\n    this._setCursor(\n      // col\n      (params.length >= 2) ? (params.params[1] || 1) - 1 : 0,\n      // row\n      (params.params[0] || 1) - 1\n    );\n    return true;\n  }\n\n  /**\n   * CSI Pm `  Character Position Absolute\n   *   [column] (default = [row,1]) (HPA).\n   * Currently same functionality as CHA.\n   *\n   * @vt: #Y CSI HPA   \"Horizontal Position Absolute\"  \"CSI Ps ` \" \"Same as CHA.\"\n   */\n  public charPosAbsolute(params: IParams): boolean {\n    this._setCursor((params.params[0] || 1) - 1, this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Pm a  Character Position Relative\n   *   [columns] (default = [row,col+1]) (HPR)\n   *\n   * @vt: #Y CSI HPR   \"Horizontal Position Relative\"  \"CSI Ps a\"  \"Same as CUF.\"\n   */\n  public hPositionRelative(params: IParams): boolean {\n    this._moveCursor(params.params[0] || 1, 0);\n    return true;\n  }\n\n  /**\n   * CSI Pm d  Vertical Position Absolute (VPA)\n   *   [row] (default = [1,column])\n   *\n   * @vt: #Y CSI VPA   \"Vertical Position Absolute\"    \"CSI Ps d\"  \"Move cursor to `Ps`-th row (default=1).\"\n   */\n  public linePosAbsolute(params: IParams): boolean {\n    this._setCursor(this._activeBuffer.x, (params.params[0] || 1) - 1);\n    return true;\n  }\n\n  /**\n   * CSI Pm e  Vertical Position Relative (VPR)\n   *   [rows] (default = [row+1,column])\n   * reuse CSI Ps B ?\n   *\n   * @vt: #Y CSI VPR   \"Vertical Position Relative\"    \"CSI Ps e\"  \"Move cursor `Ps` times down (default=1).\"\n   */\n  public vPositionRelative(params: IParams): boolean {\n    this._moveCursor(0, params.params[0] || 1);\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps f\n   *   Horizontal and Vertical Position [row;column] (default =\n   *   [1,1]) (HVP).\n   *   Same as CUP.\n   *\n   * @vt: #Y CSI HVP   \"Horizontal and Vertical Position\" \"CSI Ps ; Ps f\"  \"Same as CUP.\"\n   */\n  public hVPosition(params: IParams): boolean {\n    this.cursorPosition(params);\n    return true;\n  }\n\n  /**\n   * CSI Ps g  Tab Clear (TBC).\n   *     Ps = 0  -> Clear Current Column (default).\n   *     Ps = 3  -> Clear All.\n   * Potentially:\n   *   Ps = 2  -> Clear Stops on Line.\n   *   http://vt100.net/annarbor/aaa-ug/section6.html\n   *\n   * @vt: #Y CSI TBC   \"Tab Clear\" \"CSI Ps g\"  \"Clear tab stops at current position (0) or all (3) (default=0).\"\n   * Clearing tabstops off the active row (Ps = 2, VT100) is currently not supported.\n   */\n  public tabClear(params: IParams): boolean {\n    const param = params.params[0];\n    if (param === 0) {\n      delete this._activeBuffer.tabs[this._activeBuffer.x];\n    } else if (param === 3) {\n      this._activeBuffer.tabs = {};\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps I\n   *   Cursor Forward Tabulation Ps tab stops (default = 1) (CHT).\n   *\n   * @vt: #Y CSI CHT   \"Cursor Horizontal Tabulation\" \"CSI Ps I\" \"Move cursor `Ps` times tabs forward (default=1).\"\n   */\n  public cursorForwardTab(params: IParams): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    let param = params.params[0] || 1;\n    while (param--) {\n      this._activeBuffer.x = this._activeBuffer.nextStop();\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps Z  Cursor Backward Tabulation Ps tab stops (default = 1) (CBT).\n   *\n   * @vt: #Y CSI CBT   \"Cursor Backward Tabulation\"  \"CSI Ps Z\"  \"Move cursor `Ps` tabs backward (default=1).\"\n   */\n  public cursorBackwardTab(params: IParams): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.x = this._activeBuffer.prevStop();\n    }\n    return true;\n  }\n\n\n  /**\n   * Helper method to erase cells in a terminal row.\n   * The cell gets replaced with the eraseChar of the terminal.\n   * @param y row index\n   * @param start first cell index to be erased\n   * @param end   end - 1 is last erased cell\n   * @param cleanWrap clear the isWrapped flag\n   */\n  private _eraseInBufferLine(y: number, start: number, end: number, clearWrap: boolean = false): void {\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n    line.replaceCells(\n      start,\n      end,\n      this._activeBuffer.getNullCell(this._eraseAttrData()),\n      this._eraseAttrData()\n    );\n    if (clearWrap) {\n      line.isWrapped = false;\n    }\n  }\n\n  /**\n   * Helper method to reset cells in a terminal row.\n   * The cell gets replaced with the eraseChar of the terminal and the isWrapped property is set to false.\n   * @param y row index\n   */\n  private _resetBufferLine(y: number): void {\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n    line.fill(this._activeBuffer.getNullCell(this._eraseAttrData()));\n    this._bufferService.buffer.clearMarkers(this._activeBuffer.ybase + y);\n    line.isWrapped = false;\n  }\n\n  /**\n   * CSI Ps J  Erase in Display (ED).\n   *     Ps = 0  -> Erase Below (default).\n   *     Ps = 1  -> Erase Above.\n   *     Ps = 2  -> Erase All.\n   *     Ps = 3  -> Erase Saved Lines (xterm).\n   * CSI ? Ps J\n   *   Erase in Display (DECSED).\n   *     Ps = 0  -> Selective Erase Below (default).\n   *     Ps = 1  -> Selective Erase Above.\n   *     Ps = 2  -> Selective Erase All.\n   *\n   * @vt: #Y CSI ED  \"Erase In Display\"  \"CSI Ps J\"  \"Erase various parts of the viewport.\"\n   * Supported param values:\n   *\n   * | Ps | Effect                                                       |\n   * | -- | ------------------------------------------------------------ |\n   * | 0  | Erase from the cursor through the end of the viewport.       |\n   * | 1  | Erase from the beginning of the viewport through the cursor. |\n   * | 2  | Erase complete viewport.                                     |\n   * | 3  | Erase scrollback.                                            |\n   *\n   * @vt: #P[Protection attributes are not supported.] CSI DECSED   \"Selective Erase In Display\"  \"CSI ? Ps J\"  \"Currently the same as ED.\"\n   */\n  public eraseInDisplay(params: IParams): boolean {\n    this._restrictCursor(this._bufferService.cols);\n    let j;\n    switch (params.params[0]) {\n      case 0:\n        j = this._activeBuffer.y;\n        this._dirtyRowService.markDirty(j);\n        this._eraseInBufferLine(j++, this._activeBuffer.x, this._bufferService.cols, this._activeBuffer.x === 0);\n        for (; j < this._bufferService.rows; j++) {\n          this._resetBufferLine(j);\n        }\n        this._dirtyRowService.markDirty(j);\n        break;\n      case 1:\n        j = this._activeBuffer.y;\n        this._dirtyRowService.markDirty(j);\n        // Deleted front part of line and everything before. This line will no longer be wrapped.\n        this._eraseInBufferLine(j, 0, this._activeBuffer.x + 1, true);\n        if (this._activeBuffer.x + 1 >= this._bufferService.cols) {\n          // Deleted entire previous line. This next line can no longer be wrapped.\n          this._activeBuffer.lines.get(j + 1)!.isWrapped = false;\n        }\n        while (j--) {\n          this._resetBufferLine(j);\n        }\n        this._dirtyRowService.markDirty(0);\n        break;\n      case 2:\n        j = this._bufferService.rows;\n        this._dirtyRowService.markDirty(j - 1);\n        while (j--) {\n          this._resetBufferLine(j);\n        }\n        this._dirtyRowService.markDirty(0);\n        break;\n      case 3:\n        // Clear scrollback (everything not in viewport)\n        const scrollBackSize = this._activeBuffer.lines.length - this._bufferService.rows;\n        if (scrollBackSize > 0) {\n          this._activeBuffer.lines.trimStart(scrollBackSize);\n          this._activeBuffer.ybase = Math.max(this._activeBuffer.ybase - scrollBackSize, 0);\n          this._activeBuffer.ydisp = Math.max(this._activeBuffer.ydisp - scrollBackSize, 0);\n          // Force a scroll event to refresh viewport\n          this._onScroll.fire(0);\n        }\n        break;\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps K  Erase in Line (EL).\n   *     Ps = 0  -> Erase to Right (default).\n   *     Ps = 1  -> Erase to Left.\n   *     Ps = 2  -> Erase All.\n   * CSI ? Ps K\n   *   Erase in Line (DECSEL).\n   *     Ps = 0  -> Selective Erase to Right (default).\n   *     Ps = 1  -> Selective Erase to Left.\n   *     Ps = 2  -> Selective Erase All.\n   *\n   * @vt: #Y CSI EL    \"Erase In Line\"  \"CSI Ps K\"  \"Erase various parts of the active row.\"\n   * Supported param values:\n   *\n   * | Ps | Effect                                                   |\n   * | -- | -------------------------------------------------------- |\n   * | 0  | Erase from the cursor through the end of the row.        |\n   * | 1  | Erase from the beginning of the line through the cursor. |\n   * | 2  | Erase complete line.                                     |\n   *\n   * @vt: #P[Protection attributes are not supported.] CSI DECSEL   \"Selective Erase In Line\"  \"CSI ? Ps K\"  \"Currently the same as EL.\"\n   */\n  public eraseInLine(params: IParams): boolean {\n    this._restrictCursor(this._bufferService.cols);\n    switch (params.params[0]) {\n      case 0:\n        this._eraseInBufferLine(this._activeBuffer.y, this._activeBuffer.x, this._bufferService.cols, this._activeBuffer.x === 0);\n        break;\n      case 1:\n        this._eraseInBufferLine(this._activeBuffer.y, 0, this._activeBuffer.x + 1, false);\n        break;\n      case 2:\n        this._eraseInBufferLine(this._activeBuffer.y, 0, this._bufferService.cols, true);\n        break;\n    }\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Ps L\n   * Insert Ps Line(s) (default = 1) (IL).\n   *\n   * @vt: #Y CSI IL  \"Insert Line\"   \"CSI Ps L\"  \"Insert `Ps` blank lines at active row (default=1).\"\n   * For every inserted line at the scroll top one line at the scroll bottom gets removed.\n   * The cursor is set to the first column.\n   * IL has no effect if the cursor is outside the scroll margins.\n   */\n  public insertLines(params: IParams): boolean {\n    this._restrictCursor();\n    let param = params.params[0] || 1;\n\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n\n    const row: number = this._activeBuffer.ybase + this._activeBuffer.y;\n\n    const scrollBottomRowsOffset = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom;\n    const scrollBottomAbsolute = this._bufferService.rows - 1 + this._activeBuffer.ybase - scrollBottomRowsOffset + 1;\n    while (param--) {\n      // test: echo -e '\\e[44m\\e[1L\\e[0m'\n      // blankLine(true) - xterm/linux behavior\n      this._activeBuffer.lines.splice(scrollBottomAbsolute - 1, 1);\n      this._activeBuffer.lines.splice(row, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom);\n    this._activeBuffer.x = 0; // see https://vt100.net/docs/vt220-rm/chapter4.html - vt220 only?\n    return true;\n  }\n\n  /**\n   * CSI Ps M\n   * Delete Ps Line(s) (default = 1) (DL).\n   *\n   * @vt: #Y CSI DL  \"Delete Line\"   \"CSI Ps M\"  \"Delete `Ps` lines at active row (default=1).\"\n   * For every deleted line at the scroll top one blank line at the scroll bottom gets appended.\n   * The cursor is set to the first column.\n   * DL has no effect if the cursor is outside the scroll margins.\n   */\n  public deleteLines(params: IParams): boolean {\n    this._restrictCursor();\n    let param = params.params[0] || 1;\n\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n\n    const row: number = this._activeBuffer.ybase + this._activeBuffer.y;\n\n    let j: number;\n    j = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom;\n    j = this._bufferService.rows - 1 + this._activeBuffer.ybase - j;\n    while (param--) {\n      // test: echo -e '\\e[44m\\e[1M\\e[0m'\n      // blankLine(true) - xterm/linux behavior\n      this._activeBuffer.lines.splice(row, 1);\n      this._activeBuffer.lines.splice(j, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom);\n    this._activeBuffer.x = 0; // see https://vt100.net/docs/vt220-rm/chapter4.html - vt220 only?\n    return true;\n  }\n\n  /**\n   * CSI Ps @\n   * Insert Ps (Blank) Character(s) (default = 1) (ICH).\n   *\n   * @vt: #Y CSI ICH  \"Insert Characters\"   \"CSI Ps @\"  \"Insert `Ps` (blank) characters (default = 1).\"\n   * The ICH sequence inserts `Ps` blank characters. The cursor remains at the beginning of the blank characters.\n   * Text between the cursor and right margin moves to the right. Characters moved past the right margin are lost.\n   *\n   *\n   * FIXME: check against xterm - should not work outside of scroll margins (see VT520 manual)\n   */\n  public insertChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.insertCells(\n        this._activeBuffer.x,\n        params.params[0] || 1,\n        this._activeBuffer.getNullCell(this._eraseAttrData()),\n        this._eraseAttrData()\n      );\n      this._dirtyRowService.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps P\n   * Delete Ps Character(s) (default = 1) (DCH).\n   *\n   * @vt: #Y CSI DCH   \"Delete Character\"  \"CSI Ps P\"  \"Delete `Ps` characters (default=1).\"\n   * As characters are deleted, the remaining characters between the cursor and right margin move to the left.\n   * Character attributes move with the characters. The terminal adds blank characters at the right margin.\n   *\n   *\n   * FIXME: check against xterm - should not work outside of scroll margins (see VT520 manual)\n   */\n  public deleteChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.deleteCells(\n        this._activeBuffer.x,\n        params.params[0] || 1,\n        this._activeBuffer.getNullCell(this._eraseAttrData()),\n        this._eraseAttrData()\n      );\n      this._dirtyRowService.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps S  Scroll up Ps lines (default = 1) (SU).\n   *\n   * @vt: #Y CSI SU  \"Scroll Up\"   \"CSI Ps S\"  \"Scroll `Ps` lines up (default=1).\"\n   *\n   *\n   * FIXME: scrolled out lines at top = 1 should add to scrollback (xterm)\n   */\n  public scrollUp(params: IParams): boolean {\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 1);\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps T  Scroll down Ps lines (default = 1) (SD).\n   *\n   * @vt: #Y CSI SD  \"Scroll Down\"   \"CSI Ps T\"  \"Scroll `Ps` lines down (default=1).\"\n   */\n  public scrollDown(params: IParams): boolean {\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 1);\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 0, this._activeBuffer.getBlankLine(DEFAULT_ATTR_DATA));\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps SP @  Scroll left Ps columns (default = 1) (SL) ECMA-48\n   *\n   * Notation: (Pn)\n   * Representation: CSI Pn 02/00 04/00\n   * Parameter default value: Pn = 1\n   * SL causes the data in the presentation component to be moved by n character positions\n   * if the line orientation is horizontal, or by n line positions if the line orientation\n   * is vertical, such that the data appear to move to the left; where n equals the value of Pn.\n   * The active presentation position is not affected by this control function.\n   *\n   * Supported:\n   *   - always left shift (no line orientation setting respected)\n   *\n   * @vt: #Y CSI SL  \"Scroll Left\" \"CSI Ps SP @\" \"Scroll viewport `Ps` times to the left.\"\n   * SL moves the content of all lines within the scroll margins `Ps` times to the left.\n   * SL has no effect outside of the scroll margins.\n   */\n  public scrollLeft(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.deleteCells(0, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps SP A  Scroll right Ps columns (default = 1) (SR) ECMA-48\n   *\n   * Notation: (Pn)\n   * Representation: CSI Pn 02/00 04/01\n   * Parameter default value: Pn = 1\n   * SR causes the data in the presentation component to be moved by n character positions\n   * if the line orientation is horizontal, or by n line positions if the line orientation\n   * is vertical, such that the data appear to move to the right; where n equals the value of Pn.\n   * The active presentation position is not affected by this control function.\n   *\n   * Supported:\n   *   - always right shift (no line orientation setting respected)\n   *\n   * @vt: #Y CSI SR  \"Scroll Right\"  \"CSI Ps SP A\"   \"Scroll viewport `Ps` times to the right.\"\n   * SL moves the content of all lines within the scroll margins `Ps` times to the right.\n   * Content at the right margin is lost.\n   * SL has no effect outside of the scroll margins.\n   */\n  public scrollRight(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.insertCells(0, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Pm ' }\n   * Insert Ps Column(s) (default = 1) (DECIC), VT420 and up.\n   *\n   * @vt: #Y CSI DECIC \"Insert Columns\"  \"CSI Ps ' }\"  \"Insert `Ps` columns at cursor position.\"\n   * DECIC inserts `Ps` times blank columns at the cursor position for all lines with the scroll margins,\n   * moving content to the right. Content at the right margin is lost.\n   * DECIC has no effect outside the scrolling margins.\n   */\n  public insertColumns(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.insertCells(this._activeBuffer.x, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Pm ' ~\n   * Delete Ps Column(s) (default = 1) (DECDC), VT420 and up.\n   *\n   * @vt: #Y CSI DECDC \"Delete Columns\"  \"CSI Ps ' ~\"  \"Delete `Ps` columns at cursor position.\"\n   * DECDC deletes `Ps` times columns at the cursor position for all lines with the scroll margins,\n   * moving content to the left. Blank columns are added at the right margin.\n   * DECDC has no effect outside the scrolling margins.\n   */\n  public deleteColumns(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.deleteCells(this._activeBuffer.x, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps X\n   * Erase Ps Character(s) (default = 1) (ECH).\n   *\n   * @vt: #Y CSI ECH   \"Erase Character\"   \"CSI Ps X\"  \"Erase `Ps` characters from current cursor position to the right (default=1).\"\n   * ED erases `Ps` characters from current cursor position to the right.\n   * ED works inside or outside the scrolling margins.\n   */\n  public eraseChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.replaceCells(\n        this._activeBuffer.x,\n        this._activeBuffer.x + (params.params[0] || 1),\n        this._activeBuffer.getNullCell(this._eraseAttrData()),\n        this._eraseAttrData()\n      );\n      this._dirtyRowService.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps b  Repeat the preceding graphic character Ps times (REP).\n   * From ECMA 48 (@see http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-048.pdf)\n   *    Notation: (Pn)\n   *    Representation: CSI Pn 06/02\n   *    Parameter default value: Pn = 1\n   *    REP is used to indicate that the preceding character in the data stream,\n   *    if it is a graphic character (represented by one or more bit combinations) including SPACE,\n   *    is to be repeated n times, where n equals the value of Pn.\n   *    If the character preceding REP is a control function or part of a control function,\n   *    the effect of REP is not defined by this Standard.\n   *\n   * Since we propagate the terminal as xterm-256color we have to follow xterm's behavior:\n   *    - fullwidth + surrogate chars are ignored\n   *    - for combining chars only the base char gets repeated\n   *    - text attrs are applied normally\n   *    - wrap around is respected\n   *    - any valid sequence resets the carried forward char\n   *\n   * Note: To get reset on a valid sequence working correctly without much runtime penalty,\n   * the preceding codepoint is stored on the parser in `this.print` and reset during `parser.parse`.\n   *\n   * @vt: #Y CSI REP   \"Repeat Preceding Character\"    \"CSI Ps b\"  \"Repeat preceding character `Ps` times (default=1).\"\n   * REP repeats the previous character `Ps` times advancing the cursor, also wrapping if DECAWM is set.\n   * REP has no effect if the sequence does not follow a printable ASCII character\n   * (NOOP for any other sequence in between or NON ASCII characters).\n   */\n  public repeatPrecedingCharacter(params: IParams): boolean {\n    if (!this._parser.precedingCodepoint) {\n      return true;\n    }\n    // call print to insert the chars and handle correct wrapping\n    const length = params.params[0] || 1;\n    const data = new Uint32Array(length);\n    for (let i = 0; i < length; ++i) {\n      data[i] = this._parser.precedingCodepoint;\n    }\n    this.print(data, 0, data.length);\n    return true;\n  }\n\n  /**\n   * CSI Ps c  Send Device Attributes (Primary DA).\n   *     Ps = 0  or omitted -> request attributes from terminal.  The\n   *     response depends on the decTerminalID resource setting.\n   *     -> CSI ? 1 ; 2 c  (``VT100 with Advanced Video Option'')\n   *     -> CSI ? 1 ; 0 c  (``VT101 with No Options'')\n   *     -> CSI ? 6 c  (``VT102'')\n   *     -> CSI ? 6 0 ; 1 ; 2 ; 6 ; 8 ; 9 ; 1 5 ; c  (``VT220'')\n   *   The VT100-style response parameters do not mean anything by\n   *   themselves.  VT220 parameters do, telling the host what fea-\n   *   tures the terminal supports:\n   *     Ps = 1  -> 132-columns.\n   *     Ps = 2  -> Printer.\n   *     Ps = 6  -> Selective erase.\n   *     Ps = 8  -> User-defined keys.\n   *     Ps = 9  -> National replacement character sets.\n   *     Ps = 1 5  -> Technical characters.\n   *     Ps = 2 2  -> ANSI color, e.g., VT525.\n   *     Ps = 2 9  -> ANSI text locator (i.e., DEC Locator mode).\n   *\n   * @vt: #Y CSI DA1   \"Primary Device Attributes\"     \"CSI c\"  \"Send primary device attributes.\"\n   *\n   *\n   * TODO: fix and cleanup response\n   */\n  public sendDeviceAttributesPrimary(params: IParams): boolean {\n    if (params.params[0] > 0) {\n      return true;\n    }\n    if (this._is('xterm') || this._is('rxvt-unicode') || this._is('screen')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[?1;2c');\n    } else if (this._is('linux')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[?6c');\n    }\n    return true;\n  }\n\n  /**\n   * CSI > Ps c\n   *   Send Device Attributes (Secondary DA).\n   *     Ps = 0  or omitted -> request the terminal's identification\n   *     code.  The response depends on the decTerminalID resource set-\n   *     ting.  It should apply only to VT220 and up, but xterm extends\n   *     this to VT100.\n   *     -> CSI  > Pp ; Pv ; Pc c\n   *   where Pp denotes the terminal type\n   *     Pp = 0  -> ``VT100''.\n   *     Pp = 1  -> ``VT220''.\n   *   and Pv is the firmware version (for xterm, this was originally\n   *   the XFree86 patch number, starting with 95).  In a DEC termi-\n   *   nal, Pc indicates the ROM cartridge registration number and is\n   *   always zero.\n   * More information:\n   *   xterm/charproc.c - line 2012, for more information.\n   *   vim responds with ^[[?0c or ^[[?1c after the terminal's response (?)\n   *\n   * @vt: #Y CSI DA2   \"Secondary Device Attributes\"   \"CSI > c\" \"Send primary device attributes.\"\n   *\n   *\n   * TODO: fix and cleanup response\n   */\n  public sendDeviceAttributesSecondary(params: IParams): boolean {\n    if (params.params[0] > 0) {\n      return true;\n    }\n    // xterm and urxvt\n    // seem to spit this\n    // out around ~370 times (?).\n    if (this._is('xterm')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>0;276;0c');\n    } else if (this._is('rxvt-unicode')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>85;95;0c');\n    } else if (this._is('linux')) {\n      // not supported by linux console.\n      // linux console echoes parameters.\n      this._coreService.triggerDataEvent(params.params[0] + 'c');\n    } else if (this._is('screen')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>83;40003;0c');\n    }\n    return true;\n  }\n\n  /**\n   * Evaluate if the current terminal is the given argument.\n   * @param term The terminal name to evaluate\n   */\n  private _is(term: string): boolean {\n    return (this._optionsService.rawOptions.termName + '').indexOf(term) === 0;\n  }\n\n  /**\n   * CSI Pm h  Set Mode (SM).\n   *     Ps = 2  -> Keyboard Action Mode (AM).\n   *     Ps = 4  -> Insert Mode (IRM).\n   *     Ps = 1 2  -> Send/receive (SRM).\n   *     Ps = 2 0  -> Automatic Newline (LNM).\n   *\n   * @vt: #P[Only IRM is supported.]    CSI SM    \"Set Mode\"  \"CSI Pm h\"  \"Set various terminal modes.\"\n   * Supported param values by SM:\n   *\n   * | Param | Action                                 | Support |\n   * | ----- | -------------------------------------- | ------- |\n   * | 2     | Keyboard Action Mode (KAM). Always on. | #N      |\n   * | 4     | Insert Mode (IRM).                     | #Y      |\n   * | 12    | Send/receive (SRM). Always off.        | #N      |\n   * | 20    | Automatic Newline (LNM). Always off.   | #N      |\n   */\n  public setMode(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 4:\n          this._coreService.modes.insertMode = true;\n          break;\n        case 20:\n          // this._t.convertEol = true;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI ? Pm h\n   *   DEC Private Mode Set (DECSET).\n   *     Ps = 1  -> Application Cursor Keys (DECCKM).\n   *     Ps = 2  -> Designate USASCII for character sets G0-G3\n   *     (DECANM), and set VT100 mode.\n   *     Ps = 3  -> 132 Column Mode (DECCOLM).\n   *     Ps = 4  -> Smooth (Slow) Scroll (DECSCLM).\n   *     Ps = 5  -> Reverse Video (DECSCNM).\n   *     Ps = 6  -> Origin Mode (DECOM).\n   *     Ps = 7  -> Wraparound Mode (DECAWM).\n   *     Ps = 8  -> Auto-repeat Keys (DECARM).\n   *     Ps = 9  -> Send Mouse X & Y on button press.  See the sec-\n   *     tion Mouse Tracking.\n   *     Ps = 1 0  -> Show toolbar (rxvt).\n   *     Ps = 1 2  -> Start Blinking Cursor (att610).\n   *     Ps = 1 8  -> Print form feed (DECPFF).\n   *     Ps = 1 9  -> Set print extent to full screen (DECPEX).\n   *     Ps = 2 5  -> Show Cursor (DECTCEM).\n   *     Ps = 3 0  -> Show scrollbar (rxvt).\n   *     Ps = 3 5  -> Enable font-shifting functions (rxvt).\n   *     Ps = 3 8  -> Enter Tektronix Mode (DECTEK).\n   *     Ps = 4 0  -> Allow 80 -> 132 Mode.\n   *     Ps = 4 1  -> more(1) fix (see curses resource).\n   *     Ps = 4 2  -> Enable Nation Replacement Character sets (DECN-\n   *     RCM).\n   *     Ps = 4 4  -> Turn On Margin Bell.\n   *     Ps = 4 5  -> Reverse-wraparound Mode.\n   *     Ps = 4 6  -> Start Logging.  This is normally disabled by a\n   *     compile-time option.\n   *     Ps = 4 7  -> Use Alternate Screen Buffer.  (This may be dis-\n   *     abled by the titeInhibit resource).\n   *     Ps = 6 6  -> Application keypad (DECNKM).\n   *     Ps = 6 7  -> Backarrow key sends backspace (DECBKM).\n   *     Ps = 1 0 0 0  -> Send Mouse X & Y on button press and\n   *     release.  See the section Mouse Tracking.\n   *     Ps = 1 0 0 1  -> Use Hilite Mouse Tracking.\n   *     Ps = 1 0 0 2  -> Use Cell Motion Mouse Tracking.\n   *     Ps = 1 0 0 3  -> Use All Motion Mouse Tracking.\n   *     Ps = 1 0 0 4  -> Send FocusIn/FocusOut events.\n   *     Ps = 1 0 0 5  -> Enable Extended Mouse Mode.\n   *     Ps = 1 0 1 0  -> Scroll to bottom on tty output (rxvt).\n   *     Ps = 1 0 1 1  -> Scroll to bottom on key press (rxvt).\n   *     Ps = 1 0 3 4  -> Interpret \"meta\" key, sets eighth bit.\n   *     (enables the eightBitInput resource).\n   *     Ps = 1 0 3 5  -> Enable special modifiers for Alt and Num-\n   *     Lock keys.  (This enables the numLock resource).\n   *     Ps = 1 0 3 6  -> Send ESC   when Meta modifies a key.  (This\n   *     enables the metaSendsEscape resource).\n   *     Ps = 1 0 3 7  -> Send DEL from the editing-keypad Delete\n   *     key.\n   *     Ps = 1 0 3 9  -> Send ESC  when Alt modifies a key.  (This\n   *     enables the altSendsEscape resource).\n   *     Ps = 1 0 4 0  -> Keep selection even if not highlighted.\n   *     (This enables the keepSelection resource).\n   *     Ps = 1 0 4 1  -> Use the CLIPBOARD selection.  (This enables\n   *     the selectToClipboard resource).\n   *     Ps = 1 0 4 2  -> Enable Urgency window manager hint when\n   *     Control-G is received.  (This enables the bellIsUrgent\n   *     resource).\n   *     Ps = 1 0 4 3  -> Enable raising of the window when Control-G\n   *     is received.  (enables the popOnBell resource).\n   *     Ps = 1 0 4 7  -> Use Alternate Screen Buffer.  (This may be\n   *     disabled by the titeInhibit resource).\n   *     Ps = 1 0 4 8  -> Save cursor as in DECSC.  (This may be dis-\n   *     abled by the titeInhibit resource).\n   *     Ps = 1 0 4 9  -> Save cursor as in DECSC and use Alternate\n   *     Screen Buffer, clearing it first.  (This may be disabled by\n   *     the titeInhibit resource).  This combines the effects of the 1\n   *     0 4 7  and 1 0 4 8  modes.  Use this with terminfo-based\n   *     applications rather than the 4 7  mode.\n   *     Ps = 1 0 5 0  -> Set terminfo/termcap function-key mode.\n   *     Ps = 1 0 5 1  -> Set Sun function-key mode.\n   *     Ps = 1 0 5 2  -> Set HP function-key mode.\n   *     Ps = 1 0 5 3  -> Set SCO function-key mode.\n   *     Ps = 1 0 6 0  -> Set legacy keyboard emulation (X11R6).\n   *     Ps = 1 0 6 1  -> Set VT220 keyboard emulation.\n   *     Ps = 2 0 0 4  -> Set bracketed paste mode.\n   * Modes:\n   *   http: *vt100.net/docs/vt220-rm/chapter4.html\n   *\n   * @vt: #P[See below for supported modes.]    CSI DECSET  \"DEC Private Set Mode\" \"CSI ? Pm h\"  \"Set various terminal attributes.\"\n   * Supported param values by DECSET:\n   *\n   * | param | Action                                                  | Support |\n   * | ----- | ------------------------------------------------------- | --------|\n   * | 1     | Application Cursor Keys (DECCKM).                       | #Y      |\n   * | 2     | Designate US-ASCII for character sets G0-G3 (DECANM).   | #Y      |\n   * | 3     | 132 Column Mode (DECCOLM).                              | #Y      |\n   * | 6     | Origin Mode (DECOM).                                    | #Y      |\n   * | 7     | Auto-wrap Mode (DECAWM).                                | #Y      |\n   * | 8     | Auto-repeat Keys (DECARM). Always on.                   | #N      |\n   * | 9     | X10 xterm mouse protocol.                               | #Y      |\n   * | 12    | Start Blinking Cursor.                                  | #Y      |\n   * | 25    | Show Cursor (DECTCEM).                                  | #Y      |\n   * | 45    | Reverse wrap-around.                                    | #Y      |\n   * | 47    | Use Alternate Screen Buffer.                            | #Y      |\n   * | 66    | Application keypad (DECNKM).                            | #Y      |\n   * | 1000  | X11 xterm mouse protocol.                               | #Y      |\n   * | 1002  | Use Cell Motion Mouse Tracking.                         | #Y      |\n   * | 1003  | Use All Motion Mouse Tracking.                          | #Y      |\n   * | 1004  | Send FocusIn/FocusOut events                            | #Y      |\n   * | 1005  | Enable UTF-8 Mouse Mode.                                | #N      |\n   * | 1006  | Enable SGR Mouse Mode.                                  | #Y      |\n   * | 1015  | Enable urxvt Mouse Mode.                                | #N      |\n   * | 1047  | Use Alternate Screen Buffer.                            | #Y      |\n   * | 1048  | Save cursor as in DECSC.                                | #Y      |\n   * | 1049  | Save cursor and switch to alternate buffer clearing it. | #P[Does not clear the alternate buffer.] |\n   * | 2004  | Set bracketed paste mode.                               | #Y      |\n   *\n   *\n   * FIXME: implement DECSCNM, 1049 should clear altbuffer\n   */\n  public setModePrivate(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 1:\n          this._coreService.decPrivateModes.applicationCursorKeys = true;\n          break;\n        case 2:\n          this._charsetService.setgCharset(0, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(1, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(2, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(3, DEFAULT_CHARSET);\n          // set VT100 mode here\n          break;\n        case 3:\n          /**\n           * DECCOLM - 132 column mode.\n           * This is only active if 'SetWinLines' (24) is enabled\n           * through `options.windowsOptions`.\n           */\n          if (this._optionsService.rawOptions.windowOptions.setWinLines) {\n            this._bufferService.resize(132, this._bufferService.rows);\n            this._onRequestReset.fire();\n          }\n          break;\n        case 6:\n          this._coreService.decPrivateModes.origin = true;\n          this._setCursor(0, 0);\n          break;\n        case 7:\n          this._coreService.decPrivateModes.wraparound = true;\n          break;\n        case 12:\n          // this.cursorBlink = true;\n          break;\n        case 45:\n          this._coreService.decPrivateModes.reverseWraparound = true;\n          break;\n        case 66:\n          this._logService.debug('Serial port requested application keypad.');\n          this._coreService.decPrivateModes.applicationKeypad = true;\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 9: // X10 Mouse\n          // no release, no motion, no wheel, no modifiers.\n          this._coreMouseService.activeProtocol = 'X10';\n          break;\n        case 1000: // vt200 mouse\n          // no motion.\n          this._coreMouseService.activeProtocol = 'VT200';\n          break;\n        case 1002: // button event mouse\n          this._coreMouseService.activeProtocol = 'DRAG';\n          break;\n        case 1003: // any event mouse\n          // any event - sends motion events,\n          // even if there is no button held down.\n          this._coreMouseService.activeProtocol = 'ANY';\n          break;\n        case 1004: // send focusin/focusout events\n          // focusin: ^[[I\n          // focusout: ^[[O\n          this._coreService.decPrivateModes.sendFocus = true;\n          this._onRequestSendFocus.fire();\n          break;\n        case 1005: // utf8 ext mode mouse - removed in #2507\n          this._logService.debug('DECSET 1005 not supported (see #2507)');\n          break;\n        case 1006: // sgr ext mode mouse\n          this._coreMouseService.activeEncoding = 'SGR';\n          break;\n        case 1015: // urxvt ext mode mouse - removed in #2507\n          this._logService.debug('DECSET 1015 not supported (see #2507)');\n          break;\n        case 25: // show cursor\n          this._coreService.isCursorHidden = false;\n          break;\n        case 1048: // alt screen cursor\n          this.saveCursor();\n          break;\n        case 1049: // alt screen buffer cursor\n          this.saveCursor();\n        // FALL-THROUGH\n        case 47: // alt screen buffer\n        case 1047: // alt screen buffer\n          this._bufferService.buffers.activateAltBuffer(this._eraseAttrData());\n          this._coreService.isCursorInitialized = true;\n          this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1);\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 2004: // bracketed paste mode (https://cirw.in/blog/bracketed-paste)\n          this._coreService.decPrivateModes.bracketedPasteMode = true;\n          break;\n      }\n    }\n    return true;\n  }\n\n\n  /**\n   * CSI Pm l  Reset Mode (RM).\n   *     Ps = 2  -> Keyboard Action Mode (AM).\n   *     Ps = 4  -> Replace Mode (IRM).\n   *     Ps = 1 2  -> Send/receive (SRM).\n   *     Ps = 2 0  -> Normal Linefeed (LNM).\n   *\n   * @vt: #P[Only IRM is supported.]    CSI RM    \"Reset Mode\"  \"CSI Pm l\"  \"Set various terminal attributes.\"\n   * Supported param values by RM:\n   *\n   * | Param | Action                                 | Support |\n   * | ----- | -------------------------------------- | ------- |\n   * | 2     | Keyboard Action Mode (KAM). Always on. | #N      |\n   * | 4     | Replace Mode (IRM). (default)          | #Y      |\n   * | 12    | Send/receive (SRM). Always off.        | #N      |\n   * | 20    | Normal Linefeed (LNM). Always off.     | #N      |\n   *\n   *\n   * FIXME: why is LNM commented out?\n   */\n  public resetMode(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 4:\n          this._coreService.modes.insertMode = false;\n          break;\n        case 20:\n          // this._t.convertEol = false;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI ? Pm l\n   *   DEC Private Mode Reset (DECRST).\n   *     Ps = 1  -> Normal Cursor Keys (DECCKM).\n   *     Ps = 2  -> Designate VT52 mode (DECANM).\n   *     Ps = 3  -> 80 Column Mode (DECCOLM).\n   *     Ps = 4  -> Jump (Fast) Scroll (DECSCLM).\n   *     Ps = 5  -> Normal Video (DECSCNM).\n   *     Ps = 6  -> Normal Cursor Mode (DECOM).\n   *     Ps = 7  -> No Wraparound Mode (DECAWM).\n   *     Ps = 8  -> No Auto-repeat Keys (DECARM).\n   *     Ps = 9  -> Don't send Mouse X & Y on button press.\n   *     Ps = 1 0  -> Hide toolbar (rxvt).\n   *     Ps = 1 2  -> Stop Blinking Cursor (att610).\n   *     Ps = 1 8  -> Don't print form feed (DECPFF).\n   *     Ps = 1 9  -> Limit print to scrolling region (DECPEX).\n   *     Ps = 2 5  -> Hide Cursor (DECTCEM).\n   *     Ps = 3 0  -> Don't show scrollbar (rxvt).\n   *     Ps = 3 5  -> Disable font-shifting functions (rxvt).\n   *     Ps = 4 0  -> Disallow 80 -> 132 Mode.\n   *     Ps = 4 1  -> No more(1) fix (see curses resource).\n   *     Ps = 4 2  -> Disable Nation Replacement Character sets (DEC-\n   *     NRCM).\n   *     Ps = 4 4  -> Turn Off Margin Bell.\n   *     Ps = 4 5  -> No Reverse-wraparound Mode.\n   *     Ps = 4 6  -> Stop Logging.  (This is normally disabled by a\n   *     compile-time option).\n   *     Ps = 4 7  -> Use Normal Screen Buffer.\n   *     Ps = 6 6  -> Numeric keypad (DECNKM).\n   *     Ps = 6 7  -> Backarrow key sends delete (DECBKM).\n   *     Ps = 1 0 0 0  -> Don't send Mouse X & Y on button press and\n   *     release.  See the section Mouse Tracking.\n   *     Ps = 1 0 0 1  -> Don't use Hilite Mouse Tracking.\n   *     Ps = 1 0 0 2  -> Don't use Cell Motion Mouse Tracking.\n   *     Ps = 1 0 0 3  -> Don't use All Motion Mouse Tracking.\n   *     Ps = 1 0 0 4  -> Don't send FocusIn/FocusOut events.\n   *     Ps = 1 0 0 5  -> Disable Extended Mouse Mode.\n   *     Ps = 1 0 1 0  -> Don't scroll to bottom on tty output\n   *     (rxvt).\n   *     Ps = 1 0 1 1  -> Don't scroll to bottom on key press (rxvt).\n   *     Ps = 1 0 3 4  -> Don't interpret \"meta\" key.  (This disables\n   *     the eightBitInput resource).\n   *     Ps = 1 0 3 5  -> Disable special modifiers for Alt and Num-\n   *     Lock keys.  (This disables the numLock resource).\n   *     Ps = 1 0 3 6  -> Don't send ESC  when Meta modifies a key.\n   *     (This disables the metaSendsEscape resource).\n   *     Ps = 1 0 3 7  -> Send VT220 Remove from the editing-keypad\n   *     Delete key.\n   *     Ps = 1 0 3 9  -> Don't send ESC  when Alt modifies a key.\n   *     (This disables the altSendsEscape resource).\n   *     Ps = 1 0 4 0  -> Do not keep selection when not highlighted.\n   *     (This disables the keepSelection resource).\n   *     Ps = 1 0 4 1  -> Use the PRIMARY selection.  (This disables\n   *     the selectToClipboard resource).\n   *     Ps = 1 0 4 2  -> Disable Urgency window manager hint when\n   *     Control-G is received.  (This disables the bellIsUrgent\n   *     resource).\n   *     Ps = 1 0 4 3  -> Disable raising of the window when Control-\n   *     G is received.  (This disables the popOnBell resource).\n   *     Ps = 1 0 4 7  -> Use Normal Screen Buffer, clearing screen\n   *     first if in the Alternate Screen.  (This may be disabled by\n   *     the titeInhibit resource).\n   *     Ps = 1 0 4 8  -> Restore cursor as in DECRC.  (This may be\n   *     disabled by the titeInhibit resource).\n   *     Ps = 1 0 4 9  -> Use Normal Screen Buffer and restore cursor\n   *     as in DECRC.  (This may be disabled by the titeInhibit\n   *     resource).  This combines the effects of the 1 0 4 7  and 1 0\n   *     4 8  modes.  Use this with terminfo-based applications rather\n   *     than the 4 7  mode.\n   *     Ps = 1 0 5 0  -> Reset terminfo/termcap function-key mode.\n   *     Ps = 1 0 5 1  -> Reset Sun function-key mode.\n   *     Ps = 1 0 5 2  -> Reset HP function-key mode.\n   *     Ps = 1 0 5 3  -> Reset SCO function-key mode.\n   *     Ps = 1 0 6 0  -> Reset legacy keyboard emulation (X11R6).\n   *     Ps = 1 0 6 1  -> Reset keyboard emulation to Sun/PC style.\n   *     Ps = 2 0 0 4  -> Reset bracketed paste mode.\n   *\n   * @vt: #P[See below for supported modes.]    CSI DECRST  \"DEC Private Reset Mode\" \"CSI ? Pm l\"  \"Reset various terminal attributes.\"\n   * Supported param values by DECRST:\n   *\n   * | param | Action                                                  | Support |\n   * | ----- | ------------------------------------------------------- | ------- |\n   * | 1     | Normal Cursor Keys (DECCKM).                            | #Y      |\n   * | 2     | Designate VT52 mode (DECANM).                           | #N      |\n   * | 3     | 80 Column Mode (DECCOLM).                               | #B[Switches to old column width instead of 80.] |\n   * | 6     | Normal Cursor Mode (DECOM).                             | #Y      |\n   * | 7     | No Wraparound Mode (DECAWM).                            | #Y      |\n   * | 8     | No Auto-repeat Keys (DECARM).                           | #N      |\n   * | 9     | Don't send Mouse X & Y on button press.                 | #Y      |\n   * | 12    | Stop Blinking Cursor.                                   | #Y      |\n   * | 25    | Hide Cursor (DECTCEM).                                  | #Y      |\n   * | 45    | No reverse wrap-around.                                 | #Y      |\n   * | 47    | Use Normal Screen Buffer.                               | #Y      |\n   * | 66    | Numeric keypad (DECNKM).                                | #Y      |\n   * | 1000  | Don't send Mouse reports.                               | #Y      |\n   * | 1002  | Don't use Cell Motion Mouse Tracking.                   | #Y      |\n   * | 1003  | Don't use All Motion Mouse Tracking.                    | #Y      |\n   * | 1004  | Don't send FocusIn/FocusOut events.                     | #Y      |\n   * | 1005  | Disable UTF-8 Mouse Mode.                               | #N      |\n   * | 1006  | Disable SGR Mouse Mode.                                 | #Y      |\n   * | 1015  | Disable urxvt Mouse Mode.                               | #N      |\n   * | 1047  | Use Normal Screen Buffer (clearing screen if in alt).   | #Y      |\n   * | 1048  | Restore cursor as in DECRC.                             | #Y      |\n   * | 1049  | Use Normal Screen Buffer and restore cursor.            | #Y      |\n   * | 2004  | Reset bracketed paste mode.                             | #Y      |\n   *\n   *\n   * FIXME: DECCOLM is currently broken (already fixed in window options PR)\n   */\n  public resetModePrivate(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 1:\n          this._coreService.decPrivateModes.applicationCursorKeys = false;\n          break;\n        case 3:\n          /**\n           * DECCOLM - 80 column mode.\n           * This is only active if 'SetWinLines' (24) is enabled\n           * through `options.windowsOptions`.\n           */\n          if (this._optionsService.rawOptions.windowOptions.setWinLines) {\n            this._bufferService.resize(80, this._bufferService.rows);\n            this._onRequestReset.fire();\n          }\n          break;\n        case 6:\n          this._coreService.decPrivateModes.origin = false;\n          this._setCursor(0, 0);\n          break;\n        case 7:\n          this._coreService.decPrivateModes.wraparound = false;\n          break;\n        case 12:\n          // this.cursorBlink = false;\n          break;\n        case 45:\n          this._coreService.decPrivateModes.reverseWraparound = false;\n          break;\n        case 66:\n          this._logService.debug('Switching back to normal keypad.');\n          this._coreService.decPrivateModes.applicationKeypad = false;\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 9: // X10 Mouse\n        case 1000: // vt200 mouse\n        case 1002: // button event mouse\n        case 1003: // any event mouse\n          this._coreMouseService.activeProtocol = 'NONE';\n          break;\n        case 1004: // send focusin/focusout events\n          this._coreService.decPrivateModes.sendFocus = false;\n          break;\n        case 1005: // utf8 ext mode mouse - removed in #2507\n          this._logService.debug('DECRST 1005 not supported (see #2507)');\n          break;\n        case 1006: // sgr ext mode mouse\n          this._coreMouseService.activeEncoding = 'DEFAULT';\n          break;\n        case 1015: // urxvt ext mode mouse - removed in #2507\n          this._logService.debug('DECRST 1015 not supported (see #2507)');\n          break;\n        case 25: // hide cursor\n          this._coreService.isCursorHidden = true;\n          break;\n        case 1048: // alt screen cursor\n          this.restoreCursor();\n          break;\n        case 1049: // alt screen buffer cursor\n        // FALL-THROUGH\n        case 47: // normal screen buffer\n        case 1047: // normal screen buffer - clearing it first\n          // Ensure the selection manager has the correct buffer\n          this._bufferService.buffers.activateNormalBuffer();\n          if (params.params[i] === 1049) {\n            this.restoreCursor();\n          }\n          this._coreService.isCursorInitialized = true;\n          this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1);\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 2004: // bracketed paste mode (https://cirw.in/blog/bracketed-paste)\n          this._coreService.decPrivateModes.bracketedPasteMode = false;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Helper to write color information packed with color mode.\n   */\n  private _updateAttrColor(color: number, mode: number, c1: number, c2: number, c3: number): number {\n    if (mode === 2) {\n      color |= Attributes.CM_RGB;\n      color &= ~Attributes.RGB_MASK;\n      color |= AttributeData.fromColorRGB([c1, c2, c3]);\n    } else if (mode === 5) {\n      color &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n      color |= Attributes.CM_P256 | (c1 & 0xff);\n    }\n    return color;\n  }\n\n  /**\n   * Helper to extract and apply color params/subparams.\n   * Returns advance for params index.\n   */\n  private _extractColor(params: IParams, pos: number, attr: IAttributeData): number {\n    // normalize params\n    // meaning: [target, CM, ign, val, val, val]\n    // RGB    : [ 38/48,  2, ign,   r,   g,   b]\n    // P256   : [ 38/48,  5, ign,   v, ign, ign]\n    const accu = [0, 0, -1, 0, 0, 0];\n\n    // alignment placeholder for non color space sequences\n    let cSpace = 0;\n\n    // return advance we took in params\n    let advance = 0;\n\n    do {\n      accu[advance + cSpace] = params.params[pos + advance];\n      if (params.hasSubParams(pos + advance)) {\n        const subparams = params.getSubParams(pos + advance)!;\n        let i = 0;\n        do {\n          if (accu[1] === 5) {\n            cSpace = 1;\n          }\n          accu[advance + i + 1 + cSpace] = subparams[i];\n        } while (++i < subparams.length && i + advance + 1 + cSpace < accu.length);\n        break;\n      }\n      // exit early if can decide color mode with semicolons\n      if ((accu[1] === 5 && advance + cSpace >= 2)\n        || (accu[1] === 2 && advance + cSpace >= 5)) {\n        break;\n      }\n      // offset colorSpace slot for semicolon mode\n      if (accu[1]) {\n        cSpace = 1;\n      }\n    } while (++advance + pos < params.length && advance + cSpace < accu.length);\n\n    // set default values to 0\n    for (let i = 2; i < accu.length; ++i) {\n      if (accu[i] === -1) {\n        accu[i] = 0;\n      }\n    }\n\n    // apply colors\n    switch (accu[0]) {\n      case 38:\n        attr.fg = this._updateAttrColor(attr.fg, accu[1], accu[3], accu[4], accu[5]);\n        break;\n      case 48:\n        attr.bg = this._updateAttrColor(attr.bg, accu[1], accu[3], accu[4], accu[5]);\n        break;\n      case 58:\n        attr.extended = attr.extended.clone();\n        attr.extended.underlineColor = this._updateAttrColor(attr.extended.underlineColor, accu[1], accu[3], accu[4], accu[5]);\n    }\n\n    return advance;\n  }\n\n  /**\n   * SGR 4 subparams:\n   *    4:0   -   equal to SGR 24 (turn off all underline)\n   *    4:1   -   equal to SGR 4 (single underline)\n   *    4:2   -   equal to SGR 21 (double underline)\n   *    4:3   -   curly underline\n   *    4:4   -   dotted underline\n   *    4:5   -   dashed underline\n   */\n  private _processUnderline(style: number, attr: IAttributeData): void {\n    // treat extended attrs as immutable, thus always clone from old one\n    // this is needed since the buffer only holds references to it\n    attr.extended = attr.extended.clone();\n\n    // default to 1 == single underline\n    if (!~style || style > 5) {\n      style = 1;\n    }\n    attr.extended.underlineStyle = style;\n    attr.fg |= FgFlags.UNDERLINE;\n\n    // 0 deactivates underline\n    if (style === 0) {\n      attr.fg &= ~FgFlags.UNDERLINE;\n    }\n\n    // update HAS_EXTENDED in BG\n    attr.updateExtended();\n  }\n\n  /**\n   * CSI Pm m  Character Attributes (SGR).\n   *\n   * @vt: #P[See below for supported attributes.]    CSI SGR   \"Select Graphic Rendition\"  \"CSI Pm m\"  \"Set/Reset various text attributes.\"\n   * SGR selects one or more character attributes at the same time. Multiple params (up to 32)\n   * are applied in order from left to right. The changed attributes are applied to all new\n   * characters received. If you move characters in the viewport by scrolling or any other means,\n   * then the attributes move with the characters.\n   *\n   * Supported param values by SGR:\n   *\n   * | Param     | Meaning                                                  | Support |\n   * | --------- | -------------------------------------------------------- | ------- |\n   * | 0         | Normal (default). Resets any other preceding SGR.        | #Y      |\n   * | 1         | Bold. (also see `options.drawBoldTextInBrightColors`)    | #Y      |\n   * | 2         | Faint, decreased intensity.                              | #Y      |\n   * | 3         | Italic.                                                  | #Y      |\n   * | 4         | Underlined (see below for style support).                | #Y      |\n   * | 5         | Slowly blinking.                                         | #N      |\n   * | 6         | Rapidly blinking.                                        | #N      |\n   * | 7         | Inverse. Flips foreground and background color.          | #Y      |\n   * | 8         | Invisible (hidden).                                      | #Y      |\n   * | 9         | Crossed-out characters (strikethrough).                  | #Y      |\n   * | 21        | Doubly underlined.                                       | #P[Currently outputs a single underline.] |\n   * | 22        | Normal (neither bold nor faint).                         | #Y      |\n   * | 23        | No italic.                                               | #Y      |\n   * | 24        | Not underlined.                                          | #Y      |\n   * | 25        | Steady (not blinking).                                   | #Y      |\n   * | 27        | Positive (not inverse).                                  | #Y      |\n   * | 28        | Visible (not hidden).                                    | #Y      |\n   * | 29        | Not Crossed-out (strikethrough).                         | #Y      |\n   * | 30        | Foreground color: Black.                                 | #Y      |\n   * | 31        | Foreground color: Red.                                   | #Y      |\n   * | 32        | Foreground color: Green.                                 | #Y      |\n   * | 33        | Foreground color: Yellow.                                | #Y      |\n   * | 34        | Foreground color: Blue.                                  | #Y      |\n   * | 35        | Foreground color: Magenta.                               | #Y      |\n   * | 36        | Foreground color: Cyan.                                  | #Y      |\n   * | 37        | Foreground color: White.                                 | #Y      |\n   * | 38        | Foreground color: Extended color.                        | #P[Support for RGB and indexed colors, see below.] |\n   * | 39        | Foreground color: Default (original).                    | #Y      |\n   * | 40        | Background color: Black.                                 | #Y      |\n   * | 41        | Background color: Red.                                   | #Y      |\n   * | 42        | Background color: Green.                                 | #Y      |\n   * | 43        | Background color: Yellow.                                | #Y      |\n   * | 44        | Background color: Blue.                                  | #Y      |\n   * | 45        | Background color: Magenta.                               | #Y      |\n   * | 46        | Background color: Cyan.                                  | #Y      |\n   * | 47        | Background color: White.                                 | #Y      |\n   * | 48        | Background color: Extended color.                        | #P[Support for RGB and indexed colors, see below.] |\n   * | 49        | Background color: Default (original).                    | #Y      |\n   * | 90 - 97   | Bright foreground color (analogous to 30 - 37).          | #Y      |\n   * | 100 - 107 | Bright background color (analogous to 40 - 47).          | #Y      |\n   *\n   * Underline supports subparams to denote the style in the form `4 : x`:\n   *\n   * | x      | Meaning                                                       | Support |\n   * | ------ | ------------------------------------------------------------- | ------- |\n   * | 0      | No underline. Same as `SGR 24 m`.                             | #Y      |\n   * | 1      | Single underline. Same as `SGR 4 m`.                          | #Y      |\n   * | 2      | Double underline.                                             | #P[Currently outputs a single underline.] |\n   * | 3      | Curly underline.                                              | #P[Currently outputs a single underline.] |\n   * | 4      | Dotted underline.                                             | #P[Currently outputs a single underline.] |\n   * | 5      | Dashed underline.                                             | #P[Currently outputs a single underline.] |\n   * | other  | Single underline. Same as `SGR 4 m`.                          | #Y      |\n   *\n   * Extended colors are supported for foreground (Ps=38) and background (Ps=48) as follows:\n   *\n   * | Ps + 1 | Meaning                                                       | Support |\n   * | ------ | ------------------------------------------------------------- | ------- |\n   * | 0      | Implementation defined.                                       | #N      |\n   * | 1      | Transparent.                                                  | #N      |\n   * | 2      | RGB color as `Ps ; 2 ; R ; G ; B` or `Ps : 2 : : R : G : B`.  | #Y      |\n   * | 3      | CMY color.                                                    | #N      |\n   * | 4      | CMYK color.                                                   | #N      |\n   * | 5      | Indexed (256 colors) as `Ps ; 5 ; INDEX` or `Ps : 5 : INDEX`. | #Y      |\n   *\n   *\n   * FIXME: blinking is implemented in attrs, but not working in renderers?\n   * FIXME: remove dead branch for p=100\n   */\n  public charAttributes(params: IParams): boolean {\n    // Optimize a single SGR0.\n    if (params.length === 1 && params.params[0] === 0) {\n      this._curAttrData.fg = DEFAULT_ATTR_DATA.fg;\n      this._curAttrData.bg = DEFAULT_ATTR_DATA.bg;\n      return true;\n    }\n\n    const l = params.length;\n    let p;\n    const attr = this._curAttrData;\n\n    for (let i = 0; i < l; i++) {\n      p = params.params[i];\n      if (p >= 30 && p <= 37) {\n        // fg color 8\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.fg |= Attributes.CM_P16 | (p - 30);\n      } else if (p >= 40 && p <= 47) {\n        // bg color 8\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.bg |= Attributes.CM_P16 | (p - 40);\n      } else if (p >= 90 && p <= 97) {\n        // fg color 16\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.fg |= Attributes.CM_P16 | (p - 90) | 8;\n      } else if (p >= 100 && p <= 107) {\n        // bg color 16\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.bg |= Attributes.CM_P16 | (p - 100) | 8;\n      } else if (p === 0) {\n        // default\n        attr.fg = DEFAULT_ATTR_DATA.fg;\n        attr.bg = DEFAULT_ATTR_DATA.bg;\n      } else if (p === 1) {\n        // bold text\n        attr.fg |= FgFlags.BOLD;\n      } else if (p === 3) {\n        // italic text\n        attr.bg |= BgFlags.ITALIC;\n      } else if (p === 4) {\n        // underlined text\n        attr.fg |= FgFlags.UNDERLINE;\n        this._processUnderline(params.hasSubParams(i) ? params.getSubParams(i)![0] : UnderlineStyle.SINGLE, attr);\n      } else if (p === 5) {\n        // blink\n        attr.fg |= FgFlags.BLINK;\n      } else if (p === 7) {\n        // inverse and positive\n        // test with: echo -e '\\e[31m\\e[42mhello\\e[7mworld\\e[27mhi\\e[m'\n        attr.fg |= FgFlags.INVERSE;\n      } else if (p === 8) {\n        // invisible\n        attr.fg |= FgFlags.INVISIBLE;\n      } else if (p === 9) {\n        // strikethrough\n        attr.fg |= FgFlags.STRIKETHROUGH;\n      } else if (p === 2) {\n        // dimmed text\n        attr.bg |= BgFlags.DIM;\n      } else if (p === 21) {\n        // double underline\n        this._processUnderline(UnderlineStyle.DOUBLE, attr);\n      } else if (p === 22) {\n        // not bold nor faint\n        attr.fg &= ~FgFlags.BOLD;\n        attr.bg &= ~BgFlags.DIM;\n      } else if (p === 23) {\n        // not italic\n        attr.bg &= ~BgFlags.ITALIC;\n      } else if (p === 24) {\n        // not underlined\n        attr.fg &= ~FgFlags.UNDERLINE;\n      } else if (p === 25) {\n        // not blink\n        attr.fg &= ~FgFlags.BLINK;\n      } else if (p === 27) {\n        // not inverse\n        attr.fg &= ~FgFlags.INVERSE;\n      } else if (p === 28) {\n        // not invisible\n        attr.fg &= ~FgFlags.INVISIBLE;\n      } else if (p === 29) {\n        // not strikethrough\n        attr.fg &= ~FgFlags.STRIKETHROUGH;\n      } else if (p === 39) {\n        // reset fg\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.fg |= DEFAULT_ATTR_DATA.fg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else if (p === 49) {\n        // reset bg\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.bg |= DEFAULT_ATTR_DATA.bg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else if (p === 38 || p === 48 || p === 58) {\n        // fg color 256 and RGB\n        i += this._extractColor(params, i, attr);\n      } else if (p === 59) {\n        attr.extended = attr.extended.clone();\n        attr.extended.underlineColor = -1;\n        attr.updateExtended();\n      } else if (p === 100) { // FIXME: dead branch, p=100 already handled above!\n        // reset fg/bg\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.fg |= DEFAULT_ATTR_DATA.fg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.bg |= DEFAULT_ATTR_DATA.bg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else {\n        this._logService.debug('Unknown SGR attribute: %d.', p);\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps n  Device Status Report (DSR).\n   *     Ps = 5  -> Status Report.  Result (``OK'') is\n   *   CSI 0 n\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column].\n   *   Result is\n   *   CSI r ; c R\n   * CSI ? Ps n\n   *   Device Status Report (DSR, DEC-specific).\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column] as CSI\n   *     ? r ; c R (assumes page is zero).\n   *     Ps = 1 5  -> Report Printer status as CSI ? 1 0  n  (ready).\n   *     or CSI ? 1 1  n  (not ready).\n   *     Ps = 2 5  -> Report UDK status as CSI ? 2 0  n  (unlocked)\n   *     or CSI ? 2 1  n  (locked).\n   *     Ps = 2 6  -> Report Keyboard status as\n   *   CSI ? 2 7  ;  1  ;  0  ;  0  n  (North American).\n   *   The last two parameters apply to VT400 & up, and denote key-\n   *   board ready and LK01 respectively.\n   *     Ps = 5 3  -> Report Locator status as\n   *   CSI ? 5 3  n  Locator available, if compiled-in, or\n   *   CSI ? 5 0  n  No Locator, if not.\n   *\n   * @vt: #Y CSI DSR   \"Device Status Report\"  \"CSI Ps n\"  \"Request cursor position (CPR) with `Ps` = 6.\"\n   */\n  public deviceStatus(params: IParams): boolean {\n    switch (params.params[0]) {\n      case 5:\n        // status report\n        this._coreService.triggerDataEvent(`${C0.ESC}[0n`);\n        break;\n      case 6:\n        // cursor position\n        const y = this._activeBuffer.y + 1;\n        const x = this._activeBuffer.x + 1;\n        this._coreService.triggerDataEvent(`${C0.ESC}[${y};${x}R`);\n        break;\n    }\n    return true;\n  }\n\n  // @vt: #P[Only CPR is supported.]  CSI DECDSR  \"DEC Device Status Report\"  \"CSI ? Ps n\"  \"Only CPR is supported (same as DSR).\"\n  public deviceStatusPrivate(params: IParams): boolean {\n    // modern xterm doesnt seem to\n    // respond to any of these except ?6, 6, and 5\n    switch (params.params[0]) {\n      case 6:\n        // cursor position\n        const y = this._activeBuffer.y + 1;\n        const x = this._activeBuffer.x + 1;\n        this._coreService.triggerDataEvent(`${C0.ESC}[?${y};${x}R`);\n        break;\n      case 15:\n        // no printer\n        // this.handler(C0.ESC + '[?11n');\n        break;\n      case 25:\n        // dont support user defined keys\n        // this.handler(C0.ESC + '[?21n');\n        break;\n      case 26:\n        // north american keyboard\n        // this.handler(C0.ESC + '[?27;1;0;0n');\n        break;\n      case 53:\n        // no dec locator/mouse\n        // this.handler(C0.ESC + '[?50n');\n        break;\n    }\n    return true;\n  }\n\n  /**\n   * CSI ! p   Soft terminal reset (DECSTR).\n   * http://vt100.net/docs/vt220-rm/table4-10.html\n   *\n   * @vt: #Y CSI DECSTR  \"Soft Terminal Reset\"   \"CSI ! p\"   \"Reset several terminal attributes to initial state.\"\n   * There are two terminal reset sequences - RIS and DECSTR. While RIS performs almost a full terminal bootstrap,\n   * DECSTR only resets certain attributes. For most needs DECSTR should be sufficient.\n   *\n   * The following terminal attributes are reset to default values:\n   * - IRM is reset (dafault = false)\n   * - scroll margins are reset (default = viewport size)\n   * - erase attributes are reset to default\n   * - charsets are reset\n   * - DECSC data is reset to initial values\n   * - DECOM is reset to absolute mode\n   *\n   *\n   * FIXME: there are several more attributes missing (see VT520 manual)\n   */\n  public softReset(params: IParams): boolean {\n    this._coreService.isCursorHidden = false;\n    this._onRequestSyncScrollBar.fire();\n    this._activeBuffer.scrollTop = 0;\n    this._activeBuffer.scrollBottom = this._bufferService.rows - 1;\n    this._curAttrData = DEFAULT_ATTR_DATA.clone();\n    this._coreService.reset();\n    this._charsetService.reset();\n\n    // reset DECSC data\n    this._activeBuffer.savedX = 0;\n    this._activeBuffer.savedY = this._activeBuffer.ybase;\n    this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg;\n    this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg;\n    this._activeBuffer.savedCharset = this._charsetService.charset;\n\n    // reset DECOM\n    this._coreService.decPrivateModes.origin = false;\n    return true;\n  }\n\n  /**\n   * CSI Ps SP q  Set cursor style (DECSCUSR, VT520).\n   *   Ps = 0  -> blinking block.\n   *   Ps = 1  -> blinking block (default).\n   *   Ps = 2  -> steady block.\n   *   Ps = 3  -> blinking underline.\n   *   Ps = 4  -> steady underline.\n   *   Ps = 5  -> blinking bar (xterm).\n   *   Ps = 6  -> steady bar (xterm).\n   *\n   * @vt: #Y CSI DECSCUSR  \"Set Cursor Style\"  \"CSI Ps SP q\"   \"Set cursor style.\"\n   * Supported cursor styles:\n   *  - empty, 0 or 1: steady block\n   *  - 2: blink block\n   *  - 3: steady underline\n   *  - 4: blink underline\n   *  - 5: steady bar\n   *  - 6: blink bar\n   */\n  public setCursorStyle(params: IParams): boolean {\n    const param = params.params[0] || 1;\n    switch (param) {\n      case 1:\n      case 2:\n        this._optionsService.options.cursorStyle = 'block';\n        break;\n      case 3:\n      case 4:\n        this._optionsService.options.cursorStyle = 'underline';\n        break;\n      case 5:\n      case 6:\n        this._optionsService.options.cursorStyle = 'bar';\n        break;\n    }\n    const isBlinking = param % 2 === 1;\n    this._optionsService.options.cursorBlink = isBlinking;\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps r\n   *   Set Scrolling Region [top;bottom] (default = full size of win-\n   *   dow) (DECSTBM).\n   *\n   * @vt: #Y CSI DECSTBM \"Set Top and Bottom Margin\" \"CSI Ps ; Ps r\" \"Set top and bottom margins of the viewport [top;bottom] (default = viewport size).\"\n   */\n  public setScrollRegion(params: IParams): boolean {\n    const top = params.params[0] || 1;\n    let bottom: number;\n\n    if (params.length < 2 || (bottom = params.params[1]) > this._bufferService.rows || bottom === 0) {\n      bottom = this._bufferService.rows;\n    }\n\n    if (bottom > top) {\n      this._activeBuffer.scrollTop = top - 1;\n      this._activeBuffer.scrollBottom = bottom - 1;\n      this._setCursor(0, 0);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps ; Ps t - Various window manipulations and reports (xterm)\n   *\n   * Note: Only those listed below are supported. All others are left to integrators and\n   * need special treatment based on the embedding environment.\n   *\n   *    Ps = 1 4                                                          supported\n   *      Report xterm text area size in pixels.\n   *      Result is CSI 4 ; height ; width t\n   *    Ps = 14 ; 2                                                       not implemented\n   *    Ps = 16                                                           supported\n   *      Report xterm character cell size in pixels.\n   *      Result is CSI 6 ; height ; width t\n   *    Ps = 18                                                           supported\n   *      Report the size of the text area in characters.\n   *      Result is CSI 8 ; height ; width t\n   *    Ps = 20                                                           supported\n   *      Report xterm window's icon label.\n   *      Result is OSC L label ST\n   *    Ps = 21                                                           supported\n   *      Report xterm window's title.\n   *      Result is OSC l label ST\n   *    Ps = 22 ; 0  -> Save xterm icon and window title on stack.        supported\n   *    Ps = 22 ; 1  -> Save xterm icon title on stack.                   supported\n   *    Ps = 22 ; 2  -> Save xterm window title on stack.                 supported\n   *    Ps = 23 ; 0  -> Restore xterm icon and window title from stack.   supported\n   *    Ps = 23 ; 1  -> Restore xterm icon title from stack.              supported\n   *    Ps = 23 ; 2  -> Restore xterm window title from stack.            supported\n   *    Ps >= 24                                                          not implemented\n   */\n  public windowOptions(params: IParams): boolean {\n    if (!paramToWindowOption(params.params[0], this._optionsService.rawOptions.windowOptions)) {\n      return true;\n    }\n    const second = (params.length > 1) ? params.params[1] : 0;\n    switch (params.params[0]) {\n      case 14:  // GetWinSizePixels, returns CSI 4 ; height ; width t\n        if (second !== 2) {\n          this._onRequestWindowsOptionsReport.fire(WindowsOptionsReportType.GET_WIN_SIZE_PIXELS);\n        }\n        break;\n      case 16:  // GetCellSizePixels, returns CSI 6 ; height ; width t\n        this._onRequestWindowsOptionsReport.fire(WindowsOptionsReportType.GET_CELL_SIZE_PIXELS);\n        break;\n      case 18:  // GetWinSizeChars, returns CSI 8 ; height ; width t\n        if (this._bufferService) {\n          this._coreService.triggerDataEvent(`${C0.ESC}[8;${this._bufferService.rows};${this._bufferService.cols}t`);\n        }\n        break;\n      case 22:  // PushTitle\n        if (second === 0 || second === 2) {\n          this._windowTitleStack.push(this._windowTitle);\n          if (this._windowTitleStack.length > STACK_LIMIT) {\n            this._windowTitleStack.shift();\n          }\n        }\n        if (second === 0 || second === 1) {\n          this._iconNameStack.push(this._iconName);\n          if (this._iconNameStack.length > STACK_LIMIT) {\n            this._iconNameStack.shift();\n          }\n        }\n        break;\n      case 23:  // PopTitle\n        if (second === 0 || second === 2) {\n          if (this._windowTitleStack.length) {\n            this.setTitle(this._windowTitleStack.pop()!);\n          }\n        }\n        if (second === 0 || second === 1) {\n          if (this._iconNameStack.length) {\n            this.setIconName(this._iconNameStack.pop()!);\n          }\n        }\n        break;\n    }\n    return true;\n  }\n\n\n  /**\n   * CSI s\n   * ESC 7\n   *   Save cursor (ANSI.SYS).\n   *\n   * @vt: #P[TODO...]  CSI SCOSC   \"Save Cursor\"   \"CSI s\"   \"Save cursor position, charmap and text attributes.\"\n   * @vt: #Y ESC  SC   \"Save Cursor\"   \"ESC 7\"   \"Save cursor position, charmap and text attributes.\"\n   */\n  public saveCursor(params?: IParams): boolean {\n    this._activeBuffer.savedX = this._activeBuffer.x;\n    this._activeBuffer.savedY = this._activeBuffer.ybase + this._activeBuffer.y;\n    this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg;\n    this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg;\n    this._activeBuffer.savedCharset = this._charsetService.charset;\n    return true;\n  }\n\n\n  /**\n   * CSI u\n   * ESC 8\n   *   Restore cursor (ANSI.SYS).\n   *\n   * @vt: #P[TODO...]  CSI SCORC \"Restore Cursor\"  \"CSI u\"   \"Restore cursor position, charmap and text attributes.\"\n   * @vt: #Y ESC  RC \"Restore Cursor\"  \"ESC 8\"   \"Restore cursor position, charmap and text attributes.\"\n   */\n  public restoreCursor(params?: IParams): boolean {\n    this._activeBuffer.x = this._activeBuffer.savedX || 0;\n    this._activeBuffer.y = Math.max(this._activeBuffer.savedY - this._activeBuffer.ybase, 0);\n    this._curAttrData.fg = this._activeBuffer.savedCurAttrData.fg;\n    this._curAttrData.bg = this._activeBuffer.savedCurAttrData.bg;\n    this._charsetService.charset = (this as any)._savedCharset;\n    if (this._activeBuffer.savedCharset) {\n      this._charsetService.charset = this._activeBuffer.savedCharset;\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n\n  /**\n   * OSC 2; <data> ST (set window title)\n   *   Proxy to set window title.\n   *\n   * @vt: #P[Icon name is not exposed.]   OSC    0   \"Set Windows Title and Icon Name\"  \"OSC 0 ; Pt BEL\"  \"Set window title and icon name.\"\n   * Icon name is not supported. For Window Title see below.\n   *\n   * @vt: #Y     OSC    2   \"Set Windows Title\"  \"OSC 2 ; Pt BEL\"  \"Set window title.\"\n   * xterm.js does not manipulate the title directly, instead exposes changes via the event `Terminal.onTitleChange`.\n   */\n  public setTitle(data: string): boolean {\n    this._windowTitle = data;\n    this._onTitleChange.fire(data);\n    return true;\n  }\n\n  /**\n   * OSC 1; <data> ST\n   * Note: Icon name is not exposed.\n   */\n  public setIconName(data: string): boolean {\n    this._iconName = data;\n    return true;\n  }\n\n  /**\n   * OSC 4; <num> ; <text> ST (set ANSI color <num> to <text>)\n   *\n   * @vt: #Y    OSC    4    \"Set ANSI color\"   \"OSC 4 ; c ; spec BEL\" \"Change color number `c` to the color specified by `spec`.\"\n   * `c` is the color index between 0 and 255. The color format of `spec` is derived from `XParseColor` (see OSC 10 for supported formats).\n   * There may be multipe `c ; spec` pairs present in the same instruction.\n   * If `spec` contains `?` the terminal returns a sequence with the currently set color.\n   */\n  public setOrReportIndexedColor(data: string): boolean {\n    const event: IColorEvent = [];\n    const slots = data.split(';');\n    while (slots.length > 1) {\n      const idx = slots.shift() as string;\n      const spec = slots.shift() as string;\n      if (/^\\d+$/.exec(idx)) {\n        const index = parseInt(idx);\n        if (0 <= index && index < 256) {\n          if (spec === '?') {\n            event.push({ type: ColorRequestType.REPORT, index });\n          } else {\n            const color = parseColor(spec);\n            if (color) {\n              event.push({ type: ColorRequestType.SET, index, color });\n            }\n          }\n        }\n      }\n    }\n    if (event.length) {\n      this._onColor.fire(event);\n    }\n    return true;\n  }\n\n  // special colors - OSC 10 | 11 | 12\n  private _specialColors = [ColorIndex.FOREGROUND, ColorIndex.BACKGROUND, ColorIndex.CURSOR];\n\n  /**\n   * Apply colors requests for special colors in OSC 10 | 11 | 12.\n   * Since these commands are stacking from multiple parameters,\n   * we handle them in a loop with an entry offset to `_specialColors`.\n   */\n  private _setOrReportSpecialColor(data: string, offset: number): boolean {\n    const slots = data.split(';');\n    for (let i = 0; i < slots.length; ++i, ++offset) {\n      if (offset >= this._specialColors.length) break;\n      if (slots[i] === '?') {\n        this._onColor.fire([{ type: ColorRequestType.REPORT, index: this._specialColors[offset] }]);\n      } else {\n        const color = parseColor(slots[i]);\n        if (color) {\n          this._onColor.fire([{ type: ColorRequestType.SET, index: this._specialColors[offset], color }]);\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * OSC 10 ; <xcolor name>|<?> ST - set or query default foreground color\n   *\n   * @vt: #Y  OSC   10    \"Set or query default foreground color\"   \"OSC 10 ; Pt BEL\"  \"Set or query default foreground color.\"\n   * To set the color, the following color specification formats are supported:\n   * - `rgb:<red>/<green>/<blue>` for  `<red>, <green>, <blue>` in `h | hh | hhh | hhhh`, where\n   *   `h` is a single hexadecimal digit (case insignificant). The different widths scale\n   *   from 4 bit (`h`) to 16 bit (`hhhh`) and get converted to 8 bit (`hh`).\n   * - `#RGB` - 4 bits per channel, expanded to `#R0G0B0`\n   * - `#RRGGBB` - 8 bits per channel\n   * - `#RRRGGGBBB` - 12 bits per channel, truncated to `#RRGGBB`\n   * - `#RRRRGGGGBBBB` - 16 bits per channel, truncated to `#RRGGBB`\n   *\n   * **Note:** X11 named colors are currently unsupported.\n   *\n   * If `Pt` contains `?` instead of a color specification, the terminal\n   * returns a sequence with the current default foreground color\n   * (use that sequence to restore the color after changes).\n   *\n   * **Note:** Other than xterm, xterm.js does not support OSC 12 - 19.\n   * Therefore stacking multiple `Pt` separated by `;` only works for the first two entries.\n   */\n  public setOrReportFgColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 0);\n  }\n\n  /**\n   * OSC 11 ; <xcolor name>|<?> ST - set or query default background color\n   *\n   * @vt: #Y  OSC   11    \"Set or query default background color\"   \"OSC 11 ; Pt BEL\"  \"Same as OSC 10, but for default background.\"\n   */\n  public setOrReportBgColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 1);\n  }\n\n  /**\n   * OSC 12 ; <xcolor name>|<?> ST - set or query default cursor color\n   *\n   * @vt: #Y  OSC   12    \"Set or query default cursor color\"   \"OSC 12 ; Pt BEL\"  \"Same as OSC 10, but for default cursor color.\"\n   */\n  public setOrReportCursorColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 2);\n  }\n\n  /**\n   * OSC 104 ; <num> ST - restore ANSI color <num>\n   *\n   * @vt: #Y  OSC   104    \"Reset ANSI color\"   \"OSC 104 ; c BEL\" \"Reset color number `c` to themed color.\"\n   * `c` is the color index between 0 and 255. This function restores the default color for `c` as\n   * specified by the loaded theme. Any number of `c` parameters may be given.\n   * If no parameters are given, the entire indexed color table will be reset.\n   */\n  public restoreIndexedColor(data: string): boolean {\n    if (!data) {\n      this._onColor.fire([{ type: ColorRequestType.RESTORE }]);\n      return true;\n    }\n    const event: IColorEvent = [];\n    const slots = data.split(';');\n    for (let i = 0; i < slots.length; ++i) {\n      if (/^\\d+$/.exec(slots[i])) {\n        const index = parseInt(slots[i]);\n        if (0 <= index && index < 256) {\n          event.push({ type: ColorRequestType.RESTORE, index });\n        }\n      }\n    }\n    if (event.length) {\n      this._onColor.fire(event);\n    }\n    return true;\n  }\n\n  /**\n   * OSC 110 ST - restore default foreground color\n   *\n   * @vt: #Y  OSC   110    \"Restore default foreground color\"   \"OSC 110 BEL\"  \"Restore default foreground to themed color.\"\n   */\n  public restoreFgColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: ColorIndex.FOREGROUND }]);\n    return true;\n  }\n\n  /**\n   * OSC 111 ST - restore default background color\n   *\n   * @vt: #Y  OSC   111    \"Restore default background color\"   \"OSC 111 BEL\"  \"Restore default background to themed color.\"\n   */\n  public restoreBgColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: ColorIndex.BACKGROUND }]);\n    return true;\n  }\n\n  /**\n   * OSC 112 ST - restore default cursor color\n   *\n   * @vt: #Y  OSC   112    \"Restore default cursor color\"   \"OSC 112 BEL\"  \"Restore default cursor to themed color.\"\n   */\n  public restoreCursorColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: ColorIndex.CURSOR }]);\n    return true;\n  }\n\n  /**\n   * ESC E\n   * C1.NEL\n   *   DEC mnemonic: NEL (https://vt100.net/docs/vt510-rm/NEL)\n   *   Moves cursor to first position on next line.\n   *\n   * @vt: #Y   C1    NEL   \"Next Line\"   \"\\x85\"    \"Move the cursor to the beginning of the next row.\"\n   * @vt: #Y   ESC   NEL   \"Next Line\"   \"ESC E\"   \"Move the cursor to the beginning of the next row.\"\n   */\n  public nextLine(): boolean {\n    this._activeBuffer.x = 0;\n    this.index();\n    return true;\n  }\n\n  /**\n   * ESC =\n   *   DEC mnemonic: DECKPAM (https://vt100.net/docs/vt510-rm/DECKPAM.html)\n   *   Enables the numeric keypad to send application sequences to the host.\n   */\n  public keypadApplicationMode(): boolean {\n    this._logService.debug('Serial port requested application keypad.');\n    this._coreService.decPrivateModes.applicationKeypad = true;\n    this._onRequestSyncScrollBar.fire();\n    return true;\n  }\n\n  /**\n   * ESC >\n   *   DEC mnemonic: DECKPNM (https://vt100.net/docs/vt510-rm/DECKPNM.html)\n   *   Enables the keypad to send numeric characters to the host.\n   */\n  public keypadNumericMode(): boolean {\n    this._logService.debug('Switching back to normal keypad.');\n    this._coreService.decPrivateModes.applicationKeypad = false;\n    this._onRequestSyncScrollBar.fire();\n    return true;\n  }\n\n  /**\n   * ESC % @\n   * ESC % G\n   *   Select default character set. UTF-8 is not supported (string are unicode anyways)\n   *   therefore ESC % G does the same.\n   */\n  public selectDefaultCharset(): boolean {\n    this._charsetService.setgLevel(0);\n    this._charsetService.setgCharset(0, DEFAULT_CHARSET); // US (default)\n    return true;\n  }\n\n  /**\n   * ESC ( C\n   *   Designate G0 Character Set, VT100, ISO 2022.\n   * ESC ) C\n   *   Designate G1 Character Set (ISO 2022, VT100).\n   * ESC * C\n   *   Designate G2 Character Set (ISO 2022, VT220).\n   * ESC + C\n   *   Designate G3 Character Set (ISO 2022, VT220).\n   * ESC - C\n   *   Designate G1 Character Set (VT300).\n   * ESC . C\n   *   Designate G2 Character Set (VT300).\n   * ESC / C\n   *   Designate G3 Character Set (VT300). C = A  -> ISO Latin-1 Supplemental. - Supported?\n   */\n  public selectCharset(collectAndFlag: string): boolean {\n    if (collectAndFlag.length !== 2) {\n      this.selectDefaultCharset();\n      return true;\n    }\n    if (collectAndFlag[0] === '/') {\n      return true;  // TODO: Is this supported?\n    }\n    this._charsetService.setgCharset(GLEVEL[collectAndFlag[0]], CHARSETS[collectAndFlag[1]] || DEFAULT_CHARSET);\n    return true;\n  }\n\n  /**\n   * ESC D\n   * C1.IND\n   *   DEC mnemonic: IND (https://vt100.net/docs/vt510-rm/IND.html)\n   *   Moves the cursor down one line in the same column.\n   *\n   * @vt: #Y   C1    IND   \"Index\"   \"\\x84\"    \"Move the cursor one line down scrolling if needed.\"\n   * @vt: #Y   ESC   IND   \"Index\"   \"ESC D\"   \"Move the cursor one line down scrolling if needed.\"\n   */\n  public index(): boolean {\n    this._restrictCursor();\n    this._activeBuffer.y++;\n    if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n      this._activeBuffer.y--;\n      this._bufferService.scroll(this._eraseAttrData());\n    } else if (this._activeBuffer.y >= this._bufferService.rows) {\n      this._activeBuffer.y = this._bufferService.rows - 1;\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n  /**\n   * ESC H\n   * C1.HTS\n   *   DEC mnemonic: HTS (https://vt100.net/docs/vt510-rm/HTS.html)\n   *   Sets a horizontal tab stop at the column position indicated by\n   *   the value of the active column when the terminal receives an HTS.\n   *\n   * @vt: #Y   C1    HTS   \"Horizontal Tabulation Set\" \"\\x88\"    \"Places a tab stop at the current cursor position.\"\n   * @vt: #Y   ESC   HTS   \"Horizontal Tabulation Set\" \"ESC H\"   \"Places a tab stop at the current cursor position.\"\n   */\n  public tabSet(): boolean {\n    this._activeBuffer.tabs[this._activeBuffer.x] = true;\n    return true;\n  }\n\n  /**\n   * ESC M\n   * C1.RI\n   *   DEC mnemonic: HTS\n   *   Moves the cursor up one line in the same column. If the cursor is at the top margin,\n   *   the page scrolls down.\n   *\n   * @vt: #Y ESC  IR \"Reverse Index\" \"ESC M\"  \"Move the cursor one line up scrolling if needed.\"\n   */\n  public reverseIndex(): boolean {\n    this._restrictCursor();\n    if (this._activeBuffer.y === this._activeBuffer.scrollTop) {\n      // possibly move the code below to term.reverseScroll();\n      // test: echo -ne '\\e[1;1H\\e[44m\\eM\\e[0m'\n      // blankLine(true) is xterm/linux behavior\n      const scrollRegionHeight = this._activeBuffer.scrollBottom - this._activeBuffer.scrollTop;\n      this._activeBuffer.lines.shiftElements(this._activeBuffer.ybase + this._activeBuffer.y, scrollRegionHeight, 1);\n      this._activeBuffer.lines.set(this._activeBuffer.ybase + this._activeBuffer.y, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n      this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    } else {\n      this._activeBuffer.y--;\n      this._restrictCursor(); // quickfix to not run out of bounds\n    }\n    return true;\n  }\n\n  /**\n   * ESC c\n   *   DEC mnemonic: RIS (https://vt100.net/docs/vt510-rm/RIS.html)\n   *   Reset to initial state.\n   */\n  public fullReset(): boolean {\n    this._parser.reset();\n    this._onRequestReset.fire();\n    return true;\n  }\n\n  public reset(): void {\n    this._curAttrData = DEFAULT_ATTR_DATA.clone();\n    this._eraseAttrDataInternal = DEFAULT_ATTR_DATA.clone();\n  }\n\n  /**\n   * back_color_erase feature for xterm.\n   */\n  private _eraseAttrData(): IAttributeData {\n    this._eraseAttrDataInternal.bg &= ~(Attributes.CM_MASK | 0xFFFFFF);\n    this._eraseAttrDataInternal.bg |= this._curAttrData.bg & ~0xFC000000;\n    return this._eraseAttrDataInternal;\n  }\n\n  /**\n   * ESC n\n   * ESC o\n   * ESC |\n   * ESC }\n   * ESC ~\n   *   DEC mnemonic: LS (https://vt100.net/docs/vt510-rm/LS.html)\n   *   When you use a locking shift, the character set remains in GL or GR until\n   *   you use another locking shift. (partly supported)\n   */\n  public setgLevel(level: number): boolean {\n    this._charsetService.setgLevel(level);\n    return true;\n  }\n\n  /**\n   * ESC # 8\n   *   DEC mnemonic: DECALN (https://vt100.net/docs/vt510-rm/DECALN.html)\n   *   This control function fills the complete screen area with\n   *   a test pattern (E) used for adjusting screen alignment.\n   *\n   * @vt: #Y   ESC   DECALN   \"Screen Alignment Pattern\"  \"ESC # 8\"  \"Fill viewport with a test pattern (E).\"\n   */\n  public screenAlignmentPattern(): boolean {\n    // prepare cell data\n    const cell = new CellData();\n    cell.content = 1 << Content.WIDTH_SHIFT | 'E'.charCodeAt(0);\n    cell.fg = this._curAttrData.fg;\n    cell.bg = this._curAttrData.bg;\n\n\n    this._setCursor(0, 0);\n    for (let yOffset = 0; yOffset < this._bufferService.rows; ++yOffset) {\n      const row = this._activeBuffer.ybase + this._activeBuffer.y + yOffset;\n      const line = this._activeBuffer.lines.get(row);\n      if (line) {\n        line.fill(cell);\n        line.isWrapped = false;\n      }\n    }\n    this._dirtyRowService.markAllDirty();\n    this._setCursor(0, 0);\n    return true;\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * A base class that can be extended to provide convenience methods for managing the lifecycle of an\n * object and its components.\n */\nexport abstract class Disposable implements IDisposable {\n  protected _disposables: IDisposable[] = [];\n  protected _isDisposed: boolean = false;\n\n  constructor() {\n  }\n\n  /**\n   * Disposes the object, triggering the `dispose` method on all registered IDisposables.\n   */\n  public dispose(): void {\n    this._isDisposed = true;\n    for (const d of this._disposables) {\n      d.dispose();\n    }\n    this._disposables.length = 0;\n  }\n\n  /**\n   * Registers a disposable object.\n   * @param d The disposable to register.\n   * @returns The disposable.\n   */\n  public register<T extends IDisposable>(d: T): T {\n    this._disposables.push(d);\n    return d;\n  }\n\n  /**\n   * Unregisters a disposable object if it has been registered, if not do\n   * nothing.\n   * @param d The disposable to unregister.\n   */\n  public unregister<T extends IDisposable>(d: T): void {\n    const index = this._disposables.indexOf(d);\n    if (index !== -1) {\n      this._disposables.splice(index, 1);\n    }\n  }\n}\n\n/**\n * Dispose of all disposables in an array and set its length to 0.\n */\nexport function disposeArray(disposables: IDisposable[]): void {\n  for (const d of disposables) {\n    d.dispose();\n  }\n  disposables.length = 0;\n}\n\n/**\n * Creates a disposable that will dispose of an array of disposables when disposed.\n */\nexport function getDisposeArrayDisposable(array: IDisposable[]): IDisposable {\n  return { dispose: () => disposeArray(array) };\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\ninterface INavigator {\n  userAgent: string;\n  language: string;\n  platform: string;\n}\n\n// We're declaring a navigator global here as we expect it in all runtimes (node and browser), but\n// we want this module to live in common.\ndeclare const navigator: INavigator;\n\nconst isNode = (typeof navigator === 'undefined') ? true : false;\nconst userAgent = (isNode) ? 'node' : navigator.userAgent;\nconst platform = (isNode) ? 'node' : navigator.platform;\n\nexport const isFirefox = userAgent.includes('Firefox');\nexport const isLegacyEdge = userAgent.includes('Edge');\nexport const isSafari = /^((?!chrome|android).)*safari/i.test(userAgent);\n\n// Find the users platform. We use this to interpret the meta key\n// and ISO third level shifts.\n// http://stackoverflow.com/q/19877924/577598\nexport const isMac = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'].includes(platform);\nexport const isIpad = platform === 'iPad';\nexport const isIphone = platform === 'iPhone';\nexport const isWindows = ['Windows', 'Win16', 'Win32', 'WinCE'].includes(platform);\nexport const isLinux = platform.indexOf('Linux') >= 0;\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * A generic list that is maintained in sorted order and allows values with duplicate keys. This\n * list is based on binary search and as such locating a key will take O(log n) amortized, this\n * includes the by key iterator.\n */\nexport class SortedList<T> {\n  private readonly _array: T[] = [];\n\n  constructor(\n    private readonly _getKey: (value: T) => number\n  ) {\n  }\n\n  public clear(): void {\n    this._array.length = 0;\n  }\n\n  public insert(value: T): void {\n    if (this._array.length === 0) {\n      this._array.push(value);\n      return;\n    }\n    const i = this._search(this._getKey(value), 0, this._array.length - 1);\n    this._array.splice(i, 0, value);\n  }\n\n  public delete(value: T): boolean {\n    if (this._array.length === 0) {\n      return false;\n    }\n    const key = this._getKey(value);\n    let i = this._search(key, 0, this._array.length - 1);\n    if (this._getKey(this._array[i]) !== key) {\n      return false;\n    }\n    do {\n      if (this._array[i] === value) {\n        this._array.splice(i, 1);\n        return true;\n      }\n    } while (++i < this._array.length && this._getKey(this._array[i]) === key);\n    return false;\n  }\n\n  public *getKeyIterator(key: number): IterableIterator<T> {\n    if (this._array.length === 0) {\n      return;\n    }\n    let i = this._search(key, 0, this._array.length - 1);\n    if (i < 0 || i >= this._array.length) {\n      return;\n    }\n    if (this._getKey(this._array[i]) !== key) {\n      return;\n    }\n    do {\n      yield this._array[i];\n    } while (++i < this._array.length && this._getKey(this._array[i]) === key);\n  }\n\n  public values(): IterableIterator<T> {\n    return this._array.values();\n  }\n\n  private _search(key: number, min: number, max: number): number {\n    if (max < min) {\n      return min;\n    }\n    let mid = Math.floor((min + max) / 2);\n    if (this._getKey(this._array[mid]) > key) {\n      return this._search(key, min, mid - 1);\n    }\n    if (this._getKey(this._array[mid]) < key) {\n      return this._search(key, mid + 1, max);\n    }\n    // Value found! Since keys can be duplicates, move the result index back to the lowest index\n    // that matches the key.\n    while (mid > 0 && this._getKey(this._array[mid - 1]) === key) {\n      mid--;\n    }\n    return mid;\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport type TypedArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Int8Array | Int16Array | Int32Array | Float32Array | Float64Array;\n\n\n/**\n * polyfill for TypedArray.fill\n * This is needed to support .fill in all safari versions and IE 11.\n */\nexport function fill<T extends TypedArray>(array: T, value: number, start?: number, end?: number): T {\n  // all modern engines that support .fill\n  if (array.fill) {\n    return array.fill(value, start, end) as T;\n  }\n  return fillFallback(array, value, start, end);\n}\n\nexport function fillFallback<T extends TypedArray>(array: T, value: number, start: number = 0, end: number = array.length): T {\n  // safari and IE 11\n  // since IE 11 does not support Array.prototype.fill either\n  // we cannot use the suggested polyfill from MDN\n  // instead we simply fall back to looping\n  if (start >= array.length) {\n    return array;\n  }\n  start = (array.length + start) % array.length;\n  if (end >= array.length) {\n    end = array.length;\n  } else {\n    end = (array.length + end) % array.length;\n  }\n  for (let i = start; i < end; ++i) {\n    array[i] = value;\n  }\n  return array;\n}\n\n/**\n * Concat two typed arrays `a` and `b`.\n * Returns a new typed array.\n */\nexport function concat<T extends TypedArray>(a: T, b: T): T {\n  const result = new (a.constructor as any)(a.length + b.length);\n  result.set(a);\n  result.set(b, a.length);\n  return result;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CHAR_DATA_CODE_INDEX, NULL_CELL_CODE, WHITESPACE_CELL_CODE } from 'common/buffer/Constants';\nimport { IBufferService } from 'common/services/Services';\n\nexport function updateWindowsModeWrappedState(bufferService: IBufferService): void {\n  // Winpty does not support wraparound mode which means that lines will never\n  // be marked as wrapped. This causes issues for things like copying a line\n  // retaining the wrapped new line characters or if consumers are listening\n  // in on the data stream.\n  //\n  // The workaround for this is to listen to every incoming line feed and mark\n  // the line as wrapped if the last character in the previous line is not a\n  // space. This is certainly not without its problems, but generally on\n  // Windows when text reaches the end of the terminal it's likely going to be\n  // wrapped.\n  const line = bufferService.buffer.lines.get(bufferService.buffer.ybase + bufferService.buffer.y - 1);\n  const lastChar = line?.get(bufferService.cols - 1);\n\n  const nextLine = bufferService.buffer.lines.get(bufferService.buffer.ybase + bufferService.buffer.y);\n  if (nextLine && lastChar) {\n    nextLine.isWrapped = (lastChar[CHAR_DATA_CODE_INDEX] !== NULL_CELL_CODE && lastChar[CHAR_DATA_CODE_INDEX] !== WHITESPACE_CELL_CODE);\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IAttributeData, IColorRGB, IExtendedAttrs } from 'common/Types';\nimport { Attributes, FgFlags, BgFlags, UnderlineStyle } from 'common/buffer/Constants';\n\nexport class AttributeData implements IAttributeData {\n  public static toColorRGB(value: number): IColorRGB {\n    return [\n      value >>> Attributes.RED_SHIFT & 255,\n      value >>> Attributes.GREEN_SHIFT & 255,\n      value & 255\n    ];\n  }\n\n  public static fromColorRGB(value: IColorRGB): number {\n    return (value[0] & 255) << Attributes.RED_SHIFT | (value[1] & 255) << Attributes.GREEN_SHIFT | value[2] & 255;\n  }\n\n  public clone(): IAttributeData {\n    const newObj = new AttributeData();\n    newObj.fg = this.fg;\n    newObj.bg = this.bg;\n    newObj.extended = this.extended.clone();\n    return newObj;\n  }\n\n  // data\n  public fg = 0;\n  public bg = 0;\n  public extended = new ExtendedAttrs();\n\n  // flags\n  public isInverse(): number       { return this.fg & FgFlags.INVERSE; }\n  public isBold(): number          { return this.fg & FgFlags.BOLD; }\n  public isUnderline(): number     { return this.fg & FgFlags.UNDERLINE; }\n  public isBlink(): number         { return this.fg & FgFlags.BLINK; }\n  public isInvisible(): number     { return this.fg & FgFlags.INVISIBLE; }\n  public isItalic(): number        { return this.bg & BgFlags.ITALIC; }\n  public isDim(): number           { return this.bg & BgFlags.DIM; }\n  public isStrikethrough(): number { return this.fg & FgFlags.STRIKETHROUGH; }\n\n  // color modes\n  public getFgColorMode(): number { return this.fg & Attributes.CM_MASK; }\n  public getBgColorMode(): number { return this.bg & Attributes.CM_MASK; }\n  public isFgRGB(): boolean       { return (this.fg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isBgRGB(): boolean       { return (this.bg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isFgPalette(): boolean   { return (this.fg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.fg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isBgPalette(): boolean   { return (this.bg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.bg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isFgDefault(): boolean   { return (this.fg & Attributes.CM_MASK) === 0; }\n  public isBgDefault(): boolean   { return (this.bg & Attributes.CM_MASK) === 0; }\n  public isAttributeDefault(): boolean { return this.fg === 0 && this.bg === 0; }\n\n  // colors\n  public getFgColor(): number {\n    switch (this.fg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.fg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.fg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n  public getBgColor(): number {\n    switch (this.bg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.bg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.bg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n\n  // extended attrs\n  public hasExtendedAttrs(): number {\n    return this.bg & BgFlags.HAS_EXTENDED;\n  }\n  public updateExtended(): void {\n    if (this.extended.isEmpty()) {\n      this.bg &= ~BgFlags.HAS_EXTENDED;\n    } else {\n      this.bg |= BgFlags.HAS_EXTENDED;\n    }\n  }\n  public getUnderlineColor(): number {\n    if ((this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor) {\n      switch (this.extended.underlineColor & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:  return this.extended.underlineColor & Attributes.PCOLOR_MASK;\n        case Attributes.CM_RGB:   return this.extended.underlineColor & Attributes.RGB_MASK;\n        default:                  return this.getFgColor();\n      }\n    }\n    return this.getFgColor();\n  }\n  public getUnderlineColorMode(): number {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? this.extended.underlineColor & Attributes.CM_MASK\n      : this.getFgColorMode();\n  }\n  public isUnderlineColorRGB(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_RGB\n      : this.isFgRGB();\n  }\n  public isUnderlineColorPalette(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P16\n          || (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P256\n      : this.isFgPalette();\n  }\n  public isUnderlineColorDefault(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === 0\n      : this.isFgDefault();\n  }\n  public getUnderlineStyle(): UnderlineStyle {\n    return this.fg & FgFlags.UNDERLINE\n      ? (this.bg & BgFlags.HAS_EXTENDED ? this.extended.underlineStyle : UnderlineStyle.SINGLE)\n      : UnderlineStyle.NONE;\n  }\n}\n\n\n/**\n * Extended attributes for a cell.\n * Holds information about different underline styles and color.\n */\nexport class ExtendedAttrs implements IExtendedAttrs {\n  constructor(\n    // underline style, NONE is empty\n    public underlineStyle: UnderlineStyle = UnderlineStyle.NONE,\n    // underline color, -1 is empty (same as FG)\n    public underlineColor: number = -1\n  ) {}\n\n  public clone(): IExtendedAttrs {\n    return new ExtendedAttrs(this.underlineStyle, this.underlineColor);\n  }\n\n  /**\n   * Convenient method to indicate whether the object holds no additional information,\n   * that needs to be persistant in the buffer.\n   */\n  public isEmpty(): boolean {\n    return this.underlineStyle === UnderlineStyle.NONE;\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CircularList, IInsertEvent } from 'common/CircularList';\nimport { IBuffer, BufferIndex, IBufferStringIterator, IBufferStringIteratorResult } from 'common/buffer/Types';\nimport { IBufferLine, ICellData, IAttributeData, ICharset } from 'common/Types';\nimport { BufferLine, DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { CellData } from 'common/buffer/CellData';\nimport { NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE, WHITESPACE_CELL_CHAR, WHITESPACE_CELL_WIDTH, WHITESPACE_CELL_CODE, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_CHAR_INDEX } from 'common/buffer/Constants';\nimport { reflowLargerApplyNewLayout, reflowLargerCreateNewLayout, reflowLargerGetLinesToRemove, reflowSmallerGetNewLineLengths, getWrappedLineTrimmedLength } from 'common/buffer/BufferReflow';\nimport { Marker } from 'common/buffer/Marker';\nimport { IOptionsService, IBufferService } from 'common/services/Services';\nimport { DEFAULT_CHARSET } from 'common/data/Charsets';\nimport { ExtendedAttrs } from 'common/buffer/AttributeData';\n\nexport const MAX_BUFFER_SIZE = 4294967295; // 2^32 - 1\n\n/**\n * This class represents a terminal buffer (an internal state of the terminal), where the\n * following information is stored (in high-level):\n *   - text content of this particular buffer\n *   - cursor position\n *   - scroll position\n */\nexport class Buffer implements IBuffer {\n  public lines: CircularList<IBufferLine>;\n  public ydisp: number = 0;\n  public ybase: number = 0;\n  public y: number = 0;\n  public x: number = 0;\n  public scrollBottom: number;\n  public scrollTop: number;\n  // TODO: Type me\n  public tabs: any;\n  public savedY: number = 0;\n  public savedX: number = 0;\n  public savedCurAttrData = DEFAULT_ATTR_DATA.clone();\n  public savedCharset: ICharset | undefined = DEFAULT_CHARSET;\n  public markers: Marker[] = [];\n  private _nullCell: ICellData = CellData.fromCharData([0, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE]);\n  private _whitespaceCell: ICellData = CellData.fromCharData([0, WHITESPACE_CELL_CHAR, WHITESPACE_CELL_WIDTH, WHITESPACE_CELL_CODE]);\n  private _cols: number;\n  private _rows: number;\n  private _isClearing: boolean = false;\n\n  constructor(\n    private _hasScrollback: boolean,\n    private _optionsService: IOptionsService,\n    private _bufferService: IBufferService\n  ) {\n    this._cols = this._bufferService.cols;\n    this._rows = this._bufferService.rows;\n    this.lines = new CircularList<IBufferLine>(this._getCorrectBufferLength(this._rows));\n    this.scrollTop = 0;\n    this.scrollBottom = this._rows - 1;\n    this.setupTabStops();\n  }\n\n  public getNullCell(attr?: IAttributeData): ICellData {\n    if (attr) {\n      this._nullCell.fg = attr.fg;\n      this._nullCell.bg = attr.bg;\n      this._nullCell.extended = attr.extended;\n    } else {\n      this._nullCell.fg = 0;\n      this._nullCell.bg = 0;\n      this._nullCell.extended = new ExtendedAttrs();\n    }\n    return this._nullCell;\n  }\n\n  public getWhitespaceCell(attr?: IAttributeData): ICellData {\n    if (attr) {\n      this._whitespaceCell.fg = attr.fg;\n      this._whitespaceCell.bg = attr.bg;\n      this._whitespaceCell.extended = attr.extended;\n    } else {\n      this._whitespaceCell.fg = 0;\n      this._whitespaceCell.bg = 0;\n      this._whitespaceCell.extended = new ExtendedAttrs();\n    }\n    return this._whitespaceCell;\n  }\n\n  public getBlankLine(attr: IAttributeData, isWrapped?: boolean): IBufferLine {\n    return new BufferLine(this._bufferService.cols, this.getNullCell(attr), isWrapped);\n  }\n\n  public get hasScrollback(): boolean {\n    return this._hasScrollback && this.lines.maxLength > this._rows;\n  }\n\n  public get isCursorInViewport(): boolean {\n    const absoluteY = this.ybase + this.y;\n    const relativeY = absoluteY - this.ydisp;\n    return (relativeY >= 0 && relativeY < this._rows);\n  }\n\n  /**\n   * Gets the correct buffer length based on the rows provided, the terminal's\n   * scrollback and whether this buffer is flagged to have scrollback or not.\n   * @param rows The terminal rows to use in the calculation.\n   */\n  private _getCorrectBufferLength(rows: number): number {\n    if (!this._hasScrollback) {\n      return rows;\n    }\n\n    const correctBufferLength = rows + this._optionsService.rawOptions.scrollback;\n\n    return correctBufferLength > MAX_BUFFER_SIZE ? MAX_BUFFER_SIZE : correctBufferLength;\n  }\n\n  /**\n   * Fills the buffer's viewport with blank lines.\n   */\n  public fillViewportRows(fillAttr?: IAttributeData): void {\n    if (this.lines.length === 0) {\n      if (fillAttr === undefined) {\n        fillAttr = DEFAULT_ATTR_DATA;\n      }\n      let i = this._rows;\n      while (i--) {\n        this.lines.push(this.getBlankLine(fillAttr));\n      }\n    }\n  }\n\n  /**\n   * Clears the buffer to it's initial state, discarding all previous data.\n   */\n  public clear(): void {\n    this.ydisp = 0;\n    this.ybase = 0;\n    this.y = 0;\n    this.x = 0;\n    this.lines = new CircularList<IBufferLine>(this._getCorrectBufferLength(this._rows));\n    this.scrollTop = 0;\n    this.scrollBottom = this._rows - 1;\n    this.setupTabStops();\n  }\n\n  /**\n   * Resizes the buffer, adjusting its data accordingly.\n   * @param newCols The new number of columns.\n   * @param newRows The new number of rows.\n   */\n  public resize(newCols: number, newRows: number): void {\n    // store reference to null cell with default attrs\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n\n    // Increase max length if needed before adjustments to allow space to fill\n    // as required.\n    const newMaxLength = this._getCorrectBufferLength(newRows);\n    if (newMaxLength > this.lines.maxLength) {\n      this.lines.maxLength = newMaxLength;\n    }\n\n    // The following adjustments should only happen if the buffer has been\n    // initialized/filled.\n    if (this.lines.length > 0) {\n      // Deal with columns increasing (reducing needs to happen after reflow)\n      if (this._cols < newCols) {\n        for (let i = 0; i < this.lines.length; i++) {\n          this.lines.get(i)!.resize(newCols, nullCell);\n        }\n      }\n\n      // Resize rows in both directions as needed\n      let addToY = 0;\n      if (this._rows < newRows) {\n        for (let y = this._rows; y < newRows; y++) {\n          if (this.lines.length < newRows + this.ybase) {\n            if (this._optionsService.rawOptions.windowsMode) {\n              // Just add the new missing rows on Windows as conpty reprints the screen with it's\n              // view of the world. Once a line enters scrollback for conpty it remains there\n              this.lines.push(new BufferLine(newCols, nullCell));\n            } else {\n              if (this.ybase > 0 && this.lines.length <= this.ybase + this.y + addToY + 1) {\n                // There is room above the buffer and there are no empty elements below the line,\n                // scroll up\n                this.ybase--;\n                addToY++;\n                if (this.ydisp > 0) {\n                  // Viewport is at the top of the buffer, must increase downwards\n                  this.ydisp--;\n                }\n              } else {\n                // Add a blank line if there is no buffer left at the top to scroll to, or if there\n                // are blank lines after the cursor\n                this.lines.push(new BufferLine(newCols, nullCell));\n              }\n            }\n          }\n        }\n      } else { // (this._rows >= newRows)\n        for (let y = this._rows; y > newRows; y--) {\n          if (this.lines.length > newRows + this.ybase) {\n            if (this.lines.length > this.ybase + this.y + 1) {\n              // The line is a blank line below the cursor, remove it\n              this.lines.pop();\n            } else {\n              // The line is the cursor, scroll down\n              this.ybase++;\n              this.ydisp++;\n            }\n          }\n        }\n      }\n\n      // Reduce max length if needed after adjustments, this is done after as it\n      // would otherwise cut data from the bottom of the buffer.\n      if (newMaxLength < this.lines.maxLength) {\n        // Trim from the top of the buffer and adjust ybase and ydisp.\n        const amountToTrim = this.lines.length - newMaxLength;\n        if (amountToTrim > 0) {\n          this.lines.trimStart(amountToTrim);\n          this.ybase = Math.max(this.ybase - amountToTrim, 0);\n          this.ydisp = Math.max(this.ydisp - amountToTrim, 0);\n          this.savedY = Math.max(this.savedY - amountToTrim, 0);\n        }\n        this.lines.maxLength = newMaxLength;\n      }\n\n      // Make sure that the cursor stays on screen\n      this.x = Math.min(this.x, newCols - 1);\n      this.y = Math.min(this.y, newRows - 1);\n      if (addToY) {\n        this.y += addToY;\n      }\n      this.savedX = Math.min(this.savedX, newCols - 1);\n\n      this.scrollTop = 0;\n    }\n\n    this.scrollBottom = newRows - 1;\n\n    if (this._isReflowEnabled) {\n      this._reflow(newCols, newRows);\n\n      // Trim the end of the line off if cols shrunk\n      if (this._cols > newCols) {\n        for (let i = 0; i < this.lines.length; i++) {\n          this.lines.get(i)!.resize(newCols, nullCell);\n        }\n      }\n    }\n\n    this._cols = newCols;\n    this._rows = newRows;\n  }\n\n  private get _isReflowEnabled(): boolean {\n    return this._hasScrollback && !this._optionsService.rawOptions.windowsMode;\n  }\n\n  private _reflow(newCols: number, newRows: number): void {\n    if (this._cols === newCols) {\n      return;\n    }\n\n    // Iterate through rows, ignore the last one as it cannot be wrapped\n    if (newCols > this._cols) {\n      this._reflowLarger(newCols, newRows);\n    } else {\n      this._reflowSmaller(newCols, newRows);\n    }\n  }\n\n  private _reflowLarger(newCols: number, newRows: number): void {\n    const toRemove: number[] = reflowLargerGetLinesToRemove(this.lines, this._cols, newCols, this.ybase + this.y, this.getNullCell(DEFAULT_ATTR_DATA));\n    if (toRemove.length > 0) {\n      const newLayoutResult = reflowLargerCreateNewLayout(this.lines, toRemove);\n      reflowLargerApplyNewLayout(this.lines, newLayoutResult.layout);\n      this._reflowLargerAdjustViewport(newCols, newRows, newLayoutResult.countRemoved);\n    }\n  }\n\n  private _reflowLargerAdjustViewport(newCols: number, newRows: number, countRemoved: number): void {\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n    // Adjust viewport based on number of items removed\n    let viewportAdjustments = countRemoved;\n    while (viewportAdjustments-- > 0) {\n      if (this.ybase === 0) {\n        if (this.y > 0) {\n          this.y--;\n        }\n        if (this.lines.length < newRows) {\n          // Add an extra row at the bottom of the viewport\n          this.lines.push(new BufferLine(newCols, nullCell));\n        }\n      } else {\n        if (this.ydisp === this.ybase) {\n          this.ydisp--;\n        }\n        this.ybase--;\n      }\n    }\n    this.savedY = Math.max(this.savedY - countRemoved, 0);\n  }\n\n  private _reflowSmaller(newCols: number, newRows: number): void {\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n    // Gather all BufferLines that need to be inserted into the Buffer here so that they can be\n    // batched up and only committed once\n    const toInsert = [];\n    let countToInsert = 0;\n    // Go backwards as many lines may be trimmed and this will avoid considering them\n    for (let y = this.lines.length - 1; y >= 0; y--) {\n      // Check whether this line is a problem\n      let nextLine = this.lines.get(y) as BufferLine;\n      if (!nextLine || !nextLine.isWrapped && nextLine.getTrimmedLength() <= newCols) {\n        continue;\n      }\n\n      // Gather wrapped lines and adjust y to be the starting line\n      const wrappedLines: BufferLine[] = [nextLine];\n      while (nextLine.isWrapped && y > 0) {\n        nextLine = this.lines.get(--y) as BufferLine;\n        wrappedLines.unshift(nextLine);\n      }\n\n      // If these lines contain the cursor don't touch them, the program will handle fixing up\n      // wrapped lines with the cursor\n      const absoluteY = this.ybase + this.y;\n      if (absoluteY >= y && absoluteY < y + wrappedLines.length) {\n        continue;\n      }\n\n      const lastLineLength = wrappedLines[wrappedLines.length - 1].getTrimmedLength();\n      const destLineLengths = reflowSmallerGetNewLineLengths(wrappedLines, this._cols, newCols);\n      const linesToAdd = destLineLengths.length - wrappedLines.length;\n      let trimmedLines: number;\n      if (this.ybase === 0 && this.y !== this.lines.length - 1) {\n        // If the top section of the buffer is not yet filled\n        trimmedLines = Math.max(0, this.y - this.lines.maxLength + linesToAdd);\n      } else {\n        trimmedLines = Math.max(0, this.lines.length - this.lines.maxLength + linesToAdd);\n      }\n\n      // Add the new lines\n      const newLines: BufferLine[] = [];\n      for (let i = 0; i < linesToAdd; i++) {\n        const newLine = this.getBlankLine(DEFAULT_ATTR_DATA, true) as BufferLine;\n        newLines.push(newLine);\n      }\n      if (newLines.length > 0) {\n        toInsert.push({\n          // countToInsert here gets the actual index, taking into account other inserted items.\n          // using this we can iterate through the list forwards\n          start: y + wrappedLines.length + countToInsert,\n          newLines\n        });\n        countToInsert += newLines.length;\n      }\n      wrappedLines.push(...newLines);\n\n      // Copy buffer data to new locations, this needs to happen backwards to do in-place\n      let destLineIndex = destLineLengths.length - 1; // Math.floor(cellsNeeded / newCols);\n      let destCol = destLineLengths[destLineIndex]; // cellsNeeded % newCols;\n      if (destCol === 0) {\n        destLineIndex--;\n        destCol = destLineLengths[destLineIndex];\n      }\n      let srcLineIndex = wrappedLines.length - linesToAdd - 1;\n      let srcCol = lastLineLength;\n      while (srcLineIndex >= 0) {\n        const cellsToCopy = Math.min(srcCol, destCol);\n        if (wrappedLines[destLineIndex] === undefined) {\n          // Sanity check that the line exists, this has been known to fail for an unknown reason\n          // which would stop the reflow from happening if an exception would throw.\n          break;\n        }\n        wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[srcLineIndex], srcCol - cellsToCopy, destCol - cellsToCopy, cellsToCopy, true);\n        destCol -= cellsToCopy;\n        if (destCol === 0) {\n          destLineIndex--;\n          destCol = destLineLengths[destLineIndex];\n        }\n        srcCol -= cellsToCopy;\n        if (srcCol === 0) {\n          srcLineIndex--;\n          const wrappedLinesIndex = Math.max(srcLineIndex, 0);\n          srcCol = getWrappedLineTrimmedLength(wrappedLines, wrappedLinesIndex, this._cols);\n        }\n      }\n\n      // Null out the end of the line ends if a wide character wrapped to the following line\n      for (let i = 0; i < wrappedLines.length; i++) {\n        if (destLineLengths[i] < newCols) {\n          wrappedLines[i].setCell(destLineLengths[i], nullCell);\n        }\n      }\n\n      // Adjust viewport as needed\n      let viewportAdjustments = linesToAdd - trimmedLines;\n      while (viewportAdjustments-- > 0) {\n        if (this.ybase === 0) {\n          if (this.y < newRows - 1) {\n            this.y++;\n            this.lines.pop();\n          } else {\n            this.ybase++;\n            this.ydisp++;\n          }\n        } else {\n          // Ensure ybase does not exceed its maximum value\n          if (this.ybase < Math.min(this.lines.maxLength, this.lines.length + countToInsert) - newRows) {\n            if (this.ybase === this.ydisp) {\n              this.ydisp++;\n            }\n            this.ybase++;\n          }\n        }\n      }\n      this.savedY = Math.min(this.savedY + linesToAdd, this.ybase + newRows - 1);\n    }\n\n    // Rearrange lines in the buffer if there are any insertions, this is done at the end rather\n    // than earlier so that it's a single O(n) pass through the buffer, instead of O(n^2) from many\n    // costly calls to CircularList.splice.\n    if (toInsert.length > 0) {\n      // Record buffer insert events and then play them back backwards so that the indexes are\n      // correct\n      const insertEvents: IInsertEvent[] = [];\n\n      // Record original lines so they don't get overridden when we rearrange the list\n      const originalLines: BufferLine[] = [];\n      for (let i = 0; i < this.lines.length; i++) {\n        originalLines.push(this.lines.get(i) as BufferLine);\n      }\n      const originalLinesLength = this.lines.length;\n\n      let originalLineIndex = originalLinesLength - 1;\n      let nextToInsertIndex = 0;\n      let nextToInsert = toInsert[nextToInsertIndex];\n      this.lines.length = Math.min(this.lines.maxLength, this.lines.length + countToInsert);\n      let countInsertedSoFar = 0;\n      for (let i = Math.min(this.lines.maxLength - 1, originalLinesLength + countToInsert - 1); i >= 0; i--) {\n        if (nextToInsert && nextToInsert.start > originalLineIndex + countInsertedSoFar) {\n          // Insert extra lines here, adjusting i as needed\n          for (let nextI = nextToInsert.newLines.length - 1; nextI >= 0; nextI--) {\n            this.lines.set(i--, nextToInsert.newLines[nextI]);\n          }\n          i++;\n\n          // Create insert events for later\n          insertEvents.push({\n            index: originalLineIndex + 1,\n            amount: nextToInsert.newLines.length\n          });\n\n          countInsertedSoFar += nextToInsert.newLines.length;\n          nextToInsert = toInsert[++nextToInsertIndex];\n        } else {\n          this.lines.set(i, originalLines[originalLineIndex--]);\n        }\n      }\n\n      // Update markers\n      let insertCountEmitted = 0;\n      for (let i = insertEvents.length - 1; i >= 0; i--) {\n        insertEvents[i].index += insertCountEmitted;\n        this.lines.onInsertEmitter.fire(insertEvents[i]);\n        insertCountEmitted += insertEvents[i].amount;\n      }\n      const amountToTrim = Math.max(0, originalLinesLength + countToInsert - this.lines.maxLength);\n      if (amountToTrim > 0) {\n        this.lines.onTrimEmitter.fire(amountToTrim);\n      }\n    }\n  }\n\n  // private _reflowSmallerGetLinesNeeded()\n\n  /**\n   * Translates a string index back to a BufferIndex.\n   * To get the correct buffer position the string must start at `startCol` 0\n   * (default in translateBufferLineToString).\n   * The method also works on wrapped line strings given rows were not trimmed.\n   * The method operates on the CharData string length, there are no\n   * additional content or boundary checks. Therefore the string and the buffer\n   * should not be altered in between.\n   * TODO: respect trim flag after fixing #1685\n   * @param lineIndex line index the string was retrieved from\n   * @param stringIndex index within the string\n   * @param startCol column offset the string was retrieved from\n   */\n  public stringIndexToBufferIndex(lineIndex: number, stringIndex: number, trimRight: boolean = false): BufferIndex {\n    while (stringIndex) {\n      const line = this.lines.get(lineIndex);\n      if (!line) {\n        return [-1, -1];\n      }\n      const length = (trimRight) ? line.getTrimmedLength() : line.length;\n      for (let i = 0; i < length; ++i) {\n        if (line.get(i)[CHAR_DATA_WIDTH_INDEX]) {\n          // empty cells report a string length of 0, but get replaced\n          // with a whitespace in translateToString, thus replace with 1\n          stringIndex -= line.get(i)[CHAR_DATA_CHAR_INDEX].length || 1;\n        }\n        if (stringIndex < 0) {\n          return [lineIndex, i];\n        }\n      }\n      lineIndex++;\n    }\n    return [lineIndex, 0];\n  }\n\n  /**\n   * Translates a buffer line to a string, with optional start and end columns.\n   * Wide characters will count as two columns in the resulting string. This\n   * function is useful for getting the actual text underneath the raw selection\n   * position.\n   * @param line The line being translated.\n   * @param trimRight Whether to trim whitespace to the right.\n   * @param startCol The column to start at.\n   * @param endCol The column to end at.\n   */\n  public translateBufferLineToString(lineIndex: number, trimRight: boolean, startCol: number = 0, endCol?: number): string {\n    const line = this.lines.get(lineIndex);\n    if (!line) {\n      return '';\n    }\n    return line.translateToString(trimRight, startCol, endCol);\n  }\n\n  public getWrappedRangeForLine(y: number): { first: number, last: number } {\n    let first = y;\n    let last = y;\n    // Scan upwards for wrapped lines\n    while (first > 0 && this.lines.get(first)!.isWrapped) {\n      first--;\n    }\n    // Scan downwards for wrapped lines\n    while (last + 1 < this.lines.length && this.lines.get(last + 1)!.isWrapped) {\n      last++;\n    }\n    return { first, last };\n  }\n\n  /**\n   * Setup the tab stops.\n   * @param i The index to start setting up tab stops from.\n   */\n  public setupTabStops(i?: number): void {\n    if (i !== null && i !== undefined) {\n      if (!this.tabs[i]) {\n        i = this.prevStop(i);\n      }\n    } else {\n      this.tabs = {};\n      i = 0;\n    }\n\n    for (; i < this._cols; i += this._optionsService.rawOptions.tabStopWidth) {\n      this.tabs[i] = true;\n    }\n  }\n\n  /**\n   * Move the cursor to the previous tab stop from the given position (default is current).\n   * @param x The position to move the cursor to the previous tab stop.\n   */\n  public prevStop(x?: number): number {\n    if (x === null || x === undefined) {\n      x = this.x;\n    }\n    while (!this.tabs[--x] && x > 0);\n    return x >= this._cols ? this._cols - 1 : x < 0 ? 0 : x;\n  }\n\n  /**\n   * Move the cursor one tab stop forward from the given position (default is current).\n   * @param x The position to move the cursor one tab stop forward.\n   */\n  public nextStop(x?: number): number {\n    if (x === null || x === undefined) {\n      x = this.x;\n    }\n    while (!this.tabs[++x] && x < this._cols);\n    return x >= this._cols ? this._cols - 1 : x < 0 ? 0 : x;\n  }\n\n  /**\n   * Clears markers on single line.\n   * @param y The line to clear.\n   */\n  public clearMarkers(y: number): void {\n    this._isClearing = true;\n    for (let i = 0; i < this.markers.length; i++) {\n      if (this.markers[i].line === y) {\n        this.markers[i].dispose();\n        this.markers.splice(i--, 1);\n      }\n    }\n    this._isClearing = false;\n  }\n\n  /**\n   * Clears markers on all lines\n   */\n  public clearAllMarkers(): void {\n    this._isClearing = true;\n    for (let i = 0; i < this.markers.length; i++) {\n      this.markers[i].dispose();\n      this.markers.splice(i--, 1);\n    }\n    this._isClearing = false;\n  }\n\n  public addMarker(y: number): Marker {\n    const marker = new Marker(y);\n    this.markers.push(marker);\n    marker.register(this.lines.onTrim(amount => {\n      marker.line -= amount;\n      // The marker should be disposed when the line is trimmed from the buffer\n      if (marker.line < 0) {\n        marker.dispose();\n      }\n    }));\n    marker.register(this.lines.onInsert(event => {\n      if (marker.line >= event.index) {\n        marker.line += event.amount;\n      }\n    }));\n    marker.register(this.lines.onDelete(event => {\n      // Delete the marker if it's within the range\n      if (marker.line >= event.index && marker.line < event.index + event.amount) {\n        marker.dispose();\n      }\n\n      // Shift the marker if it's after the deleted range\n      if (marker.line > event.index) {\n        marker.line -= event.amount;\n      }\n    }));\n    marker.register(marker.onDispose(() => this._removeMarker(marker)));\n    return marker;\n  }\n\n  private _removeMarker(marker: Marker): void {\n    if (!this._isClearing) {\n      this.markers.splice(this.markers.indexOf(marker), 1);\n    }\n  }\n\n  public iterator(trimRight: boolean, startIndex?: number, endIndex?: number, startOverscan?: number, endOverscan?: number): IBufferStringIterator {\n    return new BufferStringIterator(this, trimRight, startIndex, endIndex, startOverscan, endOverscan);\n  }\n}\n\n/**\n * Iterator to get unwrapped content strings from the buffer.\n * The iterator returns at least the string data between the borders\n * `startIndex` and `endIndex` (exclusive) and will expand the lines\n * by `startOverscan` to the top and by `endOverscan` to the bottom,\n * if no new line was found in between.\n * It will never read/return string data beyond `startIndex - startOverscan`\n * or `endIndex + endOverscan`. Therefore the first and last line might be truncated.\n * It is possible to always get the full string for the first and last line as well\n * by setting the overscan values to the actual buffer length. This not recommended\n * since it might return the whole buffer within a single string in a worst case scenario.\n */\nexport class BufferStringIterator implements IBufferStringIterator {\n  private _current: number;\n\n  constructor(\n    private _buffer: IBuffer,\n    private _trimRight: boolean,\n    private _startIndex: number = 0,\n    private _endIndex: number = _buffer.lines.length,\n    private _startOverscan: number = 0,\n    private _endOverscan: number = 0\n  ) {\n    if (this._startIndex < 0) {\n      this._startIndex = 0;\n    }\n    if (this._endIndex > this._buffer.lines.length) {\n      this._endIndex = this._buffer.lines.length;\n    }\n    this._current = this._startIndex;\n  }\n\n  public hasNext(): boolean {\n    return this._current < this._endIndex;\n  }\n\n  public next(): IBufferStringIteratorResult {\n    const range = this._buffer.getWrappedRangeForLine(this._current);\n    // limit search window to overscan value at both borders\n    if (range.first < this._startIndex - this._startOverscan) {\n      range.first = this._startIndex - this._startOverscan;\n    }\n    if (range.last > this._endIndex + this._endOverscan) {\n      range.last = this._endIndex + this._endOverscan;\n    }\n    // limit to current buffer length\n    range.first = Math.max(range.first, 0);\n    range.last = Math.min(range.last, this._buffer.lines.length);\n    let content = '';\n    for (let i = range.first; i <= range.last; ++i) {\n      content += this._buffer.translateBufferLineToString(i, this._trimRight);\n    }\n    this._current = range.last + 1;\n    return { range, content };\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, IBufferLine, ICellData, IAttributeData, IExtendedAttrs } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE, WHITESPACE_CELL_CHAR, Content, BgFlags } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\n\n/**\n * buffer memory layout:\n *\n *   |             uint32_t             |        uint32_t         |        uint32_t         |\n *   |             `content`            |          `FG`           |          `BG`           |\n *   | wcwidth(2) comb(1) codepoint(21) | flags(8) R(8) G(8) B(8) | flags(8) R(8) G(8) B(8) |\n */\n\n\n/** typed array slots taken by one cell */\nconst CELL_SIZE = 3;\n\n/**\n * Cell member indices.\n *\n * Direct access:\n *    `content = data[column * CELL_SIZE + Cell.CONTENT];`\n *    `fg = data[column * CELL_SIZE + Cell.FG];`\n *    `bg = data[column * CELL_SIZE + Cell.BG];`\n */\nconst enum Cell {\n  CONTENT = 0,\n  FG = 1, // currently simply holds all known attrs\n  BG = 2  // currently unused\n}\n\nexport const DEFAULT_ATTR_DATA = Object.freeze(new AttributeData());\n\n/**\n * Typed array based bufferline implementation.\n *\n * There are 2 ways to insert data into the cell buffer:\n * - `setCellFromCodepoint` + `addCodepointToCell`\n *   Use these for data that is already UTF32.\n *   Used during normal input in `InputHandler` for faster buffer access.\n * - `setCell`\n *   This method takes a CellData object and stores the data in the buffer.\n *   Use `CellData.fromCharData` to create the CellData object (e.g. from JS string).\n *\n * To retrieve data from the buffer use either one of the primitive methods\n * (if only one particular value is needed) or `loadCell`. For `loadCell` in a loop\n * memory allocs / GC pressure can be greatly reduced by reusing the CellData object.\n */\nexport class BufferLine implements IBufferLine {\n  protected _data: Uint32Array;\n  protected _combined: {[index: number]: string} = {};\n  protected _extendedAttrs: {[index: number]: ExtendedAttrs} = {};\n  public length: number;\n\n  constructor(cols: number, fillCellData?: ICellData, public isWrapped: boolean = false) {\n    this._data = new Uint32Array(cols * CELL_SIZE);\n    const cell = fillCellData || CellData.fromCharData([0, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE]);\n    for (let i = 0; i < cols; ++i) {\n      this.setCell(i, cell);\n    }\n    this.length = cols;\n  }\n\n  /**\n   * Get cell data CharData.\n   * @deprecated\n   */\n  public get(index: number): CharData {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    const cp = content & Content.CODEPOINT_MASK;\n    return [\n      this._data[index * CELL_SIZE + Cell.FG],\n      (content & Content.IS_COMBINED_MASK)\n        ? this._combined[index]\n        : (cp) ? stringFromCodePoint(cp) : '',\n      content >> Content.WIDTH_SHIFT,\n      (content & Content.IS_COMBINED_MASK)\n        ? this._combined[index].charCodeAt(this._combined[index].length - 1)\n        : cp\n    ];\n  }\n\n  /**\n   * Set cell data from CharData.\n   * @deprecated\n   */\n  public set(index: number, value: CharData): void {\n    this._data[index * CELL_SIZE + Cell.FG] = value[CHAR_DATA_ATTR_INDEX];\n    if (value[CHAR_DATA_CHAR_INDEX].length > 1) {\n      this._combined[index] = value[1];\n      this._data[index * CELL_SIZE + Cell.CONTENT] = index | Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    } else {\n      this._data[index * CELL_SIZE + Cell.CONTENT] = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n\n  /**\n   * primitive getters\n   * use these when only one value is needed, otherwise use `loadCell`\n   */\n  public getWidth(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] >> Content.WIDTH_SHIFT;\n  }\n\n  /** Test whether content has width. */\n  public hasWidth(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.WIDTH_MASK;\n  }\n\n  /** Get FG cell component. */\n  public getFg(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.FG];\n  }\n\n  /** Get BG cell component. */\n  public getBg(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.BG];\n  }\n\n  /**\n   * Test whether contains any chars.\n   * Basically an empty has no content, but other cells might differ in FG/BG\n   * from real empty cells.\n   * */\n  public hasContent(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.HAS_CONTENT_MASK;\n  }\n\n  /**\n   * Get codepoint of the cell.\n   * To be in line with `code` in CharData this either returns\n   * a single UTF32 codepoint or the last codepoint of a combined string.\n   */\n  public getCodePoint(index: number): number {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      return this._combined[index].charCodeAt(this._combined[index].length - 1);\n    }\n    return content & Content.CODEPOINT_MASK;\n  }\n\n  /** Test whether the cell contains a combined string. */\n  public isCombined(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.IS_COMBINED_MASK;\n  }\n\n  /** Returns the string content of the cell. */\n  public getString(index: number): string {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      return this._combined[index];\n    }\n    if (content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(content & Content.CODEPOINT_MASK);\n    }\n    // return empty string for empty cells\n    return '';\n  }\n\n  /**\n   * Load data at `index` into `cell`. This is used to access cells in a way that's more friendly\n   * to GC as it significantly reduced the amount of new objects/references needed.\n   */\n  public loadCell(index: number, cell: ICellData): ICellData {\n    const startIndex = index * CELL_SIZE;\n    cell.content = this._data[startIndex + Cell.CONTENT];\n    cell.fg = this._data[startIndex + Cell.FG];\n    cell.bg = this._data[startIndex + Cell.BG];\n    if (cell.content & Content.IS_COMBINED_MASK) {\n      cell.combinedData = this._combined[index];\n    }\n    if (cell.bg & BgFlags.HAS_EXTENDED) {\n      cell.extended = this._extendedAttrs[index];\n    }\n    return cell;\n  }\n\n  /**\n   * Set data at `index` to `cell`.\n   */\n  public setCell(index: number, cell: ICellData): void {\n    if (cell.content & Content.IS_COMBINED_MASK) {\n      this._combined[index] = cell.combinedData;\n    }\n    if (cell.bg & BgFlags.HAS_EXTENDED) {\n      this._extendedAttrs[index] = cell.extended;\n    }\n    this._data[index * CELL_SIZE + Cell.CONTENT] = cell.content;\n    this._data[index * CELL_SIZE + Cell.FG] = cell.fg;\n    this._data[index * CELL_SIZE + Cell.BG] = cell.bg;\n  }\n\n  /**\n   * Set cell data from input handler.\n   * Since the input handler see the incoming chars as UTF32 codepoints,\n   * it gets an optimized access method.\n   */\n  public setCellFromCodePoint(index: number, codePoint: number, width: number, fg: number, bg: number, eAttrs: IExtendedAttrs): void {\n    if (bg & BgFlags.HAS_EXTENDED) {\n      this._extendedAttrs[index] = eAttrs;\n    }\n    this._data[index * CELL_SIZE + Cell.CONTENT] = codePoint | (width << Content.WIDTH_SHIFT);\n    this._data[index * CELL_SIZE + Cell.FG] = fg;\n    this._data[index * CELL_SIZE + Cell.BG] = bg;\n  }\n\n  /**\n   * Add a codepoint to a cell from input handler.\n   * During input stage combining chars with a width of 0 follow and stack\n   * onto a leading char. Since we already set the attrs\n   * by the previous `setDataFromCodePoint` call, we can omit it here.\n   */\n  public addCodepointToCell(index: number, codePoint: number): void {\n    let content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      // we already have a combined string, simply add\n      this._combined[index] += stringFromCodePoint(codePoint);\n    } else {\n      if (content & Content.CODEPOINT_MASK) {\n        // normal case for combining chars:\n        //  - move current leading char + new one into combined string\n        //  - set combined flag\n        this._combined[index] = stringFromCodePoint(content & Content.CODEPOINT_MASK) + stringFromCodePoint(codePoint);\n        content &= ~Content.CODEPOINT_MASK; // set codepoint in buffer to 0\n        content |= Content.IS_COMBINED_MASK;\n      } else {\n        // should not happen - we actually have no data in the cell yet\n        // simply set the data in the cell buffer with a width of 1\n        content = codePoint | (1 << Content.WIDTH_SHIFT);\n      }\n      this._data[index * CELL_SIZE + Cell.CONTENT] = content;\n    }\n  }\n\n  public insertCells(pos: number, n: number, fillCellData: ICellData, eraseAttr?: IAttributeData): void {\n    pos %= this.length;\n\n    // handle fullwidth at pos: reset cell one to the left if pos is second cell of a wide char\n    if (pos && this.getWidth(pos - 1) === 2) {\n      this.setCellFromCodePoint(pos - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n\n    if (n < this.length - pos) {\n      const cell = new CellData();\n      for (let i = this.length - pos - n - 1; i >= 0; --i) {\n        this.setCell(pos + n + i, this.loadCell(pos + i, cell));\n      }\n      for (let i = 0; i < n; ++i) {\n        this.setCell(pos + i, fillCellData);\n      }\n    } else {\n      for (let i = pos; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    }\n\n    // handle fullwidth at line end: reset last cell if it is first cell of a wide char\n    if (this.getWidth(this.length - 1) === 2) {\n      this.setCellFromCodePoint(this.length - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n  }\n\n  public deleteCells(pos: number, n: number, fillCellData: ICellData, eraseAttr?: IAttributeData): void {\n    pos %= this.length;\n    if (n < this.length - pos) {\n      const cell = new CellData();\n      for (let i = 0; i < this.length - pos - n; ++i) {\n        this.setCell(pos + i, this.loadCell(pos + n + i, cell));\n      }\n      for (let i = this.length - n; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    } else {\n      for (let i = pos; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    }\n\n    // handle fullwidth at pos:\n    // - reset pos-1 if wide char\n    // - reset pos if width==0 (previous second cell of a wide char)\n    if (pos && this.getWidth(pos - 1) === 2) {\n      this.setCellFromCodePoint(pos - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n    if (this.getWidth(pos) === 0 && !this.hasContent(pos)) {\n      this.setCellFromCodePoint(pos, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n  }\n\n  public replaceCells(start: number, end: number, fillCellData: ICellData, eraseAttr?: IAttributeData): void {\n    // handle fullwidth at start: reset cell one to the left if start is second cell of a wide char\n    if (start && this.getWidth(start - 1) === 2) {\n      this.setCellFromCodePoint(start - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n    // handle fullwidth at last cell + 1: reset to empty cell if it is second part of a wide char\n    if (end < this.length && this.getWidth(end - 1) === 2) {\n      this.setCellFromCodePoint(end, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n\n    while (start < end  && start < this.length) {\n      this.setCell(start++, fillCellData);\n    }\n  }\n\n  public resize(cols: number, fillCellData: ICellData): void {\n    if (cols === this.length) {\n      return;\n    }\n    if (cols > this.length) {\n      const data = new Uint32Array(cols * CELL_SIZE);\n      if (this.length) {\n        if (cols * CELL_SIZE < this._data.length) {\n          data.set(this._data.subarray(0, cols * CELL_SIZE));\n        } else {\n          data.set(this._data);\n        }\n      }\n      this._data = data;\n      for (let i = this.length; i < cols; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    } else {\n      if (cols) {\n        const data = new Uint32Array(cols * CELL_SIZE);\n        data.set(this._data.subarray(0, cols * CELL_SIZE));\n        this._data = data;\n        // Remove any cut off combined data, FIXME: repeat this for extended attrs\n        const keys = Object.keys(this._combined);\n        for (let i = 0; i < keys.length; i++) {\n          const key = parseInt(keys[i], 10);\n          if (key >= cols) {\n            delete this._combined[key];\n          }\n        }\n      } else {\n        this._data = new Uint32Array(0);\n        this._combined = {};\n      }\n    }\n    this.length = cols;\n  }\n\n  /** fill a line with fillCharData */\n  public fill(fillCellData: ICellData): void {\n    this._combined = {};\n    this._extendedAttrs = {};\n    for (let i = 0; i < this.length; ++i) {\n      this.setCell(i, fillCellData);\n    }\n  }\n\n  /** alter to a full copy of line  */\n  public copyFrom(line: BufferLine): void {\n    if (this.length !== line.length) {\n      this._data = new Uint32Array(line._data);\n    } else {\n      // use high speed copy if lengths are equal\n      this._data.set(line._data);\n    }\n    this.length = line.length;\n    this._combined = {};\n    for (const el in line._combined) {\n      this._combined[el] = line._combined[el];\n    }\n    this._extendedAttrs = {};\n    for (const el in line._extendedAttrs) {\n      this._extendedAttrs[el] = line._extendedAttrs[el];\n    }\n    this.isWrapped = line.isWrapped;\n  }\n\n  /** create a new clone */\n  public clone(): IBufferLine {\n    const newLine = new BufferLine(0);\n    newLine._data = new Uint32Array(this._data);\n    newLine.length = this.length;\n    for (const el in this._combined) {\n      newLine._combined[el] = this._combined[el];\n    }\n    for (const el in this._extendedAttrs) {\n      newLine._extendedAttrs[el] = this._extendedAttrs[el];\n    }\n    newLine.isWrapped = this.isWrapped;\n    return newLine;\n  }\n\n  public getTrimmedLength(): number {\n    for (let i = this.length - 1; i >= 0; --i) {\n      if ((this._data[i * CELL_SIZE + Cell.CONTENT] & Content.HAS_CONTENT_MASK)) {\n        return i + (this._data[i * CELL_SIZE + Cell.CONTENT] >> Content.WIDTH_SHIFT);\n      }\n    }\n    return 0;\n  }\n\n  public copyCellsFrom(src: BufferLine, srcCol: number, destCol: number, length: number, applyInReverse: boolean): void {\n    const srcData = src._data;\n    if (applyInReverse) {\n      for (let cell = length - 1; cell >= 0; cell--) {\n        for (let i = 0; i < CELL_SIZE; i++) {\n          this._data[(destCol + cell) * CELL_SIZE + i] = srcData[(srcCol + cell) * CELL_SIZE + i];\n        }\n      }\n    } else {\n      for (let cell = 0; cell < length; cell++) {\n        for (let i = 0; i < CELL_SIZE; i++) {\n          this._data[(destCol + cell) * CELL_SIZE + i] = srcData[(srcCol + cell) * CELL_SIZE + i];\n        }\n      }\n    }\n\n    // Move any combined data over as needed, FIXME: repeat for extended attrs\n    const srcCombinedKeys = Object.keys(src._combined);\n    for (let i = 0; i < srcCombinedKeys.length; i++) {\n      const key = parseInt(srcCombinedKeys[i], 10);\n      if (key >= srcCol) {\n        this._combined[key - srcCol + destCol] = src._combined[key];\n      }\n    }\n  }\n\n  public translateToString(trimRight: boolean = false, startCol: number = 0, endCol: number = this.length): string {\n    if (trimRight) {\n      endCol = Math.min(endCol, this.getTrimmedLength());\n    }\n    let result = '';\n    while (startCol < endCol) {\n      const content = this._data[startCol * CELL_SIZE + Cell.CONTENT];\n      const cp = content & Content.CODEPOINT_MASK;\n      result += (content & Content.IS_COMBINED_MASK) ? this._combined[startCol] : (cp) ? stringFromCodePoint(cp) : WHITESPACE_CELL_CHAR;\n      startCol += (content >> Content.WIDTH_SHIFT) || 1; // always advance by 1\n    }\n    return result;\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferRange } from 'xterm';\n\nexport function getRangeLength(range: IBufferRange, bufferCols: number): number {\n  if (range.start.y > range.end.y) {\n    throw new Error(`Buffer range end (${range.end.x}, ${range.end.y}) cannot be before start (${range.start.x}, ${range.start.y})`);\n  }\n  return bufferCols * (range.end.y - range.start.y) + (range.end.x - range.start.x + 1);\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { BufferLine } from 'common/buffer/BufferLine';\nimport { CircularList } from 'common/CircularList';\nimport { IBufferLine, ICellData } from 'common/Types';\n\nexport interface INewLayoutResult {\n  layout: number[];\n  countRemoved: number;\n}\n\n/**\n * Evaluates and returns indexes to be removed after a reflow larger occurs. Lines will be removed\n * when a wrapped line unwraps.\n * @param lines The buffer lines.\n * @param newCols The columns after resize.\n */\nexport function reflowLargerGetLinesToRemove(lines: CircularList<IBufferLine>, oldCols: number, newCols: number, bufferAbsoluteY: number, nullCell: ICellData): number[] {\n  // Gather all BufferLines that need to be removed from the Buffer here so that they can be\n  // batched up and only committed once\n  const toRemove: number[] = [];\n\n  for (let y = 0; y < lines.length - 1; y++) {\n    // Check if this row is wrapped\n    let i = y;\n    let nextLine = lines.get(++i) as BufferLine;\n    if (!nextLine.isWrapped) {\n      continue;\n    }\n\n    // Check how many lines it's wrapped for\n    const wrappedLines: BufferLine[] = [lines.get(y) as BufferLine];\n    while (i < lines.length && nextLine.isWrapped) {\n      wrappedLines.push(nextLine);\n      nextLine = lines.get(++i) as BufferLine;\n    }\n\n    // If these lines contain the cursor don't touch them, the program will handle fixing up wrapped\n    // lines with the cursor\n    if (bufferAbsoluteY >= y && bufferAbsoluteY < i) {\n      y += wrappedLines.length - 1;\n      continue;\n    }\n\n    // Copy buffer data to new locations\n    let destLineIndex = 0;\n    let destCol = getWrappedLineTrimmedLength(wrappedLines, destLineIndex, oldCols);\n    let srcLineIndex = 1;\n    let srcCol = 0;\n    while (srcLineIndex < wrappedLines.length) {\n      const srcTrimmedTineLength = getWrappedLineTrimmedLength(wrappedLines, srcLineIndex, oldCols);\n      const srcRemainingCells = srcTrimmedTineLength - srcCol;\n      const destRemainingCells = newCols - destCol;\n      const cellsToCopy = Math.min(srcRemainingCells, destRemainingCells);\n\n      wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[srcLineIndex], srcCol, destCol, cellsToCopy, false);\n\n      destCol += cellsToCopy;\n      if (destCol === newCols) {\n        destLineIndex++;\n        destCol = 0;\n      }\n      srcCol += cellsToCopy;\n      if (srcCol === srcTrimmedTineLength) {\n        srcLineIndex++;\n        srcCol = 0;\n      }\n\n      // Make sure the last cell isn't wide, if it is copy it to the current dest\n      if (destCol === 0 && destLineIndex !== 0) {\n        if (wrappedLines[destLineIndex - 1].getWidth(newCols - 1) === 2) {\n          wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[destLineIndex - 1], newCols - 1, destCol++, 1, false);\n          // Null out the end of the last row\n          wrappedLines[destLineIndex - 1].setCell(newCols - 1, nullCell);\n        }\n      }\n    }\n\n    // Clear out remaining cells or fragments could remain;\n    wrappedLines[destLineIndex].replaceCells(destCol, newCols, nullCell);\n\n    // Work backwards and remove any rows at the end that only contain null cells\n    let countToRemove = 0;\n    for (let i = wrappedLines.length - 1; i > 0; i--) {\n      if (i > destLineIndex || wrappedLines[i].getTrimmedLength() === 0) {\n        countToRemove++;\n      } else {\n        break;\n      }\n    }\n\n    if (countToRemove > 0) {\n      toRemove.push(y + wrappedLines.length - countToRemove); // index\n      toRemove.push(countToRemove);\n    }\n\n    y += wrappedLines.length - 1;\n  }\n  return toRemove;\n}\n\n/**\n * Creates and return the new layout for lines given an array of indexes to be removed.\n * @param lines The buffer lines.\n * @param toRemove The indexes to remove.\n */\nexport function reflowLargerCreateNewLayout(lines: CircularList<IBufferLine>, toRemove: number[]): INewLayoutResult {\n  const layout: number[] = [];\n  // First iterate through the list and get the actual indexes to use for rows\n  let nextToRemoveIndex = 0;\n  let nextToRemoveStart = toRemove[nextToRemoveIndex];\n  let countRemovedSoFar = 0;\n  for (let i = 0; i < lines.length; i++) {\n    if (nextToRemoveStart === i) {\n      const countToRemove = toRemove[++nextToRemoveIndex];\n\n      // Tell markers that there was a deletion\n      lines.onDeleteEmitter.fire({\n        index: i - countRemovedSoFar,\n        amount: countToRemove\n      });\n\n      i += countToRemove - 1;\n      countRemovedSoFar += countToRemove;\n      nextToRemoveStart = toRemove[++nextToRemoveIndex];\n    } else {\n      layout.push(i);\n    }\n  }\n  return {\n    layout,\n    countRemoved: countRemovedSoFar\n  };\n}\n\n/**\n * Applies a new layout to the buffer. This essentially does the same as many splice calls but it's\n * done all at once in a single iteration through the list since splice is very expensive.\n * @param lines The buffer lines.\n * @param newLayout The new layout to apply.\n */\nexport function reflowLargerApplyNewLayout(lines: CircularList<IBufferLine>, newLayout: number[]): void {\n  // Record original lines so they don't get overridden when we rearrange the list\n  const newLayoutLines: BufferLine[] = [];\n  for (let i = 0; i < newLayout.length; i++) {\n    newLayoutLines.push(lines.get(newLayout[i]) as BufferLine);\n  }\n\n  // Rearrange the list\n  for (let i = 0; i < newLayoutLines.length; i++) {\n    lines.set(i, newLayoutLines[i]);\n  }\n  lines.length = newLayout.length;\n}\n\n/**\n * Gets the new line lengths for a given wrapped line. The purpose of this function it to pre-\n * compute the wrapping points since wide characters may need to be wrapped onto the following line.\n * This function will return an array of numbers of where each line wraps to, the resulting array\n * will only contain the values `newCols` (when the line does not end with a wide character) and\n * `newCols - 1` (when the line does end with a wide character), except for the last value which\n * will contain the remaining items to fill the line.\n *\n * Calling this with a `newCols` value of `1` will lock up.\n *\n * @param wrappedLines The wrapped lines to evaluate.\n * @param oldCols The columns before resize.\n * @param newCols The columns after resize.\n */\nexport function reflowSmallerGetNewLineLengths(wrappedLines: BufferLine[], oldCols: number, newCols: number): number[] {\n  const newLineLengths: number[] = [];\n  const cellsNeeded = wrappedLines.map((l, i) => getWrappedLineTrimmedLength(wrappedLines, i, oldCols)).reduce((p, c) => p + c);\n\n  // Use srcCol and srcLine to find the new wrapping point, use that to get the cellsAvailable and\n  // linesNeeded\n  let srcCol = 0;\n  let srcLine = 0;\n  let cellsAvailable = 0;\n  while (cellsAvailable < cellsNeeded) {\n    if (cellsNeeded - cellsAvailable < newCols) {\n      // Add the final line and exit the loop\n      newLineLengths.push(cellsNeeded - cellsAvailable);\n      break;\n    }\n    srcCol += newCols;\n    const oldTrimmedLength = getWrappedLineTrimmedLength(wrappedLines, srcLine, oldCols);\n    if (srcCol > oldTrimmedLength) {\n      srcCol -= oldTrimmedLength;\n      srcLine++;\n    }\n    const endsWithWide = wrappedLines[srcLine].getWidth(srcCol - 1) === 2;\n    if (endsWithWide) {\n      srcCol--;\n    }\n    const lineLength = endsWithWide ? newCols - 1 : newCols;\n    newLineLengths.push(lineLength);\n    cellsAvailable += lineLength;\n  }\n\n  return newLineLengths;\n}\n\nexport function getWrappedLineTrimmedLength(lines: BufferLine[], i: number, cols: number): number {\n  // If this is the last row in the wrapped line, get the actual trimmed length\n  if (i === lines.length - 1) {\n    return lines[i].getTrimmedLength();\n  }\n  // Detect whether the following line starts with a wide character and the end of the current line\n  // is null, if so then we can be pretty sure the null character should be excluded from the line\n  // length]\n  const endsInNull = !(lines[i].hasContent(cols - 1)) && lines[i].getWidth(cols - 1) === 1;\n  const followingLineStartsWithWide = lines[i + 1].getWidth(0) === 2;\n  if (endsInNull && followingLineStartsWithWide) {\n    return cols - 1;\n  }\n  return cols;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer, IBufferSet } from 'common/buffer/Types';\nimport { IAttributeData } from 'common/Types';\nimport { Buffer } from 'common/buffer/Buffer';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { IOptionsService, IBufferService } from 'common/services/Services';\nimport { Disposable } from 'common/Lifecycle';\n\n/**\n * The BufferSet represents the set of two buffers used by xterm terminals (normal and alt) and\n * provides also utilities for working with them.\n */\nexport class BufferSet extends Disposable implements IBufferSet {\n  private _normal!: Buffer;\n  private _alt!: Buffer;\n  private _activeBuffer!: Buffer;\n\n  private _onBufferActivate = this.register(new EventEmitter<{activeBuffer: IBuffer, inactiveBuffer: IBuffer}>());\n  public get onBufferActivate(): IEvent<{activeBuffer: IBuffer, inactiveBuffer: IBuffer}> { return this._onBufferActivate.event; }\n\n  /**\n   * Create a new BufferSet for the given terminal.\n   * @param _terminal - The terminal the BufferSet will belong to\n   */\n  constructor(\n    private readonly _optionsService: IOptionsService,\n    private readonly _bufferService: IBufferService\n  ) {\n    super();\n    this.reset();\n  }\n\n  public reset(): void {\n    this._normal = new Buffer(true, this._optionsService, this._bufferService);\n    this._normal.fillViewportRows();\n\n    // The alt buffer should never have scrollback.\n    // See http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-The-Alternate-Screen-Buffer\n    this._alt = new Buffer(false, this._optionsService, this._bufferService);\n    this._activeBuffer = this._normal;\n    this._onBufferActivate.fire({\n      activeBuffer: this._normal,\n      inactiveBuffer: this._alt\n    });\n\n    this.setupTabStops();\n  }\n\n  /**\n   * Returns the alt Buffer of the BufferSet\n   */\n  public get alt(): Buffer {\n    return this._alt;\n  }\n\n  /**\n   * Returns the normal Buffer of the BufferSet\n   */\n  public get active(): Buffer {\n    return this._activeBuffer;\n  }\n\n  /**\n   * Returns the currently active Buffer of the BufferSet\n   */\n  public get normal(): Buffer {\n    return this._normal;\n  }\n\n  /**\n   * Sets the normal Buffer of the BufferSet as its currently active Buffer\n   */\n  public activateNormalBuffer(): void {\n    if (this._activeBuffer === this._normal) {\n      return;\n    }\n    this._normal.x = this._alt.x;\n    this._normal.y = this._alt.y;\n    // The alt buffer should always be cleared when we switch to the normal\n    // buffer. This frees up memory since the alt buffer should always be new\n    // when activated.\n    this._alt.clear();\n    this._activeBuffer = this._normal;\n    this._onBufferActivate.fire({\n      activeBuffer: this._normal,\n      inactiveBuffer: this._alt\n    });\n  }\n\n  /**\n   * Sets the alt Buffer of the BufferSet as its currently active Buffer\n   */\n  public activateAltBuffer(fillAttr?: IAttributeData): void {\n    if (this._activeBuffer === this._alt) {\n      return;\n    }\n    // Since the alt buffer is always cleared when the normal buffer is\n    // activated, we want to fill it when switching to it.\n    this._alt.fillViewportRows(fillAttr);\n    this._alt.x = this._normal.x;\n    this._alt.y = this._normal.y;\n    this._activeBuffer = this._alt;\n    this._onBufferActivate.fire({\n      activeBuffer: this._alt,\n      inactiveBuffer: this._normal\n    });\n  }\n\n  /**\n   * Resizes both normal and alt buffers, adjusting their data accordingly.\n   * @param newCols The new number of columns.\n   * @param newRows The new number of rows.\n   */\n  public resize(newCols: number, newRows: number): void {\n    this._normal.resize(newCols, newRows);\n    this._alt.resize(newCols, newRows);\n  }\n\n  /**\n   * Setup the tab stops.\n   * @param i The index to start setting up tab stops from.\n   */\n  public setupTabStops(i?: number): void {\n    this._normal.setupTabStops(i);\n    this._alt.setupTabStops(i);\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, ICellData, IExtendedAttrs } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, Content } from 'common/buffer/Constants';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\n\n/**\n * CellData - represents a single Cell in the terminal buffer.\n */\nexport class CellData extends AttributeData implements ICellData {\n  /** Helper to create CellData from CharData. */\n  public static fromCharData(value: CharData): CellData {\n    const obj = new CellData();\n    obj.setFromCharData(value);\n    return obj;\n  }\n  /** Primitives from terminal buffer. */\n  public content = 0;\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n  public combinedData = '';\n  /** Whether cell contains a combined string. */\n  public isCombined(): number {\n    return this.content & Content.IS_COMBINED_MASK;\n  }\n  /** Width of the cell. */\n  public getWidth(): number {\n    return this.content >> Content.WIDTH_SHIFT;\n  }\n  /** JS string of the content. */\n  public getChars(): string {\n    if (this.content & Content.IS_COMBINED_MASK) {\n      return this.combinedData;\n    }\n    if (this.content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(this.content & Content.CODEPOINT_MASK);\n    }\n    return '';\n  }\n  /**\n   * Codepoint of cell\n   * Note this returns the UTF32 codepoint of single chars,\n   * if content is a combined string it returns the codepoint\n   * of the last char in string to be in line with code in CharData.\n   * */\n  public getCode(): number {\n    return (this.isCombined())\n      ? this.combinedData.charCodeAt(this.combinedData.length - 1)\n      : this.content & Content.CODEPOINT_MASK;\n  }\n  /** Set data from CharData */\n  public setFromCharData(value: CharData): void {\n    this.fg = value[CHAR_DATA_ATTR_INDEX];\n    this.bg = 0;\n    let combined = false;\n    // surrogates and combined strings need special treatment\n    if (value[CHAR_DATA_CHAR_INDEX].length > 2) {\n      combined = true;\n    }\n    else if (value[CHAR_DATA_CHAR_INDEX].length === 2) {\n      const code = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0);\n      // if the 2-char string is a surrogate create single codepoint\n      // everything else is combined\n      if (0xD800 <= code && code <= 0xDBFF) {\n        const second = value[CHAR_DATA_CHAR_INDEX].charCodeAt(1);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          this.content = ((code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n        }\n        else {\n          combined = true;\n        }\n      }\n      else {\n        combined = true;\n      }\n    }\n    else {\n      this.content = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n    if (combined) {\n      this.combinedData = value[CHAR_DATA_CHAR_INDEX];\n      this.content = Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n  /** Get data as CharData. */\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const DEFAULT_COLOR = 256;\nexport const DEFAULT_ATTR = (0 << 18) | (DEFAULT_COLOR << 9) | (256 << 0);\n\nexport const CHAR_DATA_ATTR_INDEX = 0;\nexport const CHAR_DATA_CHAR_INDEX = 1;\nexport const CHAR_DATA_WIDTH_INDEX = 2;\nexport const CHAR_DATA_CODE_INDEX = 3;\n\n/**\n * Null cell - a real empty cell (containing nothing).\n * Note that code should always be 0 for a null cell as\n * several test condition of the buffer line rely on this.\n */\nexport const NULL_CELL_CHAR = '';\nexport const NULL_CELL_WIDTH = 1;\nexport const NULL_CELL_CODE = 0;\n\n/**\n * Whitespace cell.\n * This is meant as a replacement for empty cells when needed\n * during rendering lines to preserve correct aligment.\n */\nexport const WHITESPACE_CELL_CHAR = ' ';\nexport const WHITESPACE_CELL_WIDTH = 1;\nexport const WHITESPACE_CELL_CODE = 32;\n\n/**\n * Bitmasks for accessing data in `content`.\n */\nexport const enum Content {\n  /**\n   * bit 1..21    codepoint, max allowed in UTF32 is 0x10FFFF (21 bits taken)\n   *              read:   `codepoint = content & Content.codepointMask;`\n   *              write:  `content |= codepoint & Content.codepointMask;`\n   *                      shortcut if precondition `codepoint <= 0x10FFFF` is met:\n   *                      `content |= codepoint;`\n   */\n  CODEPOINT_MASK = 0x1FFFFF,\n\n  /**\n   * bit 22       flag indication whether a cell contains combined content\n   *              read:   `isCombined = content & Content.isCombined;`\n   *              set:    `content |= Content.isCombined;`\n   *              clear:  `content &= ~Content.isCombined;`\n   */\n  IS_COMBINED_MASK = 0x200000,  // 1 << 21\n\n  /**\n   * bit 1..22    mask to check whether a cell contains any string data\n   *              we need to check for codepoint and isCombined bits to see\n   *              whether a cell contains anything\n   *              read:   `isEmpty = !(content & Content.hasContent)`\n   */\n  HAS_CONTENT_MASK = 0x3FFFFF,\n\n  /**\n   * bit 23..24   wcwidth value of cell, takes 2 bits (ranges from 0..2)\n   *              read:   `width = (content & Content.widthMask) >> Content.widthShift;`\n   *                      `hasWidth = content & Content.widthMask;`\n   *                      as long as wcwidth is highest value in `content`:\n   *                      `width = content >> Content.widthShift;`\n   *              write:  `content |= (width << Content.widthShift) & Content.widthMask;`\n   *                      shortcut if precondition `0 <= width <= 3` is met:\n   *                      `content |= width << Content.widthShift;`\n   */\n  WIDTH_MASK = 0xC00000,   // 3 << 22\n  WIDTH_SHIFT = 22\n}\n\nexport const enum Attributes {\n  /**\n   * bit 1..8     blue in RGB, color in P256 and P16\n   */\n  BLUE_MASK = 0xFF,\n  BLUE_SHIFT = 0,\n  PCOLOR_MASK = 0xFF,\n  PCOLOR_SHIFT = 0,\n\n  /**\n   * bit 9..16    green in RGB\n   */\n  GREEN_MASK = 0xFF00,\n  GREEN_SHIFT = 8,\n\n  /**\n   * bit 17..24   red in RGB\n   */\n  RED_MASK = 0xFF0000,\n  RED_SHIFT = 16,\n\n  /**\n   * bit 25..26   color mode: DEFAULT (0) | P16 (1) | P256 (2) | RGB (3)\n   */\n  CM_MASK = 0x3000000,\n  CM_DEFAULT = 0,\n  CM_P16 = 0x1000000,\n  CM_P256 = 0x2000000,\n  CM_RGB = 0x3000000,\n\n  /**\n   * bit 1..24  RGB room\n   */\n  RGB_MASK = 0xFFFFFF\n}\n\nexport const enum FgFlags {\n  /**\n   * bit 27..32\n   */\n  INVERSE = 0x4000000,\n  BOLD = 0x8000000,\n  UNDERLINE = 0x10000000,\n  BLINK = 0x20000000,\n  INVISIBLE = 0x40000000,\n  STRIKETHROUGH = 0x80000000,\n}\n\nexport const enum BgFlags {\n  /**\n   * bit 27..32 (upper 3 unused)\n   */\n  ITALIC = 0x4000000,\n  DIM = 0x8000000,\n  HAS_EXTENDED = 0x10000000\n}\n\nexport const enum UnderlineStyle {\n  NONE = 0,\n  SINGLE = 1,\n  DOUBLE = 2,\n  CURLY = 3,\n  DOTTED = 4,\n  DASHED = 5\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IMarker } from 'common/Types';\n\nexport class Marker extends Disposable implements IMarker {\n  private static _nextId = 1;\n\n  private _id: number = Marker._nextId++;\n  public isDisposed: boolean = false;\n\n  public get id(): number { return this._id; }\n\n  private _onDispose = new EventEmitter<void>();\n  public get onDispose(): IEvent<void> { return this._onDispose.event; }\n\n  constructor(\n    public line: number\n  ) {\n    super();\n  }\n\n  public dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this.isDisposed = true;\n    this.line = -1;\n    // Emit before super.dispose such that dispose listeners get a change to react\n    this._onDispose.fire();\n    super.dispose();\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharset } from 'common/Types';\n\n/**\n * The character sets supported by the terminal. These enable several languages\n * to be represented within the terminal with only 8-bit encoding. See ISO 2022\n * for a discussion on character sets. Only VT100 character sets are supported.\n */\nexport const CHARSETS: { [key: string]: ICharset | undefined } = {};\n\n/**\n * The default character set, US.\n */\nexport const DEFAULT_CHARSET: ICharset | undefined = CHARSETS['B'];\n\n/**\n * DEC Special Character and Line Drawing Set.\n * Reference: http://vt100.net/docs/vt102-ug/table5-13.html\n * A lot of curses apps use this if they see TERM=xterm.\n * testing: echo -e '\\e(0a\\e(B'\n * The xterm output sometimes seems to conflict with the\n * reference above. xterm seems in line with the reference\n * when running vttest however.\n * The table below now uses xterm's output from vttest.\n */\nCHARSETS['0'] = {\n  '`': '\\u25c6', // '◆'\n  'a': '\\u2592', // '▒'\n  'b': '\\u2409', // '␉' (HT)\n  'c': '\\u240c', // '␌' (FF)\n  'd': '\\u240d', // '␍' (CR)\n  'e': '\\u240a', // '␊' (LF)\n  'f': '\\u00b0', // '°'\n  'g': '\\u00b1', // '±'\n  'h': '\\u2424', // '␤' (NL)\n  'i': '\\u240b', // '␋' (VT)\n  'j': '\\u2518', // '┘'\n  'k': '\\u2510', // '┐'\n  'l': '\\u250c', // '┌'\n  'm': '\\u2514', // '└'\n  'n': '\\u253c', // '┼'\n  'o': '\\u23ba', // '⎺'\n  'p': '\\u23bb', // '⎻'\n  'q': '\\u2500', // '─'\n  'r': '\\u23bc', // '⎼'\n  's': '\\u23bd', // '⎽'\n  't': '\\u251c', // '├'\n  'u': '\\u2524', // '┤'\n  'v': '\\u2534', // '┴'\n  'w': '\\u252c', // '┬'\n  'x': '\\u2502', // '│'\n  'y': '\\u2264', // '≤'\n  'z': '\\u2265', // '≥'\n  '{': '\\u03c0', // 'π'\n  '|': '\\u2260', // '≠'\n  '}': '\\u00a3', // '£'\n  '~': '\\u00b7'  // '·'\n};\n\n/**\n * British character set\n * ESC (A\n * Reference: http://vt100.net/docs/vt220-rm/table2-5.html\n */\nCHARSETS['A'] = {\n  '#': '£'\n};\n\n/**\n * United States character set\n * ESC (B\n */\nCHARSETS['B'] = undefined;\n\n/**\n * Dutch character set\n * ESC (4\n * Reference: http://vt100.net/docs/vt220-rm/table2-6.html\n */\nCHARSETS['4'] = {\n  '#': '£',\n  '@': '¾',\n  '[': 'ij',\n  '\\\\': '½',\n  ']': '|',\n  '{': '¨',\n  '|': 'f',\n  '}': '¼',\n  '~': '´'\n};\n\n/**\n * Finnish character set\n * ESC (C or ESC (5\n * Reference: http://vt100.net/docs/vt220-rm/table2-7.html\n */\nCHARSETS['C'] =\nCHARSETS['5'] = {\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'é',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * French character set\n * ESC (R\n * Reference: http://vt100.net/docs/vt220-rm/table2-8.html\n */\nCHARSETS['R'] = {\n  '#': '£',\n  '@': 'à',\n  '[': '°',\n  '\\\\': 'ç',\n  ']': '§',\n  '{': 'é',\n  '|': 'ù',\n  '}': 'è',\n  '~': '¨'\n};\n\n/**\n * French Canadian character set\n * ESC (Q\n * Reference: http://vt100.net/docs/vt220-rm/table2-9.html\n */\nCHARSETS['Q'] = {\n  '@': 'à',\n  '[': 'â',\n  '\\\\': 'ç',\n  ']': 'ê',\n  '^': 'î',\n  '`': 'ô',\n  '{': 'é',\n  '|': 'ù',\n  '}': 'è',\n  '~': 'û'\n};\n\n/**\n * German character set\n * ESC (K\n * Reference: http://vt100.net/docs/vt220-rm/table2-10.html\n */\nCHARSETS['K'] = {\n  '@': '§',\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Ü',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'ü',\n  '~': 'ß'\n};\n\n/**\n * Italian character set\n * ESC (Y\n * Reference: http://vt100.net/docs/vt220-rm/table2-11.html\n */\nCHARSETS['Y'] = {\n  '#': '£',\n  '@': '§',\n  '[': '°',\n  '\\\\': 'ç',\n  ']': 'é',\n  '`': 'ù',\n  '{': 'à',\n  '|': 'ò',\n  '}': 'è',\n  '~': 'ì'\n};\n\n/**\n * Norwegian/Danish character set\n * ESC (E or ESC (6\n * Reference: http://vt100.net/docs/vt220-rm/table2-12.html\n */\nCHARSETS['E'] =\nCHARSETS['6'] = {\n  '@': 'Ä',\n  '[': 'Æ',\n  '\\\\': 'Ø',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'ä',\n  '{': 'æ',\n  '|': 'ø',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * Spanish character set\n * ESC (Z\n * Reference: http://vt100.net/docs/vt220-rm/table2-13.html\n */\nCHARSETS['Z'] = {\n  '#': '£',\n  '@': '§',\n  '[': '¡',\n  '\\\\': 'Ñ',\n  ']': '¿',\n  '{': '°',\n  '|': 'ñ',\n  '}': 'ç'\n};\n\n/**\n * Swedish character set\n * ESC (H or ESC (7\n * Reference: http://vt100.net/docs/vt220-rm/table2-14.html\n */\nCHARSETS['H'] =\nCHARSETS['7'] = {\n  '@': 'É',\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'é',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * Swiss character set\n * ESC (=\n * Reference: http://vt100.net/docs/vt220-rm/table2-15.html\n */\nCHARSETS['='] = {\n  '#': 'ù',\n  '@': 'à',\n  '[': 'é',\n  '\\\\': 'ç',\n  ']': 'ê',\n  '^': 'î',\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  '_': 'è',\n  '`': 'ô',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'ü',\n  '~': 'û'\n};\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * C0 control codes\n * See = https://en.wikipedia.org/wiki/C0_and_C1_control_codes\n */\nexport namespace C0 {\n  /** Null (Caret = ^@, C = \\0) */\n  export const NUL = '\\x00';\n  /** Start of Heading (Caret = ^A) */\n  export const SOH = '\\x01';\n  /** Start of Text (Caret = ^B) */\n  export const STX = '\\x02';\n  /** End of Text (Caret = ^C) */\n  export const ETX = '\\x03';\n  /** End of Transmission (Caret = ^D) */\n  export const EOT = '\\x04';\n  /** Enquiry (Caret = ^E) */\n  export const ENQ = '\\x05';\n  /** Acknowledge (Caret = ^F) */\n  export const ACK = '\\x06';\n  /** Bell (Caret = ^G, C = \\a) */\n  export const BEL = '\\x07';\n  /** Backspace (Caret = ^H, C = \\b) */\n  export const BS  = '\\x08';\n  /** Character Tabulation, Horizontal Tabulation (Caret = ^I, C = \\t) */\n  export const HT  = '\\x09';\n  /** Line Feed (Caret = ^J, C = \\n) */\n  export const LF  = '\\x0a';\n  /** Line Tabulation, Vertical Tabulation (Caret = ^K, C = \\v) */\n  export const VT  = '\\x0b';\n  /** Form Feed (Caret = ^L, C = \\f) */\n  export const FF  = '\\x0c';\n  /** Carriage Return (Caret = ^M, C = \\r) */\n  export const CR  = '\\x0d';\n  /** Shift Out (Caret = ^N) */\n  export const SO  = '\\x0e';\n  /** Shift In (Caret = ^O) */\n  export const SI  = '\\x0f';\n  /** Data Link Escape (Caret = ^P) */\n  export const DLE = '\\x10';\n  /** Device Control One (XON) (Caret = ^Q) */\n  export const DC1 = '\\x11';\n  /** Device Control Two (Caret = ^R) */\n  export const DC2 = '\\x12';\n  /** Device Control Three (XOFF) (Caret = ^S) */\n  export const DC3 = '\\x13';\n  /** Device Control Four (Caret = ^T) */\n  export const DC4 = '\\x14';\n  /** Negative Acknowledge (Caret = ^U) */\n  export const NAK = '\\x15';\n  /** Synchronous Idle (Caret = ^V) */\n  export const SYN = '\\x16';\n  /** End of Transmission Block (Caret = ^W) */\n  export const ETB = '\\x17';\n  /** Cancel (Caret = ^X) */\n  export const CAN = '\\x18';\n  /** End of Medium (Caret = ^Y) */\n  export const EM  = '\\x19';\n  /** Substitute (Caret = ^Z) */\n  export const SUB = '\\x1a';\n  /** Escape (Caret = ^[, C = \\e) */\n  export const ESC = '\\x1b';\n  /** File Separator (Caret = ^\\) */\n  export const FS  = '\\x1c';\n  /** Group Separator (Caret = ^]) */\n  export const GS  = '\\x1d';\n  /** Record Separator (Caret = ^^) */\n  export const RS  = '\\x1e';\n  /** Unit Separator (Caret = ^_) */\n  export const US  = '\\x1f';\n  /** Space */\n  export const SP  = '\\x20';\n  /** Delete (Caret = ^?) */\n  export const DEL = '\\x7f';\n}\n\n/**\n * C1 control codes\n * See = https://en.wikipedia.org/wiki/C0_and_C1_control_codes\n */\nexport namespace C1 {\n  /** padding character */\n  export const PAD = '\\x80';\n  /** High Octet Preset */\n  export const HOP = '\\x81';\n  /** Break Permitted Here */\n  export const BPH = '\\x82';\n  /** No Break Here */\n  export const NBH = '\\x83';\n  /** Index */\n  export const IND = '\\x84';\n  /** Next Line */\n  export const NEL = '\\x85';\n  /** Start of Selected Area */\n  export const SSA = '\\x86';\n  /** End of Selected Area */\n  export const ESA = '\\x87';\n  /** Horizontal Tabulation Set */\n  export const HTS = '\\x88';\n  /** Horizontal Tabulation With Justification */\n  export const HTJ = '\\x89';\n  /** Vertical Tabulation Set */\n  export const VTS = '\\x8a';\n  /** Partial Line Down */\n  export const PLD = '\\x8b';\n  /** Partial Line Up */\n  export const PLU = '\\x8c';\n  /** Reverse Index */\n  export const RI = '\\x8d';\n  /** Single-Shift 2 */\n  export const SS2 = '\\x8e';\n  /** Single-Shift 3 */\n  export const SS3 = '\\x8f';\n  /** Device Control String */\n  export const DCS = '\\x90';\n  /** Private Use 1 */\n  export const PU1 = '\\x91';\n  /** Private Use 2 */\n  export const PU2 = '\\x92';\n  /** Set Transmit State */\n  export const STS = '\\x93';\n  /** Destructive backspace, intended to eliminate ambiguity about meaning of BS. */\n  export const CCH = '\\x94';\n  /** Message Waiting */\n  export const MW = '\\x95';\n  /** Start of Protected Area */\n  export const SPA = '\\x96';\n  /** End of Protected Area */\n  export const EPA = '\\x97';\n  /** Start of String */\n  export const SOS = '\\x98';\n  /** Single Graphic Character Introducer */\n  export const SGCI = '\\x99';\n  /** Single Character Introducer */\n  export const SCI = '\\x9a';\n  /** Control Sequence Introducer */\n  export const CSI = '\\x9b';\n  /** String Terminator */\n  export const ST = '\\x9c';\n  /** Operating System Command */\n  export const OSC = '\\x9d';\n  /** Privacy Message */\n  export const PM = '\\x9e';\n  /** Application Program Command */\n  export const APC = '\\x9f';\n}\nexport namespace C1_ESCAPED {\n  export const ST = `${C0.ESC}\\\\`;\n}\n", "/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n */\n\nimport { IKeyboardEvent, IKeyboardResult, KeyboardResultType } from 'common/Types';\nimport { C0 } from 'common/data/EscapeSequences';\n\n// reg + shift key mappings for digits and special chars\nconst KEYCODE_KEY_MAPPINGS: { [key: number]: [string, string]} = {\n  // digits 0-9\n  48: ['0', ')'],\n  49: ['1', '!'],\n  50: ['2', '@'],\n  51: ['3', '#'],\n  52: ['4', '$'],\n  53: ['5', '%'],\n  54: ['6', '^'],\n  55: ['7', '&'],\n  56: ['8', '*'],\n  57: ['9', '('],\n\n  // special chars\n  186: [';', ':'],\n  187: ['=', '+'],\n  188: [',', '<'],\n  189: ['-', '_'],\n  190: ['.', '>'],\n  191: ['/', '?'],\n  192: ['`', '~'],\n  219: ['[', '{'],\n  220: ['\\\\', '|'],\n  221: [']', '}'],\n  222: ['\\'', '\"']\n};\n\nexport function evaluateKeyboardEvent(\n  ev: IKeyboardEvent,\n  applicationCursorMode: boolean,\n  isMac: boolean,\n  macOptionIsMeta: boolean\n): IKeyboardResult {\n  const result: IKeyboardResult = {\n    type: KeyboardResultType.SEND_KEY,\n    // Whether to cancel event propagation (NOTE: this may not be needed since the event is\n    // canceled at the end of keyDown\n    cancel: false,\n    // The new key even to emit\n    key: undefined\n  };\n  const modifiers = (ev.shiftKey ? 1 : 0) | (ev.altKey ? 2 : 0) | (ev.ctrlKey ? 4 : 0) | (ev.metaKey ? 8 : 0);\n  switch (ev.keyCode) {\n    case 0:\n      if (ev.key === 'UIKeyInputUpArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OA';\n        } else {\n          result.key = C0.ESC + '[A';\n        }\n      }\n      else if (ev.key === 'UIKeyInputLeftArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OD';\n        } else {\n          result.key = C0.ESC + '[D';\n        }\n      }\n      else if (ev.key === 'UIKeyInputRightArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OC';\n        } else {\n          result.key = C0.ESC + '[C';\n        }\n      }\n      else if (ev.key === 'UIKeyInputDownArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OB';\n        } else {\n          result.key = C0.ESC + '[B';\n        }\n      }\n      break;\n    case 8:\n      // backspace\n      if (ev.shiftKey) {\n        result.key = C0.BS; // ^H\n        break;\n      } else if (ev.altKey) {\n        result.key = C0.ESC + C0.DEL; // \\e ^?\n        break;\n      }\n      result.key = C0.DEL; // ^?\n      break;\n    case 9:\n      // tab\n      if (ev.shiftKey) {\n        result.key = C0.ESC + '[Z';\n        break;\n      }\n      result.key = C0.HT;\n      result.cancel = true;\n      break;\n    case 13:\n      // return/enter\n      result.key = ev.altKey ? C0.ESC + C0.CR : C0.CR;\n      result.cancel = true;\n      break;\n    case 27:\n      // escape\n      result.key = C0.ESC;\n      if (ev.altKey) {\n        result.key = C0.ESC + C0.ESC;\n      }\n      result.cancel = true;\n      break;\n    case 37:\n      // left-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'D';\n        // HACK: Make Alt + left-arrow behave like Ctrl + left-arrow: move one word backwards\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (result.key === C0.ESC + '[1;3D') {\n          result.key = C0.ESC + (isMac ? 'b' : '[1;5D');\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OD';\n      } else {\n        result.key = C0.ESC + '[D';\n      }\n      break;\n    case 39:\n      // right-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'C';\n        // HACK: Make Alt + right-arrow behave like Ctrl + right-arrow: move one word forward\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (result.key === C0.ESC + '[1;3C') {\n          result.key = C0.ESC + (isMac ? 'f' : '[1;5C');\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OC';\n      } else {\n        result.key = C0.ESC + '[C';\n      }\n      break;\n    case 38:\n      // up-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'A';\n        // HACK: Make Alt + up-arrow behave like Ctrl + up-arrow\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (!isMac && result.key === C0.ESC + '[1;3A') {\n          result.key = C0.ESC + '[1;5A';\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OA';\n      } else {\n        result.key = C0.ESC + '[A';\n      }\n      break;\n    case 40:\n      // down-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'B';\n        // HACK: Make Alt + down-arrow behave like Ctrl + down-arrow\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (!isMac && result.key === C0.ESC + '[1;3B') {\n          result.key = C0.ESC + '[1;5B';\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OB';\n      } else {\n        result.key = C0.ESC + '[B';\n      }\n      break;\n    case 45:\n      // insert\n      if (!ev.shiftKey && !ev.ctrlKey) {\n        // <Ctrl> or <Shift> + <Insert> are used to\n        // copy-paste on some systems.\n        result.key = C0.ESC + '[2~';\n      }\n      break;\n    case 46:\n      // delete\n      if (modifiers) {\n        result.key = C0.ESC + '[3;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[3~';\n      }\n      break;\n    case 36:\n      // home\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'H';\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OH';\n      } else {\n        result.key = C0.ESC + '[H';\n      }\n      break;\n    case 35:\n      // end\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'F';\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OF';\n      } else {\n        result.key = C0.ESC + '[F';\n      }\n      break;\n    case 33:\n      // page up\n      if (ev.shiftKey) {\n        result.type = KeyboardResultType.PAGE_UP;\n      } else if (ev.ctrlKey) {\n        result.key = C0.ESC + '[5;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[5~';\n      }\n      break;\n    case 34:\n      // page down\n      if (ev.shiftKey) {\n        result.type = KeyboardResultType.PAGE_DOWN;\n      } else if (ev.ctrlKey) {\n        result.key = C0.ESC + '[6;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[6~';\n      }\n      break;\n    case 112:\n      // F1-F12\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'P';\n      } else {\n        result.key = C0.ESC + 'OP';\n      }\n      break;\n    case 113:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'Q';\n      } else {\n        result.key = C0.ESC + 'OQ';\n      }\n      break;\n    case 114:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'R';\n      } else {\n        result.key = C0.ESC + 'OR';\n      }\n      break;\n    case 115:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'S';\n      } else {\n        result.key = C0.ESC + 'OS';\n      }\n      break;\n    case 116:\n      if (modifiers) {\n        result.key = C0.ESC + '[15;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[15~';\n      }\n      break;\n    case 117:\n      if (modifiers) {\n        result.key = C0.ESC + '[17;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[17~';\n      }\n      break;\n    case 118:\n      if (modifiers) {\n        result.key = C0.ESC + '[18;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[18~';\n      }\n      break;\n    case 119:\n      if (modifiers) {\n        result.key = C0.ESC + '[19;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[19~';\n      }\n      break;\n    case 120:\n      if (modifiers) {\n        result.key = C0.ESC + '[20;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[20~';\n      }\n      break;\n    case 121:\n      if (modifiers) {\n        result.key = C0.ESC + '[21;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[21~';\n      }\n      break;\n    case 122:\n      if (modifiers) {\n        result.key = C0.ESC + '[23;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[23~';\n      }\n      break;\n    case 123:\n      if (modifiers) {\n        result.key = C0.ESC + '[24;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[24~';\n      }\n      break;\n    default:\n      // a-z and space\n      if (ev.ctrlKey && !ev.shiftKey && !ev.altKey && !ev.metaKey) {\n        if (ev.keyCode >= 65 && ev.keyCode <= 90) {\n          result.key = String.fromCharCode(ev.keyCode - 64);\n        } else if (ev.keyCode === 32) {\n          result.key = C0.NUL;\n        } else if (ev.keyCode >= 51 && ev.keyCode <= 55) {\n          // escape, file sep, group sep, record sep, unit sep\n          result.key = String.fromCharCode(ev.keyCode - 51 + 27);\n        } else if (ev.keyCode === 56) {\n          result.key = C0.DEL;\n        } else if (ev.keyCode === 219) {\n          result.key = C0.ESC;\n        } else if (ev.keyCode === 220) {\n          result.key = C0.FS;\n        } else if (ev.keyCode === 221) {\n          result.key = C0.GS;\n        }\n      } else if ((!isMac || macOptionIsMeta) && ev.altKey && !ev.metaKey) {\n        // On macOS this is a third level shift when !macOptionIsMeta. Use <Esc> instead.\n        const keyMapping = KEYCODE_KEY_MAPPINGS[ev.keyCode];\n        const key = keyMapping?.[!ev.shiftKey ? 0 : 1];\n        if (key) {\n          result.key = C0.ESC + key;\n        } else if (ev.keyCode >= 65 && ev.keyCode <= 90) {\n          const keyCode = ev.ctrlKey ? ev.keyCode - 64 : ev.keyCode + 32;\n          let keyString = String.fromCharCode(keyCode);\n          if (ev.shiftKey) {\n            keyString = keyString.toUpperCase();\n          }\n          result.key = C0.ESC + keyString;\n        } else if (ev.key === 'Dead' && ev.code.startsWith('Key')) {\n          // Reference: https://github.com/xtermjs/xterm.js/issues/3725\n          // Alt will produce a \"dead key\" (initate composition) with some\n          // of the letters in US layout (e.g. N/E/U).\n          // It's safe to match against Key* since no other `code` values begin with \"Key\".\n          // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code/code_values#code_values_on_mac\n          let keyString = ev.code.slice(3, 4);\n          if (!ev.shiftKey) {\n            keyString = keyString.toLowerCase();\n          }\n          result.key = C0.ESC + keyString;\n          result.cancel = true;\n        }\n      } else if (isMac && !ev.altKey && !ev.ctrlKey && !ev.shiftKey && ev.metaKey) {\n        if (ev.keyCode === 65) { // cmd + a\n          result.type = KeyboardResultType.SELECT_ALL;\n        }\n      } else if (ev.key && !ev.ctrlKey && !ev.altKey && !ev.metaKey && ev.keyCode >= 48 && ev.key.length === 1) {\n        // Include only keys that that result in a _single_ character; don't include num lock, volume up, etc.\n        result.key = ev.key;\n      } else if (ev.key && ev.ctrlKey) {\n        if (ev.key === '_') { // ^_\n          result.key = C0.US;\n        }\n        if (ev.key === '@') { // ^ + shift + 2 = ^ + @\n          result.key = C0.NUL;\n        }\n      }\n      break;\n  }\n\n  return result;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Polyfill - Convert UTF32 codepoint into JS string.\n * Note: The built-in String.fromCodePoint happens to be much slower\n *       due to additional sanity checks. We can avoid them since\n *       we always operate on legal UTF32 (granted by the input decoders)\n *       and use this faster version instead.\n */\nexport function stringFromCodePoint(codePoint: number): string {\n  if (codePoint > 0xFFFF) {\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10) + 0xD800) + String.fromCharCode((codePoint % 0x400) + 0xDC00);\n  }\n  return String.fromCharCode(codePoint);\n}\n\n/**\n * Convert UTF32 char codes into JS string.\n * Basically the same as `stringFromCodePoint` but for multiple codepoints\n * in a loop (which is a lot faster).\n */\nexport function utf32ToString(data: Uint32Array, start: number = 0, end: number = data.length): string {\n  let result = '';\n  for (let i = start; i < end; ++i) {\n    let codepoint = data[i];\n    if (codepoint > 0xFFFF) {\n      // JS strings are encoded as UTF16, thus a non BMP codepoint gets converted into a surrogate pair\n      // conversion rules:\n      //  - subtract 0x10000 from code point, leaving a 20 bit number\n      //  - add high 10 bits to 0xD800  --> first surrogate\n      //  - add low 10 bits to 0xDC00   --> second surrogate\n      codepoint -= 0x10000;\n      result += String.fromCharCode((codepoint >> 10) + 0xD800) + String.fromCharCode((codepoint % 0x400) + 0xDC00);\n    } else {\n      result += String.fromCharCode(codepoint);\n    }\n  }\n  return result;\n}\n\n/**\n * StringToUtf32 - decodes UTF16 sequences into UTF32 codepoints.\n * To keep the decoder in line with JS strings it handles single surrogates as UCS2.\n */\nexport class StringToUtf32 {\n  private _interim: number = 0;\n\n  /**\n   * Clears interim and resets decoder to clean state.\n   */\n  public clear(): void {\n    this._interim = 0;\n  }\n\n  /**\n   * Decode JS string to UTF32 codepoints.\n   * The methods assumes stream input and will store partly transmitted\n   * surrogate pairs and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided input data does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: string, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let startPos = 0;\n\n    // handle leftover surrogate high\n    if (this._interim) {\n      const second = input.charCodeAt(startPos++);\n      if (0xDC00 <= second && second <= 0xDFFF) {\n        target[size++] = (this._interim - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n      } else {\n        // illegal codepoint (USC2 handling)\n        target[size++] = this._interim;\n        target[size++] = second;\n      }\n      this._interim = 0;\n    }\n\n    for (let i = startPos; i < length; ++i) {\n      const code = input.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          this._interim = code;\n          return size;\n        }\n        const second = input.charCodeAt(i);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          target[size++] = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          // illegal codepoint (USC2 handling)\n          target[size++] = code;\n          target[size++] = second;\n        }\n        continue;\n      }\n      if (code === 0xFEFF) {\n        // BOM\n        continue;\n      }\n      target[size++] = code;\n    }\n    return size;\n  }\n}\n\n/**\n * Utf8Decoder - decodes UTF8 byte sequences into UTF32 codepoints.\n */\nexport class Utf8ToUtf32 {\n  public interim: Uint8Array = new Uint8Array(3);\n\n  /**\n   * Clears interim bytes and resets decoder to clean state.\n   */\n  public clear(): void {\n    this.interim.fill(0);\n  }\n\n  /**\n   * Decodes UTF8 byte sequences in `input` to UTF32 codepoints in `target`.\n   * The methods assumes stream input and will store partly transmitted bytes\n   * and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided data chunk does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: Uint8Array, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let byte1: number;\n    let byte2: number;\n    let byte3: number;\n    let byte4: number;\n    let codepoint = 0;\n    let startPos = 0;\n\n    // handle leftover bytes\n    if (this.interim[0]) {\n      let discardInterim = false;\n      let cp = this.interim[0];\n      cp &= ((((cp & 0xE0) === 0xC0)) ? 0x1F : (((cp & 0xF0) === 0xE0)) ? 0x0F : 0x07);\n      let pos = 0;\n      let tmp: number;\n      while ((tmp = this.interim[++pos] & 0x3F) && pos < 4) {\n        cp <<= 6;\n        cp |= tmp;\n      }\n      // missing bytes - read ahead from input\n      const type = (((this.interim[0] & 0xE0) === 0xC0)) ? 2 : (((this.interim[0] & 0xF0) === 0xE0)) ? 3 : 4;\n      const missing = type - pos;\n      while (startPos < missing) {\n        if (startPos >= length) {\n          return 0;\n        }\n        tmp = input[startPos++];\n        if ((tmp & 0xC0) !== 0x80) {\n          // wrong continuation, discard interim bytes completely\n          startPos--;\n          discardInterim = true;\n          break;\n        } else {\n          // need to save so we can continue short inputs in next call\n          this.interim[pos++] = tmp;\n          cp <<= 6;\n          cp |= tmp & 0x3F;\n        }\n      }\n      if (!discardInterim) {\n        // final test is type dependent\n        if (type === 2) {\n          if (cp < 0x80) {\n            // wrong starter byte\n            startPos--;\n          } else {\n            target[size++] = cp;\n          }\n        } else if (type === 3) {\n          if (cp < 0x0800 || (cp >= 0xD800 && cp <= 0xDFFF) || cp === 0xFEFF) {\n            // illegal codepoint or BOM\n          } else {\n            target[size++] = cp;\n          }\n        } else {\n          if (cp < 0x010000 || cp > 0x10FFFF) {\n            // illegal codepoint\n          } else {\n            target[size++] = cp;\n          }\n        }\n      }\n      this.interim.fill(0);\n    }\n\n    // loop through input\n    const fourStop = length - 4;\n    let i = startPos;\n    while (i < length) {\n      /**\n       * ASCII shortcut with loop unrolled to 4 consecutive ASCII chars.\n       * This is a compromise between speed gain for ASCII\n       * and penalty for non ASCII:\n       * For best ASCII performance the char should be stored directly into target,\n       * but even a single attempt to write to target and compare afterwards\n       * penalizes non ASCII really bad (-50%), thus we load the char into byteX first,\n       * which reduces ASCII performance by ~15%.\n       * This trial for ASCII reduces non ASCII performance by ~10% which seems acceptible\n       * compared to the gains.\n       * Note that this optimization only takes place for 4 consecutive ASCII chars,\n       * for any shorter it bails out. Worst case - all 4 bytes being read but\n       * thrown away due to the last being a non ASCII char (-10% performance).\n       */\n      while (i < fourStop\n        && !((byte1 = input[i]) & 0x80)\n        && !((byte2 = input[i + 1]) & 0x80)\n        && !((byte3 = input[i + 2]) & 0x80)\n        && !((byte4 = input[i + 3]) & 0x80))\n      {\n        target[size++] = byte1;\n        target[size++] = byte2;\n        target[size++] = byte3;\n        target[size++] = byte4;\n        i += 4;\n      }\n\n      // reread byte1\n      byte1 = input[i++];\n\n      // 1 byte\n      if (byte1 < 0x80) {\n        target[size++] = byte1;\n\n        // 2 bytes\n      } else if ((byte1 & 0xE0) === 0xC0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x1F) << 6 | (byte2 & 0x3F);\n        if (codepoint < 0x80) {\n          // wrong starter byte\n          i--;\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 3 bytes\n      } else if ((byte1 & 0xF0) === 0xE0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x0F) << 12 | (byte2 & 0x3F) << 6 | (byte3 & 0x3F);\n        if (codepoint < 0x0800 || (codepoint >= 0xD800 && codepoint <= 0xDFFF) || codepoint === 0xFEFF) {\n          // illegal codepoint or BOM, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 4 bytes\n      } else if ((byte1 & 0xF8) === 0xF0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          this.interim[2] = byte3;\n          return size;\n        }\n        byte4 = input[i++];\n        if ((byte4 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x07) << 18 | (byte2 & 0x3F) << 12 | (byte3 & 0x3F) << 6 | (byte4 & 0x3F);\n        if (codepoint < 0x010000 || codepoint > 0x10FFFF) {\n          // illegal codepoint, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n      } else {\n        // illegal byte, just skip\n      }\n    }\n    return size;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IUnicodeVersionProvider } from 'common/services/Services';\nimport { fill } from 'common/TypedArrayUtils';\n\ntype CharWidth = 0 | 1 | 2;\n\nconst BMP_COMBINING = [\n  [0x0300, 0x036F], [0x0483, 0x0486], [0x0488, 0x0489],\n  [0x0591, 0x05BD], [0x05BF, 0x05BF], [0x05C1, 0x05C2],\n  [0x05C4, 0x05C5], [0x05C7, 0x05C7], [0x0600, 0x0603],\n  [0x0610, 0x0615], [0x064B, 0x065E], [0x0670, 0x0670],\n  [0x06D6, 0x06E4], [0x06E7, 0x06E8], [0x06EA, 0x06ED],\n  [0x070F, 0x070F], [0x0711, 0x0711], [0x0730, 0x074A],\n  [0x07A6, 0x07B0], [0x07EB, 0x07F3], [0x0901, 0x0902],\n  [0x093C, 0x093C], [0x0941, 0x0948], [0x094D, 0x094D],\n  [0x0951, 0x0954], [0x0962, 0x0963], [0x0981, 0x0981],\n  [0x09BC, 0x09BC], [0x09C1, 0x09C4], [0x09CD, 0x09CD],\n  [0x09E2, 0x09E3], [0x0A01, 0x0A02], [0x0A3C, 0x0A3C],\n  [0x0A41, 0x0A42], [0x0A47, 0x0A48], [0x0A4B, 0x0A4D],\n  [0x0A70, 0x0A71], [0x0A81, 0x0A82], [0x0ABC, 0x0ABC],\n  [0x0AC1, 0x0AC5], [0x0AC7, 0x0AC8], [0x0ACD, 0x0ACD],\n  [0x0AE2, 0x0AE3], [0x0B01, 0x0B01], [0x0B3C, 0x0B3C],\n  [0x0B3F, 0x0B3F], [0x0B41, 0x0B43], [0x0B4D, 0x0B4D],\n  [0x0B56, 0x0B56], [0x0B82, 0x0B82], [0x0BC0, 0x0BC0],\n  [0x0BCD, 0x0BCD], [0x0C3E, 0x0C40], [0x0C46, 0x0C48],\n  [0x0C4A, 0x0C4D], [0x0C55, 0x0C56], [0x0CBC, 0x0CBC],\n  [0x0CBF, 0x0CBF], [0x0CC6, 0x0CC6], [0x0CCC, 0x0CCD],\n  [0x0CE2, 0x0CE3], [0x0D41, 0x0D43], [0x0D4D, 0x0D4D],\n  [0x0DCA, 0x0DCA], [0x0DD2, 0x0DD4], [0x0DD6, 0x0DD6],\n  [0x0E31, 0x0E31], [0x0E34, 0x0E3A], [0x0E47, 0x0E4E],\n  [0x0EB1, 0x0EB1], [0x0EB4, 0x0EB9], [0x0EBB, 0x0EBC],\n  [0x0EC8, 0x0ECD], [0x0F18, 0x0F19], [0x0F35, 0x0F35],\n  [0x0F37, 0x0F37], [0x0F39, 0x0F39], [0x0F71, 0x0F7E],\n  [0x0F80, 0x0F84], [0x0F86, 0x0F87], [0x0F90, 0x0F97],\n  [0x0F99, 0x0FBC], [0x0FC6, 0x0FC6], [0x102D, 0x1030],\n  [0x1032, 0x1032], [0x1036, 0x1037], [0x1039, 0x1039],\n  [0x1058, 0x1059], [0x1160, 0x11FF], [0x135F, 0x135F],\n  [0x1712, 0x1714], [0x1732, 0x1734], [0x1752, 0x1753],\n  [0x1772, 0x1773], [0x17B4, 0x17B5], [0x17B7, 0x17BD],\n  [0x17C6, 0x17C6], [0x17C9, 0x17D3], [0x17DD, 0x17DD],\n  [0x180B, 0x180D], [0x18A9, 0x18A9], [0x1920, 0x1922],\n  [0x1927, 0x1928], [0x1932, 0x1932], [0x1939, 0x193B],\n  [0x1A17, 0x1A18], [0x1B00, 0x1B03], [0x1B34, 0x1B34],\n  [0x1B36, 0x1B3A], [0x1B3C, 0x1B3C], [0x1B42, 0x1B42],\n  [0x1B6B, 0x1B73], [0x1DC0, 0x1DCA], [0x1DFE, 0x1DFF],\n  [0x200B, 0x200F], [0x202A, 0x202E], [0x2060, 0x2063],\n  [0x206A, 0x206F], [0x20D0, 0x20EF], [0x302A, 0x302F],\n  [0x3099, 0x309A], [0xA806, 0xA806], [0xA80B, 0xA80B],\n  [0xA825, 0xA826], [0xFB1E, 0xFB1E], [0xFE00, 0xFE0F],\n  [0xFE20, 0xFE23], [0xFEFF, 0xFEFF], [0xFFF9, 0xFFFB]\n];\nconst HIGH_COMBINING = [\n  [0x10A01, 0x10A03], [0x10A05, 0x10A06], [0x10A0C, 0x10A0F],\n  [0x10A38, 0x10A3A], [0x10A3F, 0x10A3F], [0x1D167, 0x1D169],\n  [0x1D173, 0x1D182], [0x1D185, 0x1D18B], [0x1D1AA, 0x1D1AD],\n  [0x1D242, 0x1D244], [0xE0001, 0xE0001], [0xE0020, 0xE007F],\n  [0xE0100, 0xE01EF]\n];\n\n// BMP lookup table, lazy initialized during first addon loading\nlet table: Uint8Array;\n\nfunction bisearch(ucs: number, data: number[][]): boolean {\n  let min = 0;\n  let max = data.length - 1;\n  let mid;\n  if (ucs < data[0][0] || ucs > data[max][1]) {\n    return false;\n  }\n  while (max >= min) {\n    mid = (min + max) >> 1;\n    if (ucs > data[mid][1]) {\n      min = mid + 1;\n    } else if (ucs < data[mid][0]) {\n      max = mid - 1;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport class UnicodeV6 implements IUnicodeVersionProvider {\n  public readonly version = '6';\n\n  constructor() {\n    // init lookup table once\n    if (!table) {\n      table = new Uint8Array(65536);\n      fill(table, 1);\n      table[0] = 0;\n      // control chars\n      fill(table, 0, 1, 32);\n      fill(table, 0, 0x7f, 0xa0);\n\n      // apply wide char rules first\n      // wide chars\n      fill(table, 2, 0x1100, 0x1160);\n      table[0x2329] = 2;\n      table[0x232a] = 2;\n      fill(table, 2, 0x2e80, 0xa4d0);\n      table[0x303f] = 1;  // wrongly in last line\n\n      fill(table, 2, 0xac00, 0xd7a4);\n      fill(table, 2, 0xf900, 0xfb00);\n      fill(table, 2, 0xfe10, 0xfe1a);\n      fill(table, 2, 0xfe30, 0xfe70);\n      fill(table, 2, 0xff00, 0xff61);\n      fill(table, 2, 0xffe0, 0xffe7);\n\n      // apply combining last to ensure we overwrite\n      // wrongly wide set chars:\n      //    the original algo evals combining first and falls\n      //    through to wide check so we simply do here the opposite\n      // combining 0\n      for (let r = 0; r < BMP_COMBINING.length; ++r) {\n        fill(table, 0, BMP_COMBINING[r][0], BMP_COMBINING[r][1] + 1);\n      }\n    }\n  }\n\n  public wcwidth(num: number): CharWidth {\n    if (num < 32) return 0;\n    if (num < 127) return 1;\n    if (num < 65536) return table[num] as CharWidth;\n    if (bisearch(num, HIGH_COMBINING)) return 0;\n    if ((num >= 0x20000 && num <= 0x2fffd) || (num >= 0x30000 && num <= 0x3fffd)) return 2;\n    return 1;\n  }\n}\n", "\n/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\n\ndeclare const setTimeout: (handler: () => void, timeout?: number) => void;\n\n/**\n * Safety watermark to avoid memory exhaustion and browser engine crash on fast data input.\n * Enable flow control to avoid this limit and make sure that your backend correctly\n * propagates this to the underlying pty. (see docs for further instructions)\n * Since this limit is meant as a safety parachute to prevent browser crashs,\n * it is set to a very high number. Typically xterm.js gets unresponsive with\n * a 100 times lower number (>500 kB).\n */\nconst DISCARD_WATERMARK = 50000000; // ~50 MB\n\n/**\n * The max number of ms to spend on writes before allowing the renderer to\n * catch up with a 0ms setTimeout. A value of < 33 to keep us close to\n * 30fps, and a value of < 16 to try to run at 60fps. Of course, the real FPS\n * depends on the time it takes for the renderer to draw the frame.\n */\nconst WRITE_TIMEOUT_MS = 12;\n\n/**\n * Threshold of max held chunks in the write buffer, that were already processed.\n * This is a tradeoff between extensive write buffer shifts (bad runtime) and high\n * memory consumption by data thats not used anymore.\n */\nconst WRITE_BUFFER_LENGTH_THRESHOLD = 50;\n\n// queueMicrotask polyfill for nodejs < v11\nconst qmt: (cb: () => void) => void = (typeof queueMicrotask === 'undefined')\n  ? (cb: () => void) => { Promise.resolve().then(cb); }\n  : queueMicrotask;\n\n\nexport class WriteBuffer {\n  private _writeBuffer: (string | Uint8Array)[] = [];\n  private _callbacks: ((() => void) | undefined)[] = [];\n  private _pendingData = 0;\n  private _bufferOffset = 0;\n  private _isSyncWriting = false;\n  private _syncCalls = 0;\n  public get onWriteParsed(): IEvent<void> { return this._onWriteParsed.event; }\n  private _onWriteParsed = new EventEmitter<void>();\n\n  constructor(private _action: (data: string | Uint8Array, promiseResult?: boolean) => void | Promise<boolean>) { }\n\n  /**\n   * @deprecated Unreliable, to be removed soon.\n   */\n  public writeSync(data: string | Uint8Array, maxSubsequentCalls?: number): void {\n    // stop writeSync recursions with maxSubsequentCalls argument\n    // This is dangerous to use as it will lose the current data chunk\n    // and return immediately.\n    if (maxSubsequentCalls !== undefined && this._syncCalls > maxSubsequentCalls) {\n      // comment next line if a whole loop block should only contain x `writeSync` calls\n      // (total flat vs. deep nested limit)\n      this._syncCalls = 0;\n      return;\n    }\n    // append chunk to buffer\n    this._pendingData += data.length;\n    this._writeBuffer.push(data);\n    this._callbacks.push(undefined);\n\n    // increase recursion counter\n    this._syncCalls++;\n    // exit early if another writeSync loop is active\n    if (this._isSyncWriting) {\n      return;\n    }\n    this._isSyncWriting = true;\n\n    // force sync processing on pending data chunks to avoid in-band data scrambling\n    // does the same as innerWrite but without event loop\n    // we have to do it here as single loop steps to not corrupt loop subject\n    // by another writeSync call triggered from _action\n    let chunk: string | Uint8Array | undefined;\n    while (chunk = this._writeBuffer.shift()) {\n      this._action(chunk);\n      const cb = this._callbacks.shift();\n      if (cb) cb();\n    }\n    // reset to avoid reprocessing of chunks with scheduled innerWrite call\n    // stopping scheduled innerWrite by offset > length condition\n    this._pendingData = 0;\n    this._bufferOffset = 0x7FFFFFFF;\n\n    // allow another writeSync to loop\n    this._isSyncWriting = false;\n    this._syncCalls = 0;\n  }\n\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    if (this._pendingData > DISCARD_WATERMARK) {\n      throw new Error('write data discarded, use flow control to avoid losing data');\n    }\n\n    // schedule chunk processing for next event loop run\n    if (!this._writeBuffer.length) {\n      this._bufferOffset = 0;\n      setTimeout(() => this._innerWrite());\n    }\n\n    this._pendingData += data.length;\n    this._writeBuffer.push(data);\n    this._callbacks.push(callback);\n  }\n\n  /**\n   * Inner write call, that enters the sliced chunk processing by timing.\n   *\n   * `lastTime` indicates, when the last _innerWrite call had started.\n   * It is used to aggregate async handler execution under a timeout constraint\n   * effectively lowering the redrawing needs, schematically:\n   *\n   *   macroTask _innerWrite:\n   *     if (Date.now() - (lastTime | 0) < WRITE_TIMEOUT_MS):\n   *        schedule microTask _innerWrite(lastTime)\n   *     else:\n   *        schedule macroTask _innerWrite(0)\n   *\n   *   overall execution order on task queues:\n   *\n   *   macrotasks:  [...]  -->  _innerWrite(0)  -->  [...]  -->  screenUpdate  -->  [...]\n   *         m  t:                    |\n   *         i  a:                  [...]\n   *         c  s:                    |\n   *         r  k:              while < timeout:\n   *         o  s:                _innerWrite(timeout)\n   *\n   * `promiseResult` depicts the promise resolve value of an async handler.\n   * This value gets carried forward through all saved stack states of the\n   * paused parser for proper continuation.\n   *\n   * Note, for pure sync code `lastTime` and `promiseResult` have no meaning.\n   */\n  protected _innerWrite(lastTime: number = 0, promiseResult: boolean = true): void {\n    const startTime = lastTime || Date.now();\n    while (this._writeBuffer.length > this._bufferOffset) {\n      const data = this._writeBuffer[this._bufferOffset];\n      const result = this._action(data, promiseResult);\n      if (result) {\n        /**\n         * If we get a promise as return value, we re-schedule the continuation\n         * as thenable on the promise and exit right away.\n         *\n         * The exit here means, that we block input processing at the current active chunk,\n         * the exact execution position within the chunk is preserved by the saved\n         * stack content in InputHandler and EscapeSequenceParser.\n         *\n         * Resuming happens automatically from that saved stack state.\n         * Also the resolved promise value is passed along the callstack to\n         * `EscapeSequenceParser.parse` to correctly resume the stopped handler loop.\n         *\n         * Exceptions on async handlers will be logged to console async, but do not interrupt\n         * the input processing (continues with next handler at the current input position).\n         */\n\n        /**\n         * If a promise takes long to resolve, we should schedule continuation behind setTimeout.\n         * This might already be too late, if our .then enters really late (executor + prev thens took very long).\n         * This cannot be solved here for the handler itself (it is the handlers responsibility to slice hard work),\n         * but we can at least schedule a screen update as we gain control.\n         */\n        const continuation: (r: boolean) => void = (r: boolean) => Date.now() - startTime >= WRITE_TIMEOUT_MS\n          ? setTimeout(() => this._innerWrite(0, r))\n          : this._innerWrite(startTime, r);\n\n        /**\n         * Optimization considerations:\n         * The continuation above favors FPS over throughput by eval'ing `startTime` on resolve.\n         * This might schedule too many screen updates with bad throughput drops (in case a slow\n         * resolving handler sliced its work properly behind setTimeout calls). We cannot spot\n         * this condition here, also the renderer has no way to spot nonsense updates either.\n         * FIXME: A proper fix for this would track the FPS at the renderer entry level separately.\n         *\n         * If favoring of FPS shows bad throughtput impact, use the following instead. It favors\n         * throughput by eval'ing `startTime` upfront pulling at least one more chunk into the\n         * current microtask queue (executed before setTimeout).\n         */\n        // const continuation: (r: boolean) => void = Date.now() - startTime >= WRITE_TIMEOUT_MS\n        //   ? r => setTimeout(() => this._innerWrite(0, r))\n        //   : r => this._innerWrite(startTime, r);\n\n        // Handle exceptions synchronously to current band position, idea:\n        // 1. spawn a single microtask which we allow to throw hard\n        // 2. spawn a promise immediately resolving to `true`\n        // (executed on the same queue, thus properly aligned before continuation happens)\n        result.catch(err => {\n          qmt(() => {throw err;});\n          return Promise.resolve(false);\n        }).then(continuation);\n        return;\n      }\n\n      const cb = this._callbacks[this._bufferOffset];\n      if (cb) cb();\n      this._bufferOffset++;\n      this._pendingData -= data.length;\n\n      if (Date.now() - startTime >= WRITE_TIMEOUT_MS) {\n        break;\n      }\n    }\n    if (this._writeBuffer.length > this._bufferOffset) {\n      // Allow renderer to catch up before processing the next batch\n      // trim already processed chunks if we are above threshold\n      if (this._bufferOffset > WRITE_BUFFER_LENGTH_THRESHOLD) {\n        this._writeBuffer = this._writeBuffer.slice(this._bufferOffset);\n        this._callbacks = this._callbacks.slice(this._bufferOffset);\n        this._bufferOffset = 0;\n      }\n      setTimeout(() => this._innerWrite());\n    } else {\n      this._writeBuffer.length = 0;\n      this._callbacks.length = 0;\n      this._pendingData = 0;\n      this._bufferOffset = 0;\n    }\n    this._onWriteParsed.fire();\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n\n// 'rgb:' rule - matching: r/g/b | rr/gg/bb | rrr/ggg/bbb | rrrr/gggg/bbbb (hex digits)\nconst RGB_REX = /^([\\da-f])\\/([\\da-f])\\/([\\da-f])$|^([\\da-f]{2})\\/([\\da-f]{2})\\/([\\da-f]{2})$|^([\\da-f]{3})\\/([\\da-f]{3})\\/([\\da-f]{3})$|^([\\da-f]{4})\\/([\\da-f]{4})\\/([\\da-f]{4})$/;\n// '#...' rule - matching any hex digits\nconst HASH_REX = /^[\\da-f]+$/;\n\n/**\n * Parse color spec to RGB values (8 bit per channel).\n * See `man xparsecolor` for details about certain format specifications.\n *\n * Supported formats:\n * - rgb:<red>/<green>/<blue> with <red>, <green>, <blue> in h | hh | hhh | hhhh\n * - #RGB, #RRGGBB, #RRRGGGBBB, #RRRRGGGGBBBB\n *\n * All other formats like rgbi: or device-independent string specifications\n * with float numbering are not supported.\n */\nexport function parseColor(data: string): [number, number, number] | undefined {\n  if (!data) return;\n  // also handle uppercases\n  let low = data.toLowerCase();\n  if (low.indexOf('rgb:') === 0) {\n    // 'rgb:' specifier\n    low = low.slice(4);\n    const m = RGB_REX.exec(low);\n    if (m) {\n      const base = m[1] ? 15 : m[4] ? 255 : m[7] ? 4095 : 65535;\n      return [\n        Math.round(parseInt(m[1] || m[4] || m[7] || m[10], 16) / base * 255),\n        Math.round(parseInt(m[2] || m[5] || m[8] || m[11], 16) / base * 255),\n        Math.round(parseInt(m[3] || m[6] || m[9] || m[12], 16) / base * 255)\n      ];\n    }\n  } else if (low.indexOf('#') === 0) {\n    // '#' specifier\n    low = low.slice(1);\n    if (HASH_REX.exec(low) && [3, 6, 9, 12].includes(low.length)) {\n      const adv = low.length / 3;\n      const result: [number, number, number] = [0, 0, 0];\n      for (let i = 0; i < 3; ++i) {\n        const c = parseInt(low.slice(adv * i, adv * i + adv), 16);\n        result[i] = adv === 1 ? c << 4 : adv === 2 ? c : adv === 3 ? c >> 4 : c >> 8;\n      }\n      return result;\n    }\n  }\n\n  // Named colors are currently not supported due to the large addition to the xterm.js bundle size\n  // they would add. In order to support named colors, we would need some way of optionally loading\n  // additional payloads so startup/download time is not bloated (see #3530).\n}\n\n// pad hex output to requested bit width\nfunction pad(n: number, bits: number): string {\n  const s = n.toString(16);\n  const s2 = s.length < 2 ? '0' + s : s;\n  switch (bits) {\n    case 4:\n      return s[0];\n    case 8:\n      return s2;\n    case 12:\n      return (s2 + s2).slice(0, 3);\n    default:\n      return s2 + s2;\n  }\n}\n\n/**\n * Convert a given color to rgb:../../.. string of `bits` depth.\n */\nexport function toRgbString(color: [number, number, number], bits: number = 16): string {\n  const [r, g, b] = color;\n  return `rgb:${pad(r, bits)}/${pad(g, bits)}/${pad(b, bits)}`;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Internal states of EscapeSequenceParser.\n */\nexport const enum ParserState {\n  GROUND = 0,\n  ESCAPE = 1,\n  ESCAPE_INTERMEDIATE = 2,\n  CSI_ENTRY = 3,\n  CSI_PARAM = 4,\n  CSI_INTERMEDIATE = 5,\n  CSI_IGNORE = 6,\n  SOS_PM_APC_STRING = 7,\n  OSC_STRING = 8,\n  DCS_ENTRY = 9,\n  DCS_PARAM = 10,\n  DCS_IGNORE = 11,\n  DCS_INTERMEDIATE = 12,\n  DCS_PASSTHROUGH = 13\n}\n\n/**\n* Internal actions of EscapeSequenceParser.\n*/\nexport const enum ParserAction {\n  IGNORE = 0,\n  ERROR = 1,\n  PRINT = 2,\n  EXECUTE = 3,\n  OSC_START = 4,\n  OSC_PUT = 5,\n  OSC_END = 6,\n  CSI_DISPATCH = 7,\n  PARAM = 8,\n  COLLECT = 9,\n  ESC_DISPATCH = 10,\n  CLEAR = 11,\n  DCS_HOOK = 12,\n  DCS_PUT = 13,\n  DCS_UNHOOK = 14\n}\n\n/**\n * Internal states of OscParser.\n */\nexport const enum OscState {\n  START = 0,\n  ID = 1,\n  PAYLOAD = 2,\n  ABORT = 3\n}\n\n// payload limit for OSC and DCS\nexport const PAYLOAD_LIMIT = 10000000;\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\nimport { IDcsHandler, IParams, IHandlerCollection, IDcsParser, DcsFallbackHandlerType, ISubParserStackState } from 'common/parser/Types';\nimport { utf32ToString } from 'common/input/TextDecoder';\nimport { Params } from 'common/parser/Params';\nimport { PAYLOAD_LIMIT } from 'common/parser/Constants';\n\nconst EMPTY_HANDLERS: IDcsHandler[] = [];\n\nexport class DcsParser implements IDcsParser {\n  private _handlers: IHandlerCollection<IDcsHandler> = Object.create(null);\n  private _active: IDcsHandler[] = EMPTY_HANDLERS;\n  private _ident: number = 0;\n  private _handlerFb: DcsFallbackHandlerType = () => { };\n  private _stack: ISubParserStackState = {\n    paused: false,\n    loopPosition: 0,\n    fallThrough: false\n  };\n\n  public dispose(): void {\n    this._handlers = Object.create(null);\n    this._handlerFb = () => { };\n    this._active = EMPTY_HANDLERS;\n  }\n\n  public registerHandler(ident: number, handler: IDcsHandler): IDisposable {\n    if (this._handlers[ident] === undefined) {\n      this._handlers[ident] = [];\n    }\n    const handlerList = this._handlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n\n  public clearHandler(ident: number): void {\n    if (this._handlers[ident]) delete this._handlers[ident];\n  }\n\n  public setHandlerFallback(handler: DcsFallbackHandlerType): void {\n    this._handlerFb = handler;\n  }\n\n  public reset(): void {\n    // force cleanup leftover handlers\n    if (this._active.length) {\n      for (let j = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; j >= 0; --j) {\n        this._active[j].unhook(false);\n      }\n    }\n    this._stack.paused = false;\n    this._active = EMPTY_HANDLERS;\n    this._ident = 0;\n  }\n\n  public hook(ident: number, params: IParams): void {\n    // always reset leftover handlers\n    this.reset();\n    this._ident = ident;\n    this._active = this._handlers[ident] || EMPTY_HANDLERS;\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'HOOK', params);\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].hook(params);\n      }\n    }\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'PUT', utf32ToString(data, start, end));\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].put(data, start, end);\n      }\n    }\n  }\n\n  public unhook(success: boolean, promiseResult: boolean = true): void | Promise<boolean> {\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'UNHOOK', success);\n    } else {\n      let handlerResult: boolean | Promise<boolean> = false;\n      let j = this._active.length - 1;\n      let fallThrough = false;\n      if (this._stack.paused) {\n        j = this._stack.loopPosition - 1;\n        handlerResult = promiseResult;\n        fallThrough = this._stack.fallThrough;\n        this._stack.paused = false;\n      }\n      if (!fallThrough && handlerResult === false) {\n        for (; j >= 0; j--) {\n          handlerResult = this._active[j].unhook(success);\n          if (handlerResult === true) {\n            break;\n          } else if (handlerResult instanceof Promise) {\n            this._stack.paused = true;\n            this._stack.loopPosition = j;\n            this._stack.fallThrough = false;\n            return handlerResult;\n          }\n        }\n        j--;\n      }\n      // cleanup left over handlers (fallThrough for async)\n      for (; j >= 0; j--) {\n        handlerResult = this._active[j].unhook(false);\n        if (handlerResult instanceof Promise) {\n          this._stack.paused = true;\n          this._stack.loopPosition = j;\n          this._stack.fallThrough = true;\n          return handlerResult;\n        }\n      }\n    }\n    this._active = EMPTY_HANDLERS;\n    this._ident = 0;\n  }\n}\n\n// predefine empty params as [0] (ZDM)\nconst EMPTY_PARAMS = new Params();\nEMPTY_PARAMS.addParam(0);\n\n/**\n * Convenient class to create a DCS handler from a single callback function.\n * Note: The payload is currently limited to 50 MB (hardcoded).\n */\nexport class DcsHandler implements IDcsHandler {\n  private _data = '';\n  private _params: IParams = EMPTY_PARAMS;\n  private _hitLimit: boolean = false;\n\n  constructor(private _handler: (data: string, params: IParams) => boolean | Promise<boolean>) { }\n\n  public hook(params: IParams): void {\n    // since we need to preserve params until `unhook`, we have to clone it\n    // (only borrowed from parser and spans multiple parser states)\n    // perf optimization:\n    // clone only, if we have non empty params, otherwise stick with default\n    this._params = (params.length > 1 || params.params[0]) ? params.clone() : EMPTY_PARAMS;\n    this._data = '';\n    this._hitLimit = false;\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._hitLimit) {\n      return;\n    }\n    this._data += utf32ToString(data, start, end);\n    if (this._data.length > PAYLOAD_LIMIT) {\n      this._data = '';\n      this._hitLimit = true;\n    }\n  }\n\n  public unhook(success: boolean): boolean | Promise<boolean> {\n    let ret: boolean | Promise<boolean> = false;\n    if (this._hitLimit) {\n      ret = false;\n    } else if (success) {\n      ret = this._handler(this._data, this._params);\n      if (ret instanceof Promise) {\n        // need to hold data and params until `ret` got resolved\n        // dont care for errors, data will be freed anyway on next start\n        return ret.then(res => {\n          this._params = EMPTY_PARAMS;\n          this._data = '';\n          this._hitLimit = false;\n          return res;\n        });\n      }\n    }\n    this._params = EMPTY_PARAMS;\n    this._data = '';\n    this._hitLimit = false;\n    return ret;\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IParsingState, IDcsHandler, IEscapeSequenceParser, IParams, IOscHandler, IHandlerCollection, CsiHandlerType, OscFallbackHandlerType, IOscParser, EscHandlerType, IDcsParser, DcsFallbackHandlerType, IFunctionIdentifier, ExecuteFallbackHandlerType, CsiFallbackHandlerType, EscFallbackHandlerType, PrintHandlerType, PrintFallbackHandlerType, ExecuteHandlerType, IParserStackState, ParserStackType, ResumableHandlersType } from 'common/parser/Types';\nimport { ParserState, ParserAction } from 'common/parser/Constants';\nimport { Disposable } from 'common/Lifecycle';\nimport { IDisposable } from 'common/Types';\nimport { fill } from 'common/TypedArrayUtils';\nimport { Params } from 'common/parser/Params';\nimport { OscParser } from 'common/parser/OscParser';\nimport { DcsParser } from 'common/parser/DcsParser';\n\n/**\n * Table values are generated like this:\n *    index:  currentState << TableValue.INDEX_STATE_SHIFT | charCode\n *    value:  action << TableValue.TRANSITION_ACTION_SHIFT | nextState\n */\nconst enum TableAccess {\n  TRANSITION_ACTION_SHIFT = 4,\n  TRANSITION_STATE_MASK = 15,\n  INDEX_STATE_SHIFT = 8\n}\n\n/**\n * Transition table for EscapeSequenceParser.\n */\nexport class TransitionTable {\n  public table: Uint8Array;\n\n  constructor(length: number) {\n    this.table = new Uint8Array(length);\n  }\n\n  /**\n   * Set default transition.\n   * @param action default action\n   * @param next default next state\n   */\n  public setDefault(action: ParserAction, next: ParserState): void {\n    fill(this.table, action << TableAccess.TRANSITION_ACTION_SHIFT | next);\n  }\n\n  /**\n   * Add a transition to the transition table.\n   * @param code input character code\n   * @param state current parser state\n   * @param action parser action to be done\n   * @param next next parser state\n   */\n  public add(code: number, state: ParserState, action: ParserAction, next: ParserState): void {\n    this.table[state << TableAccess.INDEX_STATE_SHIFT | code] = action << TableAccess.TRANSITION_ACTION_SHIFT | next;\n  }\n\n  /**\n   * Add transitions for multiple input character codes.\n   * @param codes input character code array\n   * @param state current parser state\n   * @param action parser action to be done\n   * @param next next parser state\n   */\n  public addMany(codes: number[], state: ParserState, action: ParserAction, next: ParserState): void {\n    for (let i = 0; i < codes.length; i++) {\n      this.table[state << TableAccess.INDEX_STATE_SHIFT | codes[i]] = action << TableAccess.TRANSITION_ACTION_SHIFT | next;\n    }\n  }\n}\n\n\n// Pseudo-character placeholder for printable non-ascii characters (unicode).\nconst NON_ASCII_PRINTABLE = 0xA0;\n\n\n/**\n * VT500 compatible transition table.\n * Taken from https://vt100.net/emu/dec_ansi_parser.\n */\nexport const VT500_TRANSITION_TABLE = (function (): TransitionTable {\n  const table: TransitionTable = new TransitionTable(4095);\n\n  // range macro for byte\n  const BYTE_VALUES = 256;\n  const blueprint = Array.apply(null, Array(BYTE_VALUES)).map((unused: any, i: number) => i);\n  const r = (start: number, end: number): number[] => blueprint.slice(start, end);\n\n  // Default definitions.\n  const PRINTABLES = r(0x20, 0x7f); // 0x20 (SP) included, 0x7F (DEL) excluded\n  const EXECUTABLES = r(0x00, 0x18);\n  EXECUTABLES.push(0x19);\n  EXECUTABLES.push.apply(EXECUTABLES, r(0x1c, 0x20));\n\n  const states: number[] = r(ParserState.GROUND, ParserState.DCS_PASSTHROUGH + 1);\n  let state: any;\n\n  // set default transition\n  table.setDefault(ParserAction.ERROR, ParserState.GROUND);\n  // printables\n  table.addMany(PRINTABLES, ParserState.GROUND, ParserAction.PRINT, ParserState.GROUND);\n  // global anywhere rules\n  for (state in states) {\n    table.addMany([0x18, 0x1a, 0x99, 0x9a], state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.addMany(r(0x80, 0x90), state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.addMany(r(0x90, 0x98), state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.add(0x9c, state, ParserAction.IGNORE, ParserState.GROUND); // ST as terminator\n    table.add(0x1b, state, ParserAction.CLEAR, ParserState.ESCAPE);  // ESC\n    table.add(0x9d, state, ParserAction.OSC_START, ParserState.OSC_STRING);  // OSC\n    table.addMany([0x98, 0x9e, 0x9f], state, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n    table.add(0x9b, state, ParserAction.CLEAR, ParserState.CSI_ENTRY);  // CSI\n    table.add(0x90, state, ParserAction.CLEAR, ParserState.DCS_ENTRY);  // DCS\n  }\n  // rules for executables and 7f\n  table.addMany(EXECUTABLES, ParserState.GROUND, ParserAction.EXECUTE, ParserState.GROUND);\n  table.addMany(EXECUTABLES, ParserState.ESCAPE, ParserAction.EXECUTE, ParserState.ESCAPE);\n  table.add(0x7f, ParserState.ESCAPE, ParserAction.IGNORE, ParserState.ESCAPE);\n  table.addMany(EXECUTABLES, ParserState.OSC_STRING, ParserAction.IGNORE, ParserState.OSC_STRING);\n  table.addMany(EXECUTABLES, ParserState.CSI_ENTRY, ParserAction.EXECUTE, ParserState.CSI_ENTRY);\n  table.add(0x7f, ParserState.CSI_ENTRY, ParserAction.IGNORE, ParserState.CSI_ENTRY);\n  table.addMany(EXECUTABLES, ParserState.CSI_PARAM, ParserAction.EXECUTE, ParserState.CSI_PARAM);\n  table.add(0x7f, ParserState.CSI_PARAM, ParserAction.IGNORE, ParserState.CSI_PARAM);\n  table.addMany(EXECUTABLES, ParserState.CSI_IGNORE, ParserAction.EXECUTE, ParserState.CSI_IGNORE);\n  table.addMany(EXECUTABLES, ParserState.CSI_INTERMEDIATE, ParserAction.EXECUTE, ParserState.CSI_INTERMEDIATE);\n  table.add(0x7f, ParserState.CSI_INTERMEDIATE, ParserAction.IGNORE, ParserState.CSI_INTERMEDIATE);\n  table.addMany(EXECUTABLES, ParserState.ESCAPE_INTERMEDIATE, ParserAction.EXECUTE, ParserState.ESCAPE_INTERMEDIATE);\n  table.add(0x7f, ParserState.ESCAPE_INTERMEDIATE, ParserAction.IGNORE, ParserState.ESCAPE_INTERMEDIATE);\n  // osc\n  table.add(0x5d, ParserState.ESCAPE, ParserAction.OSC_START, ParserState.OSC_STRING);\n  table.addMany(PRINTABLES, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.add(0x7f, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.addMany([0x9c, 0x1b, 0x18, 0x1a, 0x07], ParserState.OSC_STRING, ParserAction.OSC_END, ParserState.GROUND);\n  table.addMany(r(0x1c, 0x20), ParserState.OSC_STRING, ParserAction.IGNORE, ParserState.OSC_STRING);\n  // sos/pm/apc does nothing\n  table.addMany([0x58, 0x5e, 0x5f], ParserState.ESCAPE, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.addMany(PRINTABLES, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.addMany(EXECUTABLES, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.add(0x9c, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.GROUND);\n  table.add(0x7f, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  // csi entries\n  table.add(0x5b, ParserState.ESCAPE, ParserAction.CLEAR, ParserState.CSI_ENTRY);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_ENTRY, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x30, 0x3c), ParserState.CSI_ENTRY, ParserAction.PARAM, ParserState.CSI_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.CSI_ENTRY, ParserAction.COLLECT, ParserState.CSI_PARAM);\n  table.addMany(r(0x30, 0x3c), ParserState.CSI_PARAM, ParserAction.PARAM, ParserState.CSI_PARAM);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_PARAM, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.CSI_PARAM, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x20, 0x40), ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.add(0x7f, ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.GROUND);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_ENTRY, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_INTERMEDIATE, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  table.addMany(r(0x30, 0x40), ParserState.CSI_INTERMEDIATE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_INTERMEDIATE, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_PARAM, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  // esc_intermediate\n  table.addMany(r(0x20, 0x30), ParserState.ESCAPE, ParserAction.COLLECT, ParserState.ESCAPE_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.ESCAPE_INTERMEDIATE, ParserAction.COLLECT, ParserState.ESCAPE_INTERMEDIATE);\n  table.addMany(r(0x30, 0x7f), ParserState.ESCAPE_INTERMEDIATE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x30, 0x50), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x51, 0x58), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany([0x59, 0x5a, 0x5c], ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x60, 0x7f), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  // dcs entry\n  table.add(0x50, ParserState.ESCAPE, ParserAction.CLEAR, ParserState.DCS_ENTRY);\n  table.addMany(EXECUTABLES, ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.add(0x7f, ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_ENTRY, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x30, 0x3c), ParserState.DCS_ENTRY, ParserAction.PARAM, ParserState.DCS_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.DCS_ENTRY, ParserAction.COLLECT, ParserState.DCS_PARAM);\n  table.addMany(EXECUTABLES, ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x20, 0x80), ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(EXECUTABLES, ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.add(0x7f, ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.addMany(r(0x30, 0x3c), ParserState.DCS_PARAM, ParserAction.PARAM, ParserState.DCS_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_PARAM, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(EXECUTABLES, ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.add(0x7f, ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_INTERMEDIATE, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x30, 0x40), ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_INTERMEDIATE, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_PARAM, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_ENTRY, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(EXECUTABLES, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  table.addMany(PRINTABLES, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  table.add(0x7f, ParserState.DCS_PASSTHROUGH, ParserAction.IGNORE, ParserState.DCS_PASSTHROUGH);\n  table.addMany([0x1b, 0x9c, 0x18, 0x1a], ParserState.DCS_PASSTHROUGH, ParserAction.DCS_UNHOOK, ParserState.GROUND);\n  // special handling of unicode chars\n  table.add(NON_ASCII_PRINTABLE, ParserState.GROUND, ParserAction.PRINT, ParserState.GROUND);\n  table.add(NON_ASCII_PRINTABLE, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.add(NON_ASCII_PRINTABLE, ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.add(NON_ASCII_PRINTABLE, ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.add(NON_ASCII_PRINTABLE, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  return table;\n})();\n\n\n/**\n * EscapeSequenceParser.\n * This class implements the ANSI/DEC compatible parser described by\n * Paul Williams (https://vt100.net/emu/dec_ansi_parser).\n *\n * To implement custom ANSI compliant escape sequences it is not needed to\n * alter this parser, instead consider registering a custom handler.\n * For non ANSI compliant sequences change the transition table with\n * the optional `transitions` constructor argument and\n * reimplement the `parse` method.\n *\n * This parser is currently hardcoded to operate in ZDM (Zero Default Mode)\n * as suggested by the original parser, thus empty parameters are set to 0.\n * This this is not in line with the latest ECMA-48 specification\n * (ZDM was part of the early specs and got completely removed later on).\n *\n * Other than the original parser from vt100.net this parser supports\n * sub parameters in digital parameters separated by colons. Empty sub parameters\n * are set to -1 (no ZDM for sub parameters).\n *\n * About prefix and intermediate bytes:\n * This parser follows the assumptions of the vt100.net parser with these restrictions:\n * - only one prefix byte is allowed as first parameter byte, byte range 0x3c .. 0x3f\n * - max. two intermediates are respected, byte range 0x20 .. 0x2f\n * Note that this is not in line with ECMA-48 which does not limit either of those.\n * Furthermore ECMA-48 allows the prefix byte range at any param byte position. Currently\n * there are no known sequences that follow the broader definition of the specification.\n *\n * TODO: implement error recovery hook via error handler return values\n */\nexport class EscapeSequenceParser extends Disposable implements IEscapeSequenceParser {\n  public initialState: number;\n  public currentState: number;\n  public precedingCodepoint: number;\n\n  // buffers over several parse calls\n  protected _params: Params;\n  protected _collect: number;\n\n  // handler lookup containers\n  protected _printHandler: PrintHandlerType;\n  protected _executeHandlers: { [flag: number]: ExecuteHandlerType };\n  protected _csiHandlers: IHandlerCollection<CsiHandlerType>;\n  protected _escHandlers: IHandlerCollection<EscHandlerType>;\n  protected _oscParser: IOscParser;\n  protected _dcsParser: IDcsParser;\n  protected _errorHandler: (state: IParsingState) => IParsingState;\n\n  // fallback handlers\n  protected _printHandlerFb: PrintFallbackHandlerType;\n  protected _executeHandlerFb: ExecuteFallbackHandlerType;\n  protected _csiHandlerFb: CsiFallbackHandlerType;\n  protected _escHandlerFb: EscFallbackHandlerType;\n  protected _errorHandlerFb: (state: IParsingState) => IParsingState;\n\n  // parser stack save for async handler support\n  protected _parseStack: IParserStackState = {\n    state: ParserStackType.NONE,\n    handlers: [],\n    handlerPos: 0,\n    transition: 0,\n    chunkPos: 0\n  };\n\n  constructor(\n    protected readonly _transitions: TransitionTable = VT500_TRANSITION_TABLE\n  ) {\n    super();\n\n    this.initialState = ParserState.GROUND;\n    this.currentState = this.initialState;\n    this._params = new Params(); // defaults to 32 storable params/subparams\n    this._params.addParam(0);    // ZDM\n    this._collect = 0;\n    this.precedingCodepoint = 0;\n\n    // set default fallback handlers and handler lookup containers\n    this._printHandlerFb = (data, start, end): void => { };\n    this._executeHandlerFb = (code: number): void => { };\n    this._csiHandlerFb = (ident: number, params: IParams): void => { };\n    this._escHandlerFb = (ident: number): void => { };\n    this._errorHandlerFb = (state: IParsingState): IParsingState => state;\n    this._printHandler = this._printHandlerFb;\n    this._executeHandlers = Object.create(null);\n    this._csiHandlers = Object.create(null);\n    this._escHandlers = Object.create(null);\n    this._oscParser = new OscParser();\n    this._dcsParser = new DcsParser();\n    this._errorHandler = this._errorHandlerFb;\n\n    // swallow 7bit ST (ESC+\\)\n    this.registerEscHandler({ final: '\\\\' }, () => true);\n  }\n\n  protected _identifier(id: IFunctionIdentifier, finalRange: number[] = [0x40, 0x7e]): number {\n    let res = 0;\n    if (id.prefix) {\n      if (id.prefix.length > 1) {\n        throw new Error('only one byte as prefix supported');\n      }\n      res = id.prefix.charCodeAt(0);\n      if (res && 0x3c > res || res > 0x3f) {\n        throw new Error('prefix must be in range 0x3c .. 0x3f');\n      }\n    }\n    if (id.intermediates) {\n      if (id.intermediates.length > 2) {\n        throw new Error('only two bytes as intermediates are supported');\n      }\n      for (let i = 0; i < id.intermediates.length; ++i) {\n        const intermediate = id.intermediates.charCodeAt(i);\n        if (0x20 > intermediate || intermediate > 0x2f) {\n          throw new Error('intermediate must be in range 0x20 .. 0x2f');\n        }\n        res <<= 8;\n        res |= intermediate;\n      }\n    }\n    if (id.final.length !== 1) {\n      throw new Error('final must be a single byte');\n    }\n    const finalCode = id.final.charCodeAt(0);\n    if (finalRange[0] > finalCode || finalCode > finalRange[1]) {\n      throw new Error(`final must be in range ${finalRange[0]} .. ${finalRange[1]}`);\n    }\n    res <<= 8;\n    res |= finalCode;\n\n    return res;\n  }\n\n  public identToString(ident: number): string {\n    const res: string[] = [];\n    while (ident) {\n      res.push(String.fromCharCode(ident & 0xFF));\n      ident >>= 8;\n    }\n    return res.reverse().join('');\n  }\n\n  public dispose(): void {\n    this._csiHandlers = Object.create(null);\n    this._executeHandlers = Object.create(null);\n    this._escHandlers = Object.create(null);\n    this._oscParser.dispose();\n    this._dcsParser.dispose();\n  }\n\n  public setPrintHandler(handler: PrintHandlerType): void {\n    this._printHandler = handler;\n  }\n  public clearPrintHandler(): void {\n    this._printHandler = this._printHandlerFb;\n  }\n\n  public registerEscHandler(id: IFunctionIdentifier, handler: EscHandlerType): IDisposable {\n    const ident = this._identifier(id, [0x30, 0x7e]);\n    if (this._escHandlers[ident] === undefined) {\n      this._escHandlers[ident] = [];\n    }\n    const handlerList = this._escHandlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearEscHandler(id: IFunctionIdentifier): void {\n    if (this._escHandlers[this._identifier(id, [0x30, 0x7e])]) delete this._escHandlers[this._identifier(id, [0x30, 0x7e])];\n  }\n  public setEscHandlerFallback(handler: EscFallbackHandlerType): void {\n    this._escHandlerFb = handler;\n  }\n\n  public setExecuteHandler(flag: string, handler: ExecuteHandlerType): void {\n    this._executeHandlers[flag.charCodeAt(0)] = handler;\n  }\n  public clearExecuteHandler(flag: string): void {\n    if (this._executeHandlers[flag.charCodeAt(0)]) delete this._executeHandlers[flag.charCodeAt(0)];\n  }\n  public setExecuteHandlerFallback(handler: ExecuteFallbackHandlerType): void {\n    this._executeHandlerFb = handler;\n  }\n\n  public registerCsiHandler(id: IFunctionIdentifier, handler: CsiHandlerType): IDisposable {\n    const ident = this._identifier(id);\n    if (this._csiHandlers[ident] === undefined) {\n      this._csiHandlers[ident] = [];\n    }\n    const handlerList = this._csiHandlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearCsiHandler(id: IFunctionIdentifier): void {\n    if (this._csiHandlers[this._identifier(id)]) delete this._csiHandlers[this._identifier(id)];\n  }\n  public setCsiHandlerFallback(callback: (ident: number, params: IParams) => void): void {\n    this._csiHandlerFb = callback;\n  }\n\n  public registerDcsHandler(id: IFunctionIdentifier, handler: IDcsHandler): IDisposable {\n    return this._dcsParser.registerHandler(this._identifier(id), handler);\n  }\n  public clearDcsHandler(id: IFunctionIdentifier): void {\n    this._dcsParser.clearHandler(this._identifier(id));\n  }\n  public setDcsHandlerFallback(handler: DcsFallbackHandlerType): void {\n    this._dcsParser.setHandlerFallback(handler);\n  }\n\n  public registerOscHandler(ident: number, handler: IOscHandler): IDisposable {\n    return this._oscParser.registerHandler(ident, handler);\n  }\n  public clearOscHandler(ident: number): void {\n    this._oscParser.clearHandler(ident);\n  }\n  public setOscHandlerFallback(handler: OscFallbackHandlerType): void {\n    this._oscParser.setHandlerFallback(handler);\n  }\n\n  public setErrorHandler(callback: (state: IParsingState) => IParsingState): void {\n    this._errorHandler = callback;\n  }\n  public clearErrorHandler(): void {\n    this._errorHandler = this._errorHandlerFb;\n  }\n\n  /**\n   * Reset parser to initial values.\n   *\n   * This can also be used to lift the improper continuation error condition\n   * when dealing with async handlers. Use this only as a last resort to silence\n   * that error when the terminal has no pending data to be processed. Note that\n   * the interrupted async handler might continue its work in the future messing\n   * up the terminal state even further.\n   */\n  public reset(): void {\n    this.currentState = this.initialState;\n    this._oscParser.reset();\n    this._dcsParser.reset();\n    this._params.reset();\n    this._params.addParam(0); // ZDM\n    this._collect = 0;\n    this.precedingCodepoint = 0;\n    // abort pending continuation from async handler\n    // Here the RESET type indicates, that the next parse call will\n    // ignore any saved stack, instead continues sync with next codepoint from GROUND\n    if (this._parseStack.state !== ParserStackType.NONE) {\n      this._parseStack.state = ParserStackType.RESET;\n      this._parseStack.handlers = []; // also release handlers ref\n    }\n  }\n\n  /**\n   * Async parse support.\n   */\n  protected _preserveStack(\n    state: ParserStackType,\n    handlers: ResumableHandlersType,\n    handlerPos: number,\n    transition: number,\n    chunkPos: number\n  ): void {\n    this._parseStack.state = state;\n    this._parseStack.handlers = handlers;\n    this._parseStack.handlerPos = handlerPos;\n    this._parseStack.transition = transition;\n    this._parseStack.chunkPos = chunkPos;\n  }\n\n  /**\n   * Parse UTF32 codepoints in `data` up to `length`.\n   *\n   * Note: For several actions with high data load the parsing is optimized\n   * by using local read ahead loops with hardcoded conditions to\n   * avoid costly table lookups. Make sure that any change of table values\n   * will be reflected in the loop conditions as well and vice versa.\n   * Affected states/actions:\n   * - GROUND:PRINT\n   * - CSI_PARAM:PARAM\n   * - DCS_PARAM:PARAM\n   * - OSC_STRING:OSC_PUT\n   * - DCS_PASSTHROUGH:DCS_PUT\n   *\n   * Note on asynchronous handler support:\n   * Any handler returning a promise will be treated as asynchronous.\n   * To keep the in-band blocking working for async handlers, `parse` pauses execution,\n   * creates a stack save and returns the promise to the caller.\n   * For proper continuation of the paused state it is important\n   * to await the promise resolving. On resolve the parse must be repeated\n   * with the same chunk of data and the resolved value in `promiseResult`\n   * until no promise is returned.\n   *\n   * Important: With only sync handlers defined, parsing is completely synchronous as well.\n   * As soon as an async handler is involved, synchronous parsing is not possible anymore.\n   *\n   * Boilerplate for proper parsing of multiple chunks with async handlers:\n   *\n   * ```typescript\n   * async function parseMultipleChunks(chunks: Uint32Array[]): Promise<void> {\n   *   for (const chunk of chunks) {\n   *     let result: void | Promise<boolean>;\n   *     let prev: boolean | undefined;\n   *     while (result = parser.parse(chunk, chunk.length, prev)) {\n   *       prev = await result;\n   *     }\n   *   }\n   *   // finished parsing all chunks...\n   * }\n   * ```\n   */\n  public parse(data: Uint32Array, length: number, promiseResult?: boolean): void | Promise<boolean> {\n    let code = 0;\n    let transition = 0;\n    let start = 0;\n    let handlerResult: void | boolean | Promise<boolean>;\n\n    // resume from async handler\n    if (this._parseStack.state) {\n      // allow sync parser reset even in continuation mode\n      // Note: can be used to recover parser from improper continuation error below\n      if (this._parseStack.state === ParserStackType.RESET) {\n        this._parseStack.state = ParserStackType.NONE;\n        start = this._parseStack.chunkPos + 1; // continue with next codepoint in GROUND\n      } else {\n        if (promiseResult === undefined || this._parseStack.state === ParserStackType.FAIL) {\n          /**\n           * Reject further parsing on improper continuation after pausing.\n           * This is a really bad condition with screwed up execution order and prolly messed up\n           * terminal state, therefore we exit hard with an exception and reject any further parsing.\n           *\n           * Note: With `Terminal.write` usage this exception should never occur, as the top level\n           * calls are guaranteed to handle async conditions properly. If you ever encounter this\n           * exception in your terminal integration it indicates, that you injected data chunks to\n           * `InputHandler.parse` or `EscapeSequenceParser.parse` synchronously without waiting for\n           * continuation of a running async handler.\n           *\n           * It is possible to get rid of this error by calling `reset`. But dont rely on that,\n           * as the pending async handler still might mess up the terminal later. Instead fix the faulty\n           * async handling, so this error will not be thrown anymore.\n           */\n          this._parseStack.state = ParserStackType.FAIL;\n          throw new Error('improper continuation due to previous async handler, giving up parsing');\n        }\n\n        // we have to resume the old handler loop if:\n        // - return value of the promise was `false`\n        // - handlers are not exhausted yet\n        const handlers = this._parseStack.handlers;\n        let handlerPos = this._parseStack.handlerPos - 1;\n        switch (this._parseStack.state) {\n          case ParserStackType.CSI:\n            if (promiseResult === false && handlerPos > -1) {\n              for (; handlerPos >= 0; handlerPos--) {\n                handlerResult = (handlers as CsiHandlerType[])[handlerPos](this._params);\n                if (handlerResult === true) {\n                  break;\n                } else if (handlerResult instanceof Promise) {\n                  this._parseStack.handlerPos = handlerPos;\n                  return handlerResult;\n                }\n              }\n            }\n            this._parseStack.handlers = [];\n            break;\n          case ParserStackType.ESC:\n            if (promiseResult === false && handlerPos > -1) {\n              for (; handlerPos >= 0; handlerPos--) {\n                handlerResult = (handlers as EscHandlerType[])[handlerPos]();\n                if (handlerResult === true) {\n                  break;\n                } else if (handlerResult instanceof Promise) {\n                  this._parseStack.handlerPos = handlerPos;\n                  return handlerResult;\n                }\n              }\n            }\n            this._parseStack.handlers = [];\n            break;\n          case ParserStackType.DCS:\n            code = data[this._parseStack.chunkPos];\n            handlerResult = this._dcsParser.unhook(code !== 0x18 && code !== 0x1a, promiseResult);\n            if (handlerResult) {\n              return handlerResult;\n            }\n            if (code === 0x1b) this._parseStack.transition |= ParserState.ESCAPE;\n            this._params.reset();\n            this._params.addParam(0); // ZDM\n            this._collect = 0;\n            break;\n          case ParserStackType.OSC:\n            code = data[this._parseStack.chunkPos];\n            handlerResult = this._oscParser.end(code !== 0x18 && code !== 0x1a, promiseResult);\n            if (handlerResult) {\n              return handlerResult;\n            }\n            if (code === 0x1b) this._parseStack.transition |= ParserState.ESCAPE;\n            this._params.reset();\n            this._params.addParam(0); // ZDM\n            this._collect = 0;\n            break;\n        }\n        // cleanup before continuing with the main sync loop\n        this._parseStack.state = ParserStackType.NONE;\n        start = this._parseStack.chunkPos + 1;\n        this.precedingCodepoint = 0;\n        this.currentState = this._parseStack.transition & TableAccess.TRANSITION_STATE_MASK;\n      }\n    }\n\n    // continue with main sync loop\n\n    // process input string\n    for (let i = start; i < length; ++i) {\n      code = data[i];\n\n      // normal transition & action lookup\n      transition = this._transitions.table[this.currentState << TableAccess.INDEX_STATE_SHIFT | (code < 0xa0 ? code : NON_ASCII_PRINTABLE)];\n      switch (transition >> TableAccess.TRANSITION_ACTION_SHIFT) {\n        case ParserAction.PRINT:\n          // read ahead with loop unrolling\n          // Note: 0x20 (SP) is included, 0x7F (DEL) is excluded\n          for (let j = i + 1; ; ++j) {\n            if (j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.EXECUTE:\n          if (this._executeHandlers[code]) this._executeHandlers[code]();\n          else this._executeHandlerFb(code);\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.IGNORE:\n          break;\n        case ParserAction.ERROR:\n          const inject: IParsingState = this._errorHandler(\n            {\n              position: i,\n              code,\n              currentState: this.currentState,\n              collect: this._collect,\n              params: this._params,\n              abort: false\n            });\n          if (inject.abort) return;\n          // inject values: currently not implemented\n          break;\n        case ParserAction.CSI_DISPATCH:\n          // Trigger CSI Handler\n          const handlers = this._csiHandlers[this._collect << 8 | code];\n          let j = handlers ? handlers.length - 1 : -1;\n          for (; j >= 0; j--) {\n            // true means success and to stop bubbling\n            // a promise indicates an async handler that needs to finish before progressing\n            handlerResult = handlers[j](this._params);\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._preserveStack(ParserStackType.CSI, handlers, j, transition, i);\n              return handlerResult;\n            }\n          }\n          if (j < 0) {\n            this._csiHandlerFb(this._collect << 8 | code, this._params);\n          }\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.PARAM:\n          // inner loop: digits (0x30 - 0x39) and ; (0x3b) and : (0x3a)\n          do {\n            switch (code) {\n              case 0x3b:\n                this._params.addParam(0);  // ZDM\n                break;\n              case 0x3a:\n                this._params.addSubParam(-1);\n                break;\n              default:  // 0x30 - 0x39\n                this._params.addDigit(code - 48);\n            }\n          } while (++i < length && (code = data[i]) > 0x2f && code < 0x3c);\n          i--;\n          break;\n        case ParserAction.COLLECT:\n          this._collect <<= 8;\n          this._collect |= code;\n          break;\n        case ParserAction.ESC_DISPATCH:\n          const handlersEsc = this._escHandlers[this._collect << 8 | code];\n          let jj = handlersEsc ? handlersEsc.length - 1 : -1;\n          for (; jj >= 0; jj--) {\n            // true means success and to stop bubbling\n            // a promise indicates an async handler that needs to finish before progressing\n            handlerResult = handlersEsc[jj]();\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._preserveStack(ParserStackType.ESC, handlersEsc, jj, transition, i);\n              return handlerResult;\n            }\n          }\n          if (jj < 0) {\n            this._escHandlerFb(this._collect << 8 | code);\n          }\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.CLEAR:\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          break;\n        case ParserAction.DCS_HOOK:\n          this._dcsParser.hook(this._collect << 8 | code, this._params);\n          break;\n        case ParserAction.DCS_PUT:\n          // inner loop - exit DCS_PUT: 0x18, 0x1a, 0x1b, 0x7f, 0x80 - 0x9f\n          // unhook triggered by: 0x1b, 0x9c (success) and 0x18, 0x1a (abort)\n          for (let j = i + 1; ; ++j) {\n            if (j >= length || (code = data[j]) === 0x18 || code === 0x1a || code === 0x1b || (code > 0x7f && code < NON_ASCII_PRINTABLE)) {\n              this._dcsParser.put(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.DCS_UNHOOK:\n          handlerResult = this._dcsParser.unhook(code !== 0x18 && code !== 0x1a);\n          if (handlerResult) {\n            this._preserveStack(ParserStackType.DCS, [], 0, transition, i);\n            return handlerResult;\n          }\n          if (code === 0x1b) transition |= ParserState.ESCAPE;\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.OSC_START:\n          this._oscParser.start();\n          break;\n        case ParserAction.OSC_PUT:\n          // inner loop: 0x20 (SP) included, 0x7F (DEL) included\n          for (let j = i + 1; ; j++) {\n            if (j >= length || (code = data[j]) < 0x20 || (code > 0x7f && code < NON_ASCII_PRINTABLE)) {\n              this._oscParser.put(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.OSC_END:\n          handlerResult = this._oscParser.end(code !== 0x18 && code !== 0x1a);\n          if (handlerResult) {\n            this._preserveStack(ParserStackType.OSC, [], 0, transition, i);\n            return handlerResult;\n          }\n          if (code === 0x1b) transition |= ParserState.ESCAPE;\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          this.precedingCodepoint = 0;\n          break;\n      }\n      this.currentState = transition & TableAccess.TRANSITION_STATE_MASK;\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOscHandler, IHandlerCollection, OscFallbackHandlerType, IOscParser, ISubParserStackState } from 'common/parser/Types';\nimport { OscState, PAYLOAD_LIMIT } from 'common/parser/Constants';\nimport { utf32ToString } from 'common/input/TextDecoder';\nimport { IDisposable } from 'common/Types';\n\nconst EMPTY_HANDLERS: IOscHandler[] = [];\n\nexport class OscParser implements IOscParser {\n  private _state = OscState.START;\n  private _active = EMPTY_HANDLERS;\n  private _id = -1;\n  private _handlers: IHandlerCollection<IOscHandler> = Object.create(null);\n  private _handlerFb: OscFallbackHandlerType = () => { };\n  private _stack: ISubParserStackState = {\n    paused: false,\n    loopPosition: 0,\n    fallThrough: false\n  };\n\n  public registerHandler(ident: number, handler: IOscHandler): IDisposable {\n    if (this._handlers[ident] === undefined) {\n      this._handlers[ident] = [];\n    }\n    const handlerList = this._handlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearHandler(ident: number): void {\n    if (this._handlers[ident]) delete this._handlers[ident];\n  }\n  public setHandlerFallback(handler: OscFallbackHandlerType): void {\n    this._handlerFb = handler;\n  }\n\n  public dispose(): void {\n    this._handlers = Object.create(null);\n    this._handlerFb = () => { };\n    this._active = EMPTY_HANDLERS;\n  }\n\n  public reset(): void {\n    // force cleanup handlers if payload was already sent\n    if (this._state === OscState.PAYLOAD) {\n      for (let j = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; j >= 0; --j) {\n        this._active[j].end(false);\n      }\n    }\n    this._stack.paused = false;\n    this._active = EMPTY_HANDLERS;\n    this._id = -1;\n    this._state = OscState.START;\n  }\n\n  private _start(): void {\n    this._active = this._handlers[this._id] || EMPTY_HANDLERS;\n    if (!this._active.length) {\n      this._handlerFb(this._id, 'START');\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].start();\n      }\n    }\n  }\n\n  private _put(data: Uint32Array, start: number, end: number): void {\n    if (!this._active.length) {\n      this._handlerFb(this._id, 'PUT', utf32ToString(data, start, end));\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].put(data, start, end);\n      }\n    }\n  }\n\n  public start(): void {\n    // always reset leftover handlers\n    this.reset();\n    this._state = OscState.ID;\n  }\n\n  /**\n   * Put data to current OSC command.\n   * Expects the identifier of the OSC command in the form\n   * OSC id ; payload ST/BEL\n   * Payload chunks are not further processed and get\n   * directly passed to the handlers.\n   */\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._state === OscState.ABORT) {\n      return;\n    }\n    if (this._state === OscState.ID) {\n      while (start < end) {\n        const code = data[start++];\n        if (code === 0x3b) {\n          this._state = OscState.PAYLOAD;\n          this._start();\n          break;\n        }\n        if (code < 0x30 || 0x39 < code) {\n          this._state = OscState.ABORT;\n          return;\n        }\n        if (this._id === -1) {\n          this._id = 0;\n        }\n        this._id = this._id * 10 + code - 48;\n      }\n    }\n    if (this._state === OscState.PAYLOAD && end - start > 0) {\n      this._put(data, start, end);\n    }\n  }\n\n  /**\n   * Indicates end of an OSC command.\n   * Whether the OSC got aborted or finished normally\n   * is indicated by `success`.\n   */\n  public end(success: boolean, promiseResult: boolean = true): void | Promise<boolean> {\n    if (this._state === OscState.START) {\n      return;\n    }\n    // do nothing if command was faulty\n    if (this._state !== OscState.ABORT) {\n      // if we are still in ID state and get an early end\n      // means that the command has no payload thus we still have\n      // to announce START and send END right after\n      if (this._state === OscState.ID) {\n        this._start();\n      }\n\n      if (!this._active.length) {\n        this._handlerFb(this._id, 'END', success);\n      } else {\n        let handlerResult: boolean | Promise<boolean> = false;\n        let j = this._active.length - 1;\n        let fallThrough = false;\n        if (this._stack.paused) {\n          j = this._stack.loopPosition - 1;\n          handlerResult = promiseResult;\n          fallThrough = this._stack.fallThrough;\n          this._stack.paused = false;\n        }\n        if (!fallThrough && handlerResult === false) {\n          for (; j >= 0; j--) {\n            handlerResult = this._active[j].end(success);\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._stack.paused = true;\n              this._stack.loopPosition = j;\n              this._stack.fallThrough = false;\n              return handlerResult;\n            }\n          }\n          j--;\n        }\n        // cleanup left over handlers\n        // we always have to call .end for proper cleanup,\n        // here we use `success` to indicate whether a handler should execute\n        for (; j >= 0; j--) {\n          handlerResult = this._active[j].end(false);\n          if (handlerResult instanceof Promise) {\n            this._stack.paused = true;\n            this._stack.loopPosition = j;\n            this._stack.fallThrough = true;\n            return handlerResult;\n          }\n        }\n      }\n\n    }\n    this._active = EMPTY_HANDLERS;\n    this._id = -1;\n    this._state = OscState.START;\n  }\n}\n\n/**\n * Convenient class to allow attaching string based handler functions\n * as OSC handlers.\n */\nexport class OscHandler implements IOscHandler {\n  private _data = '';\n  private _hitLimit: boolean = false;\n\n  constructor(private _handler: (data: string) => boolean | Promise<boolean>) { }\n\n  public start(): void {\n    this._data = '';\n    this._hitLimit = false;\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._hitLimit) {\n      return;\n    }\n    this._data += utf32ToString(data, start, end);\n    if (this._data.length > PAYLOAD_LIMIT) {\n      this._data = '';\n      this._hitLimit = true;\n    }\n  }\n\n  public end(success: boolean): boolean | Promise<boolean> {\n    let ret: boolean | Promise<boolean> = false;\n    if (this._hitLimit) {\n      ret = false;\n    } else if (success) {\n      ret = this._handler(this._data);\n      if (ret instanceof Promise) {\n        // need to hold data until `ret` got resolved\n        // dont care for errors, data will be freed anyway on next start\n        return ret.then(res => {\n          this._data = '';\n          this._hitLimit = false;\n          return res;\n        });\n      }\n    }\n    this._data = '';\n    this._hitLimit = false;\n    return ret;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IParams, ParamsArray } from 'common/parser/Types';\n\n// max value supported for a single param/subparam (clamped to positive int32 range)\nconst MAX_VALUE = 0x7FFFFFFF;\n// max allowed subparams for a single sequence (hardcoded limitation)\nconst MAX_SUBPARAMS = 256;\n\n/**\n * Params storage class.\n * This type is used by the parser to accumulate sequence parameters and sub parameters\n * and transmit them to the input handler actions.\n *\n * NOTES:\n *  - params object for action handlers is borrowed, use `.toArray` or `.clone` to get a copy\n *  - never read beyond `params.length - 1` (likely to contain arbitrary data)\n *  - `.getSubParams` returns a borrowed typed array, use `.getSubParamsAll` for cloned sub params\n *  - hardcoded limitations:\n *    - max. value for a single (sub) param is 2^31 - 1 (greater values are clamped to that)\n *    - max. 256 sub params possible\n *    - negative values are not allowed beside -1 (placeholder for default value)\n *\n * About ZDM (Zero Default Mode):\n * ZDM is not orchestrated by this class. If the parser is in ZDM,\n * it should add 0 for empty params, otherwise -1. This does not apply\n * to subparams, empty subparams should always be added with -1.\n */\nexport class Params implements IParams {\n  // params store and length\n  public params: Int32Array;\n  public length: number;\n\n  // sub params store and length\n  protected _subParams: Int32Array;\n  protected _subParamsLength: number;\n\n  // sub params offsets from param: param idx --> [start, end] offset\n  private _subParamsIdx: Uint16Array;\n  private _rejectDigits: boolean;\n  private _rejectSubDigits: boolean;\n  private _digitIsSub: boolean;\n\n  /**\n   * Create a `Params` type from JS array representation.\n   */\n  public static fromArray(values: ParamsArray): Params {\n    const params = new Params();\n    if (!values.length) {\n      return params;\n    }\n    // skip leading sub params\n    for (let i = (Array.isArray(values[0])) ? 1 : 0; i < values.length; ++i) {\n      const value = values[i];\n      if (Array.isArray(value)) {\n        for (let k = 0; k < value.length; ++k) {\n          params.addSubParam(value[k]);\n        }\n      } else {\n        params.addParam(value);\n      }\n    }\n    return params;\n  }\n\n  /**\n   * @param maxLength max length of storable parameters\n   * @param maxSubParamsLength max length of storable sub parameters\n   */\n  constructor(public maxLength: number = 32, public maxSubParamsLength: number = 32) {\n    if (maxSubParamsLength > MAX_SUBPARAMS) {\n      throw new Error('maxSubParamsLength must not be greater than 256');\n    }\n    this.params = new Int32Array(maxLength);\n    this.length = 0;\n    this._subParams = new Int32Array(maxSubParamsLength);\n    this._subParamsLength = 0;\n    this._subParamsIdx = new Uint16Array(maxLength);\n    this._rejectDigits = false;\n    this._rejectSubDigits = false;\n    this._digitIsSub = false;\n  }\n\n  /**\n   * Clone object.\n   */\n  public clone(): Params {\n    const newParams = new Params(this.maxLength, this.maxSubParamsLength);\n    newParams.params.set(this.params);\n    newParams.length = this.length;\n    newParams._subParams.set(this._subParams);\n    newParams._subParamsLength = this._subParamsLength;\n    newParams._subParamsIdx.set(this._subParamsIdx);\n    newParams._rejectDigits = this._rejectDigits;\n    newParams._rejectSubDigits = this._rejectSubDigits;\n    newParams._digitIsSub = this._digitIsSub;\n    return newParams;\n  }\n\n  /**\n   * Get a JS array representation of the current parameters and sub parameters.\n   * The array is structured as follows:\n   *    sequence: \"1;2:3:4;5::6\"\n   *    array   : [1, 2, [3, 4], 5, [-1, 6]]\n   */\n  public toArray(): ParamsArray {\n    const res: ParamsArray = [];\n    for (let i = 0; i < this.length; ++i) {\n      res.push(this.params[i]);\n      const start = this._subParamsIdx[i] >> 8;\n      const end = this._subParamsIdx[i] & 0xFF;\n      if (end - start > 0) {\n        res.push(Array.prototype.slice.call(this._subParams, start, end));\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Reset to initial empty state.\n   */\n  public reset(): void {\n    this.length = 0;\n    this._subParamsLength = 0;\n    this._rejectDigits = false;\n    this._rejectSubDigits = false;\n    this._digitIsSub = false;\n  }\n\n  /**\n   * Add a parameter value.\n   * `Params` only stores up to `maxLength` parameters, any later\n   * parameter will be ignored.\n   * Note: VT devices only stored up to 16 values, xterm seems to\n   * store up to 30.\n   */\n  public addParam(value: number): void {\n    this._digitIsSub = false;\n    if (this.length >= this.maxLength) {\n      this._rejectDigits = true;\n      return;\n    }\n    if (value < -1) {\n      throw new Error('values lesser than -1 are not allowed');\n    }\n    this._subParamsIdx[this.length] = this._subParamsLength << 8 | this._subParamsLength;\n    this.params[this.length++] = value > MAX_VALUE ? MAX_VALUE : value;\n  }\n\n  /**\n   * Add a sub parameter value.\n   * The sub parameter is automatically associated with the last parameter value.\n   * Thus it is not possible to add a subparameter without any parameter added yet.\n   * `Params` only stores up to `subParamsLength` sub parameters, any later\n   * sub parameter will be ignored.\n   */\n  public addSubParam(value: number): void {\n    this._digitIsSub = true;\n    if (!this.length) {\n      return;\n    }\n    if (this._rejectDigits || this._subParamsLength >= this.maxSubParamsLength) {\n      this._rejectSubDigits = true;\n      return;\n    }\n    if (value < -1) {\n      throw new Error('values lesser than -1 are not allowed');\n    }\n    this._subParams[this._subParamsLength++] = value > MAX_VALUE ? MAX_VALUE : value;\n    this._subParamsIdx[this.length - 1]++;\n  }\n\n  /**\n   * Whether parameter at index `idx` has sub parameters.\n   */\n  public hasSubParams(idx: number): boolean {\n    return ((this._subParamsIdx[idx] & 0xFF) - (this._subParamsIdx[idx] >> 8) > 0);\n  }\n\n  /**\n   * Return sub parameters for parameter at index `idx`.\n   * Note: The values are borrowed, thus you need to copy\n   * the values if you need to hold them in nonlocal scope.\n   */\n  public getSubParams(idx: number): Int32Array | null {\n    const start = this._subParamsIdx[idx] >> 8;\n    const end = this._subParamsIdx[idx] & 0xFF;\n    if (end - start > 0) {\n      return this._subParams.subarray(start, end);\n    }\n    return null;\n  }\n\n  /**\n   * Return all sub parameters as {idx: subparams} mapping.\n   * Note: The values are not borrowed.\n   */\n  public getSubParamsAll(): {[idx: number]: Int32Array} {\n    const result: {[idx: number]: Int32Array} = {};\n    for (let i = 0; i < this.length; ++i) {\n      const start = this._subParamsIdx[i] >> 8;\n      const end = this._subParamsIdx[i] & 0xFF;\n      if (end - start > 0) {\n        result[i] = this._subParams.slice(start, end);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Add a single digit value to current parameter.\n   * This is used by the parser to account digits on a char by char basis.\n   */\n  public addDigit(value: number): void {\n    let length;\n    if (this._rejectDigits\n      || !(length = this._digitIsSub ? this._subParamsLength : this.length)\n      || (this._digitIsSub && this._rejectSubDigits)\n    ) {\n      return;\n    }\n\n    const store = this._digitIsSub ? this._subParams : this.params;\n    const cur = store[length - 1];\n    store[length - 1] = ~cur ? Math.min(cur * 10 + value, MAX_VALUE) : value;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ITerminalAddon, IDisposable, Terminal } from 'xterm';\n\nexport interface ILoadedAddon {\n  instance: ITerminalAddon;\n  dispose: () => void;\n  isDisposed: boolean;\n}\n\nexport class AddonManager implements IDisposable {\n  protected _addons: ILoadedAddon[] = [];\n\n  constructor() {\n  }\n\n  public dispose(): void {\n    for (let i = this._addons.length - 1; i >= 0; i--) {\n      this._addons[i].instance.dispose();\n    }\n  }\n\n  public loadAddon(terminal: Terminal, instance: ITerminalAddon): void {\n    const loadedAddon: ILoadedAddon = {\n      instance,\n      dispose: instance.dispose,\n      isDisposed: false\n    };\n    this._addons.push(loadedAddon);\n    instance.dispose = () => this._wrappedAddonDispose(loadedAddon);\n    instance.activate(terminal as any);\n  }\n\n  private _wrappedAddonDispose(loadedAddon: ILoadedAddon): void {\n    if (loadedAddon.isDisposed) {\n      // Do nothing if already disposed\n      return;\n    }\n    let index = -1;\n    for (let i = 0; i < this._addons.length; i++) {\n      if (this._addons[i] === loadedAddon) {\n        index = i;\n        break;\n      }\n    }\n    if (index === -1) {\n      throw new Error('Could not dispose an addon that has not been loaded');\n    }\n    loadedAddon.isDisposed = true;\n    loadedAddon.dispose.apply(loadedAddon.instance);\n    this._addons.splice(index, 1);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer as IBufferApi, IBufferLine as IBufferLineApi, IBufferCell as IBufferCellApi } from 'xterm';\nimport { IBuffer } from 'common/buffer/Types';\nimport { BufferLineApiView } from 'common/public/BufferLineApiView';\nimport { CellData } from 'common/buffer/CellData';\n\nexport class BufferApiView implements IBufferApi {\n  constructor(\n    private _buffer: IBuffer,\n    public readonly type: 'normal' | 'alternate'\n  ) { }\n\n  public init(buffer: IBuffer): BufferApiView {\n    this._buffer = buffer;\n    return this;\n  }\n\n  public get cursorY(): number { return this._buffer.y; }\n  public get cursorX(): number { return this._buffer.x; }\n  public get viewportY(): number { return this._buffer.ydisp; }\n  public get baseY(): number { return this._buffer.ybase; }\n  public get length(): number { return this._buffer.lines.length; }\n  public getLine(y: number): IBufferLineApi | undefined {\n    const line = this._buffer.lines.get(y);\n    if (!line) {\n      return undefined;\n    }\n    return new BufferLineApiView(line);\n  }\n  public getNullCell(): IBufferCellApi { return new CellData(); }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferLine, ICellData } from 'common/Types';\nimport { IBufferCell as IBufferCellApi, IBufferLine as IBufferLineApi } from 'xterm';\n\nexport class BufferLineApiView implements IBufferLineApi {\n  constructor(private _line: IBufferLine) { }\n\n  public get isWrapped(): boolean { return this._line.isWrapped; }\n  public get length(): number { return this._line.length; }\n  public getCell(x: number, cell?: IBufferCellApi): IBufferCellApi | undefined {\n    if (x < 0 || x >= this._line.length) {\n      return undefined;\n    }\n\n    if (cell) {\n      this._line.loadCell(x, cell as ICellData);\n      return cell;\n    }\n    return this._line.loadCell(x, new CellData());\n  }\n  public translateToString(trimRight?: boolean, startColumn?: number, endColumn?: number): string {\n    return this._line.translateToString(trimRight, startColumn, endColumn);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer as IBufferApi, IBufferNamespace as IBufferNamespaceApi } from 'xterm';\nimport { BufferApiView } from 'common/public/BufferApiView';\nimport { IEvent, EventEmitter } from 'common/EventEmitter';\nimport { ICoreTerminal } from 'common/Types';\n\nexport class BufferNamespaceApi implements IBufferNamespaceApi {\n  private _normal: BufferApiView;\n  private _alternate: BufferApiView;\n  private _onBufferChange = new EventEmitter<IBufferApi>();\n  public get onBufferChange(): IEvent<IBufferApi> { return this._onBufferChange.event; }\n\n  constructor(private _core: ICoreTerminal) {\n    this._normal = new BufferApiView(this._core.buffers.normal, 'normal');\n    this._alternate = new BufferApiView(this._core.buffers.alt, 'alternate');\n    this._core.buffers.onBufferActivate(() => this._onBufferChange.fire(this.active));\n  }\n  public get active(): IBufferApi {\n    if (this._core.buffers.active === this._core.buffers.normal) { return this.normal; }\n    if (this._core.buffers.active === this._core.buffers.alt) { return this.alternate; }\n    throw new Error('Active buffer is neither normal nor alternate');\n  }\n  public get normal(): IBufferApi {\n    return this._normal.init(this._core.buffers.normal);\n  }\n  public get alternate(): IBufferApi {\n    return this._alternate.init(this._core.buffers.alt);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IParams } from 'common/parser/Types';\nimport { IDisposable, IFunctionIdentifier, IParser } from 'xterm';\nimport { ICoreTerminal } from 'common/Types';\n\nexport class ParserApi implements IParser {\n  constructor(private _core: ICoreTerminal) { }\n\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerCsiHandler(id, (params: IParams) => callback(params.toArray()));\n  }\n  public addCsiHandler(id: IFunctionIdentifier, callback: (params: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this.registerCsiHandler(id, callback);\n  }\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerDcsHandler(id, (data: string, params: IParams) => callback(data, params.toArray()));\n  }\n  public addDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this.registerDcsHandler(id, callback);\n  }\n  public registerEscHandler(id: IFunctionIdentifier, handler: () => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerEscHandler(id, handler);\n  }\n  public addEscHandler(id: IFunctionIdentifier, handler: () => boolean | Promise<boolean>): IDisposable {\n    return this.registerEscHandler(id, handler);\n  }\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerOscHandler(ident, callback);\n  }\n  public addOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this.registerOscHandler(ident, callback);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICoreTerminal } from 'common/Types';\nimport { IUnicodeHandling, IUnicodeVersionProvider } from 'xterm';\n\nexport class UnicodeApi implements IUnicodeHandling {\n  constructor(private _core: ICoreTerminal) { }\n\n  public register(provider: IUnicodeVersionProvider): void {\n    this._core.unicodeService.register(provider);\n  }\n\n  public get versions(): string[] {\n    return this._core.unicodeService.versions;\n  }\n\n  public get activeVersion(): string {\n    return this._core.unicodeService.activeVersion;\n  }\n\n  public set activeVersion(version: string) {\n    this._core.unicodeService.activeVersion = version;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferService, IOptionsService } from 'common/services/Services';\nimport { BufferSet } from 'common/buffer/BufferSet';\nimport { IBufferSet, IBuffer } from 'common/buffer/Types';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IAttributeData, IBufferLine, ScrollSource } from 'common/Types';\n\nexport const MINIMUM_COLS = 2; // Less than 2 can mess with wide chars\nexport const MINIMUM_ROWS = 1;\n\nexport class BufferService extends Disposable implements IBufferService {\n  public serviceBrand: any;\n\n  public cols: number;\n  public rows: number;\n  public buffers: IBufferSet;\n  /** Whether the user is scrolling (locks the scroll position) */\n  public isUserScrolling: boolean = false;\n\n  private _onResize = new EventEmitter<{ cols: number, rows: number }>();\n  public get onResize(): IEvent<{ cols: number, rows: number }> { return this._onResize.event; }\n  private _onScroll = new EventEmitter<number>();\n  public get onScroll(): IEvent<number> { return this._onScroll.event; }\n\n  public get buffer(): IBuffer { return this.buffers.active; }\n\n  /** An IBufferline to clone/copy from for new blank lines */\n  private _cachedBlankLine: IBufferLine | undefined;\n\n  constructor(\n    @IOptionsService private _optionsService: IOptionsService\n  ) {\n    super();\n    this.cols = Math.max(_optionsService.rawOptions.cols || 0, MINIMUM_COLS);\n    this.rows = Math.max(_optionsService.rawOptions.rows || 0, MINIMUM_ROWS);\n    this.buffers = new BufferSet(_optionsService, this);\n  }\n\n  public dispose(): void {\n    super.dispose();\n    this.buffers.dispose();\n  }\n\n  public resize(cols: number, rows: number): void {\n    this.cols = cols;\n    this.rows = rows;\n    this.buffers.resize(cols, rows);\n    this.buffers.setupTabStops(this.cols);\n    this._onResize.fire({ cols, rows });\n  }\n\n  public reset(): void {\n    this.buffers.reset();\n    this.isUserScrolling = false;\n  }\n\n  /**\n   * Scroll the terminal down 1 row, creating a blank line.\n   * @param isWrapped Whether the new line is wrapped from the previous line.\n   */\n  public scroll(eraseAttr: IAttributeData, isWrapped: boolean = false): void {\n    const buffer = this.buffer;\n\n    let newLine: IBufferLine | undefined;\n    newLine = this._cachedBlankLine;\n    if (!newLine || newLine.length !== this.cols || newLine.getFg(0) !== eraseAttr.fg || newLine.getBg(0) !== eraseAttr.bg) {\n      newLine = buffer.getBlankLine(eraseAttr, isWrapped);\n      this._cachedBlankLine = newLine;\n    }\n    newLine.isWrapped = isWrapped;\n\n    const topRow = buffer.ybase + buffer.scrollTop;\n    const bottomRow = buffer.ybase + buffer.scrollBottom;\n\n    if (buffer.scrollTop === 0) {\n      // Determine whether the buffer is going to be trimmed after insertion.\n      const willBufferBeTrimmed = buffer.lines.isFull;\n\n      // Insert the line using the fastest method\n      if (bottomRow === buffer.lines.length - 1) {\n        if (willBufferBeTrimmed) {\n          buffer.lines.recycle().copyFrom(newLine);\n        } else {\n          buffer.lines.push(newLine.clone());\n        }\n      } else {\n        buffer.lines.splice(bottomRow + 1, 0, newLine.clone());\n      }\n\n      // Only adjust ybase and ydisp when the buffer is not trimmed\n      if (!willBufferBeTrimmed) {\n        buffer.ybase++;\n        // Only scroll the ydisp with ybase if the user has not scrolled up\n        if (!this.isUserScrolling) {\n          buffer.ydisp++;\n        }\n      } else {\n        // When the buffer is full and the user has scrolled up, keep the text\n        // stable unless ydisp is right at the top\n        if (this.isUserScrolling) {\n          buffer.ydisp = Math.max(buffer.ydisp - 1, 0);\n        }\n      }\n    } else {\n      // scrollTop is non-zero which means no line will be going to the\n      // scrollback, instead we can just shift them in-place.\n      const scrollRegionHeight = bottomRow - topRow + 1 /* as it's zero-based */;\n      buffer.lines.shiftElements(topRow + 1, scrollRegionHeight - 1, -1);\n      buffer.lines.set(bottomRow, newLine.clone());\n    }\n\n    // Move the viewport to the bottom of the buffer unless the user is\n    // scrolling.\n    if (!this.isUserScrolling) {\n      buffer.ydisp = buffer.ybase;\n    }\n\n    this._onScroll.fire(buffer.ydisp);\n  }\n\n  /**\n   * Scroll the display of the terminal\n   * @param disp The number of lines to scroll down (negative scroll up).\n   * @param suppressScrollEvent Don't emit the scroll event as scrollLines. This is used\n   * to avoid unwanted events being handled by the viewport when the event was triggered from the\n   * viewport originally.\n   */\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void {\n    const buffer = this.buffer;\n    if (disp < 0) {\n      if (buffer.ydisp === 0) {\n        return;\n      }\n      this.isUserScrolling = true;\n    } else if (disp + buffer.ydisp >= buffer.ybase) {\n      this.isUserScrolling = false;\n    }\n\n    const oldYdisp = buffer.ydisp;\n    buffer.ydisp = Math.max(Math.min(buffer.ydisp + disp, buffer.ybase), 0);\n\n    // No change occurred, don't trigger scroll/refresh\n    if (oldYdisp === buffer.ydisp) {\n      return;\n    }\n\n    if (!suppressScrollEvent) {\n      this._onScroll.fire(buffer.ydisp);\n    }\n  }\n\n  /**\n   * Scroll the display of the terminal by a number of pages.\n   * @param pageCount The number of pages to scroll (negative scrolls up).\n   */\n  public scrollPages(pageCount: number): void {\n    this.scrollLines(pageCount * (this.rows - 1));\n  }\n\n  /**\n   * Scrolls the display of the terminal to the top.\n   */\n  public scrollToTop(): void {\n    this.scrollLines(-this.buffer.ydisp);\n  }\n\n  /**\n   * Scrolls the display of the terminal to the bottom.\n   */\n  public scrollToBottom(): void {\n    this.scrollLines(this.buffer.ybase - this.buffer.ydisp);\n  }\n\n  public scrollToLine(line: number): void {\n    const scrollAmount = line - this.buffer.ydisp;\n    if (scrollAmount !== 0) {\n      this.scrollLines(scrollAmount);\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharsetService } from 'common/services/Services';\nimport { ICharset } from 'common/Types';\n\nexport class CharsetService implements ICharsetService {\n  public serviceBrand: any;\n\n  public charset: ICharset | undefined;\n  public glevel: number = 0;\n\n  private _charsets: (ICharset | undefined)[] = [];\n\n  public reset(): void {\n    this.charset = undefined;\n    this._charsets = [];\n    this.glevel = 0;\n  }\n\n  public setgLevel(g: number): void {\n    this.glevel = g;\n    this.charset = this._charsets[g];\n  }\n\n  public setgCharset(g: number, charset: ICharset | undefined): void {\n    this._charsets[g] = charset;\n    if (this.glevel === g) {\n      this.charset = charset;\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IBufferService, ICoreService, ICoreMouseService } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { ICoreMouseProtocol, ICoreMouseEvent, CoreMouseEncoding, CoreMouseEventType, CoreMouseButton, CoreMouseAction } from 'common/Types';\n\n/**\n * Supported default protocols.\n */\nconst DEFAULT_PROTOCOLS: {[key: string]: ICoreMouseProtocol} = {\n  /**\n   * NONE\n   * Events: none\n   * Modifiers: none\n   */\n  NONE: {\n    events: CoreMouseEventType.NONE,\n    restrict: () => false\n  },\n  /**\n   * X10\n   * Events: mousedown\n   * Modifiers: none\n   */\n  X10: {\n    events: CoreMouseEventType.DOWN,\n    restrict: (e: ICoreMouseEvent) => {\n      // no wheel, no move, no up\n      if (e.button === CoreMouseButton.WHEEL || e.action !== CoreMouseAction.DOWN) {\n        return false;\n      }\n      // no modifiers\n      e.ctrl = false;\n      e.alt = false;\n      e.shift = false;\n      return true;\n    }\n  },\n  /**\n   * VT200\n   * Events: mousedown / mouseup / wheel\n   * Modifiers: all\n   */\n  VT200: {\n    events: CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL,\n    restrict: (e: ICoreMouseEvent) => {\n      // no move\n      if (e.action === CoreMouseAction.MOVE) {\n        return false;\n      }\n      return true;\n    }\n  },\n  /**\n   * DRAG\n   * Events: mousedown / mouseup / wheel / mousedrag\n   * Modifiers: all\n   */\n  DRAG: {\n    events: CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL | CoreMouseEventType.DRAG,\n    restrict: (e: ICoreMouseEvent) => {\n      // no move without button\n      if (e.action === CoreMouseAction.MOVE && e.button === CoreMouseButton.NONE) {\n        return false;\n      }\n      return true;\n    }\n  },\n  /**\n   * ANY\n   * Events: all mouse related events\n   * Modifiers: all\n   */\n  ANY: {\n    events:\n      CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL\n      | CoreMouseEventType.DRAG | CoreMouseEventType.MOVE,\n    restrict: (e: ICoreMouseEvent) => true\n  }\n};\n\nconst enum Modifiers {\n  SHIFT = 4,\n  ALT = 8,\n  CTRL = 16\n}\n\n// helper for default encoders to generate the event code.\nfunction eventCode(e: ICoreMouseEvent, isSGR: boolean): number {\n  let code = (e.ctrl ? Modifiers.CTRL : 0) | (e.shift ? Modifiers.SHIFT : 0) | (e.alt ? Modifiers.ALT : 0);\n  if (e.button === CoreMouseButton.WHEEL) {\n    code |= 64;\n    code |= e.action;\n  } else {\n    code |= e.button & 3;\n    if (e.button & 4) {\n      code |= 64;\n    }\n    if (e.button & 8) {\n      code |= 128;\n    }\n    if (e.action === CoreMouseAction.MOVE) {\n      code |= CoreMouseAction.MOVE;\n    } else if (e.action === CoreMouseAction.UP && !isSGR) {\n      // special case - only SGR can report button on release\n      // all others have to go with NONE\n      code |= CoreMouseButton.NONE;\n    }\n  }\n  return code;\n}\n\nconst S = String.fromCharCode;\n\n/**\n * Supported default encodings.\n */\nconst DEFAULT_ENCODINGS: {[key: string]: CoreMouseEncoding} = {\n  /**\n   * DEFAULT - CSI M Pb Px Py\n   * Single byte encoding for coords and event code.\n   * Can encode values up to 223 (1-based).\n   */\n  DEFAULT: (e: ICoreMouseEvent) => {\n    const params = [eventCode(e, false) + 32, e.col + 32, e.row + 32];\n    // supress mouse report if we exceed addressible range\n    // Note this is handled differently by emulators\n    // - xterm:         sends 0;0 coords instead\n    // - vte, konsole:  no report\n    if (params[0] > 255 || params[1] > 255 || params[2] > 255) {\n      return '';\n    }\n    return `\\x1b[M${S(params[0])}${S(params[1])}${S(params[2])}`;\n  },\n  /**\n   * SGR - CSI < Pb ; Px ; Py M|m\n   * No encoding limitation.\n   * Can report button on release and works with a well formed sequence.\n   */\n  SGR: (e: ICoreMouseEvent) => {\n    const final = (e.action === CoreMouseAction.UP && e.button !== CoreMouseButton.WHEEL) ? 'm' : 'M';\n    return `\\x1b[<${eventCode(e, true)};${e.col};${e.row}${final}`;\n  }\n};\n\n/**\n * CoreMouseService\n *\n * Provides mouse tracking reports with different protocols and encodings.\n *  - protocols: NONE (default), X10, VT200, DRAG, ANY\n *  - encodings: DEFAULT, SGR (UTF8, URXVT removed in #2507)\n *\n * Custom protocols/encodings can be added by `addProtocol` / `addEncoding`.\n * To activate a protocol/encoding, set `activeProtocol` / `activeEncoding`.\n * Switching a protocol will send a notification event `onProtocolChange`\n * with a list of needed events to track.\n *\n * The service handles the mouse tracking state and decides whether to send\n * a tracking report to the backend based on protocol and encoding limitations.\n * To send a mouse event call `triggerMouseEvent`.\n */\nexport class CoreMouseService implements ICoreMouseService {\n  private _protocols: {[name: string]: ICoreMouseProtocol} = {};\n  private _encodings: {[name: string]: CoreMouseEncoding} = {};\n  private _activeProtocol: string = '';\n  private _activeEncoding: string = '';\n  private _onProtocolChange = new EventEmitter<CoreMouseEventType>();\n  private _lastEvent: ICoreMouseEvent | null = null;\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ICoreService private readonly _coreService: ICoreService\n  ) {\n    // register default protocols and encodings\n    for (const name of Object.keys(DEFAULT_PROTOCOLS)) this.addProtocol(name, DEFAULT_PROTOCOLS[name]);\n    for (const name of Object.keys(DEFAULT_ENCODINGS)) this.addEncoding(name, DEFAULT_ENCODINGS[name]);\n    // call reset to set defaults\n    this.reset();\n  }\n\n  public addProtocol(name: string, protocol: ICoreMouseProtocol): void {\n    this._protocols[name] = protocol;\n  }\n\n  public addEncoding(name: string, encoding: CoreMouseEncoding): void {\n    this._encodings[name] = encoding;\n  }\n\n  public get activeProtocol(): string {\n    return this._activeProtocol;\n  }\n\n  public get areMouseEventsActive(): boolean {\n    return this._protocols[this._activeProtocol].events !== 0;\n  }\n\n  public set activeProtocol(name: string) {\n    if (!this._protocols[name]) {\n      throw new Error(`unknown protocol \"${name}\"`);\n    }\n    this._activeProtocol = name;\n    this._onProtocolChange.fire(this._protocols[name].events);\n  }\n\n  public get activeEncoding(): string {\n    return this._activeEncoding;\n  }\n\n  public set activeEncoding(name: string) {\n    if (!this._encodings[name]) {\n      throw new Error(`unknown encoding \"${name}\"`);\n    }\n    this._activeEncoding = name;\n  }\n\n  public reset(): void {\n    this.activeProtocol = 'NONE';\n    this.activeEncoding = 'DEFAULT';\n    this._lastEvent = null;\n  }\n\n  /**\n   * Event to announce changes in mouse tracking.\n   */\n  public get onProtocolChange(): IEvent<CoreMouseEventType> {\n    return this._onProtocolChange.event;\n  }\n\n  /**\n   * Triggers a mouse event to be sent.\n   *\n   * Returns true if the event passed all protocol restrictions and a report\n   * was sent, otherwise false. The return value may be used to decide whether\n   * the default event action in the bowser component should be omitted.\n   *\n   * Note: The method will change values of the given event object\n   * to fullfill protocol and encoding restrictions.\n   */\n  public triggerMouseEvent(e: ICoreMouseEvent): boolean {\n    // range check for col/row\n    if (e.col < 0 || e.col >= this._bufferService.cols\n        || e.row < 0 || e.row >= this._bufferService.rows) {\n      return false;\n    }\n\n    // filter nonsense combinations of button + action\n    if (e.button === CoreMouseButton.WHEEL && e.action === CoreMouseAction.MOVE) {\n      return false;\n    }\n    if (e.button === CoreMouseButton.NONE && e.action !== CoreMouseAction.MOVE) {\n      return false;\n    }\n    if (e.button !== CoreMouseButton.WHEEL && (e.action === CoreMouseAction.LEFT || e.action === CoreMouseAction.RIGHT)) {\n      return false;\n    }\n\n    // report 1-based coords\n    e.col++;\n    e.row++;\n\n    // debounce move at grid level\n    if (e.action === CoreMouseAction.MOVE && this._lastEvent && this._compareEvents(this._lastEvent, e)) {\n      return false;\n    }\n\n    // apply protocol restrictions\n    if (!this._protocols[this._activeProtocol].restrict(e)) {\n      return false;\n    }\n\n    // encode report and send\n    const report = this._encodings[this._activeEncoding](e);\n    if (report) {\n      // always send DEFAULT as binary data\n      if (this._activeEncoding === 'DEFAULT') {\n        this._coreService.triggerBinaryEvent(report);\n      } else {\n        this._coreService.triggerDataEvent(report, true);\n      }\n    }\n\n    this._lastEvent = e;\n\n    return true;\n  }\n\n  public explainEvents(events: CoreMouseEventType): {[event: string]: boolean} {\n    return {\n      down: !!(events & CoreMouseEventType.DOWN),\n      up: !!(events & CoreMouseEventType.UP),\n      drag: !!(events & CoreMouseEventType.DRAG),\n      move: !!(events & CoreMouseEventType.MOVE),\n      wheel: !!(events & CoreMouseEventType.WHEEL)\n    };\n  }\n\n  private _compareEvents(e1: ICoreMouseEvent, e2: ICoreMouseEvent): boolean {\n    if (e1.col !== e2.col) return false;\n    if (e1.row !== e2.row) return false;\n    if (e1.button !== e2.button) return false;\n    if (e1.action !== e2.action) return false;\n    if (e1.ctrl !== e2.ctrl) return false;\n    if (e1.alt !== e2.alt) return false;\n    if (e1.shift !== e2.shift) return false;\n    return true;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICoreService, ILogService, IOptionsService, IBufferService } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { IDecPrivateModes, IModes } from 'common/Types';\nimport { clone } from 'common/Clone';\nimport { Disposable } from 'common/Lifecycle';\n\nconst DEFAULT_MODES: IModes = Object.freeze({\n  insertMode: false\n});\n\nconst DEFAULT_DEC_PRIVATE_MODES: IDecPrivateModes = Object.freeze({\n  applicationCursorKeys: false,\n  applicationKeypad: false,\n  bracketedPasteMode: false,\n  origin: false,\n  reverseWraparound: false,\n  sendFocus: false,\n  wraparound: true // defaults: xterm - true, vt100 - false\n});\n\nexport class CoreService extends Disposable implements ICoreService {\n  public serviceBrand: any;\n\n  public isCursorInitialized: boolean = false;\n  public isCursorHidden: boolean = false;\n  public modes: IModes;\n  public decPrivateModes: IDecPrivateModes;\n\n  // Circular dependency, this must be unset or memory will leak after Terminal.dispose\n  private _scrollToBottom: (() => void) | undefined;\n\n  private _onData = this.register(new EventEmitter<string>());\n  public get onData(): IEvent<string> { return this._onData.event; }\n  private _onUserInput = this.register(new EventEmitter<void>());\n  public get onUserInput(): IEvent<void> { return this._onUserInput.event; }\n  private _onBinary = this.register(new EventEmitter<string>());\n  public get onBinary(): IEvent<string> { return this._onBinary.event; }\n\n  constructor(\n    // TODO: Move this into a service\n    scrollToBottom: () => void,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ILogService private readonly _logService: ILogService,\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n    this._scrollToBottom = scrollToBottom;\n    this.register({ dispose: () => this._scrollToBottom = undefined });\n    this.modes = clone(DEFAULT_MODES);\n    this.decPrivateModes = clone(DEFAULT_DEC_PRIVATE_MODES);\n  }\n\n  public reset(): void {\n    this.modes = clone(DEFAULT_MODES);\n    this.decPrivateModes = clone(DEFAULT_DEC_PRIVATE_MODES);\n  }\n\n  public triggerDataEvent(data: string, wasUserInput: boolean = false): void {\n    // Prevents all events to pty process if stdin is disabled\n    if (this._optionsService.rawOptions.disableStdin) {\n      return;\n    }\n\n    // Input is being sent to the terminal, the terminal should focus the prompt.\n    const buffer = this._bufferService.buffer;\n    if (buffer.ybase !== buffer.ydisp) {\n      this._scrollToBottom!();\n    }\n\n    // Fire onUserInput so listeners can react as well (eg. clear selection)\n    if (wasUserInput) {\n      this._onUserInput.fire();\n    }\n\n    // Fire onData API\n    this._logService.debug(`sending data \"${data}\"`, () => data.split('').map(e => e.charCodeAt(0)));\n    this._onData.fire(data);\n  }\n\n  public triggerBinaryEvent(data: string): void {\n    if (this._optionsService.rawOptions.disableStdin) {\n      return;\n    }\n    this._logService.debug(`sending binary \"${data}\"`, () => data.split('').map(e => e.charCodeAt(0)));\n    this._onBinary.fire(data);\n  }\n}\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { css } from 'common/Color';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IDecorationService, IInternalDecoration } from 'common/services/Services';\nimport { SortedList } from 'common/SortedList';\nimport { IColor } from 'common/Types';\nimport { IDecorationOptions, IDecoration, IMarker, IEvent } from 'xterm';\n\nexport class DecorationService extends Disposable implements IDecorationService {\n  public serviceBrand: any;\n\n  /**\n   * A list of all decorations, sorted by the marker's line value. This relies on the fact that\n   * while marker line values do change, they should all change by the same amount so this should\n   * never become out of order.\n   */\n  private readonly _decorations: SortedList<IInternalDecoration> = new SortedList(e => e.marker.line);\n\n  private _onDecorationRegistered = this.register(new EventEmitter<IInternalDecoration>());\n  public get onDecorationRegistered(): IEvent<IInternalDecoration> { return this._onDecorationRegistered.event; }\n  private _onDecorationRemoved = this.register(new EventEmitter<IInternalDecoration>());\n  public get onDecorationRemoved(): IEvent<IInternalDecoration> { return this._onDecorationRemoved.event; }\n\n  public get decorations(): IterableIterator<IInternalDecoration> { return this._decorations.values(); }\n\n  constructor() {\n    super();\n  }\n\n  public registerDecoration(options: IDecorationOptions): IDecoration | undefined {\n    if (options.marker.isDisposed) {\n      return undefined;\n    }\n    const decoration = new Decoration(options);\n    if (decoration) {\n      const markerDispose = decoration.marker.onDispose(() => decoration.dispose());\n      decoration.onDispose(() => {\n        if (decoration) {\n          if (this._decorations.delete(decoration)) {\n            this._onDecorationRemoved.fire(decoration);\n          }\n          markerDispose.dispose();\n        }\n      });\n      this._decorations.insert(decoration);\n      this._onDecorationRegistered.fire(decoration);\n    }\n    return decoration;\n  }\n\n  public reset(): void {\n    for (const d of this._decorations.values()) {\n      d.dispose();\n    }\n    this._decorations.clear();\n  }\n\n  public *getDecorationsAtLine(line: number): IterableIterator<IInternalDecoration> {\n    return this._decorations.getKeyIterator(line);\n  }\n\n  public *getDecorationsAtCell(x: number, line: number, layer?: 'bottom' | 'top'): IterableIterator<IInternalDecoration> {\n    let xmin = 0;\n    let xmax = 0;\n    for (const d of this._decorations.getKeyIterator(line)) {\n      xmin = d.options.x ?? 0;\n      xmax = xmin + (d.options.width ?? 1);\n      if (x >= xmin && x < xmax && (!layer || (d.options.layer ?? 'bottom') === layer)) {\n        yield d;\n      }\n    }\n  }\n\n  public dispose(): void {\n    for (const d of this._decorations.values()) {\n      this._onDecorationRemoved.fire(d);\n    }\n    this.reset();\n  }\n}\n\nclass Decoration extends Disposable implements IInternalDecoration {\n  public readonly marker: IMarker;\n  public element: HTMLElement | undefined;\n  public isDisposed: boolean = false;\n\n  public readonly onRenderEmitter = this.register(new EventEmitter<HTMLElement>());\n  public readonly onRender = this.onRenderEmitter.event;\n  private _onDispose = this.register(new EventEmitter<void>());\n  public readonly onDispose = this._onDispose.event;\n\n  private _cachedBg: IColor | undefined | null = null;\n  public get backgroundColorRGB(): IColor | undefined {\n    if (this._cachedBg === null) {\n      if (this.options.backgroundColor) {\n        this._cachedBg = css.toColor(this.options.backgroundColor);\n      } else {\n        this._cachedBg = undefined;\n      }\n    }\n    return this._cachedBg;\n  }\n\n  private _cachedFg: IColor | undefined | null = null;\n  public get foregroundColorRGB(): IColor | undefined {\n    if (this._cachedFg === null) {\n      if (this.options.foregroundColor) {\n        this._cachedFg = css.toColor(this.options.foregroundColor);\n      } else {\n        this._cachedFg = undefined;\n      }\n    }\n    return this._cachedFg;\n  }\n\n  constructor(\n    public readonly options: IDecorationOptions\n  ) {\n    super();\n    this.marker = options.marker;\n    if (this.options.overviewRulerOptions && !this.options.overviewRulerOptions.position) {\n      this.options.overviewRulerOptions.position = 'full';\n    }\n  }\n\n  public override dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    this._onDispose.fire();\n    super.dispose();\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferService, IDirtyRowService } from 'common/services/Services';\n\nexport class DirtyRowService implements IDirtyRowService {\n  public serviceBrand: any;\n\n  private _start!: number;\n  private _end!: number;\n\n  public get start(): number { return this._start; }\n  public get end(): number { return this._end; }\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService\n  ) {\n    this.clearRange();\n  }\n\n  public clearRange(): void {\n    this._start = this._bufferService.buffer.y;\n    this._end = this._bufferService.buffer.y;\n  }\n\n  public markDirty(y: number): void {\n    if (y < this._start) {\n      this._start = y;\n    } else if (y > this._end) {\n      this._end = y;\n    }\n  }\n\n  public markRangeDirty(y1: number, y2: number): void {\n    if (y1 > y2) {\n      const temp = y1;\n      y1 = y2;\n      y2 = temp;\n    }\n    if (y1 < this._start) {\n      this._start = y1;\n    }\n    if (y2 > this._end) {\n      this._end = y2;\n    }\n  }\n\n  public markAllDirty(): void {\n    this.markRangeDirty(0, this._bufferService.rows - 1);\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n *\n * This was heavily inspired from microsoft/vscode's dependency injection system (MIT).\n */\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IInstantiationService, IServiceIdentifier } from 'common/services/Services';\nimport { getServiceDependencies } from 'common/services/ServiceRegistry';\n\nexport class ServiceCollection {\n\n  private _entries = new Map<IServiceIdentifier<any>, any>();\n\n  constructor(...entries: [IServiceIdentifier<any>, any][]) {\n    for (const [id, service] of entries) {\n      this.set(id, service);\n    }\n  }\n\n  public set<T>(id: IServiceIdentifier<T>, instance: T): T {\n    const result = this._entries.get(id);\n    this._entries.set(id, instance);\n    return result;\n  }\n\n  public forEach(callback: (id: IServiceIdentifier<any>, instance: any) => any): void {\n    this._entries.forEach((value, key) => callback(key, value));\n  }\n\n  public has(id: IServiceIdentifier<any>): boolean {\n    return this._entries.has(id);\n  }\n\n  public get<T>(id: IServiceIdentifier<T>): T | undefined {\n    return this._entries.get(id);\n  }\n}\n\nexport class InstantiationService implements IInstantiationService {\n  public serviceBrand: undefined;\n\n  private readonly _services: ServiceCollection = new ServiceCollection();\n\n  constructor() {\n    this._services.set(IInstantiationService, this);\n  }\n\n  public setService<T>(id: IServiceIdentifier<T>, instance: T): void {\n    this._services.set(id, instance);\n  }\n\n  public getService<T>(id: IServiceIdentifier<T>): T | undefined {\n    return this._services.get(id);\n  }\n\n  public createInstance<T>(ctor: any, ...args: any[]): T {\n    const serviceDependencies = getServiceDependencies(ctor).sort((a, b) => a.index - b.index);\n\n    const serviceArgs: any[] = [];\n    for (const dependency of serviceDependencies) {\n      const service = this._services.get(dependency.id);\n      if (!service) {\n        throw new Error(`[createInstance] ${ctor.name} depends on UNKNOWN service ${dependency.id}.`);\n      }\n      serviceArgs.push(service);\n    }\n\n    const firstServiceArgPos = serviceDependencies.length > 0 ? serviceDependencies[0].index : args.length;\n\n    // check for argument mismatches, adjust static args if needed\n    if (args.length !== firstServiceArgPos) {\n      throw new Error(`[createInstance] First service dependency of ${ctor.name} at position ${firstServiceArgPos + 1} conflicts with ${args.length} static arguments`);\n    }\n\n    // now create the instance\n    return new ctor(...[...args, ...serviceArgs]);\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ILogService, IOptionsService, LogLevelEnum } from 'common/services/Services';\n\ntype LogType = (message?: any, ...optionalParams: any[]) => void;\n\ninterface IConsole {\n  log: LogType;\n  error: LogType;\n  info: LogType;\n  trace: LogType;\n  warn: LogType;\n}\n\n// console is available on both node.js and browser contexts but the common\n// module doesn't depend on them so we need to explicitly declare it.\ndeclare const console: IConsole;\n\nconst optionsKeyToLogLevel: { [key: string]: LogLevelEnum } = {\n  debug: LogLevelEnum.DEBUG,\n  info: LogLevelEnum.INFO,\n  warn: LogLevelEnum.WARN,\n  error: LogLevelEnum.ERROR,\n  off: LogLevelEnum.OFF\n};\n\nconst LOG_PREFIX = 'xterm.js: ';\n\nexport class LogService implements ILogService {\n  public serviceBrand: any;\n\n  public logLevel: LogLevelEnum = LogLevelEnum.OFF;\n\n  constructor(\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    this._updateLogLevel();\n    this._optionsService.onOptionChange(key => {\n      if (key === 'logLevel') {\n        this._updateLogLevel();\n      }\n    });\n  }\n\n  private _updateLogLevel(): void {\n    this.logLevel = optionsKeyToLogLevel[this._optionsService.rawOptions.logLevel];\n  }\n\n  private _evalLazyOptionalParams(optionalParams: any[]): void {\n    for (let i = 0; i < optionalParams.length; i++) {\n      if (typeof optionalParams[i] === 'function') {\n        optionalParams[i] = optionalParams[i]();\n      }\n    }\n  }\n\n  private _log(type: LogType, message: string, optionalParams: any[]): void {\n    this._evalLazyOptionalParams(optionalParams);\n    type.call(console, LOG_PREFIX + message, ...optionalParams);\n  }\n\n  public debug(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.DEBUG) {\n      this._log(console.log, message, optionalParams);\n    }\n  }\n\n  public info(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.INFO) {\n      this._log(console.info, message, optionalParams);\n    }\n  }\n\n  public warn(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.WARN) {\n      this._log(console.warn, message, optionalParams);\n    }\n  }\n\n  public error(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.ERROR) {\n      this._log(console.error, message, optionalParams);\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOptionsService, ITerminalOptions, FontWeight } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { isMac } from 'common/Platform';\n\n// Source: https://freesound.org/people/altemark/sounds/45759/\n// This sound is released under the Creative Commons Attribution 3.0 Unported\n// (CC BY 3.0) license. It was created by 'altemark'. No modifications have been\n// made, apart from the conversion to base64.\nexport const DEFAULT_BELL_SOUND = 'data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjMyLjEwNAAAAAAAAAAAAAAA//tQxAADB8AhSmxhIIEVCSiJrDCQBTcu3UrAIwUdkRgQbFAZC1CQEwTJ9mjRvBA4UOLD8nKVOWfh+UlK3z/177OXrfOdKl7pyn3Xf//WreyTRUoAWgBgkOAGbZHBgG1OF6zM82DWbZaUmMBptgQhGjsyYqc9ae9XFz280948NMBWInljyzsNRFLPWdnZGWrddDsjK1unuSrVN9jJsK8KuQtQCtMBjCEtImISdNKJOopIpBFpNSMbIHCSRpRR5iakjTiyzLhchUUBwCgyKiweBv/7UsQbg8isVNoMPMjAAAA0gAAABEVFGmgqK////9bP/6XCykxBTUUzLjEwMKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq';\n\nexport const DEFAULT_OPTIONS: Readonly<ITerminalOptions> = {\n  cols: 80,\n  rows: 24,\n  cursorBlink: false,\n  cursorStyle: 'block',\n  cursorWidth: 1,\n  customGlyphs: true,\n  bellSound: DEFAULT_BELL_SOUND,\n  bellStyle: 'none',\n  drawBoldTextInBrightColors: true,\n  fastScrollModifier: 'alt',\n  fastScrollSensitivity: 5,\n  fontFamily: 'courier-new, courier, monospace',\n  fontSize: 15,\n  fontWeight: 'normal',\n  fontWeightBold: 'bold',\n  lineHeight: 1.0,\n  linkTooltipHoverDuration: 500,\n  letterSpacing: 0,\n  logLevel: 'info',\n  scrollback: 1000,\n  scrollSensitivity: 1,\n  screenReaderMode: false,\n  macOptionIsMeta: false,\n  macOptionClickForcesSelection: false,\n  minimumContrastRatio: 1,\n  disableStdin: false,\n  allowProposedApi: true,\n  allowTransparency: false,\n  tabStopWidth: 8,\n  theme: {},\n  rightClickSelectsWord: isMac,\n  rendererType: 'canvas',\n  windowOptions: {},\n  windowsMode: false,\n  wordSeparator: ' ()[]{}\\',\"`',\n  altClickMovesCursor: true,\n  convertEol: false,\n  termName: 'xterm',\n  cancelEvents: false,\n  overviewRulerWidth: undefined\n};\n\nconst FONT_WEIGHT_OPTIONS: Extract<FontWeight, string>[] = ['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900'];\n\nexport class OptionsService implements IOptionsService {\n  public serviceBrand: any;\n\n  public readonly rawOptions: ITerminalOptions;\n  public options: ITerminalOptions;\n\n  private _onOptionChange = new EventEmitter<string>();\n  public get onOptionChange(): IEvent<string> { return this._onOptionChange.event; }\n\n  constructor(options: Partial<ITerminalOptions>) {\n    // set the default value of each option\n    const defaultOptions = { ...DEFAULT_OPTIONS };\n    for (const key in options) {\n      if (key in defaultOptions) {\n        try {\n          const newValue = options[key];\n          defaultOptions[key] = this._sanitizeAndValidateOption(key, newValue);\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    }\n\n    // set up getters and setters for each option\n    this.rawOptions = defaultOptions;\n    this.options = { ... defaultOptions };\n    this._setupOptions();\n  }\n\n  private _setupOptions(): void {\n    const getter = (propName: string): any => {\n      if (!(propName in DEFAULT_OPTIONS)) {\n        throw new Error(`No option with key \"${propName}\"`);\n      }\n      return this.rawOptions[propName];\n    };\n\n    const setter = (propName: string, value: any): void => {\n      if (!(propName in DEFAULT_OPTIONS)) {\n        throw new Error(`No option with key \"${propName}\"`);\n      }\n\n      value = this._sanitizeAndValidateOption(propName, value);\n      // Don't fire an option change event if they didn't change\n      if (this.rawOptions[propName] !== value) {\n        this.rawOptions[propName] = value;\n        this._onOptionChange.fire(propName);\n      }\n    };\n\n    for (const propName in this.rawOptions) {\n      const desc = {\n        get: getter.bind(this, propName),\n        set: setter.bind(this, propName)\n      };\n      Object.defineProperty(this.options, propName, desc);\n    }\n  }\n\n  public setOption(key: string, value: any): void {\n    this.options[key] = value;\n  }\n\n  private _sanitizeAndValidateOption(key: string, value: any): any {\n    switch (key) {\n      case 'bellStyle':\n      case 'cursorStyle':\n      case 'rendererType':\n      case 'wordSeparator':\n        if (!value) {\n          value = DEFAULT_OPTIONS[key];\n        }\n        break;\n      case 'fontWeight':\n      case 'fontWeightBold':\n        if (typeof value === 'number' && 1 <= value && value <= 1000) {\n          // already valid numeric value\n          break;\n        }\n        value = FONT_WEIGHT_OPTIONS.includes(value) ? value : DEFAULT_OPTIONS[key];\n        break;\n      case 'cursorWidth':\n        value = Math.floor(value);\n        // Fall through for bounds check\n      case 'lineHeight':\n      case 'tabStopWidth':\n        if (value < 1) {\n          throw new Error(`${key} cannot be less than 1, value: ${value}`);\n        }\n        break;\n      case 'minimumContrastRatio':\n        value = Math.max(1, Math.min(21, Math.round(value * 10) / 10));\n        break;\n      case 'scrollback':\n        value = Math.min(value, 4294967295);\n        if (value < 0) {\n          throw new Error(`${key} cannot be less than 0, value: ${value}`);\n        }\n        break;\n      case 'fastScrollSensitivity':\n      case 'scrollSensitivity':\n        if (value <= 0) {\n          throw new Error(`${key} cannot be less than or equal to 0, value: ${value}`);\n        }\n      case 'rows':\n      case 'cols':\n        if (!value && value !== 0) {\n          throw new Error(`${key} must be numeric, value: ${value}`);\n        }\n        break;\n    }\n    return value;\n  }\n\n  public getOption(key: string): any {\n    return this.options[key];\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n *\n * This was heavily inspired from microsoft/vscode's dependency injection system (MIT).\n */\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IServiceIdentifier } from 'common/services/Services';\n\nconst DI_TARGET = 'di$target';\nconst DI_DEPENDENCIES = 'di$dependencies';\n\nexport const serviceRegistry: Map<string, IServiceIdentifier<any>> = new Map();\n\nexport function getServiceDependencies(ctor: any): { id: IServiceIdentifier<any>, index: number, optional: boolean }[] {\n  return ctor[DI_DEPENDENCIES] || [];\n}\n\nexport function createDecorator<T>(id: string): IServiceIdentifier<T> {\n  if (serviceRegistry.has(id)) {\n    return serviceRegistry.get(id)!;\n  }\n\n  const decorator: any = function (target: Function, key: string, index: number): any {\n    if (arguments.length !== 3) {\n      throw new Error('@IServiceName-decorator can only be used to decorate a parameter');\n    }\n\n    storeServiceDependency(decorator, target, index);\n  };\n\n  decorator.toString = () => id;\n\n  serviceRegistry.set(id, decorator);\n  return decorator;\n}\n\nfunction storeServiceDependency(id: Function, target: Function, index: number): void {\n  if ((target as any)[DI_TARGET] === target) {\n    (target as any)[DI_DEPENDENCIES].push({ id, index });\n  } else {\n    (target as any)[DI_DEPENDENCIES] = [{ id, index }];\n    (target as any)[DI_TARGET] = target;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IEvent, IEventEmitter } from 'common/EventEmitter';\nimport { IBuffer, IBufferSet } from 'common/buffer/Types';\nimport { IDecPrivateModes, ICoreMouseEvent, CoreMouseEncoding, ICoreMouseProtocol, CoreMouseEventType, ICharset, IWindowOptions, IModes, IAttributeData, ScrollSource, IDisposable, IColorRGB, IColor } from 'common/Types';\nimport { createDecorator } from 'common/services/ServiceRegistry';\nimport { IDecorationOptions, IDecoration } from 'xterm';\n\nexport const IBufferService = createDecorator<IBufferService>('BufferService');\nexport interface IBufferService {\n  serviceBrand: undefined;\n\n  readonly cols: number;\n  readonly rows: number;\n  readonly buffer: IBuffer;\n  readonly buffers: IBufferSet;\n  isUserScrolling: boolean;\n  onResize: IEvent<{ cols: number, rows: number }>;\n  onScroll: IEvent<number>;\n  scroll(eraseAttr: IAttributeData, isWrapped?: boolean): void;\n  scrollToBottom(): void;\n  scrollToTop(): void;\n  scrollToLine(line: number): void;\n  scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void;\n  scrollPages(pageCount: number): void;\n  resize(cols: number, rows: number): void;\n  reset(): void;\n}\n\nexport const ICoreMouseService = createDecorator<ICoreMouseService>('CoreMouseService');\nexport interface ICoreMouseService {\n  activeProtocol: string;\n  activeEncoding: string;\n  areMouseEventsActive: boolean;\n  addProtocol(name: string, protocol: ICoreMouseProtocol): void;\n  addEncoding(name: string, encoding: CoreMouseEncoding): void;\n  reset(): void;\n\n  /**\n   * Triggers a mouse event to be sent.\n   *\n   * Returns true if the event passed all protocol restrictions and a report\n   * was sent, otherwise false. The return value may be used to decide whether\n   * the default event action in the bowser component should be omitted.\n   *\n   * Note: The method will change values of the given event object\n   * to fullfill protocol and encoding restrictions.\n   */\n  triggerMouseEvent(event: ICoreMouseEvent): boolean;\n\n  /**\n   * Event to announce changes in mouse tracking.\n   */\n  onProtocolChange: IEvent<CoreMouseEventType>;\n\n  /**\n   * Human readable version of mouse events.\n   */\n  explainEvents(events: CoreMouseEventType): { [event: string]: boolean };\n}\n\nexport const ICoreService = createDecorator<ICoreService>('CoreService');\nexport interface ICoreService {\n  serviceBrand: undefined;\n\n  /**\n   * Initially the cursor will not be visible until the first time the terminal\n   * is focused.\n   */\n  isCursorInitialized: boolean;\n  isCursorHidden: boolean;\n\n  readonly modes: IModes;\n  readonly decPrivateModes: IDecPrivateModes;\n\n  readonly onData: IEvent<string>;\n  readonly onUserInput: IEvent<void>;\n  readonly onBinary: IEvent<string>;\n\n  reset(): void;\n\n  /**\n   * Triggers the onData event in the public API.\n   * @param data The data that is being emitted.\n   * @param wasFromUser Whether the data originated from the user (as opposed to\n   * resulting from parsing incoming data). When true this will also:\n   * - Scroll to the bottom of the buffer.s\n   * - Fire the `onUserInput` event (so selection can be cleared).\n   */\n  triggerDataEvent(data: string, wasUserInput?: boolean): void;\n\n  /**\n   * Triggers the onBinary event in the public API.\n   * @param data The data that is being emitted.\n   */\n  triggerBinaryEvent(data: string): void;\n}\n\nexport const ICharsetService = createDecorator<ICharsetService>('CharsetService');\nexport interface ICharsetService {\n  serviceBrand: undefined;\n\n  charset: ICharset | undefined;\n  readonly glevel: number;\n\n  reset(): void;\n\n  /**\n   * Set the G level of the terminal.\n   * @param g\n   */\n  setgLevel(g: number): void;\n\n  /**\n   * Set the charset for the given G level of the terminal.\n   * @param g\n   * @param charset\n   */\n  setgCharset(g: number, charset: ICharset | undefined): void;\n}\n\nexport const IDirtyRowService = createDecorator<IDirtyRowService>('DirtyRowService');\nexport interface IDirtyRowService {\n  serviceBrand: undefined;\n\n  readonly start: number;\n  readonly end: number;\n\n  clearRange(): void;\n  markDirty(y: number): void;\n  markRangeDirty(y1: number, y2: number): void;\n  markAllDirty(): void;\n}\n\nexport interface IServiceIdentifier<T> {\n  (...args: any[]): void;\n  type: T;\n}\n\nexport interface IBrandedService {\n  serviceBrand: undefined;\n}\n\ntype GetLeadingNonServiceArgs<Args> =\n  Args extends [...IBrandedService[]] ? []\n    : Args extends [infer A1, ...IBrandedService[]] ? [A1]\n      : Args extends [infer A1, infer A2, ...IBrandedService[]] ? [A1, A2]\n        : Args extends [infer A1, infer A2, infer A3, ...IBrandedService[]] ? [A1, A2, A3]\n          : Args extends [infer A1, infer A2, infer A3, infer A4, ...IBrandedService[]] ? [A1, A2, A3, A4]\n            : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, ...IBrandedService[]] ? [A1, A2, A3, A4, A5]\n              : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, infer A6, ...IBrandedService[]] ? [A1, A2, A3, A4, A5, A6]\n                : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, infer A6, infer A7, ...IBrandedService[]] ? [A1, A2, A3, A4, A5, A6, A7]\n                  : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, infer A6, infer A7, infer A8, ...IBrandedService[]] ? [A1, A2, A3, A4, A5, A6, A7, A8]\n                    : never;\n\nexport const IInstantiationService = createDecorator<IInstantiationService>('InstantiationService');\nexport interface IInstantiationService {\n  serviceBrand: undefined;\n\n  setService<T>(id: IServiceIdentifier<T>, instance: T): void;\n  getService<T>(id: IServiceIdentifier<T>): T | undefined;\n  createInstance<Ctor extends new (...args: any[]) => any, R extends InstanceType<Ctor>>(t: Ctor, ...args: GetLeadingNonServiceArgs<ConstructorParameters<Ctor>>): R;\n}\n\nexport enum LogLevelEnum {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n  OFF = 4\n}\n\nexport const ILogService = createDecorator<ILogService>('LogService');\nexport interface ILogService {\n  serviceBrand: undefined;\n\n  logLevel: LogLevelEnum;\n\n  debug(message: any, ...optionalParams: any[]): void;\n  info(message: any, ...optionalParams: any[]): void;\n  warn(message: any, ...optionalParams: any[]): void;\n  error(message: any, ...optionalParams: any[]): void;\n}\n\nexport const IOptionsService = createDecorator<IOptionsService>('OptionsService');\nexport interface IOptionsService {\n  serviceBrand: undefined;\n\n  /**\n   * Read only access to the raw options object, this is an internal-only fast path for accessing\n   * single options without any validation as we trust TypeScript to enforce correct usage\n   * internally.\n   */\n  readonly rawOptions: Readonly<ITerminalOptions>;\n  readonly options: ITerminalOptions;\n\n  readonly onOptionChange: IEvent<string>;\n\n  setOption<T>(key: string, value: T): void;\n  getOption<T>(key: string): T | undefined;\n}\n\nexport type FontWeight = 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | number;\nexport type LogLevel = 'debug' | 'info' | 'warn' | 'error' | 'off';\n\nexport type RendererType = 'dom' | 'canvas';\n\nexport interface ITerminalOptions {\n  allowProposedApi: boolean;\n  allowTransparency: boolean;\n  altClickMovesCursor: boolean;\n  bellSound: string;\n  bellStyle: 'none' | 'sound' /* | 'visual' | 'both' */;\n  cols: number;\n  convertEol: boolean;\n  cursorBlink: boolean;\n  cursorStyle: 'block' | 'underline' | 'bar';\n  cursorWidth: number;\n  customGlyphs: boolean;\n  disableStdin: boolean;\n  drawBoldTextInBrightColors: boolean;\n  fastScrollModifier: 'alt' | 'ctrl' | 'shift' | undefined;\n  fastScrollSensitivity: number;\n  fontSize: number;\n  fontFamily: string;\n  fontWeight: FontWeight;\n  fontWeightBold: FontWeight;\n  letterSpacing: number;\n  lineHeight: number;\n  linkTooltipHoverDuration: number;\n  logLevel: LogLevel;\n  macOptionIsMeta: boolean;\n  macOptionClickForcesSelection: boolean;\n  minimumContrastRatio: number;\n  rendererType: RendererType;\n  rightClickSelectsWord: boolean;\n  rows: number;\n  screenReaderMode: boolean;\n  scrollback: number;\n  scrollSensitivity: number;\n  tabStopWidth: number;\n  theme: ITheme;\n  windowsMode: boolean;\n  windowOptions: IWindowOptions;\n  wordSeparator: string;\n  overviewRulerWidth?: number;\n\n  [key: string]: any;\n  cancelEvents: boolean;\n  termName: string;\n}\n\nexport interface ITheme {\n  foreground?: string;\n  background?: string;\n  cursor?: string;\n  cursorAccent?: string;\n  selection?: string;\n  selectionForeground?: string;\n  black?: string;\n  red?: string;\n  green?: string;\n  yellow?: string;\n  blue?: string;\n  magenta?: string;\n  cyan?: string;\n  white?: string;\n  brightBlack?: string;\n  brightRed?: string;\n  brightGreen?: string;\n  brightYellow?: string;\n  brightBlue?: string;\n  brightMagenta?: string;\n  brightCyan?: string;\n  brightWhite?: string;\n}\n\nexport const IUnicodeService = createDecorator<IUnicodeService>('UnicodeService');\nexport interface IUnicodeService {\n  serviceBrand: undefined;\n  /** Register an Unicode version provider. */\n  register(provider: IUnicodeVersionProvider): void;\n  /** Registered Unicode versions. */\n  readonly versions: string[];\n  /** Currently active version. */\n  activeVersion: string;\n  /** Event triggered, when activate version changed. */\n  readonly onChange: IEvent<string>;\n\n  /**\n   * Unicode version dependent\n   */\n  wcwidth(codepoint: number): number;\n  getStringCellWidth(s: string): number;\n}\n\nexport interface IUnicodeVersionProvider {\n  readonly version: string;\n  wcwidth(ucs: number): 0 | 1 | 2;\n}\n\nexport const IDecorationService = createDecorator<IDecorationService>('DecorationService');\nexport interface IDecorationService extends IDisposable {\n  serviceBrand: undefined;\n  readonly decorations: IterableIterator<IInternalDecoration>;\n  readonly onDecorationRegistered: IEvent<IInternalDecoration>;\n  readonly onDecorationRemoved: IEvent<IInternalDecoration>;\n  registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined;\n  reset(): void;\n  /** Iterates over the decorations at a line (in no particular order). */\n  getDecorationsAtLine(line: number): IterableIterator<IInternalDecoration>;\n  /** Iterates over the decorations at a cell (in no particular order). */\n  getDecorationsAtCell(x: number, line: number, layer?: 'bottom' | 'top'): IterableIterator<IInternalDecoration>;\n}\nexport interface IInternalDecoration extends IDecoration {\n  readonly options: IDecorationOptions;\n  readonly backgroundColorRGB: IColor | undefined;\n  readonly foregroundColorRGB: IColor | undefined;\n  readonly onRenderEmitter: IEventEmitter<HTMLElement>;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IUnicodeService, IUnicodeVersionProvider } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { UnicodeV6 } from 'common/input/UnicodeV6';\n\n\nexport class UnicodeService implements IUnicodeService {\n  public serviceBrand: any;\n\n  private _providers: {[key: string]: IUnicodeVersionProvider} = Object.create(null);\n  private _active: string = '';\n  private _activeProvider: IUnicodeVersionProvider;\n  private _onChange = new EventEmitter<string>();\n  public get onChange(): IEvent<string> { return this._onChange.event; }\n\n  constructor() {\n    const defaultProvider = new UnicodeV6();\n    this.register(defaultProvider);\n    this._active = defaultProvider.version;\n    this._activeProvider = defaultProvider;\n  }\n\n  public get versions(): string[] {\n    return Object.keys(this._providers);\n  }\n\n  public get activeVersion(): string {\n    return this._active;\n  }\n\n  public set activeVersion(version: string) {\n    if (!this._providers[version]) {\n      throw new Error(`unknown Unicode version \"${version}\"`);\n    }\n    this._active = version;\n    this._activeProvider = this._providers[version];\n    this._onChange.fire(version);\n  }\n\n  public register(provider: IUnicodeVersionProvider): void {\n    this._providers[provider.version] = provider;\n  }\n\n  /**\n   * Unicode version dependent interface.\n   */\n  public wcwidth(num: number): number {\n    return this._activeProvider.wcwidth(num);\n  }\n\n  public getStringCellWidth(s: string): number {\n    let result = 0;\n    const length = s.length;\n    for (let i = 0; i < length; ++i) {\n      let code = s.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          // this should not happen with strings retrieved from\n          // Buffer.translateToString as it converts from UTF-32\n          // and therefore always should contain the second part\n          // for any other string we still have to handle it somehow:\n          // simply treat the lonely surrogate first as a single char (UCS-2 behavior)\n          return result + this.wcwidth(code);\n        }\n        const second = s.charCodeAt(i);\n        // convert surrogate pair to high codepoint only for valid second part (UTF-16)\n        // otherwise treat them independently (UCS-2 behavior)\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          code = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          result += this.wcwidth(second);\n        }\n      }\n      result += this.wcwidth(code);\n    }\n    return result;\n  }\n}\n", "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n", "// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(4389);\n"],
  "mappings": "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CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,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",
  "names": ["root", "factory", "exports", "module", "define", "amd", "a", "i", "self", "e", "t", "r", "_terminal", "_renderService", "_liveRegionLineCount", "_charsToConsume", "_charsToAnnounce", "_accessibilityTreeRoot", "document", "createElement", "classList", "add", "tabIndex", "_rowContainer", "setAttribute", "_rowElements", "rows", "_createAccessibilityTreeNode", "appendChild", "_topBoundaryFocusListener", "_onBoundaryFocus", "_bottomBoundaryFocusListener", "addEventListener", "length", "_refreshRowsDimensions", "_renderRowsDebouncer", "TimeBasedDebouncer", "_renderRows", "bind", "_refreshRows", "_liveRegion", "element", "Error", "insertAdjacentElement", "register", "onResize", "_onResize", "onRender", "start", "end", "onScroll", "onA11yChar", "char", "_onChar", "onLineFeed", "onA11yTab", "spaceCount", "_onTab", "onKey", "_onKey", "key", "onBlur", "_clearLiveRegion", "onDimensionsChange", "_screenDprMonitor", "ScreenDprMonitor", "setListener", "addDisposableDomListener", "window", "dispose", "removeElementFromParent", "this", "position", "boundaryElement", "target", "beforeBoundaryElement", "getAttribute", "buffer", "lines", "relatedTarget", "topBoundaryElement", "bottomBoundaryElement", "pop", "removeChild", "shift", "removeEventListener", "newElement", "unshift", "push", "scrollLines", "focus", "preventDefault", "stopImmediatePropagation", "children", "_refreshRowDimensions", "MAX_ROWS_TO_READ", "textContent", "Strings", "tooMuchOutput", "isMac", "parentNode", "setTimeout", "keyChar", "refresh", "setSize", "toString", "lineData", "translateBufferLineToString", "ydisp", "posInSet", "innerText", "_announceCharacters", "dimensions", "actualCellHeight", "style", "height", "Disposable", "AccessibilityManager", "prepareTextForTerminal", "text", "replace", "bracketTextForPaste", "bracketedPasteMode", "paste", "textarea", "coreService", "decPrivateModes", "triggerDataEvent", "value", "moveTextAreaUnderMouseCursor", "ev", "screenElement", "pos", "getBoundingClientRect", "left", "clientX", "top", "clientY", "width", "zIndex", "selectionService", "clipboardData", "setData", "selectionText", "stopPropagation", "getData", "shouldSelectWord", "rightClickSelect", "select", "_color", "_rgba", "clear", "setCss", "bg", "fg", "getCss", "undefined", "setColor", "getColor", "ColorContrastCache", "DEFAULT_FOREGROUND", "css", "toColor", "DEFAULT_BACKGROUND", "DEFAULT_CURSOR", "DEFAULT_CURSOR_ACCENT", "DEFAULT_SELECTION", "rgba", "DEFAULT_ANSI_COLORS", "Object", "freeze", "colors", "v", "g", "b", "channels", "toCss", "toRgba", "c", "allowTransparency", "canvas", "ctx", "getContext", "_ctx", "globalCompositeOperation", "_litmusColor", "createLinearGradient", "_contrastCache", "foreground", "background", "cursor", "cursorAccent", "selectionTransparent", "selectionOpaque", "color", "blend", "selectionForeground", "ansi", "slice", "contrastCache", "_updateRestoreColors", "onOptionsChange", "setTheme", "theme", "_parseColor", "selection", "nullColor", "isOpaque", "opacity", "black", "red", "green", "yellow", "blue", "magenta", "cyan", "white", "brightBlack", "brightRed", "brightGreen", "brightYellow", "brightBlue", "brightMagenta", "brightCyan", "brightWhite", "restoreColor", "slot", "_restoreColors", "fallback", "fillStyle", "console", "warn", "fillRect", "data", "getImageData", "s", "substring", "split", "map", "component", "Number", "alpha", "Math", "round", "ColorManager", "elements", "parentElement", "node", "type", "handler", "options", "disposed", "_bufferService", "_logService", "_unicodeService", "_linkMatchers", "_nextLinkMatcherId", "_onShowLinkUnderline", "EventEmitter", "_onHideLinkUnderline", "_onLinkTooltip", "_rowsToLinkify", "event", "attachToDom", "mouseZoneManager", "_element", "_mouseZoneManager", "linkifyRows", "min", "max", "clearAll", "_rowsTimeoutId", "clearTimeout", "_linkifyRows", "Linkifier", "_timeBeforeLatency", "absoluteRowIndexStart", "absoluteRowIndexEnd", "overscanLineLimit", "ceil", "cols", "iterator", "hasNext", "next", "_doLinkifyRow", "range", "first", "content", "debug", "registerLinkMatcher", "regex", "matcher", "id", "matchIndex", "validationCallback", "hoverTooltipCallback", "tooltipCallback", "hoverLeaveCallback", "leaveCallback", "willLinkActivate", "priority", "_addLinkMatcherToList", "splice", "deregisterLinkMatcher", "matcherId", "rowIndex", "match", "n", "rex", "RegExp", "source", "flags", "stringIndex", "uri", "indexOf", "lastIndex", "bufferIndex", "stringIndexToBufferIndex", "line", "get", "attr", "getFg", "isValid", "_addLink", "exec", "x", "y", "o", "getStringCellWidth", "x1", "y1", "floor", "x2", "y2", "MouseZone", "newWindow", "open", "opener", "location", "href", "fire", "_createLinkHoverEvent", "remove", "IBufferService", "ILogService", "IUnicodeService", "clickCallback", "hoverCallback", "_linkProviders", "_linkCacheDisposables", "_isMouseOut", "_activeLine", "getDisposeArrayDisposable", "_currentLink", "registerLinkProvider", "linkProvider", "providerIndex", "mouseService", "renderService", "_mouseService", "_clearCurrentLink", "_onMouseMove", "_handleMouseDown", "_handleMouseUp", "_lastMouseEvent", "_positionFromMouseEvent", "composedPath", "contains", "_lastBufferCell", "_onHover", "_askForLink", "_linkAtPosition", "link", "useLineCache", "_activeProviderReplies", "forEach", "reply", "linkWithState", "Map", "linkProvided", "h", "u", "_checkLinkProviderResult", "provideLinks", "links", "linksWithState", "set", "size", "_removeIntersectingLinks", "f", "entries", "_", "replies", "occupiedCells", "Set", "providerReply", "startX", "endX", "has", "index", "hasLinkBefore", "j", "linkAtPosition", "find", "_handleNewLink", "currentLink", "_mouseDownLink", "activate", "startRow", "endRow", "_linkLeave", "disposeArray", "state", "decorations", "underline", "pointerCursor", "isHovered", "_linkHover", "defineProperties", "toggle", "_fireUnderlineEvent", "onRenderedViewportChange", "hover", "showEvent", "scrollOffset", "_createLinkUnderlineEvent", "leave", "sameLine", "wrappedFromLeft", "wrappedToRight", "coords", "getCoords", "Linkifier2", "promptLabel", "_screenElement", "_selectionService", "_optionsService", "_zones", "_areZonesActive", "_lastHoverCoords", "_initialSelectionLength", "_onMouseDown", "_mouseMoveListener", "_mouseLeaveListener", "_onMouseLeave", "_clickListener", "_onClick", "_deactivate", "zone", "_activate", "_currentZone", "pageX", "pageY", "_findZoneEventAt", "_tooltipTimeout", "_onTooltip", "rawOptions", "linkTooltipHoverDuration", "_getSelectionLength", "currentSelectionLength", "IMouseService", "ISelectionService", "IOptionsService", "MouseZoneManager", "_renderCallback", "_refreshCallbacks", "_animationFrame", "cancelAnimationFrame", "addRefreshCallback", "callback", "requestAnimationFrame", "_innerRefresh", "rowStart", "rowEnd", "rowCount", "_rowCount", "_rowStart", "_rowEnd", "_runRefreshCallbacks", "RenderDebouncer", "_currentDevicePixelRatio", "devicePixelRatio", "listener", "_listener", "clearListener", "_outerListener", "_updateDpr", "_resolutionMediaMatchList", "removeListener", "matchMedia", "addListener", "browser", "Browser", "_keyDownHandled", "_keyDownSeen", "_keyPressHandled", "_unprocessedDeadKey", "_onCursorMove", "_onRender", "_onSelectionChange", "_onTitleChange", "_onBell", "_onFocus", "_onBlur", "_onA11yCharEmitter", "_onA11yTabEmitter", "_setup", "linkifier", "_instantiationService", "createInstance", "linkifier2", "_decorationService", "DecorationService", "setService", "IDecorationService", "_inputHandler", "onRequestBell", "bell", "onRequestRefreshRows", "onRequestSendFocus", "_reportFocus", "onRequestReset", "reset", "onRequestWindowsOptionsReport", "_reportWindowsOptions", "onColor", "_handleColorEvent", "forwardEvent", "onCursorMove", "onTitleChange", "_afterResize", "_colorManager", "l", "req", "acc", "ident", "toColorRGB", "C0", "ESC", "toRgbString", "C1_ESCAPED", "ST", "setColors", "viewport", "onThemeChange", "_isDisposed", "_customKeyEventHandler", "write", "buffers", "active", "preventScroll", "_updateOptions", "_charSizeService", "measure", "setRenderer", "_createRenderer", "syncScrollArea", "optionsService", "screenReaderMode", "_accessibilityManager", "setupTabStops", "_setTheme", "_onTextAreaFocus", "sendFocus", "updateCursorStyle", "_showCursor", "blur", "_onTextAreaBlur", "_syncTextArea", "isCursorInViewport", "_compositionHelper", "isComposing", "cursorY", "ybase", "bufferLine", "cursorX", "cellHeight", "getWidth", "cellWidth", "actualCellWidth", "cursorTop", "cursorLeft", "lineHeight", "_initGlobal", "_bindKeys", "hasSelection", "copyHandler", "pasteHandlerWrapper", "handlePasteEvent", "isFirefox", "button", "rightClickHandler", "rightClickSelectsWord", "isLinux", "_keyUp", "_keyDown", "_keyPress", "compositionstart", "compositionupdate", "compositionend", "_inputEvent", "updateCompositionElements", "_queueLinkification", "parent", "isConnected", "_document", "ownerDocument", "dir", "fragment", "createDocumentFragment", "_viewportElement", "_viewportScrollArea", "_helperContainer", "coreBrowserService", "CoreBrowserService", "ICoreBrowserService", "CharSizeService", "ICharSizeService", "_theme", "onOptionChange", "_characterJoinerService", "CharacterJoinerService", "ICharacterJoinerService", "renderer", "RenderService", "IRenderService", "resize", "_compositionView", "CompositionHelper", "_soundService", "SoundService", "ISoundService", "MouseService", "Viewport", "amount", "onRequestSyncScrollBar", "onFocus", "SelectionService", "onRequestScrollLines", "suppressScrollEvent", "onSelectionChange", "onRequestRedraw", "onSelectionChanged", "columnSelectMode", "onLinuxMouseSelection", "_onScroll", "BufferDecorationRenderer", "onMouseDown", "coreMouseService", "areMouseEventsActive", "disable", "enable", "overviewRulerWidth", "_overviewRulerRenderer", "OverviewRulerRenderer", "bindMouse", "rendererType", "Renderer", "DomRenderer", "el", "sendEvent", "but", "action", "getRawByteCoords", "overrideType", "buttons", "getLinesScrolled", "deltaY", "triggerMouseEvent", "col", "row", "ctrl", "ctrlKey", "alt", "altKey", "shiftKey", "requestedEvents", "mouseup", "wheel", "mousedrag", "mousemove", "eventListeners", "cancel", "onProtocolChange", "events", "logLevel", "explainEvents", "passive", "activeProtocol", "shouldForceSelection", "hasScrollback", "sequence", "applicationCursorKeys", "abs", "onWheel", "onTouchStart", "onTouchMove", "refreshRows", "shouldColumnSelect", "isCursorInitialized", "disp", "attachCustomKeyEventHandler", "customKeyEventHandler", "registerCharacterJoiner", "joinerId", "deregisterCharacterJoiner", "deregister", "markers", "addMarker", "cursorYOffset", "normal", "registerDecoration", "decorationOptions", "column", "setSelection", "getSelection", "getSelectionPosition", "startColumn", "selectionStart", "endColumn", "selectionEnd", "clearSelection", "selectAll", "selectLines", "shouldIgnoreComposition", "macOptionIsMeta", "keydown", "scrollToBottom", "result", "evaluateKeyboardEvent", "scrollCount", "_isThirdLevelShift", "metaKey", "charCodeAt", "ETX", "CR", "domEvent", "thirdLevelKey", "isWindows", "getModifierState", "keyCode", "charCode", "which", "String", "fromCharCode", "inputType", "composed", "_soundBell", "playBellSound", "hasValidSize", "clearAllMarkers", "getBlankLine", "DEFAULT_ATTR_DATA", "clearTextureAtlas", "WindowsOptionsReportType", "GET_WIN_SIZE_PIXELS", "canvasWidth", "scaledCanvasWidth", "toFixed", "canvasHeight", "scaledCanvasHeight", "GET_CELL_SIZE_PIXELS", "scaledCellWidth", "scaledCellHeight", "force", "cancelEvents", "_visualBell", "bellStyle", "CoreTerminal", "Terminal", "_debounceThresholdMS", "_lastRefreshMs", "_additionalRefreshRequested", "_refreshTimeoutID", "refreshRequestTime", "Date", "now", "elapsed", "waitPeriodBeforeTrailingRefresh", "_scrollLines", "_scrollArea", "scrollBarWidth", "_currentRowHeight", "_currentScaledCellHeight", "_lastRecordedBufferLength", "_lastRecordedViewportHeight", "_lastRecordedBufferHeight", "_lastTouchY", "_lastScrollTop", "_wheelPartialScroll", "_refreshAnimationFrame", "_ignoreNextScrollEvent", "offsetWidth", "_activeBuffer", "onBufferActivate", "activeBuffer", "_renderDimensions", "backgroundColor", "_refresh", "immediate", "offsetHeight", "newBufferHeight", "scrollTop", "offsetParent", "diff", "_bubbleScroll", "scrollPosFromTop", "cancelable", "_getPixelsScrolled", "_applyScrollModifier", "deltaMode", "WheelEvent", "DOM_DELTA_LINE", "DOM_DELTA_PAGE", "DOM_DELTA_PIXEL", "modifier", "fastScrollModifier", "fastScrollSensitivity", "scrollSensitivity", "touches", "_decorationElements", "_altBufferIsActive", "_dimensionsChanged", "_container", "_queueRefresh", "onDecorationRegistered", "onDecorationRemoved", "decoration", "_removeDecoration", "refreshDecorations", "_renderDecoration", "_refreshStyle", "_refreshXPosition", "_createElement", "marker", "display", "onRenderEmitter", "onDispose", "anchor", "right", "delete", "_zonePool", "_zonePoolIndex", "_linePadding", "full", "center", "addDecoration", "overviewRulerOptions", "z", "_lineIntersectsZone", "_lineAdjacentToZone", "_addLineToZone", "startBufferLine", "endBufferLine", "setPadding", "padding", "ColorZoneStore", "drawHeight", "drawWidth", "drawX", "_colorZoneStore", "_shouldUpdateDimensions", "_shouldUpdateAnchor", "_lastKnownBufferLength", "_canvas", "_refreshCanvasDimensions", "insertBefore", "_registerDecorationListeners", "_registerBufferChangeListeners", "_registerDimensionChangeListeners", "_refreshDrawHeightConstants", "_refreshColorZonePadding", "_containerHeight", "clientHeight", "_refreshDrawConstants", "outerWidth", "innerWidth", "pixelsPerLine", "nonFullHeight", "_width", "_refreshDecorations", "clearRect", "lineWidth", "zones", "_renderColorZone", "d", "updateCanvasDimensions", "updateAnchor", "_textarea", "_coreService", "_isComposing", "_isSendingComposition", "_compositionPosition", "_dataAlreadySent", "_finalizeComposition", "_handleAnyTextareaChanges", "waitForPropagation", "input", "oldValue", "dontRecurse", "fontFamily", "fontSize", "compositionViewBounds", "ICoreService", "getCoordsRelativeToElement", "rect", "elementStyle", "getComputedStyle", "leftPadding", "parseInt", "getPropertyValue", "topPadding", "colCount", "hasValidCharSize", "isSelection", "moveToRequestedRow", "startY", "targetY", "bufferService", "applicationCursor", "wrappedRowsForRow", "rowsToMove", "wrappedRows", "direction", "verticalDirection", "isWrapped", "repeat", "currentRow", "lineWraps", "startCol", "endCol", "forward", "currentCol", "bufferStr", "mod", "count", "str", "rpt", "targetX", "rowDifference", "currX", "CONSTRUCTOR_ONLY_OPTIONS", "_core", "_addonManager", "AddonManager", "_publicOptions", "getter", "propName", "setter", "_checkReadonlyOptions", "desc", "defineProperty", "includes", "_checkProposedApi", "allowProposedApi", "onBell", "onBinary", "onData", "onWriteParsed", "_parser", "ParserApi", "UnicodeApi", "_buffer", "BufferNamespaceApi", "m", "mouseTrackingMode", "applicationCursorKeysMode", "applicationKeypadMode", "applicationKeypad", "insertMode", "modes", "originMode", "origin", "reverseWraparoundMode", "reverseWraparound", "sendFocusMode", "wraparoundMode", "wraparound", "columns", "_verifyIntegers", "registerMarker", "_verifyPositiveIntegers", "scrollPages", "pageCount", "scrollToTop", "scrollToLine", "writeUtf8", "writeln", "getOption", "setOption", "loadAddon", "addon", "values", "Infinity", "isNaN", "_alpha", "_colors", "_rendererId", "_scaledCharWidth", "_scaledCharHeight", "_scaledCellWidth", "_scaledCellHeight", "_scaledCharLeft", "_scaledCharTop", "_columnSelectMode", "_currentGlyphIdentifier", "chars", "code", "bold", "dim", "italic", "_initCanvas", "_charAtlas", "throwIfFalsy", "_clearAll", "onOptionsChanged", "onGridChanged", "_selectionStart", "_selectionEnd", "colorSet", "_refreshCharAtlas", "_setTransparency", "oldCanvas", "cloneNode", "replaceChild", "acquireCharAtlas", "warmUp", "scaledCharWidth", "scaledCharHeight", "scaledCharLeft", "scaledCharTop", "_fillCells", "_fillMiddleLineAtCells", "cellOffset", "_fillBottomLineAtCells", "_fillLeftLineAtCell", "_strokeRectAtCell", "strokeRect", "_clearCells", "_fillCharTrueColor", "cell", "font", "_getFont", "textBaseline", "TEXT_BASELINE", "_clipRow", "drawSuccess", "customGlyphs", "tryDrawCustomChar", "getChars", "fillText", "_drawChars", "contrastColor", "_getContrastColor", "isFgRGB", "isBgRGB", "_drawUncachedChars", "isInverse", "isBgDefault", "INVERTED_DEFAULT_COLOR", "getBgColor", "isFgDefault", "getFgColor", "DEFAULT_COLOR", "drawBoldTextInBrightColors", "isBold", "WHITESPACE_CELL_CHAR", "getCode", "WHITESPACE_CELL_CODE", "isDim", "isItalic", "hasOverrides", "getDecorationsAtCell", "backgroundColorRGB", "foregroundColorRGB", "draw", "fgOverride", "save", "opaque", "AttributeData", "join", "globalAlpha", "DIM_OPACITY", "restore", "beginPath", "clip", "fontWeightBold", "fontWeight", "bgOverride", "isTop", "layer", "_isCellInSelection", "minimumContrastRatio", "excludeFromContrastRatioDemands", "adjustedColor", "fgColor", "fgColorMode", "getFgColorMode", "bgColor", "bgColorMode", "getBgColorMode", "temp", "temp2", "bgRgba", "_resolveBackgroundRgba", "fgRgba", "_resolveForegroundRgba", "ensureContrastRatio", "inverse", "BaseRenderLayer", "BLINK_INTERVAL", "container", "rendererId", "_onRequestRedraw", "_coreBrowserService", "decorationService", "_cell", "CellData", "_state", "isFocused", "_cursorRenderers", "_renderBarCursor", "_renderBlockCursor", "_renderUnderlineCursor", "_cursorBlinkStateManager", "_clearCursor", "restartBlinkAnimation", "pause", "resume", "cursorBlink", "CursorBlinkStateManager", "_render", "isPaused", "triggeredByAnimationFrame", "isCursorHidden", "viewportRelativeCursorY", "loadCell", "cursorStyle", "_renderBlurCursor", "isCursorVisible", "cursorWidth", "strokeStyle", "CursorRenderLayer", "_restartInterval", "_blinkStartTimeout", "_blinkInterval", "clearInterval", "_animationTimeRestarted", "timeToStart", "time", "setInterval", "blockElementDefinitions", "w", "patternCharacterDefinitions", "boxDrawingDefinitions", "xp", "yp", "powerlineDefinitions", "horizontalPadding", "xOffset", "yOffset", "blockElementDefinition", "charDefinition", "box", "xEighth", "yEighth", "patternDefinition", "patternSet", "cachedPatterns", "pattern", "tmpCanvas", "tmpCtx", "imageData", "ImageData", "startsWith", "parseFloat", "putImageData", "createPattern", "boxDrawingDefinition", "instructions", "actualInstructions", "instruction", "svgToCanvasInstructionMap", "args", "translateArgs", "error", "stroke", "closePath", "powerlineDefinition", "fill", "clamp", "bezierCurveTo", "lineTo", "moveTo", "cache", "GridCache", "onShowLinkUnderline", "onHideLinkUnderline", "middleRowCount", "is256Color", "LinkRenderLayer", "nextRendererId", "instantiationService", "_id", "_renderLayers", "TextRenderLayer", "SelectionRenderLayer", "_devicePixelRatio", "_updateDimensions", "removeTerminalFromCache", "onDevicePixelRatioChange", "onCharSizeChanged", "_runOperation", "operation", "renderRows", "letterSpacing", "IInstantiationService", "isPowerlineGlyph", "codepoint", "_clearState", "_didStateChange", "viewportStartRow", "viewportEndRow", "viewportCappedStartRow", "viewportCappedEndRow", "startRowEndCol", "middleRowsCount", "_areCoordinatesEqual", "coord1", "coord2", "_characterWidth", "_characterFont", "_characterOverlapCache", "_workCell", "terminalFont", "_forEachCell", "firstRow", "lastRow", "joinedRanges", "getJoinedCharacters", "isJoined", "lastCharX", "JoinedCellData", "translateToString", "_isOverlapping", "getCodePoint", "NULL_CELL_CODE", "_drawBackground", "prevFillStyle", "nextFillStyle", "isBgPalette", "p", "_drawForeground", "isInvisible", "isUnderline", "isStrikethrough", "beginFrame", "hasOwnProperty", "overlaps", "measureText", "_didWarmUp", "_doWarmUp", "BaseCharAtlas", "charAtlasCache", "newConfig", "generateConfig", "ownedByIndex", "entry", "ownedBy", "configEquals", "config", "atlas", "newEntry", "DynamicCharAtlas", "clonedColors", "colorCode", "isLegacyEdge", "CHAR_ATLAS_CELL_SPACING", "TEXTURE_WIDTH", "TEXTURE_HEIGHT", "TRANSPARENT_COLOR", "getGlyphCacheKey", "glyph", "_config", "_drawToCacheCount", "_glyphsWaitingOnBitmap", "_bitmapCommitTimeout", "_bitmap", "_cacheCanvas", "_cacheCtx", "_tmpCtx", "_height", "capacity", "_cacheMap", "LRUMap", "prealloc", "_canCache", "glyphKey", "cacheValue", "_drawFromCache", "peek", "_drawToCache", "_toCoordinateX", "_toCoordinateY", "isEmpty", "cacheX", "cacheY", "drawImage", "inBitmap", "_getColorFromAnsiIndex", "idx", "_getBackgroundColor", "_getForegroundColor", "fontStyle", "clearColor", "offset", "_addGlyphToBitmap", "isSafari", "_generateBitmap", "glyphsMovingToBitmap", "createImageBitmap", "then", "bitmap", "NoneCharAtlas", "_map", "_head", "_tail", "_nodePool", "_unlinkNode", "prev", "_appendNode", "tail", "nodePool", "peekValue", "head", "TERMINAL_CLASS_PREFIX", "FG_CLASS_PREFIX", "BG_CLASS_PREFIX", "FOCUS_CLASS", "nextTerminalId", "_linkifier", "_linkifier2", "_terminalClass", "_refreshRowElements", "_selectionContainer", "_injectCss", "_rowFactory", "DomRendererRowFactory", "_onLinkHover", "_onLinkLeave", "_themeStyleElement", "_dimensionsStyleElement", "overflow", "styles", "_terminalSelector", "BOLD_CLASS", "ITALIC_CLASS", "CURSOR_CLASS", "CURSOR_STYLE_BLOCK_CLASS", "CURSOR_BLINK_CLASS", "CURSOR_STYLE_BAR_CLASS", "CURSOR_STYLE_UNDERLINE_CLASS", "documentFragment", "isXFlipped", "_createSelectionElement", "colStart", "colEnd", "cursorAbsoluteY", "rowElement", "createRow", "_setCellUnderline", "enabled", "span", "textDecoration", "DIM_CLASS", "UNDERLINE_CLASS", "STRIKETHROUGH_CLASS", "isCursorRow", "lineLength", "charElement", "isInSelection", "resolvedBg", "_addStyle", "padStart", "_applyMinimumContrast", "padChar", "isSelectAllActive", "selectionStartLength", "areSelectionValuesReversed", "startPlusLength", "onTrim", "SelectionModel", "_onCharSizeChange", "_measureStrategy", "DomMeasureStrategy", "_parentElement", "_result", "_measureElement", "geometry", "firstCell", "combinedData", "isCombined", "setFromCharData", "getAsCharData", "_characterJoiners", "_nextCharacterJoinerId", "joiner", "ranges", "lineStr", "rangeStartColumn", "currentStringIndex", "rangeStartStringIndex", "rangeAttrFG", "rangeAttrBG", "getBg", "getTrimmedLength", "_getJoinedRanges", "startIndex", "endIndex", "allJoinedRanges", "joinerRanges", "_mergeRanges", "_stringRangesToCellRanges", "currentRangeIndex", "currentRangeStarted", "currentRange", "getString", "newRange", "inRange", "getRootNode", "activeElement", "hasFocus", "_renderer", "_isPaused", "_needsFullRefresh", "_isNextRenderRedrawOnly", "_needsSelectionRefresh", "_canvasWidth", "_canvasHeight", "_selectionState", "_onDimensionsChange", "_onRenderedViewportChange", "_onRefreshRequest", "_renderDebouncer", "_fullRefresh", "_handleOptionsChanged", "onCharSizeChange", "IntersectionObserver", "_onIntersectionChange", "threshold", "observe", "disconnect", "isIntersecting", "intersectionRatio", "isRedrawOnly", "_fireOnCanvasResize", "NON_BREAKING_SPACE_CHAR", "ALL_NON_BREAKING_SPACE_REGEX", "_dragScrollAmount", "_enabled", "_mouseDownTimeStamp", "_oldHasSelection", "_oldSelectionStart", "_oldSelectionEnd", "_onLinuxMouseSelection", "_onRedrawRequest", "_onRequestScrollLines", "_mouseUpListener", "_onMouseUp", "onUserInput", "_trimListener", "_onTrim", "_onBufferActivate", "_model", "_activeSelectionMode", "_removeMouseDownListeners", "finalSelectionStart", "finalSelectionEnd", "lineText", "isLinuxMouseSelection", "_isClickInSelection", "_getMouseBufferCoords", "_areCoordsInSelection", "isCellInSelection", "_selectWordAtCursor", "allowWhitespaceOnlySelection", "getRangeLength", "_selectWordAt", "_getMouseEventScrollAmount", "terminalHeight", "macOptionClickForcesSelection", "timeStamp", "_onIncrementalClick", "detail", "_onSingleClick", "_onDoubleClick", "_onTripleClick", "_addMouseDownListeners", "_dragScrollIntervalTimer", "_dragScroll", "hasWidth", "_selectLineAt", "previousSelectionEnd", "_selectToWordAt", "timeElapsed", "coordinates", "moveToCellSequence", "_fireEventIfSelectionChanged", "_fireOnSelectionChange", "_convertViewportColToCharacterIndex", "charIndex", "_getWordAt", "followWrappedLinesAbove", "followWrappedLinesBelow", "charOffset", "leftWideCharCount", "rightWideCharCount", "leftLongCharOffset", "rightLongCharOffset", "charAt", "_isCharWordSeparator", "trim", "previousBufferLine", "previousLineWordPosition", "nextBufferLine", "nextLineWordPosition", "wordPosition", "wordSeparator", "wrappedRange", "getWrappedRangeForLine", "last", "createDecorator", "_audioContext", "audioContextCtor", "AudioContext", "webkitAudioContext", "audioContext", "bellAudioSource", "createBufferSource", "decodeAudioData", "_base64ToArrayBuffer", "_removeMimeType", "bellSound", "connect", "destination", "base64", "binaryString", "atob", "len", "bytes", "Uint8Array", "dataURI", "_maxLength", "onDeleteEmitter", "onInsertEmitter", "onTrimEmitter", "_array", "Array", "_startIndex", "_length", "newMaxLength", "newArray", "_getCyclicIndex", "newLength", "recycle", "deleteCount", "items", "countToTrim", "trimStart", "shiftElements", "expandListBy", "CircularList", "clone", "val", "depth", "clonedObject", "isArray", "rgb", "toPaddedHex", "contrastRatio", "l1", "l2", "fgR", "fgG", "fgB", "bgR", "bgG", "bgB", "ratio", "rgbaColor", "toChannels", "rgbaMatch", "relativeLuminance2", "rs", "gs", "bs", "pow", "relativeLuminance", "reduceLuminance", "cr", "increaseLuminance", "bgL", "fgL", "resultB", "resultA", "resultARatio", "hasWriteSyncWarnHappened", "_onBinary", "_onData", "_onLineFeed", "_onWriteParsed", "InstantiationService", "OptionsService", "BufferService", "LogService", "CoreService", "CoreMouseService", "ICoreMouseService", "_dirtyRowService", "DirtyRowService", "IDirtyRowService", "unicodeService", "UnicodeService", "_charsetService", "CharsetService", "ICharsetService", "InputHandler", "markRangeDirty", "scrollBottom", "_writeBuffer", "WriteBuffer", "promiseResult", "parse", "_onScrollApi", "_windowsMode", "writeSync", "maxSubsequentCalls", "LogLevelEnum", "WARN", "MINIMUM_COLS", "MINIMUM_ROWS", "scroll", "eraseAttr", "registerEscHandler", "registerDcsHandler", "registerCsiHandler", "registerOscHandler", "windowsMode", "_enableWindowsMode", "updateWindowsModeWrappedState", "final", "_listeners", "_disposed", "_event", "arg1", "arg2", "queue", "call", "from", "to", "GLEVEL", "MAX_PARSEBUFFER_LENGTH", "paramToWindowOption", "opts", "setWinLines", "restoreWin", "minimizeWin", "setWinPosition", "setWinSizePixels", "raiseWin", "lowerWin", "refreshWin", "setWinSizeChars", "maximizeWin", "fullscreenWin", "getWinState", "getWinPosition", "getWinSizePixels", "getScreenSizePixels", "getCellSizePixels", "getWinSizeChars", "getScreenSizeChars", "getIconTitle", "getWinTitle", "pushTitle", "popTitle", "_data", "Uint32Array", "hook", "params", "put", "concat", "subarray", "unhook", "success", "utf32ToString", "pt", "_coreMouseService", "EscapeSequenceParser", "_parseBuffer", "_stringDecoder", "StringToUtf32", "_utf8Decoder", "Utf8ToUtf32", "_windowTitle", "_iconName", "_windowTitleStack", "_iconNameStack", "_curAttrData", "_eraseAttrDataInternal", "_onRequestBell", "_onRequestRefreshRows", "_onRequestReset", "_onRequestSendFocus", "_onRequestSyncScrollBar", "_onRequestWindowsOptionsReport", "_onA11yChar", "_onA11yTab", "_onColor", "_parseStack", "paused", "cursorStartX", "cursorStartY", "decodedLength", "_specialColors", "setCsiHandlerFallback", "identifier", "identToString", "toArray", "setEscHandlerFallback", "setExecuteHandlerFallback", "setOscHandlerFallback", "setDcsHandlerFallback", "payload", "setPrintHandler", "print", "insertChars", "intermediates", "scrollLeft", "cursorUp", "scrollRight", "cursorDown", "cursorForward", "cursorBackward", "cursorNextLine", "cursorPrecedingLine", "cursorCharAbsolute", "cursorPosition", "cursorForwardTab", "eraseInDisplay", "prefix", "eraseInLine", "insertLines", "deleteLines", "deleteChars", "scrollUp", "scrollDown", "eraseChars", "cursorBackwardTab", "charPosAbsolute", "hPositionRelative", "repeatPrecedingCharacter", "sendDeviceAttributesPrimary", "sendDeviceAttributesSecondary", "linePosAbsolute", "vPositionRelative", "hVPosition", "tabClear", "setMode", "setModePrivate", "resetMode", "resetModePrivate", "charAttributes", "deviceStatus", "deviceStatusPrivate", "softReset", "setCursorStyle", "setScrollRegion", "saveCursor", "windowOptions", "restoreCursor", "insertColumns", "deleteColumns", "setExecuteHandler", "BEL", "LF", "lineFeed", "VT", "FF", "carriageReturn", "BS", "backspace", "HT", "tab", "SO", "shiftOut", "SI", "shiftIn", "C1", "IND", "NEL", "nextLine", "HTS", "tabSet", "OscHandler", "setTitle", "setIconName", "setOrReportIndexedColor", "setOrReportFgColor", "setOrReportBgColor", "setOrReportCursorColor", "restoreIndexedColor", "restoreFgColor", "restoreBgColor", "restoreCursorColor", "reverseIndex", "keypadApplicationMode", "keypadNumericMode", "fullReset", "setgLevel", "selectDefaultCharset", "flag", "selectCharset", "CHARSETS", "screenAlignmentPattern", "setErrorHandler", "DECRQSS", "_preserveStack", "_logSlowResolvingAsync", "Promise", "race", "res", "rej", "catch", "err", "wasPaused", "DEBUG", "prototype", "clearRange", "decode", "chWidth", "charset", "curAttr", "bufferRow", "markDirty", "setCellFromCodePoint", "extended", "wcwidth", "ch", "stringFromCodePoint", "_eraseAttrData", "insertCells", "getNullCell", "NULL_CELL_WIDTH", "addCodepointToCell", "precedingCodepoint", "hasContent", "DcsHandler", "convertEol", "_restrictCursor", "originalX", "nextStop", "maxCol", "_setCursor", "_moveCursor", "diffToTop", "diffToBottom", "param", "tabs", "prevStop", "_eraseInBufferLine", "clearWrap", "replaceCells", "_resetBufferLine", "clearMarkers", "scrollBackSize", "scrollBottomRowsOffset", "scrollBottomAbsolute", "deleteCells", "_is", "term", "termName", "setgCharset", "DEFAULT_CHARSET", "activeEncoding", "activateAltBuffer", "activateNormalBuffer", "_updateAttrColor", "mode", "c1", "c2", "c3", "fromColorRGB", "_extractColor", "accu", "cSpace", "advance", "hasSubParams", "subparams", "getSubParams", "underlineColor", "_processUnderline", "underlineStyle", "updateExtended", "savedX", "savedY", "savedCurAttrData", "savedCharset", "isBlinking", "bottom", "second", "_savedCharset", "slots", "spec", "parseColor", "_setOrReportSpecialColor", "collectAndFlag", "scrollRegionHeight", "level", "markAllDirty", "_disposables", "unregister", "disposables", "array", "isNode", "navigator", "userAgent", "platform", "test", "isIpad", "isIphone", "_getKey", "insert", "_search", "getKeyIterator", "mid", "SortedList", "fillFallback", "constructor", "lastChar", "CHAR_DATA_CODE_INDEX", "ExtendedAttrs", "newObj", "isBlink", "isFgPalette", "isAttributeDefault", "hasExtendedAttrs", "getUnderlineColor", "getUnderlineColorMode", "isUnderlineColorRGB", "isUnderlineColorPalette", "isUnderlineColorDefault", "getUnderlineStyle", "MAX_BUFFER_SIZE", "_hasScrollback", "_nullCell", "fromCharData", "NULL_CELL_CHAR", "_whitespaceCell", "WHITESPACE_CELL_WIDTH", "_isClearing", "_cols", "_rows", "_getCorrectBufferLength", "getWhitespaceCell", "BufferLine", "maxLength", "relativeY", "correctBufferLength", "scrollback", "fillViewportRows", "fillAttr", "newCols", "newRows", "nullCell", "addToY", "amountToTrim", "_isReflowEnabled", "_reflow", "_reflowLarger", "_reflowSmaller", "toRemove", "reflowLargerGetLinesToRemove", "newLayoutResult", "reflowLargerCreateNewLayout", "reflowLargerApplyNewLayout", "layout", "_reflowLargerAdjustViewport", "countRemoved", "viewportAdjustments", "toInsert", "countToInsert", "wrappedLines", "absoluteY", "trimmedLines", "lastLineLength", "destLineLengths", "reflowSmallerGetNewLineLengths", "linesToAdd", "newLines", "newLine", "destLineIndex", "destCol", "srcLineIndex", "srcCol", "cellsToCopy", "copyCellsFrom", "wrappedLinesIndex", "getWrappedLineTrimmedLength", "setCell", "insertEvents", "originalLines", "originalLinesLength", "originalLineIndex", "nextToInsertIndex", "nextToInsert", "countInsertedSoFar", "nextI", "insertCountEmitted", "lineIndex", "trimRight", "CHAR_DATA_WIDTH_INDEX", "CHAR_DATA_CHAR_INDEX", "tabStopWidth", "Marker", "onInsert", "onDelete", "_removeMarker", "startOverscan", "endOverscan", "BufferStringIterator", "Buffer", "_trimRight", "_endIndex", "_startOverscan", "_endOverscan", "_current", "fillCellData", "_combined", "_extendedAttrs", "cp", "CHAR_DATA_ATTR_INDEX", "codePoint", "eAttrs", "keys", "copyFrom", "src", "applyInReverse", "srcData", "srcCombinedKeys", "bufferCols", "endsInNull", "followingLineStartsWithWide", "oldCols", "bufferAbsoluteY", "srcTrimmedTineLength", "srcRemainingCells", "destRemainingCells", "countToRemove", "nextToRemoveIndex", "nextToRemoveStart", "countRemovedSoFar", "newLayout", "newLayoutLines", "newLineLengths", "cellsNeeded", "reduce", "srcLine", "cellsAvailable", "oldTrimmedLength", "endsWithWide", "_normal", "_alt", "inactiveBuffer", "BufferSet", "obj", "combined", "DEFAULT_ATTR", "_nextId", "isDisposed", "_onDispose", "C", "NUL", "SOH", "STX", "EOT", "ENQ", "ACK", "DLE", "DC1", "DC2", "DC3", "DC4", "NAK", "SYN", "ETB", "CAN", "EM", "SUB", "FS", "GS", "RS", "US", "SP", "DEL", "PAD", "HOP", "BPH", "NBH", "SSA", "ESA", "HTJ", "VTS", "PLD", "PLU", "RI", "SS2", "SS3", "DCS", "PU1", "PU2", "STS", "CCH", "MW", "SPA", "EPA", "SOS", "SGCI", "SCI", "CSI", "OSC", "PM", "APC", "KEYCODE_KEY_MAPPINGS", "applicationCursorMode", "modifiers", "keyMapping", "keyString", "toUpperCase", "toLowerCase", "_interim", "startPos", "interim", "byte1", "byte2", "byte3", "byte4", "discardInterim", "tmp", "missing", "fourStop", "table", "BMP_COMBINING", "HIGH_COMBINING", "version", "num", "ucs", "UnicodeV6", "qmt", "queueMicrotask", "cb", "resolve", "_action", "_callbacks", "_pendingData", "_bufferOffset", "_isSyncWriting", "_syncCalls", "chunk", "_innerWrite", "lastTime", "startTime", "RGB_REX", "HASH_REX", "pad", "bits", "s2", "low", "base", "adv", "PAYLOAD_LIMIT", "EMPTY_HANDLERS", "_handlers", "create", "_active", "_ident", "_handlerFb", "_stack", "loopPosition", "fallThrough", "registerHandler", "handlerList", "handlerIndex", "clearHandler", "setHandlerFallback", "handlerResult", "DcsParser", "EMPTY_PARAMS", "Params", "addParam", "_handler", "_params", "_hitLimit", "ret", "setDefault", "addMany", "codes", "TransitionTable", "NON_ASCII_PRINTABLE", "VT500_TRANSITION_TABLE", "blueprint", "apply", "unused", "PRINTABLES", "EXECUTABLES", "states", "_transitions", "handlers", "handlerPos", "transition", "chunkPos", "initialState", "currentState", "_collect", "_printHandlerFb", "_executeHandlerFb", "_csiHandlerFb", "_escHandlerFb", "_errorHandlerFb", "_printHandler", "_executeHandlers", "_csiHandlers", "_escHandlers", "_oscParser", "OscParser", "_dcsParser", "_errorHandler", "_identifier", "finalRange", "intermediate", "finalCode", "reverse", "clearPrintHandler", "clearEscHandler", "clearExecuteHandler", "clearCsiHandler", "clearDcsHandler", "clearOscHandler", "clearErrorHandler", "collect", "abort", "addSubParam", "addDigit", "handlersEsc", "jj", "_start", "_put", "MAX_VALUE", "maxSubParamsLength", "Int32Array", "_subParams", "_subParamsLength", "_subParamsIdx", "Uint16Array", "_rejectDigits", "_rejectSubDigits", "_digitIsSub", "fromArray", "k", "newParams", "getSubParamsAll", "store", "cur", "_addons", "instance", "terminal", "loadedAddon", "_wrappedAddonDispose", "init", "getLine", "BufferLineApiView", "BufferApiView", "_line", "getCell", "_onBufferChange", "_alternate", "alternate", "addCsiHandler", "addDcsHandler", "addEscHandler", "addOscHandler", "provider", "versions", "activeVersion", "isUserScrolling", "_cachedBlankLine", "topRow", "bottomRow", "willBufferBeTrimmed", "isFull", "oldYdisp", "scrollAmount", "glevel", "_charsets", "DEFAULT_PROTOCOLS", "NONE", "restrict", "X10", "VT200", "DRAG", "ANY", "eventCode", "isSGR", "S", "DEFAULT_ENCODINGS", "DEFAULT", "SGR", "_protocols", "_encodings", "_activeProtocol", "_activeEncoding", "_onProtocolChange", "_lastEvent", "addProtocol", "addEncoding", "name", "protocol", "encoding", "_compareEvents", "report", "triggerBinaryEvent", "down", "up", "drag", "move", "e1", "e2", "DEFAULT_MODES", "DEFAULT_DEC_PRIVATE_MODES", "_onUserInput", "_scrollToBottom", "wasUserInput", "disableStdin", "_decorations", "_onDecorationRegistered", "_onDecorationRemoved", "Decoration", "getDecorationsAtLine", "xmin", "xmax", "_cachedBg", "_cachedFg", "foregroundColor", "_end", "_entries", "service", "ServiceCollection", "_services", "getService", "ctor", "serviceDependencies", "getServiceDependencies", "sort", "serviceArgs", "dependency", "firstServiceArgPos", "optionsKeyToLogLevel", "info", "INFO", "ERROR", "off", "OFF", "_updateLogLevel", "_evalLazyOptionalParams", "optionalParams", "_log", "message", "log", "DEFAULT_BELL_SOUND", "DEFAULT_OPTIONS", "altClickMovesCursor", "FONT_WEIGHT_OPTIONS", "_onOptionChange", "defaultOptions", "newValue", "_sanitizeAndValidateOption", "_setupOptions", "storeServiceDependency", "serviceRegistry", "decorator", "arguments", "_providers", "_onChange", "defaultProvider", "_activeProvider", "__webpack_module_cache__", "__webpack_require__", "moduleId", "cachedModule", "__webpack_modules__"]
}
