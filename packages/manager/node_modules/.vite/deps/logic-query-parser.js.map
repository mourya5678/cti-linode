{
  "version": 3,
  "sources": ["../../../../../node_modules/logic-query-parser/lib/helpers/lexer.js", "../../../../../node_modules/logic-query-parser/lib/helpers/syntaxer.js", "../../../../../node_modules/logic-query-parser/lib/helpers/post.js", "../../../../../node_modules/logic-query-parser/config/lexemes.js", "../../../../../node_modules/logic-query-parser/lib/lexer.js", "../../../../../node_modules/logic-query-parser/lib/checker.js", "../../../../../node_modules/logic-query-parser/lib/syntaxer.js", "../../../../../node_modules/logic-query-parser/lib/utils.js", "../../../../../node_modules/logic-query-parser/lib/index.js"],
  "sourcesContent": ["'use strict';\n\nmodule.exports.generateRegexp = function generateRegexp(lexeme) {\n  return new RegExp('^(' + lexeme.regexp + ')', lexeme.modifiers);\n};\n\nmodule.exports.generateCutLexer = function generateCutLexer(type, length) {\n  return function(str, lexemesArray) {\n    lexemesArray.push({\n      type: type,\n      value: str.slice(0, length)\n    });\n\n    return str.slice(length);\n  };\n};\n\nfunction endOfString(str, quoted, spaces, first, endLexemes) {\n  if(str.length === 0) {\n    return true;\n  }\n  else if(quoted) {\n    return str.charAt(0) === '\"';\n  }\n  else if(spaces.indexOf(str.charAt(0)) !== -1 ||\n    str.charAt(0) === '\"') {\n    return true;\n  }\n\n  if(first) {\n    return false;\n  }\n\n  return endLexemes.some(function(lexeme) {\n    return module.exports.generateRegexp(lexeme).test(str);\n  });\n}\n\nmodule.exports.stringLexer = function stringLexer(endLexemes) {\n  return function(str, lexemesArray, spaces) {\n    var i = 0;\n    var first = true;\n    var quoted = false;\n    var value = \"\";\n\n    if(str.charAt(0) === '\"') {\n      quoted = true;\n      i = 1;\n      str = str.slice(1);\n    }\n\n    while(!endOfString(str, quoted, spaces, first, endLexemes)) {\n      if(str.charAt(0) === '\\\\') {\n        value += str.charAt(1);\n        str = str.slice(2);\n        continue;\n      }\n\n      value += str.charAt(0);\n      str = str.slice(1);\n      first = false;\n    }\n\n    if(quoted && str.charAt(0) !== '\"') {\n      throw new Error(\"Can't reach end of quoted string\");\n    } \n    else if(quoted) {\n      str = str.slice(1);\n    }\n\n    lexemesArray.push({\n      type: \"string\",\n      value: value\n    });\n\n    return str;\n  };\n};\n\nmodule.exports.clearSpaces = function clearSpaces(str, spaces) {\n  var i = 0;\n\n  while(i < str.length && spaces.indexOf(str.charAt(i)) !== -1) {\n    i += 1;\n  }\n\n  return str.slice(i);\n};", "'use strict';\n\nfunction getLowPriorityBlock(tree, priority) {\n  var lexemes = require('../../config/lexemes.js');\n\n  if(priority === undefined) {\n    priority = -1;\n  }\n\n  if(!tree.lexeme || lexemes[tree.lexeme.type].priority < priority || tree.right === null) {\n    return tree;\n  }\n\n  return getLowPriorityBlock(tree.right, priority);\n}\n\nfunction defaultOperator(options, currentBlock, newBlock) {\n  var tempLexeme = {\n    type: currentBlock.lexeme.type,\n    value: currentBlock.lexeme.value\n  };\n\n  currentBlock.lexeme = {\n    type: options.defaultOperator || 'and'\n  };\n\n  currentBlock.left = {\n    lexeme: tempLexeme,\n    left: currentBlock.left,\n    right: currentBlock.right\n  };\n\n  currentBlock.right = newBlock;\n\n  if(!currentBlock.lexeme.value) {\n    delete currentBlock.lexeme.value;\n  }\n}\n\nmodule.exports.stringSyntaxer = function stringSyntaxer(options, lexemesArray, i, tree) {\n  var lexemes = require('../../config/lexemes.js');\n  var block = getLowPriorityBlock(tree, lexemes.string.priority);\n\n  var tempLexeme = {\n    type: 'string',\n    value: lexemesArray[i].value,\n  };\n\n  if(block.lexeme) {\n    defaultOperator(options, block, {\n      lexeme: tempLexeme,\n      left: null,\n      right: null\n    });\n    return i + 1;\n  }\n\n  block.lexeme = tempLexeme;\n\n  block.left = null;\n  block.right = null;\n\n  return i + 1;\n};\n\nfunction generateBasicSyntaxer(type) {\n  return function basicSyntaxer(options, lexemesArray, i, tree) {\n    var lexemes = require('../../config/lexemes.js');\n    var block = getLowPriorityBlock(tree, lexemes[type].priority);\n\n    if(!block.lexeme) {\n      throw new Error(\"Nothing before \" + type + \" block\");\n    }\n\n    var tempLexeme = {\n      type: block.lexeme.type,\n      value: block.lexeme.value\n    };\n\n    block.lexeme = {\n      type: type\n    };\n\n    block.left = {\n      lexeme: tempLexeme,\n      left: block.left,\n      right: block.right\n    };\n\n    block.right = {};\n\n    if(!block.left.lexeme.value) {\n      delete block.left.lexeme.value;\n    }\n\n    return i + 1;\n  };\n}\n\nmodule.exports.andSyntaxer = generateBasicSyntaxer('and');\nmodule.exports.orSyntaxer = generateBasicSyntaxer('or');\n\nmodule.exports.blockSyntaxer = function blockSyntaxer(options, lexemesArray, i, tree, createTree) {\n  var lexemes = require('../../config/lexemes.js');\n  var block = getLowPriorityBlock(tree, lexemes.startBlock.priority);\n\n  var tempLexeme = {\n    type: 'startBlock'\n  };\n\n  var newBlock = createTree('endBlock', i + 1);\n\n  if(block.lexeme) {\n    defaultOperator(options, block, {\n      lexeme: tempLexeme,\n      left: newBlock,\n      right: null\n    });\n    return;\n  }\n\n  block.lexeme = tempLexeme;\n  block.left = newBlock;\n  block.right = null;\n};\n", "'use strict';\n\nmodule.exports.blockPostTreatment = function blockPostTreatment(tree) {\n  if(!tree || !tree.lexeme) {\n    return tree;\n  }\n\n  if(tree.lexeme.type === 'startBlock') {\n    tree.lexeme = {\n      type: tree.left.lexeme.type,\n      value: tree.left.lexeme.value\n    };\n\n    if(!tree.lexeme.value) {\n      delete tree.lexeme.value;\n    }\n\n    tree.right = tree.left.right;\n    tree.left = tree.left.left;\n  }\n\n  blockPostTreatment(tree.right);\n  blockPostTreatment(tree.left);\n\n  return tree;\n};\n", "var lexerHelper = require('../lib/helpers/lexer.js');\nvar syntaxerHelper = require('../lib/helpers/syntaxer.js');\nvar postHelper = require('../lib/helpers/post.js');\n\nvar andLexeme = {\n  regexp: 'and(\\\\s|\\\\(|\\\\)|\"|$)',\n  escaped: true,\n  modifiers: 'i',\n  lexer: lexerHelper.generateCutLexer('and', 3),\n  syntaxer: syntaxerHelper.andSyntaxer,\n  priority: 4,\n  checker: ['endBlock', null]\n};\n\nvar orLexeme = {\n  regexp: 'or(\\\\s|\\\\(|\\\\)|\"|$)',\n  escaped: true,\n  modifiers: 'i',\n  lexer: lexerHelper.generateCutLexer('or', 2),\n  syntaxer: syntaxerHelper.orSyntaxer,\n  priority: 5,\n  checker: ['endBlock', null]\n};\n\nvar startBlockLexeme = {\n  regexp: '\\\\(',\n  escaped: true,\n  lexer: lexerHelper.generateCutLexer('startBlock', 1),\n  syntaxer: syntaxerHelper.blockSyntaxer,\n  priority: 0,\n  postFunction: postHelper.blockPostTreatment,\n  checker: ['endBlock', null]\n};\n\nvar endBlockLexeme = {\n  regexp: '\\\\)',\n  escaped: true,\n  lexer: lexerHelper.generateCutLexer('endBlock', 1),\n};\n\nvar stringLexeme = {\n  regexp: '\"?.*',\n  lexer: lexerHelper.stringLexer([startBlockLexeme, endBlockLexeme]),\n  syntaxer: syntaxerHelper.stringSyntaxer,\n  priority: 0\n};\n\nmodule.exports = {\n  and: andLexeme,\n  or: orLexeme,\n  startBlock: startBlockLexeme,\n  endBlock: endBlockLexeme,\n  string: stringLexeme\n};\n", "'use strict';\n\nvar lexemes = require('../config/lexemes.js');\nvar helpers = require('./helpers/lexer.js');\n\nmodule.exports.strToLexemes = function strToLexemes(str, spaces) {\n  var lexemesArray = [];\n\n  str = helpers.clearSpaces(str, spaces);\n  while(str.length > 0) {\n    var escaped = false;\n\n    if(str.charAt(0) === '\\\\') {\n      escaped = true;\n      str = str.slice(1);\n\n      if(str.length === 0) {\n        throw new Error(\"Backslash at end of string\");\n      }\n    }\n\n    var ret = Object.keys(lexemes).some(function(name) {\n      if(escaped && lexemes[name].escaped) {\n        return false;\n      }\n\n      var regexp = helpers.generateRegexp(lexemes[name]);\n\n      if(regexp.test(str)) {\n        str = lexemes[name].lexer(str, lexemesArray, spaces);\n        return true;\n      }\n\n      return false;\n    });\n\n    if(!ret) {\n      throw new Error(\"Unknow character : \" + str.charAt(0));\n    }\n\n    str = helpers.clearSpaces(str, spaces);\n  }\n\n  return lexemesArray;\n};", "'use strict';\n\nvar lexemes = require('../config/lexemes.js');\n\nfunction check(current, next, config) {\n  for(var i = 0, c = config.length; i < c; i += 1) {\n    if(next === config[i]) {\n      throw new Error((next ? next : 'end of string') + \" just after \" + current);\n    }\n  }\n}\n\nmodule.exports.check = function doCheck(lexemesArray) {\n  var i = 0;\n  var next = null;\n\n  while(lexemesArray[i]) {\n    next = lexemesArray[i + 1];\n\n    if(lexemes[lexemesArray[i].type].checker) {\n      check(lexemesArray[i].type, (next) ? next.type : null, lexemes[lexemesArray[i].type].checker);\n    }\n\n    i += 1;\n  }\n};", "'use strict';\n\nvar lexemes = require('../config/lexemes.js');\n\nmodule.exports.lexemesArrayToBinaryTree = function lexemesArrayToBinaryTree(options, lexemesArray) {\n  var i = 0;\n\n  function createTree(end, newI) {\n    var tree = {};\n\n    if(newI) {\n      i = newI;\n    }\n\n    while (lexemesArray[i] && lexemesArray[i].type !== end) {\n      if(!lexemes[lexemesArray[i].type].syntaxer) {\n        throw new Error(\"Unexpected token \" + lexemesArray[i].type);\n      }\n\n      var temp = lexemes[lexemesArray[i].type].syntaxer(options, lexemesArray, i, tree, createTree);\n\n      if(temp) {\n        i = temp;\n      }\n    }\n\n    if(end && !lexemesArray[i]) {\n      throw new Error('Bad end of block');\n    }\n    else if(end) {\n      i += 1;\n    }\n\n    return tree;\n  }\n\n  return createTree(null);\n};", "'use strict';\n\nmodule.exports.binaryTreeToQueryJson = function binaryTreeToQueryJson(tree) {\n  var query = {};\n\n  if(!tree || !tree.lexeme) {\n    return query;\n  }\n\n  var cursor = tree;\n  var currentType = tree.lexeme.type;\n\n  query.type = currentType;\n\n  if(currentType === 'string') {\n    query.value = tree.lexeme.value;\n    return query;\n  }\n\n  query.values = [];\n\n  while(cursor && cursor.lexeme.type === currentType) {\n\n    if(cursor.left) {\n      query.values.push(binaryTreeToQueryJson(cursor.left));\n    }\n\n    cursor = cursor.right;\n  }\n\n  if(cursor) {\n    query.values.push(binaryTreeToQueryJson(cursor));\n  }\n\n  return query;\n};\n", "'use strict';\n\nvar lexemes = require('../config/lexemes.js');\n\nvar lexer = require('./lexer.js');\nvar checker = require('./checker.js');\nvar syntaxer = require('./syntaxer.js');\n\nmodule.exports.parse = function parse(options, query) {\n  if(!query) {\n    query = options;\n    options = {};\n  }\n\n  var lexemesArray = lexer.strToLexemes(query, options.spaces ? options.spaces : \" \\t\\n\");\n  checker.check(lexemesArray);\n\n  var tree = syntaxer.lexemesArrayToBinaryTree(options, lexemesArray);\n\n  Object.keys(lexemes).forEach(function(name) {\n    if(lexemes[name].postFunction) {\n      tree = lexemes[name].postFunction(tree);\n    }\n  });\n\n  return tree;\n};\n\nmodule.exports.utils = require('./utils.js');\n"],
  "mappings": "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",
  "names": ["require_lexer", "require_syntaxer"]
}
