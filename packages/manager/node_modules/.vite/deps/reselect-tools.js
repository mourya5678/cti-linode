import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS
} from "./chunk-LFBQMW2U.js";

// ../../node_modules/reselect-tools/node_modules/reselect/es/index.js
var es_exports = {};
__export(es_exports, {
  createSelector: () => createSelector,
  createSelectorCreator: () => createSelectorCreator,
  createStructuredSelector: () => createStructuredSelector,
  defaultMemoize: () => defaultMemoize
});
function defaultEqualityCheck(a, b) {
  return a === b;
}
function areArgumentsShallowlyEqual(equalityCheck, prev, next) {
  if (prev === null || next === null || prev.length !== next.length) {
    return false;
  }
  var length = prev.length;
  for (var i = 0; i < length; i++) {
    if (!equalityCheck(prev[i], next[i])) {
      return false;
    }
  }
  return true;
}
function defaultMemoize(func) {
  var equalityCheck = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultEqualityCheck;
  var lastArgs = null;
  var lastResult = null;
  return function() {
    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {
      lastResult = func.apply(null, arguments);
    }
    lastArgs = arguments;
    return lastResult;
  };
}
function getDependencies(funcs) {
  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;
  if (!dependencies.every(function(dep) {
    return typeof dep === "function";
  })) {
    var dependencyTypes = dependencies.map(function(dep) {
      return typeof dep;
    }).join(", ");
    throw new Error("Selector creators expect all input-selectors to be functions, " + ("instead received the following types: [" + dependencyTypes + "]"));
  }
  return dependencies;
}
function createSelectorCreator(memoize) {
  for (var _len = arguments.length, memoizeOptions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    memoizeOptions[_key - 1] = arguments[_key];
  }
  return function() {
    for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      funcs[_key2] = arguments[_key2];
    }
    var recomputations = 0;
    var resultFunc = funcs.pop();
    var dependencies = getDependencies(funcs);
    var memoizedResultFunc = memoize.apply(void 0, [function() {
      recomputations++;
      return resultFunc.apply(null, arguments);
    }].concat(memoizeOptions));
    var selector = memoize(function() {
      var params = [];
      var length = dependencies.length;
      for (var i = 0; i < length; i++) {
        params.push(dependencies[i].apply(null, arguments));
      }
      return memoizedResultFunc.apply(null, params);
    });
    selector.resultFunc = resultFunc;
    selector.dependencies = dependencies;
    selector.recomputations = function() {
      return recomputations;
    };
    selector.resetRecomputations = function() {
      return recomputations = 0;
    };
    return selector;
  };
}
function createStructuredSelector(selectors) {
  var selectorCreator = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : createSelector;
  if (typeof selectors !== "object") {
    throw new Error("createStructuredSelector expects first argument to be an object " + ("where each property is a selector, instead received a " + typeof selectors));
  }
  var objectKeys = Object.keys(selectors);
  return selectorCreator(objectKeys.map(function(key) {
    return selectors[key];
  }), function() {
    for (var _len3 = arguments.length, values = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      values[_key3] = arguments[_key3];
    }
    return values.reduce(function(composition, value, index) {
      composition[objectKeys[index]] = value;
      return composition;
    }, {});
  });
}
var createSelector;
var init_es = __esm({
  "../../node_modules/reselect-tools/node_modules/reselect/es/index.js"() {
    createSelector = createSelectorCreator(defaultMemoize);
  }
});

// ../../node_modules/reselect-tools/es/index.js
var require_es = __commonJS({
  "../../node_modules/reselect-tools/es/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.createSelectorWithDependencies = createSelectorWithDependencies;
    exports.registerSelectors = registerSelectors;
    exports.reset = reset;
    exports.checkSelector = checkSelector;
    exports.getStateWith = getStateWith;
    exports.selectorGraph = selectorGraph;
    var _reselect = (init_es(), __toCommonJS(es_exports));
    var _getState = null;
    var _allSelectors = /* @__PURE__ */ new Set();
    var _isFunction = function _isFunction2(func) {
      return typeof func === "function";
    };
    function createSelectorWithDependencies() {
      return _reselect.createSelector.apply(void 0, arguments);
    }
    var _isSelector = function _isSelector2(selector) {
      return selector && selector.resultFunc || _isFunction(selector);
    };
    var _addSelector = function _addSelector2(selector) {
      _allSelectors.add(selector);
      var dependencies = selector.dependencies || [];
      dependencies.forEach(_addSelector2);
    };
    function registerSelectors(selectors) {
      Object.keys(selectors).forEach(function(name) {
        var selector = selectors[name];
        if (_isSelector(selector)) {
          selector.selectorName = name;
          _addSelector(selector);
        }
      });
    }
    function reset() {
      _getState = null;
      _allSelectors = /* @__PURE__ */ new Set();
    }
    function checkSelector(selector) {
      if (typeof selector === "string") {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = void 0;
        try {
          for (var _iterator = _allSelectors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var possibleSelector = _step.value;
            if (possibleSelector.selectorName === selector) {
              selector = possibleSelector;
              break;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
      if (!_isFunction(selector)) {
        throw new Error("Selector " + selector + " is not a function...has it been registered?");
      }
      var _selector = selector, _selector$dependencie = _selector.dependencies, dependencies = _selector$dependencie === void 0 ? [] : _selector$dependencie, _selector$selectorNam = _selector.selectorName, selectorName = _selector$selectorNam === void 0 ? null : _selector$selectorNam;
      var isNamed = typeof selectorName === "string";
      var recomputations = selector.recomputations ? selector.recomputations() : null;
      var ret = { dependencies, recomputations, isNamed, selectorName };
      if (_getState) {
        var state = _getState();
        var inputs = dependencies.map(function(parentSelector) {
          return parentSelector(state);
        });
        var extra = { inputs };
        try {
          var output = selector(state);
          extra.output = output;
        } catch (e) {
          var error = "checkSelector: error getting output of selector " + selectorName + ". The error was:\n" + e;
          extra.error = error;
        }
        Object.assign(ret, extra);
      }
      return ret;
    }
    function getStateWith(stateGetter) {
      _getState = stateGetter;
    }
    function _sumString(str) {
      return Array.from(str.toString()).reduce(function(sum, char) {
        return char.charCodeAt(0) + sum;
      }, 0);
    }
    var defaultSelectorKey = function defaultSelectorKey2(selector) {
      if (selector.selectorName) {
        return selector.selectorName;
      }
      if (selector.name) {
        return selector.name;
      }
      return (selector.dependencies || []).reduce(function(base, dep) {
        return base + _sumString(dep);
      }, (selector.resultFunc ? selector.resultFunc : selector).toString());
    };
    function selectorGraph() {
      var selectorKey = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultSelectorKey;
      var graph = { nodes: {}, edges: [] };
      var addToGraph = function addToGraph2(selector2) {
        var name = selectorKey(selector2);
        if (graph.nodes[name])
          return;
        var _checkSelector = checkSelector(selector2), recomputations = _checkSelector.recomputations, isNamed = _checkSelector.isNamed;
        graph.nodes[name] = {
          recomputations,
          isNamed,
          name
        };
        var dependencies = selector2.dependencies || [];
        dependencies.forEach(function(dependency) {
          addToGraph2(dependency);
          graph.edges.push({ from: name, to: selectorKey(dependency) });
        });
      };
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = void 0;
      try {
        for (var _iterator2 = _allSelectors[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var selector = _step2.value;
          addToGraph(selector);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
      return graph;
    }
    if (typeof window !== "undefined") {
      window.__RESELECT_TOOLS__ = {
        selectorGraph,
        checkSelector
      };
    }
  }
});
export default require_es();
//# sourceMappingURL=reselect-tools.js.map
