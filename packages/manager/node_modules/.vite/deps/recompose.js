import {
  polyfill
} from "./chunk-6CMHUNNM.js";
import {
  _inheritsLoose,
  init_inheritsLoose
} from "./chunk-B4SR4P2K.js";
import {
  _objectWithoutPropertiesLoose,
  init_objectWithoutPropertiesLoose
} from "./chunk-GYB27DV7.js";
import {
  _extends,
  init_extends
} from "./chunk-S5Y2Q5O2.js";
import {
  require_react
} from "./chunk-CPU6GBAM.js";
import {
  __commonJS,
  __toESM
} from "./chunk-LFBQMW2U.js";

// ../../node_modules/fbjs/lib/shallowEqual.js
var require_shallowEqual = __commonJS({
  "../../node_modules/fbjs/lib/shallowEqual.js"(exports, module2) {
    "use strict";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function is(x, y) {
      if (x === y) {
        return x !== 0 || y !== 0 || 1 / x === 1 / y;
      } else {
        return x !== x && y !== y;
      }
    }
    function shallowEqual2(objA, objB) {
      if (is(objA, objB)) {
        return true;
      }
      if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
        return false;
      }
      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);
      if (keysA.length !== keysB.length) {
        return false;
      }
      for (var i = 0; i < keysA.length; i++) {
        if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
          return false;
        }
      }
      return true;
    }
    module2.exports = shallowEqual2;
  }
});

// ../../node_modules/recompose/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
var require_hoist_non_react_statics_cjs = __commonJS({
  "../../node_modules/recompose/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module2) {
    "use strict";
    var REACT_STATICS = {
      childContextTypes: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = getPrototypeOf && getPrototypeOf(Object);
    function hoistNonReactStatics2(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== "string") {
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics2(targetComponent, inheritedComponent, blacklist);
          }
        }
        var keys2 = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys2 = keys2.concat(getOwnPropertySymbols(sourceComponent));
        }
        for (var i = 0; i < keys2.length; ++i) {
          var key = keys2[i];
          if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
            try {
              defineProperty(targetComponent, key, descriptor);
            } catch (e) {
            }
          }
        }
        return targetComponent;
      }
      return targetComponent;
    }
    module2.exports = hoistNonReactStatics2;
  }
});

// ../../node_modules/change-emitter/lib/index.js
var require_lib = __commonJS({
  "../../node_modules/change-emitter/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var createChangeEmitter2 = exports.createChangeEmitter = function createChangeEmitter3() {
      var currentListeners = [];
      var nextListeners = currentListeners;
      function ensureCanMutateNextListeners() {
        if (nextListeners === currentListeners) {
          nextListeners = currentListeners.slice();
        }
      }
      function listen(listener) {
        if (typeof listener !== "function") {
          throw new Error("Expected listener to be a function.");
        }
        var isSubscribed = true;
        ensureCanMutateNextListeners();
        nextListeners.push(listener);
        return function() {
          if (!isSubscribed) {
            return;
          }
          isSubscribed = false;
          ensureCanMutateNextListeners();
          var index = nextListeners.indexOf(listener);
          nextListeners.splice(index, 1);
        };
      }
      function emit() {
        currentListeners = nextListeners;
        var listeners = currentListeners;
        for (var i = 0; i < listeners.length; i++) {
          listeners[i].apply(listeners, arguments);
        }
      }
      return {
        listen,
        emit
      };
    };
  }
});

// ../../node_modules/recompose/dist/Recompose.esm.js
var import_react = __toESM(require_react());
init_extends();
var import_shallowEqual = __toESM(require_shallowEqual());
init_inheritsLoose();
init_objectWithoutPropertiesLoose();
var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
var import_change_emitter = __toESM(require_lib());

// ../../node_modules/recompose/node_modules/symbol-observable/es/ponyfill.js
function symbolObservablePonyfill(root2) {
  var result2;
  var Symbol = root2.Symbol;
  if (typeof Symbol === "function") {
    if (Symbol.observable) {
      result2 = Symbol.observable;
    } else {
      result2 = Symbol("observable");
      Symbol.observable = result2;
    }
  } else {
    result2 = "@@observable";
  }
  return result2;
}

// ../../node_modules/recompose/node_modules/symbol-observable/es/index.js
var root;
if (typeof self !== "undefined") {
  root = self;
} else if (typeof window !== "undefined") {
  root = window;
} else if (typeof global !== "undefined") {
  root = global;
} else if (typeof module !== "undefined") {
  root = module;
} else {
  root = Function("return this")();
}
var result = symbolObservablePonyfill(root);
var es_default = result;

// ../../node_modules/recompose/dist/Recompose.esm.js
var setStatic = function setStatic2(key, value) {
  return function(BaseComponent) {
    BaseComponent[key] = value;
    return BaseComponent;
  };
};
var setDisplayName = function setDisplayName2(displayName) {
  return setStatic("displayName", displayName);
};
var getDisplayName = function getDisplayName2(Component$$1) {
  if (typeof Component$$1 === "string") {
    return Component$$1;
  }
  if (!Component$$1) {
    return void 0;
  }
  return Component$$1.displayName || Component$$1.name || "Component";
};
var wrapDisplayName = function wrapDisplayName2(BaseComponent, hocName) {
  return hocName + "(" + getDisplayName(BaseComponent) + ")";
};
var mapProps = function mapProps2(propsMapper) {
  return function(BaseComponent) {
    var factory = (0, import_react.createFactory)(BaseComponent);
    var MapProps = function MapProps2(props) {
      return factory(propsMapper(props));
    };
    if (true) {
      return setDisplayName(wrapDisplayName(BaseComponent, "mapProps"))(MapProps);
    }
    return MapProps;
  };
};
var withProps = function withProps2(input) {
  var hoc = mapProps(function(props) {
    return _extends({}, props, typeof input === "function" ? input(props) : input);
  });
  if (true) {
    return function(BaseComponent) {
      return setDisplayName(wrapDisplayName(BaseComponent, "withProps"))(hoc(BaseComponent));
    };
  }
  return hoc;
};
var pick = function pick2(obj, keys2) {
  var result2 = {};
  for (var i = 0; i < keys2.length; i++) {
    var key = keys2[i];
    if (obj.hasOwnProperty(key)) {
      result2[key] = obj[key];
    }
  }
  return result2;
};
var withPropsOnChange = function withPropsOnChange2(shouldMapOrKeys, propsMapper) {
  return function(BaseComponent) {
    var factory = (0, import_react.createFactory)(BaseComponent);
    var shouldMap = typeof shouldMapOrKeys === "function" ? shouldMapOrKeys : function(props, nextProps) {
      return !(0, import_shallowEqual.default)(pick(props, shouldMapOrKeys), pick(nextProps, shouldMapOrKeys));
    };
    var WithPropsOnChange = function(_Component) {
      _inheritsLoose(WithPropsOnChange2, _Component);
      function WithPropsOnChange2() {
        var _this;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _Component.call.apply(_Component, [this].concat(args)) || this;
        _this.state = {
          computedProps: propsMapper(_this.props),
          prevProps: _this.props
        };
        return _this;
      }
      WithPropsOnChange2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
        if (shouldMap(prevState.prevProps, nextProps)) {
          return {
            computedProps: propsMapper(nextProps),
            prevProps: nextProps
          };
        }
        return {
          prevProps: nextProps
        };
      };
      var _proto = WithPropsOnChange2.prototype;
      _proto.render = function render() {
        return factory(_extends({}, this.props, this.state.computedProps));
      };
      return WithPropsOnChange2;
    }(import_react.Component);
    polyfill(WithPropsOnChange);
    if (true) {
      return setDisplayName(wrapDisplayName(BaseComponent, "withPropsOnChange"))(WithPropsOnChange);
    }
    return WithPropsOnChange;
  };
};
var mapValues = function mapValues2(obj, func) {
  var result2 = {};
  for (var key in obj) {
    if (obj.hasOwnProperty(key)) {
      result2[key] = func(obj[key], key);
    }
  }
  return result2;
};
var withHandlers = function withHandlers2(handlers) {
  return function(BaseComponent) {
    var factory = (0, import_react.createFactory)(BaseComponent);
    var WithHandlers = function(_Component) {
      _inheritsLoose(WithHandlers2, _Component);
      function WithHandlers2() {
        var _this;
        for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
          _args[_key] = arguments[_key];
        }
        _this = _Component.call.apply(_Component, [this].concat(_args)) || this;
        _this.handlers = mapValues(typeof handlers === "function" ? handlers(_this.props) : handlers, function(createHandler) {
          return function() {
            var handler = createHandler(_this.props);
            if (typeof handler !== "function") {
              console.error(
                // eslint-disable-line no-console
                "withHandlers(): Expected a map of higher-order functions. Refer to the docs for more info."
              );
            }
            return handler.apply(void 0, arguments);
          };
        });
        return _this;
      }
      var _proto = WithHandlers2.prototype;
      _proto.render = function render() {
        return factory(_extends({}, this.props, this.handlers));
      };
      return WithHandlers2;
    }(import_react.Component);
    if (true) {
      return setDisplayName(wrapDisplayName(BaseComponent, "withHandlers"))(WithHandlers);
    }
    return WithHandlers;
  };
};
var defaultProps = function defaultProps2(props) {
  return function(BaseComponent) {
    var factory = (0, import_react.createFactory)(BaseComponent);
    var DefaultProps = function DefaultProps2(ownerProps) {
      return factory(ownerProps);
    };
    DefaultProps.defaultProps = props;
    if (true) {
      return setDisplayName(wrapDisplayName(BaseComponent, "defaultProps"))(DefaultProps);
    }
    return DefaultProps;
  };
};
var omit = function omit2(obj, keys2) {
  var rest = _extends({}, obj);
  for (var i = 0; i < keys2.length; i++) {
    var key = keys2[i];
    if (rest.hasOwnProperty(key)) {
      delete rest[key];
    }
  }
  return rest;
};
var renameProp = function renameProp2(oldName, newName) {
  var hoc = mapProps(function(props) {
    var _extends2;
    return _extends({}, omit(props, [oldName]), (_extends2 = {}, _extends2[newName] = props[oldName], _extends2));
  });
  if (true) {
    return function(BaseComponent) {
      return setDisplayName(wrapDisplayName(BaseComponent, "renameProp"))(hoc(BaseComponent));
    };
  }
  return hoc;
};
var keys = Object.keys;
var mapKeys = function mapKeys2(obj, func) {
  return keys(obj).reduce(function(result2, key) {
    var val = obj[key];
    result2[func(val, key)] = val;
    return result2;
  }, {});
};
var renameProps = function renameProps2(nameMap) {
  var hoc = mapProps(function(props) {
    return _extends({}, omit(props, keys(nameMap)), mapKeys(pick(props, keys(nameMap)), function(_, oldName) {
      return nameMap[oldName];
    }));
  });
  if (true) {
    return function(BaseComponent) {
      return setDisplayName(wrapDisplayName(BaseComponent, "renameProps"))(hoc(BaseComponent));
    };
  }
  return hoc;
};
var flattenProp = function flattenProp2(propName) {
  return function(BaseComponent) {
    var factory = (0, import_react.createFactory)(BaseComponent);
    var FlattenProp = function FlattenProp2(props) {
      return factory(_extends({}, props, props[propName]));
    };
    if (true) {
      return setDisplayName(wrapDisplayName(BaseComponent, "flattenProp"))(FlattenProp);
    }
    return FlattenProp;
  };
};
var withState = function withState2(stateName, stateUpdaterName, initialState) {
  return function(BaseComponent) {
    var factory = (0, import_react.createFactory)(BaseComponent);
    var WithState = function(_Component) {
      _inheritsLoose(WithState2, _Component);
      function WithState2() {
        var _this;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _Component.call.apply(_Component, [this].concat(args)) || this;
        _this.state = {
          stateValue: typeof initialState === "function" ? initialState(_this.props) : initialState
        };
        _this.updateStateValue = function(updateFn, callback) {
          return _this.setState(function(_ref) {
            var stateValue = _ref.stateValue;
            return {
              stateValue: typeof updateFn === "function" ? updateFn(stateValue) : updateFn
            };
          }, callback);
        };
        return _this;
      }
      var _proto = WithState2.prototype;
      _proto.render = function render() {
        var _extends2;
        return factory(_extends({}, this.props, (_extends2 = {}, _extends2[stateName] = this.state.stateValue, _extends2[stateUpdaterName] = this.updateStateValue, _extends2)));
      };
      return WithState2;
    }(import_react.Component);
    if (true) {
      return setDisplayName(wrapDisplayName(BaseComponent, "withState"))(WithState);
    }
    return WithState;
  };
};
var withStateHandlers = function withStateHandlers2(initialState, stateUpdaters) {
  return function(BaseComponent) {
    var factory = (0, import_react.createFactory)(BaseComponent);
    var WithStateHandlers = function(_Component) {
      _inheritsLoose(WithStateHandlers2, _Component);
      function WithStateHandlers2() {
        var _this;
        for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
          _args[_key] = arguments[_key];
        }
        _this = _Component.call.apply(_Component, [this].concat(_args)) || this;
        _this.state = typeof initialState === "function" ? initialState(_this.props) : initialState;
        _this.stateUpdaters = mapValues(stateUpdaters, function(handler) {
          return function(mayBeEvent) {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            if (mayBeEvent && typeof mayBeEvent.persist === "function") {
              mayBeEvent.persist();
            }
            _this.setState(function(state, props) {
              return handler(state, props).apply(void 0, [mayBeEvent].concat(args));
            });
          };
        });
        return _this;
      }
      var _proto = WithStateHandlers2.prototype;
      _proto.render = function render() {
        return factory(_extends({}, this.props, this.state, this.stateUpdaters));
      };
      return WithStateHandlers2;
    }(import_react.Component);
    if (true) {
      return setDisplayName(wrapDisplayName(BaseComponent, "withStateHandlers"))(WithStateHandlers);
    }
    return WithStateHandlers;
  };
};
var noop = function noop2() {
};
var withReducer = function withReducer2(stateName, dispatchName, reducer, initialState) {
  return function(BaseComponent) {
    var factory = (0, import_react.createFactory)(BaseComponent);
    var WithReducer = function(_Component) {
      _inheritsLoose(WithReducer2, _Component);
      function WithReducer2() {
        var _this;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _Component.call.apply(_Component, [this].concat(args)) || this;
        _this.state = {
          stateValue: _this.initializeStateValue()
        };
        _this.dispatch = function(action, callback) {
          if (callback === void 0) {
            callback = noop;
          }
          return _this.setState(function(_ref) {
            var stateValue = _ref.stateValue;
            return {
              stateValue: reducer(stateValue, action)
            };
          }, function() {
            return callback(_this.state.stateValue);
          });
        };
        return _this;
      }
      var _proto = WithReducer2.prototype;
      _proto.initializeStateValue = function initializeStateValue() {
        if (initialState !== void 0) {
          return typeof initialState === "function" ? initialState(this.props) : initialState;
        }
        return reducer(void 0, {
          type: "@@recompose/INIT"
        });
      };
      _proto.render = function render() {
        var _extends2;
        return factory(_extends({}, this.props, (_extends2 = {}, _extends2[stateName] = this.state.stateValue, _extends2[dispatchName] = this.dispatch, _extends2)));
      };
      return WithReducer2;
    }(import_react.Component);
    if (true) {
      return setDisplayName(wrapDisplayName(BaseComponent, "withReducer"))(WithReducer);
    }
    return WithReducer;
  };
};
var identity = function identity2(Component$$1) {
  return Component$$1;
};
var branch = function branch2(test, left, right) {
  if (right === void 0) {
    right = identity;
  }
  return function(BaseComponent) {
    var leftFactory;
    var rightFactory;
    var Branch = function Branch2(props) {
      if (test(props)) {
        leftFactory = leftFactory || (0, import_react.createFactory)(left(BaseComponent));
        return leftFactory(props);
      }
      rightFactory = rightFactory || (0, import_react.createFactory)(right(BaseComponent));
      return rightFactory(props);
    };
    if (true) {
      return setDisplayName(wrapDisplayName(BaseComponent, "branch"))(Branch);
    }
    return Branch;
  };
};
var renderComponent = function renderComponent2(Component$$1) {
  return function(_) {
    var factory = (0, import_react.createFactory)(Component$$1);
    var RenderComponent = function RenderComponent2(props) {
      return factory(props);
    };
    if (true) {
      RenderComponent.displayName = wrapDisplayName(Component$$1, "renderComponent");
    }
    return RenderComponent;
  };
};
var Nothing = function(_Component) {
  _inheritsLoose(Nothing2, _Component);
  function Nothing2() {
    return _Component.apply(this, arguments) || this;
  }
  var _proto = Nothing2.prototype;
  _proto.render = function render() {
    return null;
  };
  return Nothing2;
}(import_react.Component);
var renderNothing = function renderNothing2(_) {
  return Nothing;
};
var shouldUpdate = function shouldUpdate2(test) {
  return function(BaseComponent) {
    var factory = (0, import_react.createFactory)(BaseComponent);
    var ShouldUpdate = function(_Component) {
      _inheritsLoose(ShouldUpdate2, _Component);
      function ShouldUpdate2() {
        return _Component.apply(this, arguments) || this;
      }
      var _proto = ShouldUpdate2.prototype;
      _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
        return test(this.props, nextProps);
      };
      _proto.render = function render() {
        return factory(this.props);
      };
      return ShouldUpdate2;
    }(import_react.Component);
    if (true) {
      return setDisplayName(wrapDisplayName(BaseComponent, "shouldUpdate"))(ShouldUpdate);
    }
    return ShouldUpdate;
  };
};
var pure = function pure2(BaseComponent) {
  var hoc = shouldUpdate(function(props, nextProps) {
    return !(0, import_shallowEqual.default)(props, nextProps);
  });
  if (true) {
    return setDisplayName(wrapDisplayName(BaseComponent, "pure"))(hoc(BaseComponent));
  }
  return hoc(BaseComponent);
};
var onlyUpdateForKeys = function onlyUpdateForKeys2(propKeys) {
  var hoc = shouldUpdate(function(props, nextProps) {
    return !(0, import_shallowEqual.default)(pick(nextProps, propKeys), pick(props, propKeys));
  });
  if (true) {
    return function(BaseComponent) {
      return setDisplayName(wrapDisplayName(BaseComponent, "onlyUpdateForKeys"))(hoc(BaseComponent));
    };
  }
  return hoc;
};
var onlyUpdateForPropTypes = function onlyUpdateForPropTypes2(BaseComponent) {
  var propTypes = BaseComponent.propTypes;
  if (true) {
    if (!propTypes) {
      console.error("A component without any `propTypes` was passed to `onlyUpdateForPropTypes()`. Check the implementation of the " + ('component with display name "' + getDisplayName(BaseComponent) + '".'));
    }
  }
  var propKeys = Object.keys(propTypes || {});
  var OnlyUpdateForPropTypes = onlyUpdateForKeys(propKeys)(BaseComponent);
  if (true) {
    return setDisplayName(wrapDisplayName(BaseComponent, "onlyUpdateForPropTypes"))(OnlyUpdateForPropTypes);
  }
  return OnlyUpdateForPropTypes;
};
var withContext = function withContext2(childContextTypes, getChildContext) {
  return function(BaseComponent) {
    var factory = (0, import_react.createFactory)(BaseComponent);
    var WithContext = function(_Component) {
      _inheritsLoose(WithContext2, _Component);
      function WithContext2() {
        var _this;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _Component.call.apply(_Component, [this].concat(args)) || this;
        _this.getChildContext = function() {
          return getChildContext(_this.props);
        };
        return _this;
      }
      var _proto = WithContext2.prototype;
      _proto.render = function render() {
        return factory(this.props);
      };
      return WithContext2;
    }(import_react.Component);
    WithContext.childContextTypes = childContextTypes;
    if (true) {
      return setDisplayName(wrapDisplayName(BaseComponent, "withContext"))(WithContext);
    }
    return WithContext;
  };
};
var getContext = function getContext2(contextTypes) {
  return function(BaseComponent) {
    var factory = (0, import_react.createFactory)(BaseComponent);
    var GetContext = function GetContext2(ownerProps, context) {
      return factory(_extends({}, ownerProps, context));
    };
    GetContext.contextTypes = contextTypes;
    if (true) {
      return setDisplayName(wrapDisplayName(BaseComponent, "getContext"))(GetContext);
    }
    return GetContext;
  };
};
var lifecycle = function lifecycle2(spec) {
  return function(BaseComponent) {
    var factory = (0, import_react.createFactory)(BaseComponent);
    if (spec.hasOwnProperty("render")) {
      console.error("lifecycle() does not support the render method; its behavior is to pass all props and state to the base component.");
    }
    var Lifecycle = function(_Component) {
      _inheritsLoose(Lifecycle2, _Component);
      function Lifecycle2() {
        return _Component.apply(this, arguments) || this;
      }
      var _proto = Lifecycle2.prototype;
      _proto.render = function render() {
        return factory(_extends({}, this.props, this.state));
      };
      return Lifecycle2;
    }(import_react.Component);
    Object.keys(spec).forEach(function(hook) {
      return Lifecycle.prototype[hook] = spec[hook];
    });
    if (true) {
      return setDisplayName(wrapDisplayName(BaseComponent, "lifecycle"))(Lifecycle);
    }
    return Lifecycle;
  };
};
var isClassComponent = function isClassComponent2(Component$$1) {
  return Boolean(Component$$1 && Component$$1.prototype && typeof Component$$1.prototype.render === "function");
};
var toClass = function toClass2(baseComponent) {
  var _class, _temp;
  return isClassComponent(baseComponent) ? baseComponent : (_temp = _class = function(_Component) {
    _inheritsLoose(ToClass, _Component);
    function ToClass() {
      return _Component.apply(this, arguments) || this;
    }
    var _proto = ToClass.prototype;
    _proto.render = function render() {
      if (typeof baseComponent === "string") {
        return import_react.default.createElement(baseComponent, this.props);
      }
      return baseComponent(this.props, this.context);
    };
    return ToClass;
  }(import_react.Component), _class.displayName = getDisplayName(baseComponent), _class.propTypes = baseComponent.propTypes, _class.contextTypes = baseComponent.contextTypes, _class.defaultProps = baseComponent.defaultProps, _temp);
};
function toRenderProps(hoc) {
  var RenderPropsComponent = function RenderPropsComponent2(props) {
    return props.children(props);
  };
  return hoc(RenderPropsComponent);
}
var fromRenderProps = function fromRenderProps2(RenderPropsComponent, propsMapper, renderPropName) {
  if (renderPropName === void 0) {
    renderPropName = "children";
  }
  return function(BaseComponent) {
    var baseFactory = import_react.default.createFactory(BaseComponent);
    var renderPropsFactory = import_react.default.createFactory(RenderPropsComponent);
    var FromRenderProps = function FromRenderProps2(ownerProps) {
      var _renderPropsFactory;
      return renderPropsFactory((_renderPropsFactory = {}, _renderPropsFactory[renderPropName] = function() {
        return baseFactory(_extends({}, ownerProps, propsMapper.apply(void 0, arguments)));
      }, _renderPropsFactory));
    };
    if (true) {
      return setDisplayName(wrapDisplayName(BaseComponent, "fromRenderProps"))(FromRenderProps);
    }
    return FromRenderProps;
  };
};
var setPropTypes = function setPropTypes2(propTypes) {
  return setStatic("propTypes", propTypes);
};
var compose = function compose2() {
  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }
  return funcs.reduce(function(a, b) {
    return function() {
      return a(b.apply(void 0, arguments));
    };
  }, function(arg) {
    return arg;
  });
};
var createSink = function createSink2(callback) {
  var Sink = function(_Component) {
    _inheritsLoose(Sink2, _Component);
    function Sink2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _Component.call.apply(_Component, [this].concat(args)) || this;
      _this.state = {};
      return _this;
    }
    Sink2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps) {
      callback(nextProps);
      return null;
    };
    var _proto = Sink2.prototype;
    _proto.render = function render() {
      return null;
    };
    return Sink2;
  }(import_react.Component);
  polyfill(Sink);
  return Sink;
};
var componentFromProp = function componentFromProp2(propName) {
  var Component$$1 = function Component$$12(props) {
    return (0, import_react.createElement)(props[propName], omit(props, [propName]));
  };
  Component$$1.displayName = "componentFromProp(" + propName + ")";
  return Component$$1;
};
var nest = function nest2() {
  for (var _len = arguments.length, Components = new Array(_len), _key = 0; _key < _len; _key++) {
    Components[_key] = arguments[_key];
  }
  var factories = Components.map(import_react.createFactory);
  var Nest = function Nest2(_ref) {
    var children = _ref.children, props = _objectWithoutPropertiesLoose(_ref, ["children"]);
    return factories.reduceRight(function(child, factory) {
      return factory(props, child);
    }, children);
  };
  if (true) {
    var displayNames = Components.map(getDisplayName);
    Nest.displayName = "nest(" + displayNames.join(", ") + ")";
  }
  return Nest;
};
var hoistStatics = function hoistStatics2(higherOrderComponent, blacklist) {
  return function(BaseComponent) {
    var NewComponent = higherOrderComponent(BaseComponent);
    (0, import_hoist_non_react_statics.default)(NewComponent, BaseComponent, blacklist);
    return NewComponent;
  };
};
var _config = {
  fromESObservable: null,
  toESObservable: null
};
var configureObservable = function configureObservable2(c) {
  _config = c;
};
var config = {
  fromESObservable: function fromESObservable(observable) {
    return typeof _config.fromESObservable === "function" ? _config.fromESObservable(observable) : observable;
  },
  toESObservable: function toESObservable(stream) {
    return typeof _config.toESObservable === "function" ? _config.toESObservable(stream) : stream;
  }
};
var componentFromStreamWithConfig = function componentFromStreamWithConfig2(config$$1) {
  return function(propsToVdom) {
    return function(_Component) {
      _inheritsLoose(ComponentFromStream, _Component);
      function ComponentFromStream() {
        var _config$fromESObserva;
        var _this;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _Component.call.apply(_Component, [this].concat(args)) || this;
        _this.state = {
          vdom: null
        };
        _this.propsEmitter = (0, import_change_emitter.createChangeEmitter)();
        _this.props$ = config$$1.fromESObservable((_config$fromESObserva = {
          subscribe: function subscribe(observer) {
            var unsubscribe = _this.propsEmitter.listen(function(props) {
              if (props) {
                observer.next(props);
              } else {
                observer.complete();
              }
            });
            return {
              unsubscribe
            };
          }
        }, _config$fromESObserva[es_default] = function() {
          return this;
        }, _config$fromESObserva));
        _this.vdom$ = config$$1.toESObservable(propsToVdom(_this.props$));
        return _this;
      }
      var _proto = ComponentFromStream.prototype;
      _proto.componentWillMount = function componentWillMount() {
        var _this2 = this;
        this.subscription = this.vdom$.subscribe({
          next: function next(vdom) {
            _this2.setState({
              vdom
            });
          }
        });
        this.propsEmitter.emit(this.props);
      };
      _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        this.propsEmitter.emit(nextProps);
      };
      _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
        return nextState.vdom !== this.state.vdom;
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        this.propsEmitter.emit();
        this.subscription.unsubscribe();
      };
      _proto.render = function render() {
        return this.state.vdom;
      };
      return ComponentFromStream;
    }(import_react.Component);
  };
};
var componentFromStream = function componentFromStream2(propsToVdom) {
  return componentFromStreamWithConfig(config)(propsToVdom);
};
var identity$1 = function identity3(t) {
  return t;
};
var mapPropsStreamWithConfig = function mapPropsStreamWithConfig2(config$$1) {
  var componentFromStream$$1 = componentFromStreamWithConfig({
    fromESObservable: identity$1,
    toESObservable: identity$1
  });
  return function(transform) {
    return function(BaseComponent) {
      var factory = (0, import_react.createFactory)(BaseComponent);
      var fromESObservable2 = config$$1.fromESObservable, toESObservable2 = config$$1.toESObservable;
      return componentFromStream$$1(function(props$) {
        var _ref;
        return _ref = {
          subscribe: function subscribe(observer) {
            var subscription = toESObservable2(transform(fromESObservable2(props$))).subscribe({
              next: function next(childProps) {
                return observer.next(factory(childProps));
              }
            });
            return {
              unsubscribe: function unsubscribe() {
                return subscription.unsubscribe();
              }
            };
          }
        }, _ref[es_default] = function() {
          return this;
        }, _ref;
      });
    };
  };
};
var mapPropsStream = function mapPropsStream2(transform) {
  var hoc = mapPropsStreamWithConfig(config)(transform);
  if (true) {
    return function(BaseComponent) {
      return setDisplayName(wrapDisplayName(BaseComponent, "mapPropsStream"))(hoc(BaseComponent));
    };
  }
  return hoc;
};
var createEventHandlerWithConfig = function createEventHandlerWithConfig2(config$$1) {
  return function() {
    var _config$fromESObserva;
    var emitter = (0, import_change_emitter.createChangeEmitter)();
    var stream = config$$1.fromESObservable((_config$fromESObserva = {
      subscribe: function subscribe(observer) {
        var unsubscribe = emitter.listen(function(value) {
          return observer.next(value);
        });
        return {
          unsubscribe
        };
      }
    }, _config$fromESObserva[es_default] = function() {
      return this;
    }, _config$fromESObserva));
    return {
      handler: emitter.emit,
      stream
    };
  };
};
var createEventHandler = createEventHandlerWithConfig(config);
var export_shallowEqual = import_shallowEqual.default;
export {
  branch,
  componentFromProp,
  componentFromStream,
  componentFromStreamWithConfig,
  compose,
  createEventHandler,
  createEventHandlerWithConfig,
  createSink,
  defaultProps,
  flattenProp,
  fromRenderProps,
  getContext,
  getDisplayName,
  hoistStatics,
  isClassComponent,
  lifecycle,
  mapProps,
  mapPropsStream,
  mapPropsStreamWithConfig,
  nest,
  onlyUpdateForKeys,
  onlyUpdateForPropTypes,
  pure,
  renameProp,
  renameProps,
  renderComponent,
  renderNothing,
  setDisplayName,
  configureObservable as setObservableConfig,
  setPropTypes,
  setStatic,
  export_shallowEqual as shallowEqual,
  shouldUpdate,
  toClass,
  toRenderProps,
  withContext,
  withHandlers,
  withProps,
  withPropsOnChange,
  withReducer,
  withState,
  withStateHandlers,
  wrapDisplayName
};
//# sourceMappingURL=recompose.js.map
