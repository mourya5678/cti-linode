{
  "version": 3,
  "sources": ["../../../../../node_modules/typescript-fsa/lib/index.js"],
  "sourcesContent": ["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Returns `true` if action has the same type as action creator.\n * Defines Type Guard that lets TypeScript know `payload` type inside blocks\n * where `isType` returned `true`.\n *\n * @example\n *\n *    const somethingHappened =\n *      actionCreator<{foo: string}>('SOMETHING_HAPPENED');\n *\n *    if (isType(action, somethingHappened)) {\n *      // action.payload has type {foo: string}\n *    }\n */\nfunction isType(action, actionCreator) {\n    return action.type === actionCreator.type;\n}\nexports.isType = isType;\n/**\n * Creates Action Creator factory with optional prefix for action types.\n * @param prefix Prefix to be prepended to action types as `<prefix>/<type>`.\n * @param defaultIsError Function that detects whether action is error given the\n *   payload. Default is `payload => payload instanceof Error`.\n */\nfunction actionCreatorFactory(prefix, defaultIsError) {\n    if (defaultIsError === void 0) { defaultIsError = function (p) { return p instanceof Error; }; }\n    var actionTypes = {};\n    var base = prefix ? prefix + \"/\" : '';\n    function actionCreator(type, commonMeta, isError) {\n        if (isError === void 0) { isError = defaultIsError; }\n        var fullType = base + type;\n        if (process.env.NODE_ENV !== 'production') {\n            if (actionTypes[fullType])\n                throw new Error(\"Duplicate action type: \" + fullType);\n            actionTypes[fullType] = true;\n        }\n        return Object.assign(function (payload, meta) {\n            var action = {\n                type: fullType,\n                payload: payload,\n            };\n            if (commonMeta || meta) {\n                action.meta = Object.assign({}, commonMeta, meta);\n            }\n            if (isError && (typeof isError === 'boolean' || isError(payload))) {\n                action.error = true;\n            }\n            return action;\n        }, {\n            type: fullType,\n            toString: function () { return fullType; },\n            match: function (action) {\n                return action.type === fullType;\n            },\n        });\n    }\n    function asyncActionCreators(type, commonMeta) {\n        return {\n            type: base + type,\n            started: actionCreator(type + \"_STARTED\", commonMeta, false),\n            done: actionCreator(type + \"_DONE\", commonMeta, false),\n            failed: actionCreator(type + \"_FAILED\", commonMeta, true),\n        };\n    }\n    return Object.assign(actionCreator, { async: asyncActionCreators });\n}\nexports.actionCreatorFactory = actionCreatorFactory;\nexports.default = actionCreatorFactory;\n"],
  "mappings": ";;;;;AAAA;AAAA;AACA,WAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAK,CAAC;AAe5D,aAAS,OAAO,QAAQ,eAAe;AACnC,aAAO,OAAO,SAAS,cAAc;AAAA,IACzC;AACA,YAAQ,SAAS;AAOjB,aAAS,qBAAqB,QAAQ,gBAAgB;AAClD,UAAI,mBAAmB,QAAQ;AAAE,yBAAiB,SAAU,GAAG;AAAE,iBAAO,aAAa;AAAA,QAAO;AAAA,MAAG;AAC/F,UAAI,cAAc,CAAC;AACnB,UAAI,OAAO,SAAS,SAAS,MAAM;AACnC,eAAS,cAAc,MAAM,YAAY,SAAS;AAC9C,YAAI,YAAY,QAAQ;AAAE,oBAAU;AAAA,QAAgB;AACpD,YAAI,WAAW,OAAO;AACtB,YAAI,MAAuC;AACvC,cAAI,YAAY,QAAQ;AACpB,kBAAM,IAAI,MAAM,4BAA4B,QAAQ;AACxD,sBAAY,QAAQ,IAAI;AAAA,QAC5B;AACA,eAAO,OAAO,OAAO,SAAU,SAAS,MAAM;AAC1C,cAAI,SAAS;AAAA,YACT,MAAM;AAAA,YACN;AAAA,UACJ;AACA,cAAI,cAAc,MAAM;AACpB,mBAAO,OAAO,OAAO,OAAO,CAAC,GAAG,YAAY,IAAI;AAAA,UACpD;AACA,cAAI,YAAY,OAAO,YAAY,aAAa,QAAQ,OAAO,IAAI;AAC/D,mBAAO,QAAQ;AAAA,UACnB;AACA,iBAAO;AAAA,QACX,GAAG;AAAA,UACC,MAAM;AAAA,UACN,UAAU,WAAY;AAAE,mBAAO;AAAA,UAAU;AAAA,UACzC,OAAO,SAAU,QAAQ;AACrB,mBAAO,OAAO,SAAS;AAAA,UAC3B;AAAA,QACJ,CAAC;AAAA,MACL;AACA,eAAS,oBAAoB,MAAM,YAAY;AAC3C,eAAO;AAAA,UACH,MAAM,OAAO;AAAA,UACb,SAAS,cAAc,OAAO,YAAY,YAAY,KAAK;AAAA,UAC3D,MAAM,cAAc,OAAO,SAAS,YAAY,KAAK;AAAA,UACrD,QAAQ,cAAc,OAAO,WAAW,YAAY,IAAI;AAAA,QAC5D;AAAA,MACJ;AACA,aAAO,OAAO,OAAO,eAAe,EAAE,OAAO,oBAAoB,CAAC;AAAA,IACtE;AACA,YAAQ,uBAAuB;AAC/B,YAAQ,UAAU;AAAA;AAAA;",
  "names": []
}
