{
  "version": 3,
  "sources": ["../../../../../node_modules/typescript-fsa-reducers/src/index.ts"],
  "sourcesContent": ["import { Action, ActionCreator, AnyAction } from \"typescript-fsa\";\n\nexport interface ReducerBuilder<InS, OutS = InS, PassedS = InS | undefined> {\n    case<P>(\n        actionCreator: ActionCreator<P>,\n        handler: Handler<InS, OutS, P>,\n    ): ReducerBuilder<InS, OutS, PassedS>;\n    caseWithAction<P>(\n        actionCreator: ActionCreator<P>,\n        handler: Handler<InS, OutS, Action<P>>,\n    ): ReducerBuilder<InS, OutS, PassedS>;\n\n    // cases variadic overloads\n    cases<P1, P2>(\n        actionCreators: [ActionCreator<P1>, ActionCreator<P2>],\n        handler: Handler<InS, OutS, P1 | P2>,\n    ): ReducerBuilder<InS, OutS, PassedS>;\n    cases<P1, P2, P3>(\n        actionCreators: [\n            ActionCreator<P1>,\n            ActionCreator<P2>,\n            ActionCreator<P3>,\n        ],\n        handler: Handler<InS, OutS, P1 | P2 | P3>,\n    ): ReducerBuilder<InS, OutS, PassedS>;\n    cases<P1, P2, P3, P4>(\n        actionCreators: [\n            ActionCreator<P1>,\n            ActionCreator<P2>,\n            ActionCreator<P3>,\n            ActionCreator<P4>,\n        ],\n        handler: Handler<InS, OutS, P1 | P2 | P3 | P4>,\n    ): ReducerBuilder<InS, OutS, PassedS>;\n    cases<P>(\n        actionCreators: Array<ActionCreator<P>>,\n        handler: Handler<InS, OutS, P>,\n    ): ReducerBuilder<InS, OutS, PassedS>;\n\n    // casesWithAction variadic overloads\n    casesWithAction<P1, P2>(\n        actionCreators: [ActionCreator<P1>, ActionCreator<P2>],\n        handler: Handler<InS, OutS, Action<P1 | P2>>,\n    ): ReducerBuilder<InS, OutS, PassedS>;\n    casesWithAction<P1, P2, P3>(\n        actionCreators: [\n            ActionCreator<P1>,\n            ActionCreator<P2>,\n            ActionCreator<P3>,\n        ],\n        handler: Handler<InS, OutS, Action<P1 | P2 | P3>>,\n    ): ReducerBuilder<InS, OutS, PassedS>;\n    casesWithAction<P1, P2, P3, P4>(\n        actionCreators: [\n            ActionCreator<P1>,\n            ActionCreator<P2>,\n            ActionCreator<P3>,\n            ActionCreator<P4>,\n        ],\n        handler: Handler<InS, OutS, Action<P1 | P2 | P3 | P4>>,\n    ): ReducerBuilder<InS, OutS, PassedS>;\n    casesWithAction<P>(\n        actionCreators: Array<ActionCreator<P>>,\n        handler: Handler<InS, OutS, Action<P>>,\n    ): ReducerBuilder<InS, OutS, PassedS>;\n\n    withHandling(\n        updateBuilder: (\n            builder: ReducerBuilder<InS, OutS, PassedS>,\n        ) => ReducerBuilder<InS, OutS, PassedS>,\n    ): ReducerBuilder<InS, OutS, PassedS>;\n\n    // Intentionally avoid AnyAction in return type so packages can export\n    // reducers created using .default() or .build() without consumers requiring\n    // a dependency on typescript-fsa.\n    default(\n        defaultHandler: Handler<InS, OutS, AnyAction>,\n    ): (state: PassedS, action: { type: any }) => OutS;\n    build(): (state: PassedS, action: { type: any }) => OutS;\n    (state: PassedS, action: AnyAction): OutS;\n}\n\nexport type Handler<InS, OutS, P> = (state: InS, payload: P) => OutS;\n\nexport function reducerWithInitialState<S>(initialState: S): ReducerBuilder<S> {\n    return makeReducer<S, S, S | undefined>(initialState);\n}\n\nexport function reducerWithoutInitialState<S>(): ReducerBuilder<S, S, S> {\n    return makeReducer<S, S, S>();\n}\n\nexport function upcastingReducer<InS extends OutS, OutS>(): ReducerBuilder<\n    InS,\n    OutS,\n    InS\n> {\n    return makeReducer<InS, OutS, InS>();\n}\n\nfunction makeReducer<InS, OutS, PassedS>(\n    initialState?: InS,\n): ReducerBuilder<InS, OutS, PassedS> {\n    const handlersByActionType: {\n        [actionType: string]: Handler<InS, OutS, any>;\n    } = {};\n    const reducer = getReducerFunction(\n        initialState,\n        handlersByActionType,\n    ) as ReducerBuilder<InS, OutS, PassedS>;\n\n    reducer.caseWithAction = <P>(\n        actionCreator: ActionCreator<P>,\n        handler: Handler<InS, OutS, Action<P>>,\n    ) => {\n        handlersByActionType[actionCreator.type] = handler;\n        return reducer;\n    };\n\n    reducer.case = <P>(\n        actionCreator: ActionCreator<P>,\n        handler: Handler<InS, OutS, P>,\n    ) =>\n        reducer.caseWithAction(actionCreator, (state, action) =>\n            handler(state, action.payload),\n        );\n\n    reducer.casesWithAction = <P>(\n        actionCreators: Array<ActionCreator<P>>,\n        handler: Handler<InS, OutS, Action<P>>,\n    ) => {\n        for (const actionCreator of actionCreators) {\n            reducer.caseWithAction(actionCreator, handler);\n        }\n        return reducer;\n    };\n\n    reducer.cases = <P>(\n        actionCreators: Array<ActionCreator<P>>,\n        handler: Handler<InS, OutS, P>,\n    ) =>\n        reducer.casesWithAction(actionCreators, (state, action) =>\n            handler(state, action.payload),\n        );\n\n    reducer.withHandling = (\n        updateBuilder: (\n            builder: ReducerBuilder<InS, OutS, PassedS>,\n        ) => ReducerBuilder<InS, OutS, PassedS>,\n    ) => updateBuilder(reducer);\n\n    reducer.default = (defaultHandler: Handler<InS, OutS, AnyAction>) =>\n        getReducerFunction<InS, OutS, PassedS>(\n            initialState,\n            { ...handlersByActionType },\n            defaultHandler,\n        );\n\n    reducer.build = () =>\n        getReducerFunction(initialState, { ...handlersByActionType });\n\n    return reducer;\n}\n\nfunction getReducerFunction<InS, OutS, PassedS>(\n    initialState: InS | undefined,\n    handlersByActionType: { [actionType: string]: Handler<InS, OutS, any> },\n    defaultHandler?: Handler<InS, OutS, AnyAction>,\n) {\n    return (passedState: PassedS, action: AnyAction) => {\n        const state = passedState !== undefined ? passedState : initialState;\n        const handler = handlersByActionType[action.type] || defaultHandler;\n        return handler\n            ? handler(state as InS, action)\n            : ((state as unknown) as OutS);\n    };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAoFA,aAAgB,wBAA2B,cAAe;AACtD,aAAO,YAAiC,YAAY;IACxD;AAFA,YAAA,0BAAA;AAIA,aAAgB,6BAA0B;AACtC,aAAO,YAAW;IACtB;AAFA,YAAA,6BAAA;AAIA,aAAgB,mBAAgB;AAK5B,aAAO,YAAW;IACtB;AANA,YAAA,mBAAA;AAQA,aAAS,YACL,cAAkB;AAElB,UAAM,uBAEF,CAAA;AACJ,UAAM,UAAU,mBACZ,cACA,oBAAoB;AAGxB,cAAQ,iBAAiB,SACrB,eACA,SAAsC;AAEtC,6BAAqB,cAAc,IAAI,IAAI;AAC3C,eAAO;MACX;AAEA,cAAQ,OAAO,SACX,eACA,SAA8B;AAE9B,eAAA,QAAQ,eAAe,eAAe,SAAC,OAAO,QAAM;AAChD,iBAAA,QAAQ,OAAO,OAAO,OAAO;QAA7B,CAA8B;MADlC;AAIJ,cAAQ,kBAAkB,SACtB,gBACA,SAAsC;AAEtC,iBAA4B,KAAA,GAAA,mBAAA,gBAAA,KAAA,iBAAA,QAAA,MAAgB;AAAvC,cAAM,gBAAa,iBAAA,EAAA;AACpB,kBAAQ,eAAe,eAAe,OAAO;;AAEjD,eAAO;MACX;AAEA,cAAQ,QAAQ,SACZ,gBACA,SAA8B;AAE9B,eAAA,QAAQ,gBAAgB,gBAAgB,SAAC,OAAO,QAAM;AAClD,iBAAA,QAAQ,OAAO,OAAO,OAAO;QAA7B,CAA8B;MADlC;AAIJ,cAAQ,eAAe,SACnB,eAEuC;AACtC,eAAA,cAAc,OAAO;MAArB;AAEL,cAAQ,UAAU,SAAC,gBAA6C;AAC5D,eAAA,mBACI,cAAY,SAAA,CAAA,GACP,oBAAoB,GACzB,cAAc;MAHlB;AAMJ,cAAQ,QAAQ,WAAA;AACZ,eAAA,mBAAmB,cAAY,SAAA,CAAA,GAAO,oBAAoB,CAAA;MAA1D;AAEJ,aAAO;IACX;AAEA,aAAS,mBACL,cACA,sBACA,gBAA8C;AAE9C,aAAO,SAAC,aAAsB,QAAiB;AAC3C,YAAM,QAAQ,gBAAgB,SAAY,cAAc;AACxD,YAAM,UAAU,qBAAqB,OAAO,IAAI,KAAK;AACrD,eAAO,UACD,QAAQ,OAAc,MAAM,IAC1B;MACZ;IACJ;;;",
  "names": []
}
