import {
  require_isScheduler
} from "./chunk-CDCINXNA.js";
import {
  require_Observable,
  require_Subscriber,
  require_isObject,
  require_observable,
  require_root
} from "./chunk-NUG4UNZ6.js";
import {
  __commonJS
} from "./chunk-LFBQMW2U.js";

// node_modules/rxjs/observable/ScalarObservable.js
var require_ScalarObservable = __commonJS({
  "node_modules/rxjs/observable/ScalarObservable.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_12 = require_Observable();
    var ScalarObservable = function(_super) {
      __extends(ScalarObservable2, _super);
      function ScalarObservable2(value, scheduler) {
        _super.call(this);
        this.value = value;
        this.scheduler = scheduler;
        this._isScalar = true;
        if (scheduler) {
          this._isScalar = false;
        }
      }
      ScalarObservable2.create = function(value, scheduler) {
        return new ScalarObservable2(value, scheduler);
      };
      ScalarObservable2.dispatch = function(state) {
        var done = state.done, value = state.value, subscriber = state.subscriber;
        if (done) {
          subscriber.complete();
          return;
        }
        subscriber.next(value);
        if (subscriber.closed) {
          return;
        }
        state.done = true;
        this.schedule(state);
      };
      ScalarObservable2.prototype._subscribe = function(subscriber) {
        var value = this.value;
        var scheduler = this.scheduler;
        if (scheduler) {
          return scheduler.schedule(ScalarObservable2.dispatch, 0, {
            done: false,
            value,
            subscriber
          });
        } else {
          subscriber.next(value);
          if (!subscriber.closed) {
            subscriber.complete();
          }
        }
      };
      return ScalarObservable2;
    }(Observable_12.Observable);
    exports.ScalarObservable = ScalarObservable;
  }
});

// node_modules/rxjs/observable/EmptyObservable.js
var require_EmptyObservable = __commonJS({
  "node_modules/rxjs/observable/EmptyObservable.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_12 = require_Observable();
    var EmptyObservable = function(_super) {
      __extends(EmptyObservable2, _super);
      function EmptyObservable2(scheduler) {
        _super.call(this);
        this.scheduler = scheduler;
      }
      EmptyObservable2.create = function(scheduler) {
        return new EmptyObservable2(scheduler);
      };
      EmptyObservable2.dispatch = function(arg) {
        var subscriber = arg.subscriber;
        subscriber.complete();
      };
      EmptyObservable2.prototype._subscribe = function(subscriber) {
        var scheduler = this.scheduler;
        if (scheduler) {
          return scheduler.schedule(EmptyObservable2.dispatch, 0, { subscriber });
        } else {
          subscriber.complete();
        }
      };
      return EmptyObservable2;
    }(Observable_12.Observable);
    exports.EmptyObservable = EmptyObservable;
  }
});

// node_modules/rxjs/observable/ArrayObservable.js
var require_ArrayObservable = __commonJS({
  "node_modules/rxjs/observable/ArrayObservable.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_12 = require_Observable();
    var ScalarObservable_1 = require_ScalarObservable();
    var EmptyObservable_1 = require_EmptyObservable();
    var isScheduler_1 = require_isScheduler();
    var ArrayObservable = function(_super) {
      __extends(ArrayObservable2, _super);
      function ArrayObservable2(array, scheduler) {
        _super.call(this);
        this.array = array;
        this.scheduler = scheduler;
        if (!scheduler && array.length === 1) {
          this._isScalar = true;
          this.value = array[0];
        }
      }
      ArrayObservable2.create = function(array, scheduler) {
        return new ArrayObservable2(array, scheduler);
      };
      ArrayObservable2.of = function() {
        var array = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          array[_i - 0] = arguments[_i];
        }
        var scheduler = array[array.length - 1];
        if (isScheduler_1.isScheduler(scheduler)) {
          array.pop();
        } else {
          scheduler = null;
        }
        var len = array.length;
        if (len > 1) {
          return new ArrayObservable2(array, scheduler);
        } else if (len === 1) {
          return new ScalarObservable_1.ScalarObservable(array[0], scheduler);
        } else {
          return new EmptyObservable_1.EmptyObservable(scheduler);
        }
      };
      ArrayObservable2.dispatch = function(state) {
        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;
        if (index >= count) {
          subscriber.complete();
          return;
        }
        subscriber.next(array[index]);
        if (subscriber.closed) {
          return;
        }
        state.index = index + 1;
        this.schedule(state);
      };
      ArrayObservable2.prototype._subscribe = function(subscriber) {
        var index = 0;
        var array = this.array;
        var count = array.length;
        var scheduler = this.scheduler;
        if (scheduler) {
          return scheduler.schedule(ArrayObservable2.dispatch, 0, {
            array,
            index,
            count,
            subscriber
          });
        } else {
          for (var i = 0; i < count && !subscriber.closed; i++) {
            subscriber.next(array[i]);
          }
          subscriber.complete();
        }
      };
      return ArrayObservable2;
    }(Observable_12.Observable);
    exports.ArrayObservable = ArrayObservable;
  }
});

// node_modules/rxjs/util/isArrayLike.js
var require_isArrayLike = __commonJS({
  "node_modules/rxjs/util/isArrayLike.js"(exports) {
    "use strict";
    exports.isArrayLike = function(x) {
      return x && typeof x.length === "number";
    };
  }
});

// node_modules/rxjs/util/isPromise.js
var require_isPromise = __commonJS({
  "node_modules/rxjs/util/isPromise.js"(exports) {
    "use strict";
    function isPromise(value) {
      return value && typeof value.subscribe !== "function" && typeof value.then === "function";
    }
    exports.isPromise = isPromise;
  }
});

// node_modules/rxjs/symbol/iterator.js
var require_iterator = __commonJS({
  "node_modules/rxjs/symbol/iterator.js"(exports) {
    "use strict";
    var root_1 = require_root();
    function symbolIteratorPonyfill(root) {
      var Symbol = root.Symbol;
      if (typeof Symbol === "function") {
        if (!Symbol.iterator) {
          Symbol.iterator = Symbol("iterator polyfill");
        }
        return Symbol.iterator;
      } else {
        var Set_1 = root.Set;
        if (Set_1 && typeof new Set_1()["@@iterator"] === "function") {
          return "@@iterator";
        }
        var Map_1 = root.Map;
        if (Map_1) {
          var keys = Object.getOwnPropertyNames(Map_1.prototype);
          for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (key !== "entries" && key !== "size" && Map_1.prototype[key] === Map_1.prototype["entries"]) {
              return key;
            }
          }
        }
        return "@@iterator";
      }
    }
    exports.symbolIteratorPonyfill = symbolIteratorPonyfill;
    exports.iterator = symbolIteratorPonyfill(root_1.root);
    exports.$$iterator = exports.iterator;
  }
});

// node_modules/rxjs/InnerSubscriber.js
var require_InnerSubscriber = __commonJS({
  "node_modules/rxjs/InnerSubscriber.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = require_Subscriber();
    var InnerSubscriber = function(_super) {
      __extends(InnerSubscriber2, _super);
      function InnerSubscriber2(parent, outerValue, outerIndex) {
        _super.call(this);
        this.parent = parent;
        this.outerValue = outerValue;
        this.outerIndex = outerIndex;
        this.index = 0;
      }
      InnerSubscriber2.prototype._next = function(value) {
        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
      };
      InnerSubscriber2.prototype._error = function(error) {
        this.parent.notifyError(error, this);
        this.unsubscribe();
      };
      InnerSubscriber2.prototype._complete = function() {
        this.parent.notifyComplete(this);
        this.unsubscribe();
      };
      return InnerSubscriber2;
    }(Subscriber_1.Subscriber);
    exports.InnerSubscriber = InnerSubscriber;
  }
});

// node_modules/rxjs/util/subscribeToResult.js
var require_subscribeToResult = __commonJS({
  "node_modules/rxjs/util/subscribeToResult.js"(exports) {
    "use strict";
    var root_1 = require_root();
    var isArrayLike_1 = require_isArrayLike();
    var isPromise_1 = require_isPromise();
    var isObject_1 = require_isObject();
    var Observable_12 = require_Observable();
    var iterator_1 = require_iterator();
    var InnerSubscriber_1 = require_InnerSubscriber();
    var observable_1 = require_observable();
    function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
      var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
      if (destination.closed) {
        return null;
      }
      if (result instanceof Observable_12.Observable) {
        if (result._isScalar) {
          destination.next(result.value);
          destination.complete();
          return null;
        } else {
          destination.syncErrorThrowable = true;
          return result.subscribe(destination);
        }
      } else if (isArrayLike_1.isArrayLike(result)) {
        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {
          destination.next(result[i]);
        }
        if (!destination.closed) {
          destination.complete();
        }
      } else if (isPromise_1.isPromise(result)) {
        result.then(function(value2) {
          if (!destination.closed) {
            destination.next(value2);
            destination.complete();
          }
        }, function(err) {
          return destination.error(err);
        }).then(null, function(err) {
          root_1.root.setTimeout(function() {
            throw err;
          });
        });
        return destination;
      } else if (result && typeof result[iterator_1.iterator] === "function") {
        var iterator = result[iterator_1.iterator]();
        do {
          var item = iterator.next();
          if (item.done) {
            destination.complete();
            break;
          }
          destination.next(item.value);
          if (destination.closed) {
            break;
          }
        } while (true);
      } else if (result && typeof result[observable_1.observable] === "function") {
        var obs = result[observable_1.observable]();
        if (typeof obs.subscribe !== "function") {
          destination.error(new TypeError("Provided object does not correctly implement Symbol.observable"));
        } else {
          return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
        }
      } else {
        var value = isObject_1.isObject(result) ? "an invalid object" : "'" + result + "'";
        var msg = "You provided " + value + " where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.";
        destination.error(new TypeError(msg));
      }
      return null;
    }
    exports.subscribeToResult = subscribeToResult;
  }
});

// node_modules/rxjs/OuterSubscriber.js
var require_OuterSubscriber = __commonJS({
  "node_modules/rxjs/OuterSubscriber.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = require_Subscriber();
    var OuterSubscriber = function(_super) {
      __extends(OuterSubscriber2, _super);
      function OuterSubscriber2() {
        _super.apply(this, arguments);
      }
      OuterSubscriber2.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
      };
      OuterSubscriber2.prototype.notifyError = function(error, innerSub) {
        this.destination.error(error);
      };
      OuterSubscriber2.prototype.notifyComplete = function(innerSub) {
        this.destination.complete();
      };
      return OuterSubscriber2;
    }(Subscriber_1.Subscriber);
    exports.OuterSubscriber = OuterSubscriber;
  }
});

// node_modules/rxjs/operators/mergeMap.js
var require_mergeMap = __commonJS({
  "node_modules/rxjs/operators/mergeMap.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var subscribeToResult_1 = require_subscribeToResult();
    var OuterSubscriber_1 = require_OuterSubscriber();
    function mergeMap(project, resultSelector, concurrent) {
      if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
      }
      return function mergeMapOperatorFunction(source) {
        if (typeof resultSelector === "number") {
          concurrent = resultSelector;
          resultSelector = null;
        }
        return source.lift(new MergeMapOperator(project, resultSelector, concurrent));
      };
    }
    exports.mergeMap = mergeMap;
    var MergeMapOperator = function() {
      function MergeMapOperator2(project, resultSelector, concurrent) {
        if (concurrent === void 0) {
          concurrent = Number.POSITIVE_INFINITY;
        }
        this.project = project;
        this.resultSelector = resultSelector;
        this.concurrent = concurrent;
      }
      MergeMapOperator2.prototype.call = function(observer, source) {
        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));
      };
      return MergeMapOperator2;
    }();
    exports.MergeMapOperator = MergeMapOperator;
    var MergeMapSubscriber = function(_super) {
      __extends(MergeMapSubscriber2, _super);
      function MergeMapSubscriber2(destination, project, resultSelector, concurrent) {
        if (concurrent === void 0) {
          concurrent = Number.POSITIVE_INFINITY;
        }
        _super.call(this, destination);
        this.project = project;
        this.resultSelector = resultSelector;
        this.concurrent = concurrent;
        this.hasCompleted = false;
        this.buffer = [];
        this.active = 0;
        this.index = 0;
      }
      MergeMapSubscriber2.prototype._next = function(value) {
        if (this.active < this.concurrent) {
          this._tryNext(value);
        } else {
          this.buffer.push(value);
        }
      };
      MergeMapSubscriber2.prototype._tryNext = function(value) {
        var result;
        var index = this.index++;
        try {
          result = this.project(value, index);
        } catch (err) {
          this.destination.error(err);
          return;
        }
        this.active++;
        this._innerSub(result, value, index);
      };
      MergeMapSubscriber2.prototype._innerSub = function(ish, value, index) {
        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
      };
      MergeMapSubscriber2.prototype._complete = function() {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
          this.destination.complete();
        }
      };
      MergeMapSubscriber2.prototype.notifyNext = function(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (this.resultSelector) {
          this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);
        } else {
          this.destination.next(innerValue);
        }
      };
      MergeMapSubscriber2.prototype._notifyResultSelector = function(outerValue, innerValue, outerIndex, innerIndex) {
        var result;
        try {
          result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
        } catch (err) {
          this.destination.error(err);
          return;
        }
        this.destination.next(result);
      };
      MergeMapSubscriber2.prototype.notifyComplete = function(innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
          this._next(buffer.shift());
        } else if (this.active === 0 && this.hasCompleted) {
          this.destination.complete();
        }
      };
      return MergeMapSubscriber2;
    }(OuterSubscriber_1.OuterSubscriber);
    exports.MergeMapSubscriber = MergeMapSubscriber;
  }
});

// node_modules/rxjs/util/identity.js
var require_identity = __commonJS({
  "node_modules/rxjs/util/identity.js"(exports) {
    "use strict";
    function identity(x) {
      return x;
    }
    exports.identity = identity;
  }
});

// node_modules/rxjs/operators/mergeAll.js
var require_mergeAll = __commonJS({
  "node_modules/rxjs/operators/mergeAll.js"(exports) {
    "use strict";
    var mergeMap_1 = require_mergeMap();
    var identity_1 = require_identity();
    function mergeAll(concurrent) {
      if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
      }
      return mergeMap_1.mergeMap(identity_1.identity, null, concurrent);
    }
    exports.mergeAll = mergeAll;
  }
});

// node_modules/rxjs/observable/merge.js
var require_merge = __commonJS({
  "node_modules/rxjs/observable/merge.js"(exports) {
    "use strict";
    var Observable_12 = require_Observable();
    var ArrayObservable_1 = require_ArrayObservable();
    var isScheduler_1 = require_isScheduler();
    var mergeAll_1 = require_mergeAll();
    function merge() {
      var observables = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
      }
      var concurrent = Number.POSITIVE_INFINITY;
      var scheduler = null;
      var last = observables[observables.length - 1];
      if (isScheduler_1.isScheduler(last)) {
        scheduler = observables.pop();
        if (observables.length > 1 && typeof observables[observables.length - 1] === "number") {
          concurrent = observables.pop();
        }
      } else if (typeof last === "number") {
        concurrent = observables.pop();
      }
      if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_12.Observable) {
        return observables[0];
      }
      return mergeAll_1.mergeAll(concurrent)(new ArrayObservable_1.ArrayObservable(observables, scheduler));
    }
    exports.merge = merge;
  }
});

// node_modules/rxjs/operators/merge.js
var require_merge2 = __commonJS({
  "node_modules/rxjs/operators/merge.js"(exports) {
    "use strict";
    var merge_12 = require_merge();
    var merge_2 = require_merge();
    exports.mergeStatic = merge_2.merge;
    function merge() {
      var observables = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
      }
      return function(source) {
        return source.lift.call(merge_12.merge.apply(void 0, [source].concat(observables)));
      };
    }
    exports.merge = merge;
  }
});

// node_modules/rxjs/operator/merge.js
var require_merge3 = __commonJS({
  "node_modules/rxjs/operator/merge.js"(exports) {
    "use strict";
    var merge_12 = require_merge2();
    var merge_2 = require_merge();
    exports.mergeStatic = merge_2.merge;
    function merge() {
      var observables = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
      }
      return merge_12.merge.apply(void 0, observables)(this);
    }
    exports.merge = merge;
  }
});

// node_modules/rxjs/add/operator/merge.js
var Observable_1 = require_Observable();
var merge_1 = require_merge3();
Observable_1.Observable.prototype.merge = merge_1.merge;
//# sourceMappingURL=rxjs_add_operator_merge.js.map
