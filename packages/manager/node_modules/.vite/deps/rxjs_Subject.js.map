{
  "version": 3,
  "sources": ["../../src/util/ObjectUnsubscribedError.ts", "../../src/SubjectSubscription.ts", "../../src/Subject.ts"],
  "sourcesContent": ["/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n", "import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n", "import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["ObjectUnsubscribedError", "SubjectSubscription", "SubjectSubscriber", "Subject", "AnonymousSubject"]
}
