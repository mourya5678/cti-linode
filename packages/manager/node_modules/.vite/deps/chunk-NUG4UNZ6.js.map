{
  "version": 3,
  "sources": ["../../src/util/isArray.ts", "../../src/util/isObject.ts", "../../src/util/isFunction.ts", "../../src/util/errorObject.ts", "../../src/util/tryCatch.ts", "../../src/util/UnsubscriptionError.ts", "../../src/Subscription.ts", "../../src/util/root.ts", "../../src/symbol/rxSubscriber.ts", "../../src/Observer.ts", "../../src/Subscriber.ts", "../../src/util/toSubscriber.ts", "../../src/symbol/observable.ts", "../../src/util/noop.ts", "../../src/util/pipe.ts", "../../src/Observable.ts"],
  "sourcesContent": ["export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n", "export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n", "export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n", "// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };", "import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n", "/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n", "import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n", "declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };", "import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n", "export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n", "import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          // HACK(benlesh): To resolve an issue where Node users may have multiple\n          // copies of rxjs in their node_modules directory.\n          if (isTrustedSubscriber(destinationOrNext)) {\n            const trustedSubscriber = destinationOrNext[rxSubscriberSymbol]() as Subscriber<any>;\n            this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n            this.destination = trustedSubscriber;\n            trustedSubscriber.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated internal use only */ _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  /** @deprecated internal use only */ _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n\nfunction isTrustedSubscriber(obj: any) {\n  return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriberSymbol]);\n}\n", "import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n", "import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n", "/* tslint:disable:no-empty */\nexport function noop() { }\n", "import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n", "import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  /** @deprecated internal use only */ public source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n"],
  "mappings": ";;;;;;;;AAAa,YAAA,UAAU,MAAM,WAAY,SAAI,GAAM;AAAe,aAAA,KAAK,OAAO,EAAE,WAAW;IAAzB;;;;;;;;ACAlE,aAAA,SAAyB,GAAM;AAC7B,aAAO,KAAK,QAAQ,OAAO,MAAM;IACnC;AAFgB,YAAA,WAAQ;;;;;;;;ACAxB,aAAA,WAA2B,GAAM;AAC/B,aAAO,OAAO,MAAM;IACtB;AAFgB,YAAA,aAAU;;;;;;;;ACCb,YAAA,cAAmB,EAAE,GAAG,CAAA,EAAE;;;;;;;;ACDvC,QAAA,gBAAA;AAEA,QAAI;AAEJ,aAAA,aAAA;AACE,UAAI;AACF,eAAO,eAAe,MAAM,MAAM,SAAS;MAC7C,SAAS,GAAP;AACA,sBAAA,YAAY,IAAI;AAChB,eAAO,cAAA;MACT;IACF;AAEA,aAAA,SAA6C,IAAK;AAChD,uBAAiB;AACjB,aAAY;IACd;AAHgB,YAAA,WAAQ;;;;;;;;;;;;;;;;;ACTxB,QAAA,sBAAA,SAAA,QAAA;AAAyC,gBAAAA,sBAAA,MAAA;AACvC,eAAAA,qBAAmB,QAAa;AAC9B,eAAA,KAAA,IAAA;AADiB,aAAA,SAAA;AAEjB,YAAM,MAAW,MAAM,KAAK,MAAM,SAC7B,OAAO,SAAM,gDAClB,OAAO,IAAI,SAACC,MAAK,GAAC;AAAK,iBAAG,IAAI,IAAC,OAAKA,KAAI,SAAQ;QAAzB,CAA6B,EAAE,KAAK,MAAM,IAAM,EAAE;AAClE,aAAM,OAAO,IAAI,OAAO;AACxB,aAAM,QAAQ,IAAI;AAClB,aAAM,UAAU,IAAI;MAC7B;AACF,aAAAD;IAAA,EAVyC,KAAK;AAAjC,YAAA,sBAAmB;;;;;;;;ACJhC,QAAA,YAAA;AACA,QAAA,aAAA;AACA,QAAA,eAAA;AACA,QAAA,aAAA;AACA,QAAA,gBAAA;AACA,QAAA,wBAAA;AAyBA,QAAA,eAAA,WAAA;AAoBE,eAAAE,cAAY,aAAwB;AAV7B,aAAA,SAAkB;AAEf,aAAA,UAAwB;AACxB,aAAA,WAA2B;AAC7B,aAAA,iBAAkC;AAOxC,YAAI,aAAa;AACR,eAAM,eAAe;QAC9B;MACF;AAQA,MAAAA,cAAA,UAAA,cAAA,WAAA;AACE,YAAI,YAAY;AAChB,YAAI;AAEJ,YAAI,KAAK,QAAQ;AACf;QACF;AAEA,YAAA,KAAA,MAAM,UAAA,GAAA,SAAS,WAAA,GAAA,UAAU,eAAA,GAAA,cAAc,iBAAA,GAAA;AAEvC,aAAK,SAAS;AACd,aAAK,UAAU;AACf,aAAK,WAAW;AAGhB,aAAK,iBAAiB;AAEtB,YAAI,QAAQ;AACZ,YAAI,MAAM,WAAW,SAAS,SAAS;AAIvC,eAAO,SAAS;AACd,kBAAQ,OAAO,IAAI;AAGnB,oBAAU,EAAE,QAAQ,OAAO,SAAS,KAAK,KAAK;QAChD;AAEA,YAAI,aAAA,WAAW,YAAY,GAAG;AAC5B,cAAI,QAAQ,WAAA,SAAS,YAAY,EAAE,KAAK,IAAI;AAC5C,cAAI,UAAU,cAAA,aAAa;AACzB,wBAAY;AACZ,qBAAS,WACP,cAAA,YAAY,aAAa,sBAAA,sBACvB,4BAA4B,cAAA,YAAY,EAAE,MAAM,IAAI,CAAC,cAAA,YAAY,CAAC;UAExE;QACF;AAEA,YAAI,UAAA,QAAQ,cAAc,GAAG;AAE3B,kBAAQ;AACR,gBAAM,eAAe;AAErB,iBAAO,EAAE,QAAQ,KAAK;AACpB,gBAAM,MAAM,eAAe,KAAK;AAChC,gBAAI,WAAA,SAAS,GAAG,GAAG;AACjB,kBAAI,QAAQ,WAAA,SAAS,IAAI,WAAW,EAAE,KAAK,GAAG;AAC9C,kBAAI,UAAU,cAAA,aAAa;AACzB,4BAAY;AACZ,yBAAS,UAAU,CAAA;AACnB,oBAAI,MAAM,cAAA,YAAY;AACtB,oBAAI,eAAe,sBAAA,qBAAqB;AACtC,2BAAS,OAAO,OAAO,4BAA4B,IAAI,MAAM,CAAC;gBAChE,OAAO;AACL,yBAAO,KAAK,GAAG;gBACjB;cACF;YACF;UACF;QACF;AAEA,YAAI,WAAW;AACb,gBAAM,IAAI,sBAAA,oBAAoB,MAAM;QACtC;MACF;AAoBA,MAAAA,cAAA,UAAA,MAAA,SAAI,UAAuB;AACzB,YAAI,CAAC,YAAa,aAAaA,cAAa,OAAQ;AAClD,iBAAOA,cAAa;QACtB;AAEA,YAAI,aAAa,MAAM;AACrB,iBAAO;QACT;AAEA,YAAI,eAA+B;AAEnC,gBAAQ,OAAO,UAAU;UACvB,KAAK;AACH,2BAAe,IAAIA,cAA6B,QAAQ;UAC1D,KAAK;AACH,gBAAI,aAAa,UAAU,OAAO,aAAa,gBAAgB,YAAY;AACzE,qBAAO;YACT,WAAW,KAAK,QAAQ;AACtB,2BAAa,YAAW;AACxB,qBAAO;YACT,WAAW,OAAO,aAAa,eAAe,YAA8B;AAC1E,kBAAM,MAAM;AACZ,6BAAe,IAAIA,cAAY;AAC/B,2BAAa,iBAAiB,CAAC,GAAG;YACpC;AACA;UACF;AACE,kBAAM,IAAI,MAAM,2BAA2B,WAAW,yBAAyB;QACnF;AAEA,YAAM,gBAAgB,KAAK,mBAAmB,KAAK,iBAAiB,CAAA;AAEpE,sBAAc,KAAK,YAAY;AAC/B,qBAAa,WAAW,IAAI;AAE5B,eAAO;MACT;AAQA,MAAAA,cAAA,UAAA,SAAA,SAAO,cAA0B;AAC/B,YAAM,gBAAgB,KAAK;AAC3B,YAAI,eAAe;AACjB,cAAM,oBAAoB,cAAc,QAAQ,YAAY;AAC5D,cAAI,sBAAsB,IAAI;AAC5B,0BAAc,OAAO,mBAAmB,CAAC;UAC3C;QACF;MACF;AAEQ,MAAAA,cAAA,UAAA,aAAR,SAAmB,QAAoB;AACrC,YAAA,KAAA,MAAM,UAAA,GAAA,SAAS,WAAA,GAAA;AACf,YAAI,CAAC,WAAW,YAAY,QAAQ;AAGlC,eAAK,UAAU;QACjB,WAAW,CAAC,UAAU;AAGpB,eAAK,WAAW,CAAC,MAAM;QACzB,WAAW,SAAS,QAAQ,MAAM,MAAM,IAAI;AAE1C,mBAAS,KAAK,MAAM;QACtB;MACF;AAzLc,MAAAA,cAAA,QAAuB,SAAS,OAAU;AACtD,cAAM,SAAS;AACf,eAAO;MACT,EAAE,IAAIA,cAAY,CAAE;AAuLtB,aAAAA;IAAA,EA3LA;AAAa,YAAA,eAAY;AA6LzB,aAAA,4BAAqC,QAAa;AACjD,aAAO,OAAO,OAAO,SAAC,MAAM,KAAG;AAAK,eAAA,KAAK,OAAQ,eAAe,sBAAA,sBAAuB,IAAI,SAAS,GAAG;MAAnE,GAAsE,CAAA,CAAE;IAC7G;;;;;;;;AC9MA,QAAM,WAAW,OAAO,WAAW,eAAe;AAClD,QAAM,SAAS,OAAO,SAAS,eAAe,OAAO,sBAAsB,eACvE,gBAAgB,qBAAqB;AACzC,QAAM,WAAW,OAAO,WAAW,eAAe;AAClD,QAAM,QAAa,YAAY,YAAY;AAWzB,YAAA,OAAI;AANtB,KAAC,WAAA;AACC,UAAI,CAAC,OAAO;AACV,cAAM,IAAI,MAAM,+DAA+D;MACjF;IACF,GAAE;;;;;;;;AC5BF,QAAA,SAAA;AAEA,QAAM,SAAc,OAAA,KAAK;AAEZ,YAAA,eAAgB,OAAO,WAAW,cAAc,OAAO,OAAO,QAAQ,aACjF,OAAO,IAAI,cAAc,IAAI;AAKlB,YAAA,iBAAiB,QAAA;;;;;;;;ACoBjB,YAAA,QAAuB;MAClC,QAAQ;MACR,MAAI,SAAC,OAAU;MAAoB;MACnC,OAAK,SAAC,KAAQ;AAAU,cAAM;MAAK;MACnC,UAAQ,WAAA;MAAoB;;;;;;;;;;;;;;;;;;AClC9B,QAAA,eAAA;AAEA,QAAA,iBAAA;AACA,QAAA,aAAA;AACA,QAAA,iBAAA;AAYA,QAAA,aAAA,SAAA,QAAA;AAAmC,gBAAAC,aAAA,MAAA;AAsCjC,eAAAA,YAAY,mBACA,OACA,UAAqB;AAC/B,eAAA,KAAA,IAAA;AAlBK,aAAA,iBAAsB;AACtB,aAAA,kBAA2B;AAC3B,aAAA,qBAA8B;AAE3B,aAAA,YAAqB;AAgB7B,gBAAQ,UAAU,QAAQ;UACxB,KAAK;AACH,iBAAK,cAAc,WAAA;AACnB;UACF,KAAK;AACH,gBAAI,CAAC,mBAAmB;AACtB,mBAAK,cAAc,WAAA;AACnB;YACF;AACA,gBAAI,OAAO,sBAAsB,UAAU;AAGzC,kBAAI,oBAAoB,iBAAiB,GAAG;AAC1C,oBAAM,oBAAoB,kBAAkB,eAAA,YAAkB,EAAC;AAC/D,qBAAK,qBAAqB,kBAAkB;AAC5C,qBAAK,cAAc;AACnB,kCAAkB,IAAI,IAAI;cAC5B,OAAO;AACL,qBAAK,qBAAqB;AAC1B,qBAAK,cAAc,IAAI,eAAkB,MAA6B,iBAAiB;cACzF;AACA;YACF;UACF;AACE,iBAAK,qBAAqB;AAC1B,iBAAK,cAAc,IAAI,eAAkB,MAA6B,mBAAmB,OAAO,QAAQ;AACxG;QACJ;MACF;AArEA,MAAAA,YAAA,UAAC,eAAA,YAAkB,IAAnB,WAAA;AAAyB,eAAO;MAAM;AAa/B,MAAAA,YAAA,SAAP,SAAiB,MACA,OACA,UAAqB;AACpC,YAAM,aAAa,IAAIA,YAAW,MAAM,OAAO,QAAQ;AACvD,mBAAW,qBAAqB;AAChC,eAAO;MACT;AA2DA,MAAAA,YAAA,UAAA,OAAA,SAAK,OAAS;AACZ,YAAI,CAAC,KAAK,WAAW;AACnB,eAAK,MAAM,KAAK;QAClB;MACF;AASA,MAAAA,YAAA,UAAA,QAAA,SAAM,KAAS;AACb,YAAI,CAAC,KAAK,WAAW;AACnB,eAAK,YAAY;AACjB,eAAK,OAAO,GAAG;QACjB;MACF;AAQA,MAAAA,YAAA,UAAA,WAAA,WAAA;AACE,YAAI,CAAC,KAAK,WAAW;AACnB,eAAK,YAAY;AACjB,eAAK,UAAS;QAChB;MACF;AAEA,MAAAA,YAAA,UAAA,cAAA,WAAA;AACE,YAAI,KAAK,QAAQ;AACf;QACF;AACA,aAAK,YAAY;AACjB,eAAA,UAAM,YAAW,KAAA,IAAA;MACnB;AAEU,MAAAA,YAAA,UAAA,QAAV,SAAgB,OAAQ;AACtB,aAAK,YAAY,KAAK,KAAK;MAC7B;AAEU,MAAAA,YAAA,UAAA,SAAV,SAAiB,KAAQ;AACvB,aAAK,YAAY,MAAM,GAAG;AAC1B,aAAK,YAAW;MAClB;AAEU,MAAAA,YAAA,UAAA,YAAV,WAAA;AACE,aAAK,YAAY,SAAQ;AACzB,aAAK,YAAW;MAClB;AAEqC,MAAAA,YAAA,UAAA,yBAAA,WAAA;AACnC,YAAA,KAAA,MAAQ,UAAA,GAAA,SAAS,WAAA,GAAA;AACjB,aAAK,UAAU;AACf,aAAK,WAAW;AAChB,aAAK,YAAW;AAChB,aAAK,SAAS;AACd,aAAK,YAAY;AACjB,aAAK,UAAU;AACf,aAAK,WAAW;AAChB,eAAO;MACT;AACF,aAAAA;IAAA,EAlJmC,eAAA,YAAY;AAAlC,YAAA,aAAU;AAyJvB,QAAA,iBAAA,SAAA,QAAA;AAAgC,gBAAAC,iBAAA,MAAA;AAI9B,eAAAA,gBAAoB,mBACR,gBACA,OACA,UAAqB;AAC/B,eAAA,KAAA,IAAA;AAJkB,aAAA,oBAAA;AAMlB,YAAI;AACJ,YAAI,UAAe;AAEnB,YAAI,aAAA,WAAW,cAAc,GAAG;AAC9B,iBAA+B;QACjC,WAAW,gBAAgB;AACzB,iBAA6B,eAAgB;AAC7C,kBAA8B,eAAgB;AAC9C,qBAAiC,eAAgB;AACjD,cAAI,mBAAmB,WAAA,OAAe;AACpC,sBAAU,OAAO,OAAO,cAAc;AACtC,gBAAI,aAAA,WAAW,QAAQ,WAAW,GAAG;AACnC,mBAAK,IAAiB,QAAQ,YAAY,KAAK,OAAO,CAAC;YACzD;AACA,oBAAQ,cAAc,KAAK,YAAY,KAAK,IAAI;UAClD;QACF;AAEA,aAAK,WAAW;AAChB,aAAK,QAAQ;AACb,aAAK,SAAS;AACd,aAAK,YAAY;MACnB;AAEA,MAAAA,gBAAA,UAAA,OAAA,SAAK,OAAS;AACZ,YAAI,CAAC,KAAK,aAAa,KAAK,OAAO;AACzB,cAAA,oBAAA,KAAA;AACR,cAAI,CAAC,kBAAkB,oBAAoB;AACzC,iBAAK,aAAa,KAAK,OAAO,KAAK;UACrC,WAAW,KAAK,gBAAgB,mBAAmB,KAAK,OAAO,KAAK,GAAG;AACrE,iBAAK,YAAW;UAClB;QACF;MACF;AAEA,MAAAA,gBAAA,UAAA,QAAA,SAAM,KAAS;AACb,YAAI,CAAC,KAAK,WAAW;AACX,cAAA,oBAAA,KAAA;AACR,cAAI,KAAK,QAAQ;AACf,gBAAI,CAAC,kBAAkB,oBAAoB;AACzC,mBAAK,aAAa,KAAK,QAAQ,GAAG;AAClC,mBAAK,YAAW;YAClB,OAAO;AACL,mBAAK,gBAAgB,mBAAmB,KAAK,QAAQ,GAAG;AACxD,mBAAK,YAAW;YAClB;UACF,WAAW,CAAC,kBAAkB,oBAAoB;AAChD,iBAAK,YAAW;AAChB,kBAAM;UACR,OAAO;AACL,8BAAkB,iBAAiB;AACnC,8BAAkB,kBAAkB;AACpC,iBAAK,YAAW;UAClB;QACF;MACF;AAEA,MAAAA,gBAAA,UAAA,WAAA,WAAA;AAAA,YAAA,QAAA;AACE,YAAI,CAAC,KAAK,WAAW;AACX,cAAA,oBAAA,KAAA;AACR,cAAI,KAAK,WAAW;AAClB,gBAAM,kBAAkB,WAAA;AAAM,qBAAA,MAAK,UAAU,KAAK,MAAK,QAAQ;YAAjC;AAE9B,gBAAI,CAAC,kBAAkB,oBAAoB;AACzC,mBAAK,aAAa,eAAe;AACjC,mBAAK,YAAW;YAClB,OAAO;AACL,mBAAK,gBAAgB,mBAAmB,eAAe;AACvD,mBAAK,YAAW;YAClB;UACF,OAAO;AACL,iBAAK,YAAW;UAClB;QACF;MACF;AAEQ,MAAAA,gBAAA,UAAA,eAAR,SAAqB,IAAc,OAAW;AAC5C,YAAI;AACF,aAAG,KAAK,KAAK,UAAU,KAAK;QAC9B,SAAS,KAAP;AACA,eAAK,YAAW;AAChB,gBAAM;QACR;MACF;AAEQ,MAAAA,gBAAA,UAAA,kBAAR,SAAwB,QAAuB,IAAc,OAAW;AACtE,YAAI;AACF,aAAG,KAAK,KAAK,UAAU,KAAK;QAC9B,SAAS,KAAP;AACA,iBAAO,iBAAiB;AACxB,iBAAO,kBAAkB;AACzB,iBAAO;QACT;AACA,eAAO;MACT;AAEqC,MAAAA,gBAAA,UAAA,eAAA,WAAA;AAC3B,YAAA,oBAAA,KAAA;AACR,aAAK,WAAW;AAChB,aAAK,oBAAoB;AACzB,0BAAkB,YAAW;MAC/B;AACF,aAAAA;IAAA,EAhHgC,UAAU;AAkH1C,aAAA,oBAA6B,KAAQ;AACnC,aAAO,eAAe,cAAe,wBAAwB,OAAO,IAAI,eAAA,YAAkB;IAC5F;;;;;;;;AC7RA,QAAA,eAAA;AACA,QAAA,iBAAA;AACA,QAAA,aAAA;AAEA,aAAA,aACE,gBACA,OACA,UAAqB;AAErB,UAAI,gBAAgB;AAClB,YAAI,0BAA0B,aAAA,YAAY;AACxC,iBAAwB;QAC1B;AAEA,YAAI,eAAe,eAAA,YAAkB,GAAG;AACtC,iBAAO,eAAe,eAAA,YAAkB,EAAC;QAC3C;MACF;AAEA,UAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,UAAU;AAC1C,eAAO,IAAI,aAAA,WAAW,WAAA,KAAa;MACrC;AAEA,aAAO,IAAI,aAAA,WAAW,gBAAgB,OAAO,QAAQ;IACvD;AApBgB,YAAA,eAAY;;;;;;;;ACJ5B,QAAA,SAAA;AAEA,aAAA,oBAAoC,SAAY;AAC9C,UAAI;AACJ,UAAI,SAAS,QAAQ;AAErB,UAAI,OAAO,WAAW,YAAY;AAChC,YAAI,OAAO,YAAY;AACrB,yBAAe,OAAO;QACxB,OAAO;AACH,yBAAe,OAAO,YAAY;AAClC,iBAAO,aAAa;QACxB;MACF,OAAO;AACL,uBAAe;MACjB;AAEA,aAAO;IACT;AAhBgB,YAAA,sBAAmB;AAkBtB,YAAA,aAAa,oBAAoB,OAAA,IAAI;AAKrC,YAAA,eAAe,QAAA;;;;;;;;ACxB5B,aAAA,OAAA;IAAyB;AAAT,YAAA,OAAI;;;;;;;;ACDpB,QAAA,SAAA;AAgBA,aAAA,OAAA;AAA2B,UAAA,MAAA,CAAA;eAAA,KAAA,GAAA,KAAA,UAAA,QAAA,MAAkC;AAAlC,YAAA,KAAA,CAAA,IAAA,UAAA,EAAA;;AACzB,aAAO,cAAc,GAAG;IAC1B;AAFgB,YAAA,OAAI;AAKpB,aAAA,cAAoC,KAA+B;AACjE,UAAI,CAAC,KAAK;AACR,eAAO,OAAA;MACT;AAEA,UAAI,IAAI,WAAW,GAAG;AACpB,eAAO,IAAI,CAAC;MACd;AAEA,aAAO,SAAA,MAAe,OAAQ;AAC5B,eAAO,IAAI,OAAO,SAAC,MAAW,IAAuB;AAAK,iBAAA,GAAG,IAAI;QAAP,GAAU,KAAK;MAC3E;IACF;AAZgB,YAAA,gBAAa;;;;;;;;ACjB7B,QAAA,SAAA;AACA,QAAA,iBAAA;AAGA,QAAA,eAAA;AAEA,QAAA,SAAA;AAiBA,QAAA,aAAA,WAAA;AAcE,eAAAC,YAAY,WAA6E;AAZlF,aAAA,YAAqB;AAa1B,YAAI,WAAW;AACb,eAAK,aAAa;QACpB;MACF;AAuBA,MAAAA,YAAA,UAAA,OAAA,SAAQ,UAAwB;AAC9B,YAAM,aAAa,IAAIA,YAAU;AACjC,mBAAW,SAAS;AACpB,mBAAW,WAAW;AACtB,eAAO;MACT;AAsHA,MAAAA,YAAA,UAAA,YAAA,SAAU,gBACA,OACA,UAAqB;AAErB,YAAA,WAAA,KAAA;AACR,YAAM,OAAO,eAAA,aAAa,gBAAgB,OAAO,QAAQ;AAEzD,YAAI,UAAU;AACZ,mBAAS,KAAK,MAAM,KAAK,MAAM;QACjC,OAAO;AACL,eAAK,IAAI,KAAK,UAAU,CAAC,KAAK,qBAAqB,KAAK,WAAW,IAAI,IAAI,KAAK,cAAc,IAAI,CAAC;QACrG;AAEA,YAAI,KAAK,oBAAoB;AAC3B,eAAK,qBAAqB;AAC1B,cAAI,KAAK,iBAAiB;AACxB,kBAAM,KAAK;UACb;QACF;AAEA,eAAO;MACT;AAEU,MAAAA,YAAA,UAAA,gBAAV,SAAwB,MAAmB;AACzC,YAAI;AACF,iBAAO,KAAK,WAAW,IAAI;QAC7B,SAAS,KAAP;AACA,eAAK,kBAAkB;AACvB,eAAK,iBAAiB;AACtB,eAAK,MAAM,GAAG;QAChB;MACF;AASA,MAAAA,YAAA,UAAA,UAAA,SAAQ,MAA0B,aAA4B;AAA9D,YAAA,QAAA;AACE,YAAI,CAAC,aAAa;AAChB,cAAI,OAAA,KAAK,MAAM,OAAA,KAAK,GAAG,UAAU,OAAA,KAAK,GAAG,OAAO,SAAS;AACvD,0BAAc,OAAA,KAAK,GAAG,OAAO;UAC/B,WAAW,OAAA,KAAK,SAAS;AACvB,0BAAc,OAAA,KAAK;UACrB;QACF;AAEA,YAAI,CAAC,aAAa;AAChB,gBAAM,IAAI,MAAM,uBAAuB;QACzC;AAEA,eAAO,IAAI,YAAkB,SAAC,SAAS,QAAM;AAG3C,cAAI;AACJ,yBAAe,MAAK,UAAU,SAAC,OAAK;AAClC,gBAAI,cAAc;AAKhB,kBAAI;AACF,qBAAK,KAAK;cACZ,SAAS,KAAP;AACA,uBAAO,GAAG;AACV,6BAAa,YAAW;cAC1B;YACF,OAAO;AAOL,mBAAK,KAAK;YACZ;UACF,GAAG,QAAQ,OAAO;QACpB,CAAC;MACH;AAEqC,MAAAA,YAAA,UAAA,aAAA,SAAW,YAA2B;AACzE,eAAO,KAAK,OAAO,UAAU,UAAU;MACzC;AAWA,MAAAA,YAAA,UAAC,aAAA,UAAiB,IAAlB,WAAA;AACE,eAAO;MACT;AAkCA,MAAAA,YAAA,UAAA,OAAA,WAAA;AAAQ,YAAA,aAAA,CAAA;iBAAA,KAAA,GAAA,KAAA,UAAA,QAAA,MAAuC;AAAvC,qBAAA,KAAA,CAAA,IAAA,UAAA,EAAA;;AACN,YAAI,WAAW,WAAW,GAAG;AAC3B,iBAAO;QACT;AAEA,eAAO,OAAA,cAAc,UAAU,EAAE,IAAI;MACvC;AAQA,MAAAA,YAAA,UAAA,YAAA,SAAU,aAAoC;AAA9C,YAAA,QAAA;AACE,YAAI,CAAC,aAAa;AAChB,cAAI,OAAA,KAAK,MAAM,OAAA,KAAK,GAAG,UAAU,OAAA,KAAK,GAAG,OAAO,SAAS;AACvD,0BAAc,OAAA,KAAK,GAAG,OAAO;UAC/B,WAAW,OAAA,KAAK,SAAS;AACvB,0BAAc,OAAA,KAAK;UACrB;QACF;AAEA,YAAI,CAAC,aAAa;AAChB,gBAAM,IAAI,MAAM,uBAAuB;QACzC;AAEA,eAAO,IAAI,YAAY,SAAC,SAAS,QAAM;AACrC,cAAI;AACJ,gBAAK,UAAU,SAAC,GAAI;AAAK,mBAAA,QAAQ;UAAR,GAAW,SAAC,KAAQ;AAAK,mBAAA,OAAO,GAAG;UAAV,GAAa,WAAA;AAAM,mBAAA,QAAQ,KAAK;UAAb,CAAc;QACrF,CAAC;MACH;AAxSO,MAAAA,YAAA,SAAmB,SAAI,WAAwD;AACpF,eAAO,IAAIA,YAAc,SAAS;MACpC;AAuSF,aAAAA;IAAA,EAvUA;AAAa,YAAA,aAAU;;;",
  "names": ["UnsubscriptionError", "err", "Subscription", "Subscriber", "SafeSubscriber", "Observable"]
}
