{
  "version": 3,
  "sources": ["../../../../../node_modules/@reach/utils/src/index.tsx"],
  "sourcesContent": ["/* eslint-disable no-restricted-globals, eqeqeq  */\n\nimport React, {\n  cloneElement,\n  createContext,\n  isValidElement,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport warning from \"warning\";\nimport {\n  As,\n  AssignableRef,\n  ComponentWithAs,\n  ComponentWithForwardedRef,\n  DistributiveOmit,\n  ElementByTag,\n  ElementTagNameMap,\n  ForwardRefExoticComponentWithAs,\n  ForwardRefWithAsRenderFunction,\n  FunctionComponentWithAs,\n  MemoExoticComponentWithAs,\n  PropsFromAs,\n  PropsWithAs,\n  SingleOrArray,\n  ThenArg,\n} from \"./types\";\n\n/**\n * React currently throws a warning when using useLayoutEffect on the server.\n * To get around it, we can conditionally useEffect on the server (no-op) and\n * useLayoutEffect in the browser. We occasionally need useLayoutEffect to\n * ensure we don't get a render flash for certain operations, but we may also\n * need affected components to render on the server. One example is when setting\n * a component's descendants to retrieve their index values.\n *\n * Important to note that using this hook as an escape hatch will break the\n * eslint dependency warnings unless you rename the import to `useLayoutEffect`.\n * Use sparingly only when the effect won't effect the rendered HTML to avoid\n * any server/client mismatch.\n *\n * If a useLayoutEffect is needed and the result would create a mismatch, it's\n * likely that the component in question shouldn't be rendered on the server at\n * all, so a better approach would be to lazily render those in a parent\n * component after client-side hydration.\n *\n * TODO: We are calling useLayoutEffect in a couple of places that will likely\n * cause some issues for SSR users, whether the warning shows or not. Audit and\n * fix these.\n *\n * https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\n * https://github.com/reduxjs/react-redux/blob/master/src/utils/useIsomorphicLayoutEffect.js\n *\n * @param effect\n * @param deps\n */\nexport const useIsomorphicLayoutEffect = canUseDOM()\n  ? React.useLayoutEffect\n  : React.useEffect;\n\nlet checkedPkgs: { [key: string]: boolean } = {};\n\n/**\n * Copy of Facebook's warning package.\n */\nexport { warning };\n\n/**\n * When in dev mode, checks that styles for a given @reach package are loaded.\n *\n * @param packageName Name of the package to check.\n * @example checkStyles(\"dialog\") will check for styles for @reach/dialog\n */\n// @ts-ignore\nlet checkStyles: (packageName: string) => void = noop;\n\nif (__DEV__) {\n  // In CJS files, process.env.NODE_ENV is stripped from our build, but we need\n  // it to prevent style checks from clogging up user logs while testing.\n  // This is a workaround until we can tweak the build a bit to accommodate.\n  let { env } =\n    typeof process !== \"undefined\"\n      ? process\n      : { env: { NODE_ENV: \"development\" } };\n\n  checkStyles = function checkStyles(packageName: string) {\n    // only check once per package\n    if (checkedPkgs[packageName]) return;\n    checkedPkgs[packageName] = true;\n\n    if (\n      env.NODE_ENV !== \"test\" &&\n      parseInt(\n        window\n          .getComputedStyle(document.body)\n          .getPropertyValue(`--reach-${packageName}`),\n        10\n      ) !== 1\n    ) {\n      console.warn(\n        `@reach/${packageName} styles not found. If you are using a bundler like webpack or parcel include this in the entry file of your app before any of your own styles:\n\n    import \"@reach/${packageName}/styles.css\";\n\n  Otherwise you'll need to include them some other way:\n\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"node_modules/@reach/${packageName}/styles.css\" />\n\n  For more information visit https://ui.reach.tech/styling.\n  `\n      );\n    }\n  };\n}\n\nexport { checkStyles };\n\n/**\n * Ponyfill for the global object in some environments.\n *\n * @link https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\n */\nexport const ponyfillGlobal =\n  typeof window != \"undefined\" && window.Math == Math\n    ? window\n    : typeof self != \"undefined\" && self.Math == Math\n    ? self\n    : // eslint-disable-next-line no-new-func\n      Function(\"return this\")();\n\n/**\n * Passes or assigns an arbitrary value to a ref function or object.\n *\n * @param ref\n * @param value\n */\nexport function assignRef<RefValueType = any>(\n  ref: AssignableRef<RefValueType> | null | undefined,\n  value: any\n) {\n  if (ref == null) return;\n  if (isFunction(ref)) {\n    ref(value);\n  } else {\n    try {\n      ref.current = value;\n    } catch (error) {\n      throw new Error(`Cannot assign value \"${value}\" to ref \"${ref}\"`);\n    }\n  }\n}\n\n/**\n * Checks true|\"true\" vs false|\"false\"\n *\n * @param value\n */\nexport function boolOrBoolString(value: any): value is \"true\" | true {\n  return value === \"true\" ? true : isBoolean(value) ? value : false;\n}\n\nexport function canUseDOM() {\n  return !!(\n    typeof window !== \"undefined\" &&\n    window.document &&\n    window.document.createElement\n  );\n}\n\n/**\n * Type-safe clone element\n *\n * @param element\n * @param props\n * @param children\n */\nexport function cloneValidElement<Props>(\n  element: React.ReactElement<Props> | React.ReactNode,\n  props?: Partial<Props> & React.Attributes,\n  ...children: React.ReactNode[]\n): React.ReactElement<Props> | React.ReactNode {\n  return isValidElement(element)\n    ? cloneElement(element, props, ...children)\n    : element;\n}\n\nexport function createNamedContext<ContextValueType>(\n  name: string,\n  defaultValue: ContextValueType\n): React.Context<ContextValueType> {\n  const Ctx = createContext<ContextValueType>(defaultValue);\n  Ctx.displayName = name;\n  return Ctx;\n}\n\n/**\n * This is a hack for sure. The thing is, getting a component to intelligently\n * infer props based on a component or JSX string passed into an `as` prop is\n * kind of a huge pain. Getting it to work and satisfy the constraints of\n * `forwardRef` seems dang near impossible. To avoid needing to do this awkward\n * type song-and-dance every time we want to forward a ref into a component\n * that accepts an `as` prop, we abstract all of that mess to this function for\n * the time time being.\n */\nexport function forwardRefWithAs<Props, ComponentType extends As = \"div\">(\n  render: ForwardRefWithAsRenderFunction<ComponentType, Props>\n) {\n  return React.forwardRef(render) as ForwardRefExoticComponentWithAs<\n    ComponentType,\n    Props\n  >;\n}\n\nexport function memoWithAs<Props, ComponentType extends As = \"div\">(\n  Component: FunctionComponentWithAs<ComponentType, Props>,\n  propsAreEqual?: (\n    prevProps: Readonly<React.PropsWithChildren<Props>>,\n    nextProps: Readonly<React.PropsWithChildren<Props>>\n  ) => boolean\n) {\n  return React.memo(Component, propsAreEqual) as MemoExoticComponentWithAs<\n    ComponentType,\n    Props\n  >;\n}\n\n/**\n * Get the size of the working document minus the scrollbar offset.\n *\n * @param element\n */\nexport function getDocumentDimensions(\n  element?: HTMLElement | null | undefined\n) {\n  if (!canUseDOM()) return { width: 0, height: 0 };\n  let doc = element ? getOwnerDocument(element)! : document;\n  let win = element ? getOwnerWindow(element)! : window;\n  return {\n    width: doc.documentElement.clientWidth || win.innerWidth,\n    height: doc.documentElement.clientHeight || win.innerHeight,\n  };\n}\n\n/**\n * Get the scoll position of the global window object relative to a given node.\n *\n * @param element\n */\nexport function getScrollPosition(element?: HTMLElement | null | undefined) {\n  if (!canUseDOM()) return { scrollX: 0, scrollY: 0 };\n  let win = element ? getOwnerWindow(element)! : window;\n  return {\n    scrollX: win.scrollX,\n    scrollY: win.scrollY,\n  };\n}\n\n/**\n * Get a computed style value by property, backwards compatible with IE\n * @param element\n * @param styleProp\n */\nexport function getElementComputedStyle(\n  element: HTMLElement & {\n    currentStyle?: Record<string, string>;\n  },\n  styleProp: string\n) {\n  let y: string | null = null;\n  let doc = getOwnerDocument(element);\n  if (element.currentStyle) {\n    y = element.currentStyle[styleProp];\n  } else if (\n    doc &&\n    doc.defaultView &&\n    isFunction(doc.defaultView.getComputedStyle)\n  ) {\n    y = doc.defaultView\n      .getComputedStyle(element, null)\n      .getPropertyValue(styleProp);\n  }\n  return y;\n}\n\n/**\n * Get an element's owner document. Useful when components are used in iframes\n * or other environments like dev tools.\n *\n * @param element\n */\nexport function getOwnerDocument<T extends HTMLElement = HTMLElement>(\n  element: T | null\n) {\n  return element && element.ownerDocument\n    ? element.ownerDocument\n    : canUseDOM()\n    ? document\n    : null;\n}\n\nexport function getOwnerWindow<T extends HTMLElement = HTMLElement>(\n  element: T | null\n) {\n  let doc = element ? getOwnerDocument(element) : null;\n  return doc ? doc.defaultView || window : null;\n}\n\n/**\n * Get the scrollbar offset distance.\n *\n * TODO: Remove in 1.0 (we used this in public examples)\n */\nexport function getScrollbarOffset() {\n  try {\n    if (window.innerWidth > document.documentElement.clientWidth) {\n      return window.innerWidth - document.documentElement.clientWidth;\n    }\n  } catch (err) {}\n  return 0;\n}\n\n/**\n * Checks whether or not a value is a boolean.\n *\n * @param value\n */\nexport function isBoolean(value: any): value is boolean {\n  return typeof value === \"boolean\";\n}\n\n/**\n * Checks whether or not a value is a function.\n *\n * @param value\n */\nexport function isFunction(value: any): value is Function {\n  return !!(value && {}.toString.call(value) == \"[object Function]\");\n}\n\n/**\n * Checks whether or not a value is a number.\n *\n * @param value\n */\nexport function isNumber(value: any): value is number {\n  return typeof value === \"number\";\n}\n\n/**\n * Detects right clicks\n *\n * @param nativeEvent\n */\nexport function isRightClick(nativeEvent: MouseEvent) {\n  return nativeEvent.which === 3 || nativeEvent.button === 2;\n}\n\n/**\n * Checks whether or not a value is a string.\n *\n * @param value\n */\nexport function isString(value: any): value is string {\n  return typeof value === \"string\";\n}\n\n/**\n * Joins strings to format IDs for compound components.\n *\n * @param args\n */\nexport function makeId(...args: (string | number | null | undefined)[]) {\n  return args.filter((val) => val != null).join(\"--\");\n}\n\n/**\n * No-op function.\n */\nexport function noop(): void {}\n\n/**\n * Convert our state strings for HTML data attributes.\n * No need for a fancy kebab-caser here, we know what our state strings are!\n *\n * @param state\n */\nexport function stateToAttributeString(state: any) {\n  return String(state)\n    .replace(/([\\s_]+)/g, \"-\")\n    .toLowerCase();\n}\n\n/**\n * Check if a component is controlled or uncontrolled and return the correct\n * state value and setter accordingly. If the component state is controlled by\n * the app, the setter is a noop.\n *\n * @param controlledValue\n * @param defaultValue\n */\nexport function useControlledState<T = any>(\n  controlledValue: T | undefined,\n  defaultValue: T\n): [T, React.Dispatch<React.SetStateAction<T>>] {\n  let controlledRef = useRef(controlledValue != null);\n  let [valueState, setValue] = useState(defaultValue);\n  let set: React.Dispatch<React.SetStateAction<T>> = useCallback((n) => {\n    if (!controlledRef.current) {\n      setValue(n);\n    }\n  }, []);\n  return [controlledRef.current ? (controlledValue as T) : valueState, set];\n}\n\n/**\n * Logs a warning in dev mode when a component switches from controlled to\n * uncontrolled, or vice versa\n *\n * A single prop should typically be used to determine whether or not a\n * component is controlled or not.\n *\n * @param controlledValue\n * @param controlledPropName\n * @param componentName\n */\nlet useControlledSwitchWarning: (\n  controlledValue: any,\n  controlledPropName: string,\n  componentName: string\n) => void = noop;\n\nif (__DEV__) {\n  useControlledSwitchWarning = function useControlledSwitchWarning(\n    controlledValue,\n    controlledPropName,\n    componentName\n  ) {\n    let controlledRef = useRef(controlledValue != null);\n    let nameCache = useRef({ componentName, controlledPropName });\n    useEffect(() => {\n      nameCache.current = { componentName, controlledPropName };\n    }, [componentName, controlledPropName]);\n\n    useEffect(() => {\n      let { current: wasControlled } = controlledRef;\n      let { componentName, controlledPropName } = nameCache.current;\n      let isControlled = controlledValue != null;\n      if (wasControlled !== isControlled) {\n        console.error(\n          `A component is changing an ${\n            wasControlled ? \"\" : \"un\"\n          }controlled \\`${controlledPropName}\\` state of ${componentName} to be ${\n            wasControlled ? \"un\" : \"\"\n          }controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled ${componentName} element for the lifetime of the component.\nMore info: https://fb.me/react-controlled-components`\n        );\n      }\n    }, [controlledValue]);\n  };\n}\n\nexport { useControlledSwitchWarning };\n\nlet useCheckStyles: (packageName: string) => void = noop;\n\nif (__DEV__) {\n  useCheckStyles = function useCheckStyles(pkg: string) {\n    let name = useRef(pkg);\n    useEffect(() => void (name.current = pkg), [pkg]);\n    useEffect(() => checkStyles(name.current), []);\n  };\n}\n\nexport { useCheckStyles };\n\n/**\n * React hook for creating a value exactly once.\n * @see https://github.com/Andarist/use-constant\n */\nexport function useConstant<ValueType>(fn: () => ValueType): ValueType {\n  const ref = React.useRef<{ v: ValueType }>();\n  if (!ref.current) {\n    ref.current = { v: fn() };\n  }\n  return ref.current.v;\n}\n\n/**\n * @param callback\n */\nexport function useEventCallback<E extends Event | React.SyntheticEvent>(\n  callback: (event: E, ...args: any[]) => void\n) {\n  const ref = useRef(callback);\n  useIsomorphicLayoutEffect(() => {\n    ref.current = callback;\n  });\n  return useCallback(\n    (event: E, ...args: any[]) => ref.current(event, ...args),\n    []\n  );\n}\n\n/**\n * @param callback\n */\nexport function useCallbackProp<F extends Function>(callback: F | undefined) {\n  const ref = useRef(callback);\n  useEffect(() => {\n    ref.current = callback;\n  });\n  return (useCallback(\n    (...args: any[]) => ref.current && ref.current(...args),\n    []\n  ) as unknown) as F;\n}\n\n/**\n * Adds a DOM event listener\n *\n * @param eventName\n * @param listener\n * @param element\n */\nexport function useEventListener<K extends keyof WindowEventMap>(\n  eventName: K,\n  listener: (event: WindowEventMap[K]) => any,\n  element: HTMLElement | Document | Window | EventTarget = window\n) {\n  const savedHandler = useRef(listener);\n  useEffect(() => {\n    savedHandler.current = listener;\n  }, [listener]);\n\n  useEffect(() => {\n    const isSupported = element && element.addEventListener;\n    if (!isSupported) {\n      if (__DEV__) {\n        console.warn(\"Event listener not supported on the element provided\");\n      }\n      return;\n    }\n\n    function eventListener(event: WindowEventMap[K]) {\n      savedHandler.current(event);\n    }\n\n    element.addEventListener(eventName, eventListener as any);\n    return () => {\n      element.removeEventListener(eventName, eventListener as any);\n    };\n  }, [eventName, element]);\n}\n\n/**\n * Detect when focus changes in our document.\n *\n * @param handleChange\n * @param when\n * @param ownerDocument\n */\nexport function useFocusChange(\n  handleChange: (\n    activeElement: Element | null,\n    previousActiveElement: Element | null,\n    event?: FocusEvent\n  ) => void = console.log,\n  when: \"focus\" | \"blur\" = \"focus\",\n  ownerDocument: Document = document\n) {\n  let lastActiveElement = useRef(ownerDocument.activeElement);\n\n  useEffect(() => {\n    lastActiveElement.current = ownerDocument.activeElement;\n\n    function onChange(event: FocusEvent) {\n      if (lastActiveElement.current !== ownerDocument.activeElement) {\n        handleChange(\n          ownerDocument.activeElement,\n          lastActiveElement.current,\n          event\n        );\n        lastActiveElement.current = ownerDocument.activeElement;\n      }\n    }\n\n    ownerDocument.addEventListener(when, onChange, true);\n\n    return () => {\n      ownerDocument.removeEventListener(when, onChange);\n    };\n  }, [when, handleChange, ownerDocument]);\n}\n\n/**\n * Passes or assigns a value to multiple refs (typically a DOM node). Useful for\n * dealing with components that need an explicit ref for DOM calculations but\n * also forwards refs assigned by an app.\n *\n * @param refs Refs to fork\n */\nexport function useForkedRef<RefValueType = any>(\n  ...refs: (AssignableRef<RefValueType> | null | undefined)[]\n) {\n  return useMemo(() => {\n    if (refs.every((ref) => ref == null)) {\n      return null;\n    }\n    return (node: any) => {\n      refs.forEach((ref) => {\n        assignRef(ref, node);\n      });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [...refs]);\n}\n\n/**\n * Returns the previous value of a reference after a component update.\n *\n * @param value\n */\nexport function usePrevious<ValueType = any>(value: ValueType) {\n  const ref = useRef<ValueType | null>(null);\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n\n/**\n * Call an effect after a component update, skipping the initial mount.\n *\n * @param effect Effect to call\n * @param deps Effect dependency list\n */\nexport function useUpdateEffect(\n  effect: React.EffectCallback,\n  deps?: React.DependencyList\n) {\n  const mounted = useRef(false);\n  useEffect(() => {\n    if (mounted.current) {\n      effect();\n    } else {\n      mounted.current = true;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n}\n\n/**\n * Just a lil state logger\n *\n * @param state\n * @param DEBUG\n */\nlet useStateLogger: (state: string, DEBUG: boolean) => void = noop;\n\nif (__DEV__) {\n  useStateLogger = function useStateLogger(state, DEBUG = false) {\n    let debugRef = useRef(DEBUG);\n    useEffect(() => {\n      debugRef.current = DEBUG;\n    }, [DEBUG]);\n    useEffect(() => {\n      if (debugRef.current) {\n        console.group(\"State Updated\");\n        console.log(\n          \"%c\" + state,\n          \"font-weight: normal; font-size: 120%; font-style: italic;\"\n        );\n        console.groupEnd();\n      }\n    }, [state]);\n  };\n}\n\nexport { useStateLogger };\n\n/**\n * Wraps a lib-defined event handler and a user-defined event handler, returning\n * a single handler that allows a user to prevent lib-defined handlers from\n * firing.\n *\n * @param theirHandler User-supplied event handler\n * @param ourHandler Library-supplied event handler\n */\nexport function wrapEvent<EventType extends React.SyntheticEvent | Event>(\n  theirHandler: ((event: EventType) => any) | undefined,\n  ourHandler: (event: EventType) => any\n): (event: EventType) => any {\n  return (event) => {\n    theirHandler && theirHandler(event);\n    if (!event.defaultPrevented) {\n      return ourHandler(event);\n    }\n  };\n}\n\n// Export types\nexport {\n  As,\n  AssignableRef,\n  ComponentWithAs,\n  ComponentWithForwardedRef,\n  DistributiveOmit,\n  ElementByTag,\n  ElementTagNameMap,\n  ForwardRefExoticComponentWithAs,\n  FunctionComponentWithAs,\n  MemoExoticComponentWithAs,\n  PropsFromAs,\n  PropsWithAs,\n  SingleOrArray,\n  ThenArg,\n};\n"],
  "mappings": "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",
  "names": ["useIsomorphicLayoutEffect", "canUseDOM", "React", "useLayoutEffect", "useEffect", "checkedPkgs", "checkStyles", "noop", "process", "env", "NODE_ENV", "packageName", "parseInt", "window", "getComputedStyle", "document", "body", "getPropertyValue", "console", "warn", "ponyfillGlobal", "Math", "self", "Function", "assignRef", "ref", "value", "isFunction", "current", "error", "Error", "boolOrBoolString", "isBoolean", "createElement", "cloneValidElement", "element", "props", "children", "isValidElement", "cloneElement", "createNamedContext", "name", "defaultValue", "Ctx", "createContext", "displayName", "forwardRefWithAs", "render", "forwardRef", "memoWithAs", "Component", "propsAreEqual", "memo", "getElementComputedStyle", "element", "styleProp", "y", "doc", "getOwnerDocument", "currentStyle", "defaultView", "isFunction", "getComputedStyle", "getPropertyValue", "ownerDocument", "canUseDOM", "document", "isBoolean", "value", "isFunction", "toString", "call", "isNumber", "makeId", "args", "filter", "val", "join", "noop", "useControlledState", "controlledValue", "defaultValue", "controlledRef", "useRef", "useState", "valueState", "setValue", "set", "useCallback", "n", "current", "useControlledSwitchWarning", "noop", "controlledPropName", "componentName", "nameCache", "useEffect", "wasControlled", "isControlled", "console", "error", "useCheckStyles", "pkg", "name", "checkStyles", "useEventCallback", "callback", "ref", "useRef", "useIsomorphicLayoutEffect", "current", "useCallback", "event", "args", "useForkedRef", "refs", "useMemo", "every", "ref", "node", "forEach", "assignRef", "usePrevious", "value", "useRef", "useEffect", "current", "useUpdateEffect", "effect", "deps", "mounted", "useStateLogger", "noop", "state", "DEBUG", "debugRef", "console", "group", "log", "groupEnd", "wrapEvent", "theirHandler", "ourHandler", "event", "defaultPrevented"]
}
