{
  "version": 3,
  "sources": ["../../../../validation/node_modules/ipaddr.js/lib/ipaddr.js"],
  "sourcesContent": ["(function (root) {\n    'use strict';\n    // A list of regular expressions that match arbitrary IPv4 addresses,\n    // for which a number of weird notations exist.\n    // Note that an address like 0010.0xa5.1.1 is considered legal.\n    const ipv4Part = '(0?\\\\d+|0x[a-f0-9]+)';\n    const ipv4Regexes = {\n        fourOctet: new RegExp(`^${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}$`, 'i'),\n        threeOctet: new RegExp(`^${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}$`, 'i'),\n        twoOctet: new RegExp(`^${ipv4Part}\\\\.${ipv4Part}$`, 'i'),\n        longValue: new RegExp(`^${ipv4Part}$`, 'i')\n    };\n\n    // Regular Expression for checking Octal numbers\n    const octalRegex = new RegExp(`^0[0-7]+$`, 'i');\n    const hexRegex = new RegExp(`^0x[a-f0-9]+$`, 'i');\n\n    const zoneIndex = '%[0-9a-z]{1,}';\n\n    // IPv6-matching regular expressions.\n    // For IPv6, the task is simpler: it is enough to match the colon-delimited\n    // hexadecimal IPv6 and a transitional variant with dotted-decimal IPv4 at\n    // the end.\n    const ipv6Part = '(?:[0-9a-f]+::?)+';\n    const ipv6Regexes = {\n        zoneIndex: new RegExp(zoneIndex, 'i'),\n        'native': new RegExp(`^(::)?(${ipv6Part})?([0-9a-f]+)?(::)?(${zoneIndex})?$`, 'i'),\n        deprecatedTransitional: new RegExp(`^(?:::)(${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}(${zoneIndex})?)$`, 'i'),\n        transitional: new RegExp(`^((?:${ipv6Part})|(?:::)(?:${ipv6Part})?)${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}(${zoneIndex})?$`, 'i')\n    };\n\n    // Expand :: in an IPv6 address or address part consisting of `parts` groups.\n    function expandIPv6 (string, parts) {\n        // More than one '::' means invalid adddress\n        if (string.indexOf('::') !== string.lastIndexOf('::')) {\n            return null;\n        }\n\n        let colonCount = 0;\n        let lastColon = -1;\n        let zoneId = (string.match(ipv6Regexes.zoneIndex) || [])[0];\n        let replacement, replacementCount;\n\n        // Remove zone index and save it for later\n        if (zoneId) {\n            zoneId = zoneId.substring(1);\n            string = string.replace(/%.+$/, '');\n        }\n\n        // How many parts do we already have?\n        while ((lastColon = string.indexOf(':', lastColon + 1)) >= 0) {\n            colonCount++;\n        }\n\n        // 0::0 is two parts more than ::\n        if (string.substr(0, 2) === '::') {\n            colonCount--;\n        }\n\n        if (string.substr(-2, 2) === '::') {\n            colonCount--;\n        }\n\n        // The following loop would hang if colonCount > parts\n        if (colonCount > parts) {\n            return null;\n        }\n\n        // replacement = ':' + '0:' * (parts - colonCount)\n        replacementCount = parts - colonCount;\n        replacement = ':';\n        while (replacementCount--) {\n            replacement += '0:';\n        }\n\n        // Insert the missing zeroes\n        string = string.replace('::', replacement);\n\n        // Trim any garbage which may be hanging around if :: was at the edge in\n        // the source strin\n        if (string[0] === ':') {\n            string = string.slice(1);\n        }\n\n        if (string[string.length - 1] === ':') {\n            string = string.slice(0, -1);\n        }\n\n        parts = (function () {\n            const ref = string.split(':');\n            const results = [];\n\n            for (let i = 0; i < ref.length; i++) {\n                results.push(parseInt(ref[i], 16));\n            }\n\n            return results;\n        })();\n\n        return {\n            parts: parts,\n            zoneId: zoneId\n        };\n    }\n\n    // A generic CIDR (Classless Inter-Domain Routing) RFC1518 range matcher.\n    function matchCIDR (first, second, partSize, cidrBits) {\n        if (first.length !== second.length) {\n            throw new Error('ipaddr: cannot match CIDR for objects with different lengths');\n        }\n\n        let part = 0;\n        let shift;\n\n        while (cidrBits > 0) {\n            shift = partSize - cidrBits;\n            if (shift < 0) {\n                shift = 0;\n            }\n\n            if (first[part] >> shift !== second[part] >> shift) {\n                return false;\n            }\n\n            cidrBits -= partSize;\n            part += 1;\n        }\n\n        return true;\n    }\n\n    function parseIntAuto (string) {\n        // Hexadedimal base 16 (0x#)\n        if (hexRegex.test(string)) {\n            return parseInt(string, 16);\n        }\n        // While octal representation is discouraged by ECMAScript 3\n        // and forbidden by ECMAScript 5, we silently allow it to\n        // work only if the rest of the string has numbers less than 8.\n        if (string[0] === '0' && !isNaN(parseInt(string[1], 10))) {\n        if (octalRegex.test(string)) {\n            return parseInt(string, 8);\n        }\n            throw new Error(`ipaddr: cannot parse ${string} as octal`);\n        }\n        // Always include the base 10 radix!\n        return parseInt(string, 10);\n    }\n\n    function padPart (part, length) {\n        while (part.length < length) {\n            part = `0${part}`;\n        }\n\n        return part;\n    }\n\n    const ipaddr = {};\n\n    // An IPv4 address (RFC791).\n    ipaddr.IPv4 = (function () {\n        // Constructs a new IPv4 address from an array of four octets\n        // in network order (MSB first)\n        // Verifies the input.\n        function IPv4 (octets) {\n            if (octets.length !== 4) {\n                throw new Error('ipaddr: ipv4 octet count should be 4');\n            }\n\n            let i, octet;\n\n            for (i = 0; i < octets.length; i++) {\n                octet = octets[i];\n                if (!((0 <= octet && octet <= 255))) {\n                    throw new Error('ipaddr: ipv4 octet should fit in 8 bits');\n                }\n            }\n\n            this.octets = octets;\n        }\n\n        // Special IPv4 address ranges.\n        // See also https://en.wikipedia.org/wiki/Reserved_IP_addresses\n        IPv4.prototype.SpecialRanges = {\n            unspecified: [[new IPv4([0, 0, 0, 0]), 8]],\n            broadcast: [[new IPv4([255, 255, 255, 255]), 32]],\n            // RFC3171\n            multicast: [[new IPv4([224, 0, 0, 0]), 4]],\n            // RFC3927\n            linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],\n            // RFC5735\n            loopback: [[new IPv4([127, 0, 0, 0]), 8]],\n            // RFC6598\n            carrierGradeNat: [[new IPv4([100, 64, 0, 0]), 10]],\n            // RFC1918\n            'private': [\n                [new IPv4([10, 0, 0, 0]), 8],\n                [new IPv4([172, 16, 0, 0]), 12],\n                [new IPv4([192, 168, 0, 0]), 16]\n            ],\n            // Reserved and testing-only ranges; RFCs 5735, 5737, 2544, 1700\n            reserved: [\n                [new IPv4([192, 0, 0, 0]), 24],\n                [new IPv4([192, 0, 2, 0]), 24],\n                [new IPv4([192, 88, 99, 0]), 24],\n                [new IPv4([198, 51, 100, 0]), 24],\n                [new IPv4([203, 0, 113, 0]), 24],\n                [new IPv4([240, 0, 0, 0]), 4]\n            ]\n        };\n\n        // The 'kind' method exists on both IPv4 and IPv6 classes.\n        IPv4.prototype.kind = function () {\n            return 'ipv4';\n        };\n\n        // Checks if this address matches other one within given CIDR range.\n        IPv4.prototype.match = function (other, cidrRange) {\n            let ref;\n            if (cidrRange === undefined) {\n                ref = other;\n                other = ref[0];\n                cidrRange = ref[1];\n            }\n\n            if (other.kind() !== 'ipv4') {\n                throw new Error('ipaddr: cannot match ipv4 address with non-ipv4 one');\n            }\n\n            return matchCIDR(this.octets, other.octets, 8, cidrRange);\n        };\n\n        // returns a number of leading ones in IPv4 address, making sure that\n        // the rest is a solid sequence of 0's (valid netmask)\n        // returns either the CIDR length or null if mask is not valid\n        IPv4.prototype.prefixLengthFromSubnetMask = function () {\n            let cidr = 0;\n            // non-zero encountered stop scanning for zeroes\n            let stop = false;\n            // number of zeroes in octet\n            const zerotable = {\n                0: 8,\n                128: 7,\n                192: 6,\n                224: 5,\n                240: 4,\n                248: 3,\n                252: 2,\n                254: 1,\n                255: 0\n            };\n            let i, octet, zeros;\n\n            for (i = 3; i >= 0; i -= 1) {\n                octet = this.octets[i];\n                if (octet in zerotable) {\n                    zeros = zerotable[octet];\n                    if (stop && zeros !== 0) {\n                        return null;\n                    }\n\n                    if (zeros !== 8) {\n                        stop = true;\n                    }\n\n                    cidr += zeros;\n                } else {\n                    return null;\n                }\n            }\n\n            return 32 - cidr;\n        };\n\n        // Checks if the address corresponds to one of the special ranges.\n        IPv4.prototype.range = function () {\n            return ipaddr.subnetMatch(this, this.SpecialRanges);\n        };\n\n        // Returns an array of byte-sized values in network order (MSB first)\n        IPv4.prototype.toByteArray = function () {\n            return this.octets.slice(0);\n        };\n\n        // Converts this IPv4 address to an IPv4-mapped IPv6 address.\n        IPv4.prototype.toIPv4MappedAddress = function () {\n            return ipaddr.IPv6.parse(`::ffff:${this.toString()}`);\n        };\n\n        // Symmetrical method strictly for aligning with the IPv6 methods.\n        IPv4.prototype.toNormalizedString = function () {\n            return this.toString();\n        };\n\n        // Returns the address in convenient, decimal-dotted format.\n        IPv4.prototype.toString = function () {\n            return this.octets.join('.');\n        };\n\n        return IPv4;\n    })();\n\n    // A utility function to return broadcast address given the IPv4 interface and prefix length in CIDR notation\n    ipaddr.IPv4.broadcastAddressFromCIDR = function (string) {\n\n        try {\n            const cidr = this.parseCIDR(string);\n            const ipInterfaceOctets = cidr[0].toByteArray();\n            const subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n            const octets = [];\n            let i = 0;\n            while (i < 4) {\n                // Broadcast address is bitwise OR between ip interface and inverted mask\n                octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);\n                i++;\n            }\n\n            return new this(octets);\n        } catch (e) {\n            throw new Error('ipaddr: the address does not have IPv4 CIDR format');\n        }\n    };\n\n    // Checks if a given string is formatted like IPv4 address.\n    ipaddr.IPv4.isIPv4 = function (string) {\n        return this.parser(string) !== null;\n    };\n\n    // Checks if a given string is a valid IPv4 address.\n    ipaddr.IPv4.isValid = function (string) {\n        try {\n            new this(this.parser(string));\n            return true;\n        } catch (e) {\n            return false;\n        }\n    };\n\n    // Checks if a given string is a full four-part IPv4 Address.\n    ipaddr.IPv4.isValidFourPartDecimal = function (string) {\n        if (ipaddr.IPv4.isValid(string) && string.match(/^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){3}$/)) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    // A utility function to return network address given the IPv4 interface and prefix length in CIDR notation\n    ipaddr.IPv4.networkAddressFromCIDR = function (string) {\n        let cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;\n\n        try {\n            cidr = this.parseCIDR(string);\n            ipInterfaceOctets = cidr[0].toByteArray();\n            subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n            octets = [];\n            i = 0;\n            while (i < 4) {\n                // Network address is bitwise AND between ip interface and mask\n                octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));\n                i++;\n            }\n\n            return new this(octets);\n        } catch (e) {\n            throw new Error('ipaddr: the address does not have IPv4 CIDR format');\n        }\n    };\n\n    // Tries to parse and validate a string with IPv4 address.\n    // Throws an error if it fails.\n    ipaddr.IPv4.parse = function (string) {\n        const parts = this.parser(string);\n\n        if (parts === null) {\n            throw new Error('ipaddr: string is not formatted like an IPv4 Address');\n        }\n\n        return new this(parts);\n    };\n\n    // Parses the string as an IPv4 Address with CIDR Notation.\n    ipaddr.IPv4.parseCIDR = function (string) {\n        let match;\n\n        if ((match = string.match(/^(.+)\\/(\\d+)$/))) {\n            const maskLength = parseInt(match[2]);\n            if (maskLength >= 0 && maskLength <= 32) {\n                const parsed = [this.parse(match[1]), maskLength];\n                Object.defineProperty(parsed, 'toString', {\n                    value: function () {\n                        return this.join('/');\n                    }\n                });\n                return parsed;\n            }\n        }\n\n        throw new Error('ipaddr: string is not formatted like an IPv4 CIDR range');\n    };\n\n    // Classful variants (like a.b, where a is an octet, and b is a 24-bit\n    // value representing last three octets; this corresponds to a class C\n    // address) are omitted due to classless nature of modern Internet.\n    ipaddr.IPv4.parser = function (string) {\n        let match, part, value;\n\n        // parseInt recognizes all that octal & hexadecimal weirdness for us\n        if ((match = string.match(ipv4Regexes.fourOctet))) {\n            return (function () {\n                const ref = match.slice(1, 6);\n                const results = [];\n\n                for (let i = 0; i < ref.length; i++) {\n                    part = ref[i];\n                    results.push(parseIntAuto(part));\n                }\n\n                return results;\n            })();\n        } else if ((match = string.match(ipv4Regexes.longValue))) {\n            value = parseIntAuto(match[1]);\n            if (value > 0xffffffff || value < 0) {\n                throw new Error('ipaddr: address outside defined range');\n            }\n\n            return ((function () {\n                const results = [];\n                let shift;\n\n                for (shift = 0; shift <= 24; shift += 8) {\n                    results.push((value >> shift) & 0xff);\n                }\n\n                return results;\n            })()).reverse();\n        } else if ((match = string.match(ipv4Regexes.twoOctet))) {\n            return (function () {\n                const ref = match.slice(1, 4);\n                const results = [];\n\n                value = parseIntAuto(ref[1]);\n                if (value > 0xffffff || value < 0) {\n                    throw new Error('ipaddr: address outside defined range');\n                }\n\n                results.push(parseIntAuto(ref[0]));\n                results.push((value >> 16) & 0xff);\n                results.push((value >>  8) & 0xff);\n                results.push( value        & 0xff);\n\n                return results;\n            })();\n        } else if ((match = string.match(ipv4Regexes.threeOctet))) {\n            return (function () {\n                const ref = match.slice(1, 5);\n                const results = [];\n\n                value = parseIntAuto(ref[2]);\n                if (value > 0xffff || value < 0) {\n                    throw new Error('ipaddr: address outside defined range');\n                }\n\n                results.push(parseIntAuto(ref[0]));\n                results.push(parseIntAuto(ref[1]));\n                results.push((value >> 8) & 0xff);\n                results.push( value       & 0xff);\n\n                return results;\n            })();\n        } else {\n            return null;\n        }\n    };\n\n    // A utility function to return subnet mask in IPv4 format given the prefix length\n    ipaddr.IPv4.subnetMaskFromPrefixLength = function (prefix) {\n        prefix = parseInt(prefix);\n        if (prefix < 0 || prefix > 32) {\n            throw new Error('ipaddr: invalid IPv4 prefix length');\n        }\n\n        const octets = [0, 0, 0, 0];\n        let j = 0;\n        const filledOctetCount = Math.floor(prefix / 8);\n\n        while (j < filledOctetCount) {\n            octets[j] = 255;\n            j++;\n        }\n\n        if (filledOctetCount < 4) {\n            octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - (prefix % 8);\n        }\n\n        return new this(octets);\n    };\n\n    // An IPv6 address (RFC2460)\n    ipaddr.IPv6 = (function () {\n        // Constructs an IPv6 address from an array of eight 16 - bit parts\n        // or sixteen 8 - bit parts in network order(MSB first).\n        // Throws an error if the input is invalid.\n        function IPv6 (parts, zoneId) {\n            let i, part;\n\n            if (parts.length === 16) {\n                this.parts = [];\n                for (i = 0; i <= 14; i += 2) {\n                    this.parts.push((parts[i] << 8) | parts[i + 1]);\n                }\n            } else if (parts.length === 8) {\n                this.parts = parts;\n            } else {\n                throw new Error('ipaddr: ipv6 part count should be 8 or 16');\n            }\n\n            for (i = 0; i < this.parts.length; i++) {\n                part = this.parts[i];\n                if (!((0 <= part && part <= 0xffff))) {\n                    throw new Error('ipaddr: ipv6 part should fit in 16 bits');\n                }\n            }\n\n            if (zoneId) {\n                this.zoneId = zoneId;\n            }\n        }\n\n        // Special IPv6 ranges\n        IPv6.prototype.SpecialRanges = {\n            // RFC4291, here and after\n            unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],\n            linkLocal: [new IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 0]), 10],\n            multicast: [new IPv6([0xff00, 0, 0, 0, 0, 0, 0, 0]), 8],\n            loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],\n            uniqueLocal: [new IPv6([0xfc00, 0, 0, 0, 0, 0, 0, 0]), 7],\n            ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 0xffff, 0, 0]), 96],\n            // RFC6145\n            rfc6145: [new IPv6([0, 0, 0, 0, 0xffff, 0, 0, 0]), 96],\n            // RFC6052\n            rfc6052: [new IPv6([0x64, 0xff9b, 0, 0, 0, 0, 0, 0]), 96],\n            // RFC3056\n            '6to4': [new IPv6([0x2002, 0, 0, 0, 0, 0, 0, 0]), 16],\n            // RFC6052, RFC6146\n            teredo: [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 32],\n            // RFC4291\n            reserved: [[new IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32]]\n        };\n\n        // Checks if this address is an IPv4-mapped IPv6 address.\n        IPv6.prototype.isIPv4MappedAddress = function () {\n            return this.range() === 'ipv4Mapped';\n        };\n\n        // The 'kind' method exists on both IPv4 and IPv6 classes.\n        IPv6.prototype.kind = function () {\n            return 'ipv6';\n        };\n\n        // Checks if this address matches other one within given CIDR range.\n        IPv6.prototype.match = function (other, cidrRange) {\n            let ref;\n\n            if (cidrRange === undefined) {\n                ref = other;\n                other = ref[0];\n                cidrRange = ref[1];\n            }\n\n            if (other.kind() !== 'ipv6') {\n                throw new Error('ipaddr: cannot match ipv6 address with non-ipv6 one');\n            }\n\n            return matchCIDR(this.parts, other.parts, 16, cidrRange);\n        };\n\n        // returns a number of leading ones in IPv6 address, making sure that\n        // the rest is a solid sequence of 0's (valid netmask)\n        // returns either the CIDR length or null if mask is not valid\n        IPv6.prototype.prefixLengthFromSubnetMask = function () {\n            let cidr = 0;\n            // non-zero encountered stop scanning for zeroes\n            let stop = false;\n            // number of zeroes in octet\n            const zerotable = {\n                0: 16,\n                32768: 15,\n                49152: 14,\n                57344: 13,\n                61440: 12,\n                63488: 11,\n                64512: 10,\n                65024: 9,\n                65280: 8,\n                65408: 7,\n                65472: 6,\n                65504: 5,\n                65520: 4,\n                65528: 3,\n                65532: 2,\n                65534: 1,\n                65535: 0\n            };\n            let part, zeros;\n\n            for (let i = 7; i >= 0; i -= 1) {\n                part = this.parts[i];\n                if (part in zerotable) {\n                    zeros = zerotable[part];\n                    if (stop && zeros !== 0) {\n                        return null;\n                    }\n\n                    if (zeros !== 16) {\n                        stop = true;\n                    }\n\n                    cidr += zeros;\n                } else {\n                    return null;\n                }\n            }\n\n            return 128 - cidr;\n        };\n\n\n        // Checks if the address corresponds to one of the special ranges.\n        IPv6.prototype.range = function () {\n            return ipaddr.subnetMatch(this, this.SpecialRanges);\n        };\n\n        // Returns an array of byte-sized values in network order (MSB first)\n        IPv6.prototype.toByteArray = function () {\n            let part;\n            const bytes = [];\n            const ref = this.parts;\n            for (let i = 0; i < ref.length; i++) {\n                part = ref[i];\n                bytes.push(part >> 8);\n                bytes.push(part & 0xff);\n            }\n\n            return bytes;\n        };\n\n        // Returns the address in expanded format with all zeroes included, like\n        // 2001:0db8:0008:0066:0000:0000:0000:0001\n        IPv6.prototype.toFixedLengthString = function () {\n            const addr = ((function () {\n                const results = [];\n                for (let i = 0; i < this.parts.length; i++) {\n                    results.push(padPart(this.parts[i].toString(16), 4));\n                }\n\n                return results;\n            }).call(this)).join(':');\n\n            let suffix = '';\n\n            if (this.zoneId) {\n                suffix = `%${this.zoneId}`;\n            }\n\n            return addr + suffix;\n        };\n\n        // Converts this address to IPv4 address if it is an IPv4-mapped IPv6 address.\n        // Throws an error otherwise.\n        IPv6.prototype.toIPv4Address = function () {\n            if (!this.isIPv4MappedAddress()) {\n                throw new Error('ipaddr: trying to convert a generic ipv6 address to ipv4');\n            }\n\n            const ref = this.parts.slice(-2);\n            const high = ref[0];\n            const low = ref[1];\n\n            return new ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff]);\n        };\n\n        // Returns the address in expanded format with all zeroes included, like\n        // 2001:db8:8:66:0:0:0:1\n        //\n        // Deprecated: use toFixedLengthString() instead.\n        IPv6.prototype.toNormalizedString = function () {\n            const addr = ((function () {\n                const results = [];\n\n                for (let i = 0; i < this.parts.length; i++) {\n                    results.push(this.parts[i].toString(16));\n                }\n\n                return results;\n            }).call(this)).join(':');\n\n            let suffix = '';\n\n            if (this.zoneId) {\n                suffix = `%${this.zoneId}`;\n            }\n\n            return addr + suffix;\n        };\n\n        // Returns the address in compact, human-readable format like\n        // 2001:db8:8:66::1\n        // in line with RFC 5952 (see https://tools.ietf.org/html/rfc5952#section-4)\n        IPv6.prototype.toRFC5952String = function () {\n            const regex = /((^|:)(0(:|$)){2,})/g;\n            const string = this.toNormalizedString();\n            let bestMatchIndex = 0;\n            let bestMatchLength = -1;\n            let match;\n\n            while ((match = regex.exec(string))) {\n                if (match[0].length > bestMatchLength) {\n                    bestMatchIndex = match.index;\n                    bestMatchLength = match[0].length;\n                }\n            }\n\n            if (bestMatchLength < 0) {\n                return string;\n            }\n\n            return `${string.substring(0, bestMatchIndex)}::${string.substring(bestMatchIndex + bestMatchLength)}`;\n        };\n\n        // Returns the address in compact, human-readable format like\n        // 2001:db8:8:66::1\n        //\n        // Deprecated: use toRFC5952String() instead.\n        IPv6.prototype.toString = function () {\n            // Replace the first sequence of 1 or more '0' parts with '::'\n            return this.toNormalizedString().replace(/((^|:)(0(:|$))+)/, '::');\n        };\n\n        return IPv6;\n\n    })();\n\n    // A utility function to return broadcast address given the IPv6 interface and prefix length in CIDR notation\n    ipaddr.IPv6.broadcastAddressFromCIDR = function (string) {\n        try {\n            const cidr = this.parseCIDR(string);\n            const ipInterfaceOctets = cidr[0].toByteArray();\n            const subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n            const octets = [];\n            let i = 0;\n            while (i < 16) {\n                // Broadcast address is bitwise OR between ip interface and inverted mask\n                octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);\n                i++;\n            }\n\n            return new this(octets);\n        } catch (e) {\n            throw new Error(`ipaddr: the address does not have IPv6 CIDR format (${e})`);\n        }\n    };\n\n    // Checks if a given string is formatted like IPv6 address.\n    ipaddr.IPv6.isIPv6 = function (string) {\n        return this.parser(string) !== null;\n    };\n\n    // Checks to see if string is a valid IPv6 Address\n    ipaddr.IPv6.isValid = function (string) {\n\n        // Since IPv6.isValid is always called first, this shortcut\n        // provides a substantial performance gain.\n        if (typeof string === 'string' && string.indexOf(':') === -1) {\n            return false;\n        }\n\n        try {\n            const addr = this.parser(string);\n            new this(addr.parts, addr.zoneId);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    };\n\n    // A utility function to return network address given the IPv6 interface and prefix length in CIDR notation\n    ipaddr.IPv6.networkAddressFromCIDR = function (string) {\n        let cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;\n\n        try {\n            cidr = this.parseCIDR(string);\n            ipInterfaceOctets = cidr[0].toByteArray();\n            subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n            octets = [];\n            i = 0;\n            while (i < 16) {\n                // Network address is bitwise AND between ip interface and mask\n                octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));\n                i++;\n            }\n\n            return new this(octets);\n        } catch (e) {\n            throw new Error(`ipaddr: the address does not have IPv6 CIDR format (${e})`);\n        }\n    };\n\n    // Tries to parse and validate a string with IPv6 address.\n    // Throws an error if it fails.\n    ipaddr.IPv6.parse = function (string) {\n        const addr = this.parser(string);\n\n        if (addr.parts === null) {\n            throw new Error('ipaddr: string is not formatted like an IPv6 Address');\n        }\n\n        return new this(addr.parts, addr.zoneId);\n    };\n\n    ipaddr.IPv6.parseCIDR = function (string) {\n        let maskLength, match, parsed;\n\n        if ((match = string.match(/^(.+)\\/(\\d+)$/))) {\n            maskLength = parseInt(match[2]);\n            if (maskLength >= 0 && maskLength <= 128) {\n                parsed = [this.parse(match[1]), maskLength];\n                Object.defineProperty(parsed, 'toString', {\n                    value: function () {\n                        return this.join('/');\n                    }\n                });\n                return parsed;\n            }\n        }\n\n        throw new Error('ipaddr: string is not formatted like an IPv6 CIDR range');\n    };\n\n    // Parse an IPv6 address.\n    ipaddr.IPv6.parser = function (string) {\n        let addr, i, match, octet, octets, zoneId;\n\n        if ((match = string.match(ipv6Regexes.deprecatedTransitional))) {\n            return this.parser(`::ffff:${match[1]}`);\n        }\n        if (ipv6Regexes.native.test(string)) {\n            return expandIPv6(string, 8);\n        }\n        if ((match = string.match(ipv6Regexes.transitional))) {\n            zoneId = match[6] || '';\n            addr = expandIPv6(match[1].slice(0, -1) + zoneId, 6);\n            if (addr.parts) {\n                octets = [\n                    parseInt(match[2]),\n                    parseInt(match[3]),\n                    parseInt(match[4]),\n                    parseInt(match[5])\n                ];\n                for (i = 0; i < octets.length; i++) {\n                    octet = octets[i];\n                    if (!((0 <= octet && octet <= 255))) {\n                        return null;\n                    }\n                }\n\n                addr.parts.push(octets[0] << 8 | octets[1]);\n                addr.parts.push(octets[2] << 8 | octets[3]);\n                return {\n                    parts: addr.parts,\n                    zoneId: addr.zoneId\n                };\n            }\n        }\n\n        return null;\n    };\n\n    // A utility function to return subnet mask in IPv6 format given the prefix length\n    ipaddr.IPv6.subnetMaskFromPrefixLength = function (prefix) {\n        prefix = parseInt(prefix);\n        if (prefix < 0 || prefix > 128) {\n            throw new Error('ipaddr: invalid IPv6 prefix length');\n        }\n\n        const octets = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        let j = 0;\n        const filledOctetCount = Math.floor(prefix / 8);\n\n        while (j < filledOctetCount) {\n            octets[j] = 255;\n            j++;\n        }\n\n        if (filledOctetCount < 16) {\n            octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - (prefix % 8);\n        }\n\n        return new this(octets);\n    };\n\n    // Try to parse an array in network order (MSB first) for IPv4 and IPv6\n    ipaddr.fromByteArray = function (bytes) {\n        const length = bytes.length;\n\n        if (length === 4) {\n            return new ipaddr.IPv4(bytes);\n        } else if (length === 16) {\n            return new ipaddr.IPv6(bytes);\n        } else {\n            throw new Error('ipaddr: the binary input is neither an IPv6 nor IPv4 address');\n        }\n    };\n\n    // Checks if the address is valid IP address\n    ipaddr.isValid = function (string) {\n        return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);\n    };\n\n\n    // Attempts to parse an IP Address, first through IPv6 then IPv4.\n    // Throws an error if it could not be parsed.\n    ipaddr.parse = function (string) {\n        if (ipaddr.IPv6.isValid(string)) {\n            return ipaddr.IPv6.parse(string);\n        } else if (ipaddr.IPv4.isValid(string)) {\n            return ipaddr.IPv4.parse(string);\n        } else {\n            throw new Error('ipaddr: the address has neither IPv6 nor IPv4 format');\n        }\n    };\n\n    // Attempt to parse CIDR notation, first through IPv6 then IPv4.\n    // Throws an error if it could not be parsed.\n    ipaddr.parseCIDR = function (string) {\n        try {\n            return ipaddr.IPv6.parseCIDR(string);\n        } catch (e) {\n            try {\n                return ipaddr.IPv4.parseCIDR(string);\n            } catch (e2) {\n                throw new Error('ipaddr: the address has neither IPv6 nor IPv4 CIDR format');\n            }\n        }\n    };\n\n    // Parse an address and return plain IPv4 address if it is an IPv4-mapped address\n    ipaddr.process = function (string) {\n        const addr = this.parse(string);\n\n        if (addr.kind() === 'ipv6' && addr.isIPv4MappedAddress()) {\n            return addr.toIPv4Address();\n        } else {\n            return addr;\n        }\n    };\n\n    // An utility function to ease named range matching. See examples below.\n    // rangeList can contain both IPv4 and IPv6 subnet entries and will not throw errors\n    // on matching IPv4 addresses to IPv6 ranges or vice versa.\n    ipaddr.subnetMatch = function (address, rangeList, defaultName) {\n        let i, rangeName, rangeSubnets, subnet;\n\n        if (defaultName === undefined || defaultName === null) {\n            defaultName = 'unicast';\n        }\n\n        for (rangeName in rangeList) {\n            if (Object.prototype.hasOwnProperty.call(rangeList, rangeName)) {\n                rangeSubnets = rangeList[rangeName];\n                // ECMA5 Array.isArray isn't available everywhere\n                if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {\n                    rangeSubnets = [rangeSubnets];\n                }\n\n                for (i = 0; i < rangeSubnets.length; i++) {\n                    subnet = rangeSubnets[i];\n                    if (address.kind() === subnet[0].kind() && address.match.apply(address, subnet)) {\n                        return rangeName;\n                    }\n                }\n            }\n        }\n\n        return defaultName;\n    };\n\n    // Export for both the CommonJS and browser-like environment\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = ipaddr;\n\n    } else {\n        root.ipaddr = ipaddr;\n    }\n\n}(this));\n"],
  "mappings": ";;;;;AAAA;AAAA;AAAA,KAAC,SAAU,MAAM;AACb;AAIA,YAAM,WAAW;AACjB,YAAM,cAAc;AAAA,QAChB,WAAW,IAAI,OAAO,IAAI,cAAc,cAAc,cAAc,aAAa,GAAG;AAAA,QACpF,YAAY,IAAI,OAAO,IAAI,cAAc,cAAc,aAAa,GAAG;AAAA,QACvE,UAAU,IAAI,OAAO,IAAI,cAAc,aAAa,GAAG;AAAA,QACvD,WAAW,IAAI,OAAO,IAAI,aAAa,GAAG;AAAA,MAC9C;AAGA,YAAM,aAAa,IAAI,OAAO,aAAa,GAAG;AAC9C,YAAM,WAAW,IAAI,OAAO,iBAAiB,GAAG;AAEhD,YAAM,YAAY;AAMlB,YAAM,WAAW;AACjB,YAAM,cAAc;AAAA,QAChB,WAAW,IAAI,OAAO,WAAW,GAAG;AAAA,QACpC,UAAU,IAAI,OAAO,UAAU,+BAA+B,gBAAgB,GAAG;AAAA,QACjF,wBAAwB,IAAI,OAAO,WAAW,cAAc,cAAc,cAAc,YAAY,iBAAiB,GAAG;AAAA,QACxH,cAAc,IAAI,OAAO,QAAQ,sBAAsB,cAAc,cAAc,cAAc,cAAc,YAAY,gBAAgB,GAAG;AAAA,MAClJ;AAGA,eAAS,WAAY,QAAQ,OAAO;AAEhC,YAAI,OAAO,QAAQ,IAAI,MAAM,OAAO,YAAY,IAAI,GAAG;AACnD,iBAAO;AAAA,QACX;AAEA,YAAI,aAAa;AACjB,YAAI,YAAY;AAChB,YAAI,UAAU,OAAO,MAAM,YAAY,SAAS,KAAK,CAAC,GAAG,CAAC;AAC1D,YAAI,aAAa;AAGjB,YAAI,QAAQ;AACR,mBAAS,OAAO,UAAU,CAAC;AAC3B,mBAAS,OAAO,QAAQ,QAAQ,EAAE;AAAA,QACtC;AAGA,gBAAQ,YAAY,OAAO,QAAQ,KAAK,YAAY,CAAC,MAAM,GAAG;AAC1D;AAAA,QACJ;AAGA,YAAI,OAAO,OAAO,GAAG,CAAC,MAAM,MAAM;AAC9B;AAAA,QACJ;AAEA,YAAI,OAAO,OAAO,IAAI,CAAC,MAAM,MAAM;AAC/B;AAAA,QACJ;AAGA,YAAI,aAAa,OAAO;AACpB,iBAAO;AAAA,QACX;AAGA,2BAAmB,QAAQ;AAC3B,sBAAc;AACd,eAAO,oBAAoB;AACvB,yBAAe;AAAA,QACnB;AAGA,iBAAS,OAAO,QAAQ,MAAM,WAAW;AAIzC,YAAI,OAAO,CAAC,MAAM,KAAK;AACnB,mBAAS,OAAO,MAAM,CAAC;AAAA,QAC3B;AAEA,YAAI,OAAO,OAAO,SAAS,CAAC,MAAM,KAAK;AACnC,mBAAS,OAAO,MAAM,GAAG,EAAE;AAAA,QAC/B;AAEA,gBAAS,WAAY;AACjB,gBAAM,MAAM,OAAO,MAAM,GAAG;AAC5B,gBAAM,UAAU,CAAC;AAEjB,mBAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACjC,oBAAQ,KAAK,SAAS,IAAI,CAAC,GAAG,EAAE,CAAC;AAAA,UACrC;AAEA,iBAAO;AAAA,QACX,EAAG;AAEH,eAAO;AAAA,UACH;AAAA,UACA;AAAA,QACJ;AAAA,MACJ;AAGA,eAAS,UAAW,OAAO,QAAQ,UAAU,UAAU;AACnD,YAAI,MAAM,WAAW,OAAO,QAAQ;AAChC,gBAAM,IAAI,MAAM,8DAA8D;AAAA,QAClF;AAEA,YAAI,OAAO;AACX,YAAI;AAEJ,eAAO,WAAW,GAAG;AACjB,kBAAQ,WAAW;AACnB,cAAI,QAAQ,GAAG;AACX,oBAAQ;AAAA,UACZ;AAEA,cAAI,MAAM,IAAI,KAAK,UAAU,OAAO,IAAI,KAAK,OAAO;AAChD,mBAAO;AAAA,UACX;AAEA,sBAAY;AACZ,kBAAQ;AAAA,QACZ;AAEA,eAAO;AAAA,MACX;AAEA,eAAS,aAAc,QAAQ;AAE3B,YAAI,SAAS,KAAK,MAAM,GAAG;AACvB,iBAAO,SAAS,QAAQ,EAAE;AAAA,QAC9B;AAIA,YAAI,OAAO,CAAC,MAAM,OAAO,CAAC,MAAM,SAAS,OAAO,CAAC,GAAG,EAAE,CAAC,GAAG;AAC1D,cAAI,WAAW,KAAK,MAAM,GAAG;AACzB,mBAAO,SAAS,QAAQ,CAAC;AAAA,UAC7B;AACI,gBAAM,IAAI,MAAM,wBAAwB,iBAAiB;AAAA,QAC7D;AAEA,eAAO,SAAS,QAAQ,EAAE;AAAA,MAC9B;AAEA,eAAS,QAAS,MAAM,QAAQ;AAC5B,eAAO,KAAK,SAAS,QAAQ;AACzB,iBAAO,IAAI;AAAA,QACf;AAEA,eAAO;AAAA,MACX;AAEA,YAAM,SAAS,CAAC;AAGhB,aAAO,OAAQ,WAAY;AAIvB,iBAAS,KAAM,QAAQ;AACnB,cAAI,OAAO,WAAW,GAAG;AACrB,kBAAM,IAAI,MAAM,sCAAsC;AAAA,UAC1D;AAEA,cAAI,GAAG;AAEP,eAAK,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AAChC,oBAAQ,OAAO,CAAC;AAChB,gBAAI,EAAG,KAAK,SAAS,SAAS,MAAO;AACjC,oBAAM,IAAI,MAAM,yCAAyC;AAAA,YAC7D;AAAA,UACJ;AAEA,eAAK,SAAS;AAAA,QAClB;AAIA,aAAK,UAAU,gBAAgB;AAAA,UAC3B,aAAa,CAAC,CAAC,IAAI,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AAAA,UACzC,WAAW,CAAC,CAAC,IAAI,KAAK,CAAC,KAAK,KAAK,KAAK,GAAG,CAAC,GAAG,EAAE,CAAC;AAAA;AAAA,UAEhD,WAAW,CAAC,CAAC,IAAI,KAAK,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AAAA;AAAA,UAEzC,WAAW,CAAC,CAAC,IAAI,KAAK,CAAC,KAAK,KAAK,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;AAAA;AAAA,UAE5C,UAAU,CAAC,CAAC,IAAI,KAAK,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AAAA;AAAA,UAExC,iBAAiB,CAAC,CAAC,IAAI,KAAK,CAAC,KAAK,IAAI,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;AAAA;AAAA,UAEjD,WAAW;AAAA,YACP,CAAC,IAAI,KAAK,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC;AAAA,YAC3B,CAAC,IAAI,KAAK,CAAC,KAAK,IAAI,GAAG,CAAC,CAAC,GAAG,EAAE;AAAA,YAC9B,CAAC,IAAI,KAAK,CAAC,KAAK,KAAK,GAAG,CAAC,CAAC,GAAG,EAAE;AAAA,UACnC;AAAA;AAAA,UAEA,UAAU;AAAA,YACN,CAAC,IAAI,KAAK,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE;AAAA,YAC7B,CAAC,IAAI,KAAK,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE;AAAA,YAC7B,CAAC,IAAI,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,GAAG,EAAE;AAAA,YAC/B,CAAC,IAAI,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,CAAC,GAAG,EAAE;AAAA,YAChC,CAAC,IAAI,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,GAAG,EAAE;AAAA,YAC/B,CAAC,IAAI,KAAK,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC;AAAA,UAChC;AAAA,QACJ;AAGA,aAAK,UAAU,OAAO,WAAY;AAC9B,iBAAO;AAAA,QACX;AAGA,aAAK,UAAU,QAAQ,SAAU,OAAO,WAAW;AAC/C,cAAI;AACJ,cAAI,cAAc,QAAW;AACzB,kBAAM;AACN,oBAAQ,IAAI,CAAC;AACb,wBAAY,IAAI,CAAC;AAAA,UACrB;AAEA,cAAI,MAAM,KAAK,MAAM,QAAQ;AACzB,kBAAM,IAAI,MAAM,qDAAqD;AAAA,UACzE;AAEA,iBAAO,UAAU,KAAK,QAAQ,MAAM,QAAQ,GAAG,SAAS;AAAA,QAC5D;AAKA,aAAK,UAAU,6BAA6B,WAAY;AACpD,cAAI,OAAO;AAEX,cAAI,OAAO;AAEX,gBAAM,YAAY;AAAA,YACd,GAAG;AAAA,YACH,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,UACT;AACA,cAAI,GAAG,OAAO;AAEd,eAAK,IAAI,GAAG,KAAK,GAAG,KAAK,GAAG;AACxB,oBAAQ,KAAK,OAAO,CAAC;AACrB,gBAAI,SAAS,WAAW;AACpB,sBAAQ,UAAU,KAAK;AACvB,kBAAI,QAAQ,UAAU,GAAG;AACrB,uBAAO;AAAA,cACX;AAEA,kBAAI,UAAU,GAAG;AACb,uBAAO;AAAA,cACX;AAEA,sBAAQ;AAAA,YACZ,OAAO;AACH,qBAAO;AAAA,YACX;AAAA,UACJ;AAEA,iBAAO,KAAK;AAAA,QAChB;AAGA,aAAK,UAAU,QAAQ,WAAY;AAC/B,iBAAO,OAAO,YAAY,MAAM,KAAK,aAAa;AAAA,QACtD;AAGA,aAAK,UAAU,cAAc,WAAY;AACrC,iBAAO,KAAK,OAAO,MAAM,CAAC;AAAA,QAC9B;AAGA,aAAK,UAAU,sBAAsB,WAAY;AAC7C,iBAAO,OAAO,KAAK,MAAM,UAAU,KAAK,SAAS,GAAG;AAAA,QACxD;AAGA,aAAK,UAAU,qBAAqB,WAAY;AAC5C,iBAAO,KAAK,SAAS;AAAA,QACzB;AAGA,aAAK,UAAU,WAAW,WAAY;AAClC,iBAAO,KAAK,OAAO,KAAK,GAAG;AAAA,QAC/B;AAEA,eAAO;AAAA,MACX,EAAG;AAGH,aAAO,KAAK,2BAA2B,SAAU,QAAQ;AAErD,YAAI;AACA,gBAAM,OAAO,KAAK,UAAU,MAAM;AAClC,gBAAM,oBAAoB,KAAK,CAAC,EAAE,YAAY;AAC9C,gBAAM,mBAAmB,KAAK,2BAA2B,KAAK,CAAC,CAAC,EAAE,YAAY;AAC9E,gBAAM,SAAS,CAAC;AAChB,cAAI,IAAI;AACR,iBAAO,IAAI,GAAG;AAEV,mBAAO,KAAK,SAAS,kBAAkB,CAAC,GAAG,EAAE,IAAI,SAAS,iBAAiB,CAAC,GAAG,EAAE,IAAI,GAAG;AACxF;AAAA,UACJ;AAEA,iBAAO,IAAI,KAAK,MAAM;AAAA,QAC1B,SAAS,GAAP;AACE,gBAAM,IAAI,MAAM,oDAAoD;AAAA,QACxE;AAAA,MACJ;AAGA,aAAO,KAAK,SAAS,SAAU,QAAQ;AACnC,eAAO,KAAK,OAAO,MAAM,MAAM;AAAA,MACnC;AAGA,aAAO,KAAK,UAAU,SAAU,QAAQ;AACpC,YAAI;AACA,cAAI,KAAK,KAAK,OAAO,MAAM,CAAC;AAC5B,iBAAO;AAAA,QACX,SAAS,GAAP;AACE,iBAAO;AAAA,QACX;AAAA,MACJ;AAGA,aAAO,KAAK,yBAAyB,SAAU,QAAQ;AACnD,YAAI,OAAO,KAAK,QAAQ,MAAM,KAAK,OAAO,MAAM,mCAAmC,GAAG;AAClF,iBAAO;AAAA,QACX,OAAO;AACH,iBAAO;AAAA,QACX;AAAA,MACJ;AAGA,aAAO,KAAK,yBAAyB,SAAU,QAAQ;AACnD,YAAI,MAAM,GAAG,mBAAmB,QAAQ;AAExC,YAAI;AACA,iBAAO,KAAK,UAAU,MAAM;AAC5B,8BAAoB,KAAK,CAAC,EAAE,YAAY;AACxC,6BAAmB,KAAK,2BAA2B,KAAK,CAAC,CAAC,EAAE,YAAY;AACxE,mBAAS,CAAC;AACV,cAAI;AACJ,iBAAO,IAAI,GAAG;AAEV,mBAAO,KAAK,SAAS,kBAAkB,CAAC,GAAG,EAAE,IAAI,SAAS,iBAAiB,CAAC,GAAG,EAAE,CAAC;AAClF;AAAA,UACJ;AAEA,iBAAO,IAAI,KAAK,MAAM;AAAA,QAC1B,SAAS,GAAP;AACE,gBAAM,IAAI,MAAM,oDAAoD;AAAA,QACxE;AAAA,MACJ;AAIA,aAAO,KAAK,QAAQ,SAAU,QAAQ;AAClC,cAAM,QAAQ,KAAK,OAAO,MAAM;AAEhC,YAAI,UAAU,MAAM;AAChB,gBAAM,IAAI,MAAM,sDAAsD;AAAA,QAC1E;AAEA,eAAO,IAAI,KAAK,KAAK;AAAA,MACzB;AAGA,aAAO,KAAK,YAAY,SAAU,QAAQ;AACtC,YAAI;AAEJ,YAAK,QAAQ,OAAO,MAAM,eAAe,GAAI;AACzC,gBAAM,aAAa,SAAS,MAAM,CAAC,CAAC;AACpC,cAAI,cAAc,KAAK,cAAc,IAAI;AACrC,kBAAM,SAAS,CAAC,KAAK,MAAM,MAAM,CAAC,CAAC,GAAG,UAAU;AAChD,mBAAO,eAAe,QAAQ,YAAY;AAAA,cACtC,OAAO,WAAY;AACf,uBAAO,KAAK,KAAK,GAAG;AAAA,cACxB;AAAA,YACJ,CAAC;AACD,mBAAO;AAAA,UACX;AAAA,QACJ;AAEA,cAAM,IAAI,MAAM,yDAAyD;AAAA,MAC7E;AAKA,aAAO,KAAK,SAAS,SAAU,QAAQ;AACnC,YAAI,OAAO,MAAM;AAGjB,YAAK,QAAQ,OAAO,MAAM,YAAY,SAAS,GAAI;AAC/C,iBAAQ,WAAY;AAChB,kBAAM,MAAM,MAAM,MAAM,GAAG,CAAC;AAC5B,kBAAM,UAAU,CAAC;AAEjB,qBAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACjC,qBAAO,IAAI,CAAC;AACZ,sBAAQ,KAAK,aAAa,IAAI,CAAC;AAAA,YACnC;AAEA,mBAAO;AAAA,UACX,EAAG;AAAA,QACP,WAAY,QAAQ,OAAO,MAAM,YAAY,SAAS,GAAI;AACtD,kBAAQ,aAAa,MAAM,CAAC,CAAC;AAC7B,cAAI,QAAQ,cAAc,QAAQ,GAAG;AACjC,kBAAM,IAAI,MAAM,uCAAuC;AAAA,UAC3D;AAEA,iBAAS,WAAY;AACjB,kBAAM,UAAU,CAAC;AACjB,gBAAI;AAEJ,iBAAK,QAAQ,GAAG,SAAS,IAAI,SAAS,GAAG;AACrC,sBAAQ,KAAM,SAAS,QAAS,GAAI;AAAA,YACxC;AAEA,mBAAO;AAAA,UACX,EAAG,EAAG,QAAQ;AAAA,QAClB,WAAY,QAAQ,OAAO,MAAM,YAAY,QAAQ,GAAI;AACrD,iBAAQ,WAAY;AAChB,kBAAM,MAAM,MAAM,MAAM,GAAG,CAAC;AAC5B,kBAAM,UAAU,CAAC;AAEjB,oBAAQ,aAAa,IAAI,CAAC,CAAC;AAC3B,gBAAI,QAAQ,YAAY,QAAQ,GAAG;AAC/B,oBAAM,IAAI,MAAM,uCAAuC;AAAA,YAC3D;AAEA,oBAAQ,KAAK,aAAa,IAAI,CAAC,CAAC,CAAC;AACjC,oBAAQ,KAAM,SAAS,KAAM,GAAI;AACjC,oBAAQ,KAAM,SAAU,IAAK,GAAI;AACjC,oBAAQ,KAAM,QAAe,GAAI;AAEjC,mBAAO;AAAA,UACX,EAAG;AAAA,QACP,WAAY,QAAQ,OAAO,MAAM,YAAY,UAAU,GAAI;AACvD,iBAAQ,WAAY;AAChB,kBAAM,MAAM,MAAM,MAAM,GAAG,CAAC;AAC5B,kBAAM,UAAU,CAAC;AAEjB,oBAAQ,aAAa,IAAI,CAAC,CAAC;AAC3B,gBAAI,QAAQ,SAAU,QAAQ,GAAG;AAC7B,oBAAM,IAAI,MAAM,uCAAuC;AAAA,YAC3D;AAEA,oBAAQ,KAAK,aAAa,IAAI,CAAC,CAAC,CAAC;AACjC,oBAAQ,KAAK,aAAa,IAAI,CAAC,CAAC,CAAC;AACjC,oBAAQ,KAAM,SAAS,IAAK,GAAI;AAChC,oBAAQ,KAAM,QAAc,GAAI;AAEhC,mBAAO;AAAA,UACX,EAAG;AAAA,QACP,OAAO;AACH,iBAAO;AAAA,QACX;AAAA,MACJ;AAGA,aAAO,KAAK,6BAA6B,SAAU,QAAQ;AACvD,iBAAS,SAAS,MAAM;AACxB,YAAI,SAAS,KAAK,SAAS,IAAI;AAC3B,gBAAM,IAAI,MAAM,oCAAoC;AAAA,QACxD;AAEA,cAAM,SAAS,CAAC,GAAG,GAAG,GAAG,CAAC;AAC1B,YAAI,IAAI;AACR,cAAM,mBAAmB,KAAK,MAAM,SAAS,CAAC;AAE9C,eAAO,IAAI,kBAAkB;AACzB,iBAAO,CAAC,IAAI;AACZ;AAAA,QACJ;AAEA,YAAI,mBAAmB,GAAG;AACtB,iBAAO,gBAAgB,IAAI,KAAK,IAAI,GAAG,SAAS,CAAC,IAAI,KAAK,IAAK,SAAS;AAAA,QAC5E;AAEA,eAAO,IAAI,KAAK,MAAM;AAAA,MAC1B;AAGA,aAAO,OAAQ,WAAY;AAIvB,iBAAS,KAAM,OAAO,QAAQ;AAC1B,cAAI,GAAG;AAEP,cAAI,MAAM,WAAW,IAAI;AACrB,iBAAK,QAAQ,CAAC;AACd,iBAAK,IAAI,GAAG,KAAK,IAAI,KAAK,GAAG;AACzB,mBAAK,MAAM,KAAM,MAAM,CAAC,KAAK,IAAK,MAAM,IAAI,CAAC,CAAC;AAAA,YAClD;AAAA,UACJ,WAAW,MAAM,WAAW,GAAG;AAC3B,iBAAK,QAAQ;AAAA,UACjB,OAAO;AACH,kBAAM,IAAI,MAAM,2CAA2C;AAAA,UAC/D;AAEA,eAAK,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACpC,mBAAO,KAAK,MAAM,CAAC;AACnB,gBAAI,EAAG,KAAK,QAAQ,QAAQ,QAAU;AAClC,oBAAM,IAAI,MAAM,yCAAyC;AAAA,YAC7D;AAAA,UACJ;AAEA,cAAI,QAAQ;AACR,iBAAK,SAAS;AAAA,UAClB;AAAA,QACJ;AAGA,aAAK,UAAU,gBAAgB;AAAA;AAAA,UAE3B,aAAa,CAAC,IAAI,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG;AAAA,UACrD,WAAW,CAAC,IAAI,KAAK,CAAC,OAAQ,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE;AAAA,UACvD,WAAW,CAAC,IAAI,KAAK,CAAC,OAAQ,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC;AAAA,UACtD,UAAU,CAAC,IAAI,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG;AAAA,UAClD,aAAa,CAAC,IAAI,KAAK,CAAC,OAAQ,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC;AAAA,UACxD,YAAY,CAAC,IAAI,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,OAAQ,GAAG,CAAC,CAAC,GAAG,EAAE;AAAA;AAAA,UAExD,SAAS,CAAC,IAAI,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,OAAQ,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE;AAAA;AAAA,UAErD,SAAS,CAAC,IAAI,KAAK,CAAC,KAAM,OAAQ,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE;AAAA;AAAA,UAExD,QAAQ,CAAC,IAAI,KAAK,CAAC,MAAQ,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE;AAAA;AAAA,UAEpD,QAAQ,CAAC,IAAI,KAAK,CAAC,MAAQ,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE;AAAA;AAAA,UAEpD,UAAU,CAAC,CAAC,IAAI,KAAK,CAAC,MAAQ,MAAO,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;AAAA,QAChE;AAGA,aAAK,UAAU,sBAAsB,WAAY;AAC7C,iBAAO,KAAK,MAAM,MAAM;AAAA,QAC5B;AAGA,aAAK,UAAU,OAAO,WAAY;AAC9B,iBAAO;AAAA,QACX;AAGA,aAAK,UAAU,QAAQ,SAAU,OAAO,WAAW;AAC/C,cAAI;AAEJ,cAAI,cAAc,QAAW;AACzB,kBAAM;AACN,oBAAQ,IAAI,CAAC;AACb,wBAAY,IAAI,CAAC;AAAA,UACrB;AAEA,cAAI,MAAM,KAAK,MAAM,QAAQ;AACzB,kBAAM,IAAI,MAAM,qDAAqD;AAAA,UACzE;AAEA,iBAAO,UAAU,KAAK,OAAO,MAAM,OAAO,IAAI,SAAS;AAAA,QAC3D;AAKA,aAAK,UAAU,6BAA6B,WAAY;AACpD,cAAI,OAAO;AAEX,cAAI,OAAO;AAEX,gBAAM,YAAY;AAAA,YACd,GAAG;AAAA,YACH,OAAO;AAAA,YACP,OAAO;AAAA,YACP,OAAO;AAAA,YACP,OAAO;AAAA,YACP,OAAO;AAAA,YACP,OAAO;AAAA,YACP,OAAO;AAAA,YACP,OAAO;AAAA,YACP,OAAO;AAAA,YACP,OAAO;AAAA,YACP,OAAO;AAAA,YACP,OAAO;AAAA,YACP,OAAO;AAAA,YACP,OAAO;AAAA,YACP,OAAO;AAAA,YACP,OAAO;AAAA,UACX;AACA,cAAI,MAAM;AAEV,mBAAS,IAAI,GAAG,KAAK,GAAG,KAAK,GAAG;AAC5B,mBAAO,KAAK,MAAM,CAAC;AACnB,gBAAI,QAAQ,WAAW;AACnB,sBAAQ,UAAU,IAAI;AACtB,kBAAI,QAAQ,UAAU,GAAG;AACrB,uBAAO;AAAA,cACX;AAEA,kBAAI,UAAU,IAAI;AACd,uBAAO;AAAA,cACX;AAEA,sBAAQ;AAAA,YACZ,OAAO;AACH,qBAAO;AAAA,YACX;AAAA,UACJ;AAEA,iBAAO,MAAM;AAAA,QACjB;AAIA,aAAK,UAAU,QAAQ,WAAY;AAC/B,iBAAO,OAAO,YAAY,MAAM,KAAK,aAAa;AAAA,QACtD;AAGA,aAAK,UAAU,cAAc,WAAY;AACrC,cAAI;AACJ,gBAAM,QAAQ,CAAC;AACf,gBAAM,MAAM,KAAK;AACjB,mBAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACjC,mBAAO,IAAI,CAAC;AACZ,kBAAM,KAAK,QAAQ,CAAC;AACpB,kBAAM,KAAK,OAAO,GAAI;AAAA,UAC1B;AAEA,iBAAO;AAAA,QACX;AAIA,aAAK,UAAU,sBAAsB,WAAY;AAC7C,gBAAM,OAAS,WAAY;AACvB,kBAAM,UAAU,CAAC;AACjB,qBAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACxC,sBAAQ,KAAK,QAAQ,KAAK,MAAM,CAAC,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC;AAAA,YACvD;AAEA,mBAAO;AAAA,UACX,EAAG,KAAK,IAAI,EAAG,KAAK,GAAG;AAEvB,cAAI,SAAS;AAEb,cAAI,KAAK,QAAQ;AACb,qBAAS,IAAI,KAAK;AAAA,UACtB;AAEA,iBAAO,OAAO;AAAA,QAClB;AAIA,aAAK,UAAU,gBAAgB,WAAY;AACvC,cAAI,CAAC,KAAK,oBAAoB,GAAG;AAC7B,kBAAM,IAAI,MAAM,0DAA0D;AAAA,UAC9E;AAEA,gBAAM,MAAM,KAAK,MAAM,MAAM,EAAE;AAC/B,gBAAM,OAAO,IAAI,CAAC;AAClB,gBAAM,MAAM,IAAI,CAAC;AAEjB,iBAAO,IAAI,OAAO,KAAK,CAAC,QAAQ,GAAG,OAAO,KAAM,OAAO,GAAG,MAAM,GAAI,CAAC;AAAA,QACzE;AAMA,aAAK,UAAU,qBAAqB,WAAY;AAC5C,gBAAM,OAAS,WAAY;AACvB,kBAAM,UAAU,CAAC;AAEjB,qBAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACxC,sBAAQ,KAAK,KAAK,MAAM,CAAC,EAAE,SAAS,EAAE,CAAC;AAAA,YAC3C;AAEA,mBAAO;AAAA,UACX,EAAG,KAAK,IAAI,EAAG,KAAK,GAAG;AAEvB,cAAI,SAAS;AAEb,cAAI,KAAK,QAAQ;AACb,qBAAS,IAAI,KAAK;AAAA,UACtB;AAEA,iBAAO,OAAO;AAAA,QAClB;AAKA,aAAK,UAAU,kBAAkB,WAAY;AACzC,gBAAM,QAAQ;AACd,gBAAM,SAAS,KAAK,mBAAmB;AACvC,cAAI,iBAAiB;AACrB,cAAI,kBAAkB;AACtB,cAAI;AAEJ,iBAAQ,QAAQ,MAAM,KAAK,MAAM,GAAI;AACjC,gBAAI,MAAM,CAAC,EAAE,SAAS,iBAAiB;AACnC,+BAAiB,MAAM;AACvB,gCAAkB,MAAM,CAAC,EAAE;AAAA,YAC/B;AAAA,UACJ;AAEA,cAAI,kBAAkB,GAAG;AACrB,mBAAO;AAAA,UACX;AAEA,iBAAO,GAAG,OAAO,UAAU,GAAG,cAAc,MAAM,OAAO,UAAU,iBAAiB,eAAe;AAAA,QACvG;AAMA,aAAK,UAAU,WAAW,WAAY;AAElC,iBAAO,KAAK,mBAAmB,EAAE,QAAQ,oBAAoB,IAAI;AAAA,QACrE;AAEA,eAAO;AAAA,MAEX,EAAG;AAGH,aAAO,KAAK,2BAA2B,SAAU,QAAQ;AACrD,YAAI;AACA,gBAAM,OAAO,KAAK,UAAU,MAAM;AAClC,gBAAM,oBAAoB,KAAK,CAAC,EAAE,YAAY;AAC9C,gBAAM,mBAAmB,KAAK,2BAA2B,KAAK,CAAC,CAAC,EAAE,YAAY;AAC9E,gBAAM,SAAS,CAAC;AAChB,cAAI,IAAI;AACR,iBAAO,IAAI,IAAI;AAEX,mBAAO,KAAK,SAAS,kBAAkB,CAAC,GAAG,EAAE,IAAI,SAAS,iBAAiB,CAAC,GAAG,EAAE,IAAI,GAAG;AACxF;AAAA,UACJ;AAEA,iBAAO,IAAI,KAAK,MAAM;AAAA,QAC1B,SAAS,GAAP;AACE,gBAAM,IAAI,MAAM,uDAAuD,IAAI;AAAA,QAC/E;AAAA,MACJ;AAGA,aAAO,KAAK,SAAS,SAAU,QAAQ;AACnC,eAAO,KAAK,OAAO,MAAM,MAAM;AAAA,MACnC;AAGA,aAAO,KAAK,UAAU,SAAU,QAAQ;AAIpC,YAAI,OAAO,WAAW,YAAY,OAAO,QAAQ,GAAG,MAAM,IAAI;AAC1D,iBAAO;AAAA,QACX;AAEA,YAAI;AACA,gBAAM,OAAO,KAAK,OAAO,MAAM;AAC/B,cAAI,KAAK,KAAK,OAAO,KAAK,MAAM;AAChC,iBAAO;AAAA,QACX,SAAS,GAAP;AACE,iBAAO;AAAA,QACX;AAAA,MACJ;AAGA,aAAO,KAAK,yBAAyB,SAAU,QAAQ;AACnD,YAAI,MAAM,GAAG,mBAAmB,QAAQ;AAExC,YAAI;AACA,iBAAO,KAAK,UAAU,MAAM;AAC5B,8BAAoB,KAAK,CAAC,EAAE,YAAY;AACxC,6BAAmB,KAAK,2BAA2B,KAAK,CAAC,CAAC,EAAE,YAAY;AACxE,mBAAS,CAAC;AACV,cAAI;AACJ,iBAAO,IAAI,IAAI;AAEX,mBAAO,KAAK,SAAS,kBAAkB,CAAC,GAAG,EAAE,IAAI,SAAS,iBAAiB,CAAC,GAAG,EAAE,CAAC;AAClF;AAAA,UACJ;AAEA,iBAAO,IAAI,KAAK,MAAM;AAAA,QAC1B,SAAS,GAAP;AACE,gBAAM,IAAI,MAAM,uDAAuD,IAAI;AAAA,QAC/E;AAAA,MACJ;AAIA,aAAO,KAAK,QAAQ,SAAU,QAAQ;AAClC,cAAM,OAAO,KAAK,OAAO,MAAM;AAE/B,YAAI,KAAK,UAAU,MAAM;AACrB,gBAAM,IAAI,MAAM,sDAAsD;AAAA,QAC1E;AAEA,eAAO,IAAI,KAAK,KAAK,OAAO,KAAK,MAAM;AAAA,MAC3C;AAEA,aAAO,KAAK,YAAY,SAAU,QAAQ;AACtC,YAAI,YAAY,OAAO;AAEvB,YAAK,QAAQ,OAAO,MAAM,eAAe,GAAI;AACzC,uBAAa,SAAS,MAAM,CAAC,CAAC;AAC9B,cAAI,cAAc,KAAK,cAAc,KAAK;AACtC,qBAAS,CAAC,KAAK,MAAM,MAAM,CAAC,CAAC,GAAG,UAAU;AAC1C,mBAAO,eAAe,QAAQ,YAAY;AAAA,cACtC,OAAO,WAAY;AACf,uBAAO,KAAK,KAAK,GAAG;AAAA,cACxB;AAAA,YACJ,CAAC;AACD,mBAAO;AAAA,UACX;AAAA,QACJ;AAEA,cAAM,IAAI,MAAM,yDAAyD;AAAA,MAC7E;AAGA,aAAO,KAAK,SAAS,SAAU,QAAQ;AACnC,YAAI,MAAM,GAAG,OAAO,OAAO,QAAQ;AAEnC,YAAK,QAAQ,OAAO,MAAM,YAAY,sBAAsB,GAAI;AAC5D,iBAAO,KAAK,OAAO,UAAU,MAAM,CAAC,GAAG;AAAA,QAC3C;AACA,YAAI,YAAY,OAAO,KAAK,MAAM,GAAG;AACjC,iBAAO,WAAW,QAAQ,CAAC;AAAA,QAC/B;AACA,YAAK,QAAQ,OAAO,MAAM,YAAY,YAAY,GAAI;AAClD,mBAAS,MAAM,CAAC,KAAK;AACrB,iBAAO,WAAW,MAAM,CAAC,EAAE,MAAM,GAAG,EAAE,IAAI,QAAQ,CAAC;AACnD,cAAI,KAAK,OAAO;AACZ,qBAAS;AAAA,cACL,SAAS,MAAM,CAAC,CAAC;AAAA,cACjB,SAAS,MAAM,CAAC,CAAC;AAAA,cACjB,SAAS,MAAM,CAAC,CAAC;AAAA,cACjB,SAAS,MAAM,CAAC,CAAC;AAAA,YACrB;AACA,iBAAK,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AAChC,sBAAQ,OAAO,CAAC;AAChB,kBAAI,EAAG,KAAK,SAAS,SAAS,MAAO;AACjC,uBAAO;AAAA,cACX;AAAA,YACJ;AAEA,iBAAK,MAAM,KAAK,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,CAAC;AAC1C,iBAAK,MAAM,KAAK,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,CAAC;AAC1C,mBAAO;AAAA,cACH,OAAO,KAAK;AAAA,cACZ,QAAQ,KAAK;AAAA,YACjB;AAAA,UACJ;AAAA,QACJ;AAEA,eAAO;AAAA,MACX;AAGA,aAAO,KAAK,6BAA6B,SAAU,QAAQ;AACvD,iBAAS,SAAS,MAAM;AACxB,YAAI,SAAS,KAAK,SAAS,KAAK;AAC5B,gBAAM,IAAI,MAAM,oCAAoC;AAAA,QACxD;AAEA,cAAM,SAAS,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC9D,YAAI,IAAI;AACR,cAAM,mBAAmB,KAAK,MAAM,SAAS,CAAC;AAE9C,eAAO,IAAI,kBAAkB;AACzB,iBAAO,CAAC,IAAI;AACZ;AAAA,QACJ;AAEA,YAAI,mBAAmB,IAAI;AACvB,iBAAO,gBAAgB,IAAI,KAAK,IAAI,GAAG,SAAS,CAAC,IAAI,KAAK,IAAK,SAAS;AAAA,QAC5E;AAEA,eAAO,IAAI,KAAK,MAAM;AAAA,MAC1B;AAGA,aAAO,gBAAgB,SAAU,OAAO;AACpC,cAAM,SAAS,MAAM;AAErB,YAAI,WAAW,GAAG;AACd,iBAAO,IAAI,OAAO,KAAK,KAAK;AAAA,QAChC,WAAW,WAAW,IAAI;AACtB,iBAAO,IAAI,OAAO,KAAK,KAAK;AAAA,QAChC,OAAO;AACH,gBAAM,IAAI,MAAM,8DAA8D;AAAA,QAClF;AAAA,MACJ;AAGA,aAAO,UAAU,SAAU,QAAQ;AAC/B,eAAO,OAAO,KAAK,QAAQ,MAAM,KAAK,OAAO,KAAK,QAAQ,MAAM;AAAA,MACpE;AAKA,aAAO,QAAQ,SAAU,QAAQ;AAC7B,YAAI,OAAO,KAAK,QAAQ,MAAM,GAAG;AAC7B,iBAAO,OAAO,KAAK,MAAM,MAAM;AAAA,QACnC,WAAW,OAAO,KAAK,QAAQ,MAAM,GAAG;AACpC,iBAAO,OAAO,KAAK,MAAM,MAAM;AAAA,QACnC,OAAO;AACH,gBAAM,IAAI,MAAM,sDAAsD;AAAA,QAC1E;AAAA,MACJ;AAIA,aAAO,YAAY,SAAU,QAAQ;AACjC,YAAI;AACA,iBAAO,OAAO,KAAK,UAAU,MAAM;AAAA,QACvC,SAAS,GAAP;AACE,cAAI;AACA,mBAAO,OAAO,KAAK,UAAU,MAAM;AAAA,UACvC,SAAS,IAAP;AACE,kBAAM,IAAI,MAAM,2DAA2D;AAAA,UAC/E;AAAA,QACJ;AAAA,MACJ;AAGA,aAAO,UAAU,SAAU,QAAQ;AAC/B,cAAM,OAAO,KAAK,MAAM,MAAM;AAE9B,YAAI,KAAK,KAAK,MAAM,UAAU,KAAK,oBAAoB,GAAG;AACtD,iBAAO,KAAK,cAAc;AAAA,QAC9B,OAAO;AACH,iBAAO;AAAA,QACX;AAAA,MACJ;AAKA,aAAO,cAAc,SAAU,SAAS,WAAW,aAAa;AAC5D,YAAI,GAAG,WAAW,cAAc;AAEhC,YAAI,gBAAgB,UAAa,gBAAgB,MAAM;AACnD,wBAAc;AAAA,QAClB;AAEA,aAAK,aAAa,WAAW;AACzB,cAAI,OAAO,UAAU,eAAe,KAAK,WAAW,SAAS,GAAG;AAC5D,2BAAe,UAAU,SAAS;AAElC,gBAAI,aAAa,CAAC,KAAK,EAAE,aAAa,CAAC,aAAa,QAAQ;AACxD,6BAAe,CAAC,YAAY;AAAA,YAChC;AAEA,iBAAK,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AACtC,uBAAS,aAAa,CAAC;AACvB,kBAAI,QAAQ,KAAK,MAAM,OAAO,CAAC,EAAE,KAAK,KAAK,QAAQ,MAAM,MAAM,SAAS,MAAM,GAAG;AAC7E,uBAAO;AAAA,cACX;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAEA,eAAO;AAAA,MACX;AAGA,UAAI,OAAO,WAAW,eAAe,OAAO,SAAS;AACjD,eAAO,UAAU;AAAA,MAErB,OAAO;AACH,aAAK,SAAS;AAAA,MAClB;AAAA,IAEJ,GAAE,OAAI;AAAA;AAAA;",
  "names": []
}
