import {
  __commonJS
} from "./chunk-LFBQMW2U.js";

// ../../node_modules/tabbable/index.js
var require_tabbable = __commonJS({
  "../../node_modules/tabbable/index.js"(exports, module) {
    var candidateSelectors = [
      "input",
      "select",
      "textarea",
      "a[href]",
      "button",
      "[tabindex]",
      "audio[controls]",
      "video[controls]",
      '[contenteditable]:not([contenteditable="false"])'
    ];
    var candidateSelector = candidateSelectors.join(",");
    var matches = typeof Element === "undefined" ? function() {
    } : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
    function tabbable(el, options) {
      options = options || {};
      var regularTabbables = [];
      var orderedTabbables = [];
      var candidates = el.querySelectorAll(candidateSelector);
      if (options.includeContainer) {
        if (matches.call(el, candidateSelector)) {
          candidates = Array.prototype.slice.apply(candidates);
          candidates.unshift(el);
        }
      }
      var i, candidate, candidateTabindex;
      for (i = 0; i < candidates.length; i++) {
        candidate = candidates[i];
        if (!isNodeMatchingSelectorTabbable(candidate))
          continue;
        candidateTabindex = getTabindex(candidate);
        if (candidateTabindex === 0) {
          regularTabbables.push(candidate);
        } else {
          orderedTabbables.push({
            documentOrder: i,
            tabIndex: candidateTabindex,
            node: candidate
          });
        }
      }
      var tabbableNodes = orderedTabbables.sort(sortOrderedTabbables).map(function(a) {
        return a.node;
      }).concat(regularTabbables);
      return tabbableNodes;
    }
    tabbable.isTabbable = isTabbable;
    tabbable.isFocusable = isFocusable;
    function isNodeMatchingSelectorTabbable(node) {
      if (!isNodeMatchingSelectorFocusable(node) || isNonTabbableRadio(node) || getTabindex(node) < 0) {
        return false;
      }
      return true;
    }
    function isTabbable(node) {
      if (!node)
        throw new Error("No node provided");
      if (matches.call(node, candidateSelector) === false)
        return false;
      return isNodeMatchingSelectorTabbable(node);
    }
    function isNodeMatchingSelectorFocusable(node) {
      if (node.disabled || isHiddenInput(node) || isHidden(node)) {
        return false;
      }
      return true;
    }
    var focusableCandidateSelector = candidateSelectors.concat("iframe").join(",");
    function isFocusable(node) {
      if (!node)
        throw new Error("No node provided");
      if (matches.call(node, focusableCandidateSelector) === false)
        return false;
      return isNodeMatchingSelectorFocusable(node);
    }
    function getTabindex(node) {
      var tabindexAttr = parseInt(node.getAttribute("tabindex"), 10);
      if (!isNaN(tabindexAttr))
        return tabindexAttr;
      if (isContentEditable(node))
        return 0;
      return node.tabIndex;
    }
    function sortOrderedTabbables(a, b) {
      return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;
    }
    function isContentEditable(node) {
      return node.contentEditable === "true";
    }
    function isInput(node) {
      return node.tagName === "INPUT";
    }
    function isHiddenInput(node) {
      return isInput(node) && node.type === "hidden";
    }
    function isRadio(node) {
      return isInput(node) && node.type === "radio";
    }
    function isNonTabbableRadio(node) {
      return isRadio(node) && !isTabbableRadio(node);
    }
    function getCheckedRadio(nodes) {
      for (var i = 0; i < nodes.length; i++) {
        if (nodes[i].checked) {
          return nodes[i];
        }
      }
    }
    function isTabbableRadio(node) {
      if (!node.name)
        return true;
      var radioSet = node.ownerDocument.querySelectorAll('input[type="radio"][name="' + node.name + '"]');
      var checked = getCheckedRadio(radioSet);
      return !checked || checked === node;
    }
    function isHidden(node) {
      return node.offsetParent === null || getComputedStyle(node).visibility === "hidden";
    }
    module.exports = tabbable;
  }
});

// ../../node_modules/@reach/observe-rect/dist/observe-rect.esm.js
var props = ["bottom", "height", "left", "right", "top", "width"];
var rectChanged = function rectChanged2(a, b) {
  if (a === void 0) {
    a = {};
  }
  if (b === void 0) {
    b = {};
  }
  return props.some(function(prop) {
    return a[prop] !== b[prop];
  });
};
var observedNodes = /* @__PURE__ */ new Map();
var rafId;
var run = function run2() {
  var changedStates = [];
  observedNodes.forEach(function(state, node) {
    var newRect = node.getBoundingClientRect();
    if (rectChanged(newRect, state.rect)) {
      state.rect = newRect;
      changedStates.push(state);
    }
  });
  changedStates.forEach(function(state) {
    state.callbacks.forEach(function(cb) {
      return cb(state.rect);
    });
  });
  rafId = window.requestAnimationFrame(run2);
};
function observeRect(node, cb) {
  return {
    observe: function observe() {
      var wasEmpty = observedNodes.size === 0;
      if (observedNodes.has(node)) {
        observedNodes.get(node).callbacks.push(cb);
      } else {
        observedNodes.set(node, {
          rect: void 0,
          hasRectChanged: false,
          callbacks: [cb]
        });
      }
      if (wasEmpty)
        run();
    },
    unobserve: function unobserve() {
      var state = observedNodes.get(node);
      if (state) {
        var index = state.callbacks.indexOf(cb);
        if (index >= 0)
          state.callbacks.splice(index, 1);
        if (!state.callbacks.length)
          observedNodes["delete"](node);
        if (!observedNodes.size)
          cancelAnimationFrame(rafId);
      }
    }
  };
}
var observe_rect_esm_default = observeRect;

export {
  observe_rect_esm_default,
  require_tabbable
};
//# sourceMappingURL=chunk-LUXDPJAP.js.map
