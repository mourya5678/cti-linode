{
  "version": 3,
  "sources": ["../../src/operators/map.ts", "../../src/operator/map.ts", "../../src/add/operator/map.ts"],
  "sourcesContent": ["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n", "import { map as higherOrderMap } from '../operators/map';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(this: Observable<T>, project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  return higherOrderMap(project, thisArg)(this);\n}\n", "\nimport { Observable } from '../../Observable';\nimport { map } from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: typeof map;\n  }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AACA,QAAA,eAAA;AAqCA,aAAA,IAA0B,SAAyC,SAAa;AAC9E,aAAO,SAAA,aAAsB,QAAqB;AAChD,YAAI,OAAO,YAAY,YAAY;AACjC,gBAAM,IAAI,UAAU,4DAA4D;QAClF;AACA,eAAO,OAAO,KAAK,IAAI,YAAY,SAAS,OAAO,CAAC;MACtD;IACF;AAPgB,YAAA,MAAG;AASnB,QAAA,cAAA,WAAA;AACE,eAAAA,aAAoB,SAAiD,SAAY;AAA7D,aAAA,UAAA;AAAiD,aAAA,UAAA;MACrE;AAEA,MAAAA,aAAA,UAAA,OAAA,SAAK,YAA2B,QAAW;AACzC,eAAO,OAAO,UAAU,IAAI,cAAc,YAAY,KAAK,SAAS,KAAK,OAAO,CAAC;MACnF;AACF,aAAAA;IAAA,EAPA;AAAa,YAAA,cAAW;AAcxB,QAAA,gBAAA,SAAA,QAAA;AAAkC,gBAAAC,gBAAA,MAAA;AAIhC,eAAAA,eAAY,aACQ,SACR,SAAY;AACtB,eAAA,KAAA,MAAM,WAAW;AAFC,aAAA,UAAA;AAJpB,aAAA,QAAgB;AAOd,aAAK,UAAU,WAAW;MAC5B;AAIU,MAAAA,eAAA,UAAA,QAAV,SAAgB,OAAQ;AACtB,YAAI;AACJ,YAAI;AACF,mBAAS,KAAK,QAAQ,KAAK,KAAK,SAAS,OAAO,KAAK,OAAO;QAC9D,SAAS,KAAP;AACA,eAAK,YAAY,MAAM,GAAG;AAC1B;QACF;AACA,aAAK,YAAY,KAAK,MAAM;MAC9B;AACF,aAAAA;IAAA,EAvBkC,aAAA,UAAU;;;;;;;;AC7D5C,QAAAC,SAAA;AAoCA,aAAA,IAA+C,SAAyC,SAAa;AACnG,aAAOA,OAAA,IAAe,SAAS,OAAO,EAAE,IAAI;IAC9C;AAFgB,YAAA,MAAG;;;;;ACnCnB,IAAA,eAAA;AACA,IAAA,QAAA;AAEA,aAAA,WAAW,UAAU,MAAM,MAAA;",
  "names": ["MapOperator", "MapSubscriber", "map_1"]
}
