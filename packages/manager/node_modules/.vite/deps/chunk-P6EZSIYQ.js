import {
  require_warning
} from "./chunk-6GLVATRU.js";
import {
  require_react
} from "./chunk-CPU6GBAM.js";
import {
  __toESM
} from "./chunk-LFBQMW2U.js";

// ../../node_modules/@reach/utils/dist/utils.esm.js
var import_react = __toESM(require_react());
var import_warning = __toESM(require_warning());
var useIsomorphicLayoutEffect = canUseDOM() ? import_react.default.useLayoutEffect : import_react.default.useEffect;
var checkedPkgs = {};
var checkStyles = noop;
if (true) {
  _ref = typeof process !== "undefined" ? process : {
    env: {
      NODE_ENV: "development"
    }
  }, env = _ref.env;
  checkStyles = function checkStyles2(packageName) {
    if (checkedPkgs[packageName])
      return;
    checkedPkgs[packageName] = true;
    if (env.NODE_ENV !== "test" && parseInt(window.getComputedStyle(document.body).getPropertyValue("--reach-" + packageName), 10) !== 1) {
      console.warn("@reach/" + packageName + ' styles not found. If you are using a bundler like webpack or parcel include this in the entry file of your app before any of your own styles:\n\n    import "@reach/' + packageName + `/styles.css";

  Otherwise you'll need to include them some other way:

    <link rel="stylesheet" type="text/css" href="node_modules/@reach/` + packageName + '/styles.css" />\n\n  For more information visit https://ui.reach.tech/styling.\n  ');
    }
  };
}
var _ref;
var env;
var ponyfillGlobal = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : (
  // eslint-disable-next-line no-new-func
  Function("return this")()
);
function assignRef(ref, value) {
  if (ref == null)
    return;
  if (isFunction(ref)) {
    ref(value);
  } else {
    try {
      ref.current = value;
    } catch (error) {
      throw new Error('Cannot assign value "' + value + '" to ref "' + ref + '"');
    }
  }
}
function boolOrBoolString(value) {
  return value === "true" ? true : isBoolean(value) ? value : false;
}
function canUseDOM() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
function cloneValidElement(element, props) {
  for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    children[_key - 2] = arguments[_key];
  }
  return (0, import_react.isValidElement)(element) ? import_react.cloneElement.apply(void 0, [element, props].concat(children)) : element;
}
function createNamedContext(name, defaultValue) {
  var Ctx = (0, import_react.createContext)(defaultValue);
  Ctx.displayName = name;
  return Ctx;
}
function forwardRefWithAs(render) {
  return import_react.default.forwardRef(render);
}
function memoWithAs(Component, propsAreEqual) {
  return import_react.default.memo(Component, propsAreEqual);
}
function getElementComputedStyle(element, styleProp) {
  var y = null;
  var doc = getOwnerDocument(element);
  if (element.currentStyle) {
    y = element.currentStyle[styleProp];
  } else if (doc && doc.defaultView && isFunction(doc.defaultView.getComputedStyle)) {
    y = doc.defaultView.getComputedStyle(element, null).getPropertyValue(styleProp);
  }
  return y;
}
function getOwnerDocument(element) {
  return element && element.ownerDocument ? element.ownerDocument : canUseDOM() ? document : null;
}
function isBoolean(value) {
  return typeof value === "boolean";
}
function isFunction(value) {
  return !!(value && {}.toString.call(value) == "[object Function]");
}
function isNumber(value) {
  return typeof value === "number";
}
function makeId() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }
  return args.filter(function(val) {
    return val != null;
  }).join("--");
}
function noop() {
}
function useControlledState(controlledValue, defaultValue) {
  var controlledRef = (0, import_react.useRef)(controlledValue != null);
  var _useState = (0, import_react.useState)(defaultValue), valueState = _useState[0], setValue = _useState[1];
  var set = (0, import_react.useCallback)(function(n) {
    if (!controlledRef.current) {
      setValue(n);
    }
  }, []);
  return [controlledRef.current ? controlledValue : valueState, set];
}
var useControlledSwitchWarning = noop;
if (true) {
  useControlledSwitchWarning = function useControlledSwitchWarning2(controlledValue, controlledPropName, componentName) {
    var controlledRef = (0, import_react.useRef)(controlledValue != null);
    var nameCache = (0, import_react.useRef)({
      componentName,
      controlledPropName
    });
    (0, import_react.useEffect)(function() {
      nameCache.current = {
        componentName,
        controlledPropName
      };
    }, [componentName, controlledPropName]);
    (0, import_react.useEffect)(function() {
      var wasControlled = controlledRef.current;
      var _nameCache$current = nameCache.current, componentName2 = _nameCache$current.componentName, controlledPropName2 = _nameCache$current.controlledPropName;
      var isControlled = controlledValue != null;
      if (wasControlled !== isControlled) {
        console.error("A component is changing an " + (wasControlled ? "" : "un") + "controlled `" + controlledPropName2 + "` state of " + componentName2 + " to be " + (wasControlled ? "un" : "") + "controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled " + componentName2 + " element for the lifetime of the component.\nMore info: https://fb.me/react-controlled-components");
      }
    }, [controlledValue]);
  };
}
var useCheckStyles = noop;
if (true) {
  useCheckStyles = function useCheckStyles2(pkg) {
    var name = (0, import_react.useRef)(pkg);
    (0, import_react.useEffect)(function() {
      return void (name.current = pkg);
    }, [pkg]);
    (0, import_react.useEffect)(function() {
      return checkStyles(name.current);
    }, []);
  };
}
function useEventCallback(callback) {
  var ref = (0, import_react.useRef)(callback);
  useIsomorphicLayoutEffect(function() {
    ref.current = callback;
  });
  return (0, import_react.useCallback)(function(event) {
    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }
    return ref.current.apply(ref, [event].concat(args));
  }, []);
}
function useForkedRef() {
  for (var _len4 = arguments.length, refs = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    refs[_key4] = arguments[_key4];
  }
  return (0, import_react.useMemo)(function() {
    if (refs.every(function(ref) {
      return ref == null;
    })) {
      return null;
    }
    return function(node) {
      refs.forEach(function(ref) {
        assignRef(ref, node);
      });
    };
  }, [].concat(refs));
}
function usePrevious(value) {
  var ref = (0, import_react.useRef)(null);
  (0, import_react.useEffect)(function() {
    ref.current = value;
  }, [value]);
  return ref.current;
}
function useUpdateEffect(effect, deps) {
  var mounted = (0, import_react.useRef)(false);
  (0, import_react.useEffect)(function() {
    if (mounted.current) {
      effect();
    } else {
      mounted.current = true;
    }
  }, deps);
}
var useStateLogger = noop;
if (true) {
  useStateLogger = function useStateLogger2(state, DEBUG) {
    if (DEBUG === void 0) {
      DEBUG = false;
    }
    var debugRef = (0, import_react.useRef)(DEBUG);
    (0, import_react.useEffect)(function() {
      debugRef.current = DEBUG;
    }, [DEBUG]);
    (0, import_react.useEffect)(function() {
      if (debugRef.current) {
        console.group("State Updated");
        console.log("%c" + state, "font-weight: normal; font-size: 120%; font-style: italic;");
        console.groupEnd();
      }
    }, [state]);
  };
}
function wrapEvent(theirHandler, ourHandler) {
  return function(event) {
    theirHandler && theirHandler(event);
    if (!event.defaultPrevented) {
      return ourHandler(event);
    }
  };
}

export {
  useIsomorphicLayoutEffect,
  checkStyles,
  boolOrBoolString,
  cloneValidElement,
  createNamedContext,
  forwardRefWithAs,
  memoWithAs,
  getElementComputedStyle,
  getOwnerDocument,
  isFunction,
  isNumber,
  makeId,
  noop,
  useControlledState,
  useControlledSwitchWarning,
  useEventCallback,
  useForkedRef,
  usePrevious,
  useUpdateEffect,
  wrapEvent
};
//# sourceMappingURL=chunk-P6EZSIYQ.js.map
