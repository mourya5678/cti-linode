{"version":3,"file":"ldclient-common.min.js","sources":["../src/errors.js","../node_modules/base64-js/index.js","../node_modules/fast-deep-equal/index.js","../src/utils.js","../node_modules/uuid/lib/rng-browser.js","../node_modules/uuid/lib/bytesToUuid.js","../node_modules/uuid/v1.js","../src/loggers.js","../src/messages.js","../src/configuration.js","../src/headers.js","../src/EventSender.js","../src/EventProcessor.js","../src/EventSummarizer.js","../src/UserFilter.js","../src/EventEmitter.js","../src/InitializationState.js","../src/PersistentFlagStore.js","../src/PersistentStorage.js","../src/Stream.js","../src/Requestor.js","../src/promiseCoalescer.js","../src/UserValidator.js","../src/diagnosticEvents.js","../src/InspectorManager.js","../src/SafeInspector.js","../src/index.js","../src/Identity.js"],"sourcesContent":["function createCustomError(name) {\n  function CustomError(message, code) {\n    Error.captureStackTrace && Error.captureStackTrace(this, this.constructor);\n    this.message = message;\n    this.code = code;\n  }\n\n  CustomError.prototype = new Error();\n  CustomError.prototype.name = name;\n  CustomError.prototype.constructor = CustomError;\n\n  return CustomError;\n}\n\nexport const LDUnexpectedResponseError = createCustomError('LaunchDarklyUnexpectedResponseError');\nexport const LDInvalidEnvironmentIdError = createCustomError('LaunchDarklyInvalidEnvironmentIdError');\nexport const LDInvalidUserError = createCustomError('LaunchDarklyInvalidUserError');\nexport const LDInvalidEventKeyError = createCustomError('LaunchDarklyInvalidEventKeyError');\nexport const LDInvalidArgumentError = createCustomError('LaunchDarklyInvalidArgumentError');\nexport const LDFlagFetchError = createCustomError('LaunchDarklyFlagFetchError');\nexport const LDInvalidDataError = createCustomError('LaunchDarklyInvalidDataError');\n\nexport function isHttpErrorRecoverable(status) {\n  if (status >= 400 && status < 500) {\n    return status === 400 || status === 408 || status === 429;\n  }\n  return true;\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","'use strict';\n\nvar isArray = Array.isArray;\nvar keyList = Object.keys;\nvar hasProp = Object.prototype.hasOwnProperty;\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    var arrA = isArray(a)\n      , arrB = isArray(b)\n      , i\n      , length\n      , key;\n\n    if (arrA && arrB) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n    if (arrA != arrB) return false;\n\n    var dateA = a instanceof Date\n      , dateB = b instanceof Date;\n    if (dateA != dateB) return false;\n    if (dateA && dateB) return a.getTime() == b.getTime();\n\n    var regexpA = a instanceof RegExp\n      , regexpB = b instanceof RegExp;\n    if (regexpA != regexpB) return false;\n    if (regexpA && regexpB) return a.toString() == b.toString();\n\n    var keys = keyList(a);\n    length = keys.length;\n\n    if (length !== keyList(b).length)\n      return false;\n\n    for (i = length; i-- !== 0;)\n      if (!hasProp.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      key = keys[i];\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  return a!==a && b!==b;\n};\n","import * as base64 from 'base64-js';\nimport fastDeepEqual from 'fast-deep-equal';\n\nconst userAttrsToStringify = ['key', 'secondary', 'ip', 'country', 'email', 'firstName', 'lastName', 'avatar', 'name'];\n\nexport function appendUrlPath(baseUrl, path) {\n  // Ensure that URL concatenation is done correctly regardless of whether the\n  // base URL has a trailing slash or not.\n  const trimBaseUrl = baseUrl.endsWith('/') ? baseUrl.substring(0, baseUrl.length - 1) : baseUrl;\n  return trimBaseUrl + (path.startsWith('/') ? '' : '/') + path;\n}\n\n// See http://ecmanaut.blogspot.com/2006/07/encoding-decoding-utf8-in-javascript.html\nexport function btoa(s) {\n  const escaped = unescape(encodeURIComponent(s));\n  return base64.fromByteArray(stringToBytes(escaped));\n}\n\nfunction stringToBytes(s) {\n  const b = [];\n  for (let i = 0; i < s.length; i++) {\n    b.push(s.charCodeAt(i));\n  }\n  return b;\n}\n\nexport function base64URLEncode(s) {\n  return (\n    btoa(s)\n      // eslint-disable-next-line\n      .replace(/=/g, '')\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_')\n  );\n}\n\nexport function clone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n\nexport function deepEquals(a, b) {\n  return fastDeepEqual(a, b);\n}\n\n// Events emitted in LDClient's initialize method will happen before the consumer\n// can register a listener, so defer them to next tick.\nexport function onNextTick(cb) {\n  setTimeout(cb, 0);\n}\n\n/**\n * Wrap a promise to invoke an optional callback upon resolution or rejection.\n *\n * This function assumes the callback follows the Node.js callback type: (err, value) => void\n *\n * If a callback is provided:\n *   - if the promise is resolved, invoke the callback with (null, value)\n *   - if the promise is rejected, invoke the callback with (error, null)\n *\n * @param {Promise<any>} promise\n * @param {Function} callback\n * @returns Promise<any> | undefined\n */\nexport function wrapPromiseCallback(promise, callback) {\n  const ret = promise.then(\n    value => {\n      if (callback) {\n        setTimeout(() => {\n          callback(null, value);\n        }, 0);\n      }\n      return value;\n    },\n    error => {\n      if (callback) {\n        setTimeout(() => {\n          callback(error, null);\n        }, 0);\n      } else {\n        return Promise.reject(error);\n      }\n    }\n  );\n\n  return !callback ? ret : undefined;\n}\n\n/**\n * Takes a map of flag keys to values, and returns the more verbose structure used by the\n * client stream.\n */\nexport function transformValuesToVersionedValues(flags) {\n  const ret = {};\n  for (const key in flags) {\n    if (objectHasOwnProperty(flags, key)) {\n      ret[key] = { value: flags[key], version: 0 };\n    }\n  }\n  return ret;\n}\n\n/**\n * Converts the internal flag state map to a simple map of flag keys to values.\n */\nexport function transformVersionedValuesToValues(flagsState) {\n  const ret = {};\n  for (const key in flagsState) {\n    if (objectHasOwnProperty(flagsState, key)) {\n      ret[key] = flagsState[key].value;\n    }\n  }\n  return ret;\n}\n\n/**\n * Returns an array of event groups each of which can be safely URL-encoded\n * without hitting the safe maximum URL length of certain browsers.\n *\n * @param {number} maxLength maximum URL length targeted\n * @param {Array[Object}]} events queue of events to divide\n * @returns Array[Array[Object]]\n */\nexport function chunkUserEventsForUrl(maxLength, events) {\n  const allEvents = events.slice(0);\n  const allChunks = [];\n  let remainingSpace = maxLength;\n  let chunk;\n\n  while (allEvents.length > 0) {\n    chunk = [];\n\n    while (remainingSpace > 0) {\n      const event = allEvents.shift();\n      if (!event) {\n        break;\n      }\n      remainingSpace = remainingSpace - base64URLEncode(JSON.stringify(event)).length;\n      // If we are over the max size, put this one back on the queue\n      // to try in the next round, unless this event alone is larger\n      // than the limit, in which case, screw it, and try it anyway.\n      if (remainingSpace < 0 && chunk.length > 0) {\n        allEvents.unshift(event);\n      } else {\n        chunk.push(event);\n      }\n    }\n\n    remainingSpace = maxLength;\n    allChunks.push(chunk);\n  }\n\n  return allChunks;\n}\n\nexport function getLDUserAgentString(platform) {\n  const version = platform.version || VERSION;\n  return platform.userAgent + '/' + version;\n}\n\nexport function extend(...objects) {\n  return objects.reduce((acc, obj) => ({ ...acc, ...obj }), {});\n}\n\nexport function objectHasOwnProperty(object, name) {\n  return Object.prototype.hasOwnProperty.call(object, name);\n}\n\nexport function sanitizeUser(user) {\n  if (!user) {\n    return user;\n  }\n  let newUser;\n  for (const i in userAttrsToStringify) {\n    const attr = userAttrsToStringify[i];\n    const value = user[attr];\n    if (value !== undefined && typeof value !== 'string') {\n      newUser = newUser || { ...user };\n      newUser[attr] = String(value);\n    }\n  }\n  return newUser || user;\n}\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]]\n  ]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\nvar _clockseq;\n\n// Previous uuid creation time\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\n\n// See https://github.com/uuidjs/uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    var seedBytes = rng();\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]\n      ];\n    }\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n","const logLevels = ['debug', 'info', 'warn', 'error', 'none'];\n\n/**\n * A simple logger that writes to stderr.\n */\nexport function commonBasicLogger(options, formatFn) {\n  if (options && options.destination && typeof options.destination !== 'function') {\n    throw new Error('destination for basicLogger was set to a non-function');\n  }\n\n  function toConsole(methodName) {\n    // The global console variable is not guaranteed to be defined at all times in all browsers:\n    // https://www.beyondjava.net/console-log-surprises-with-internet-explorer-11-and-edge\n    return function(line) {\n      if (console && console[methodName]) {\n        console[methodName].call(console, line);\n      }\n    };\n  }\n  const destinations =\n    options && options.destination\n      ? [options.destination, options.destination, options.destination, options.destination]\n      : [toConsole('log'), toConsole('info'), toConsole('warn'), toConsole('error')];\n  const prependLevelToMessage = !!(options && options.destination); // if we're writing to console.warn, etc. we don't need the prefix\n  const prefix =\n    !options || options.prefix === undefined || options.prefix === null ? '[LaunchDarkly] ' : options.prefix;\n\n  let minLevel = 1; // default is 'info'\n  if (options && options.level) {\n    for (let i = 0; i < logLevels.length; i++) {\n      if (logLevels[i] === options.level) {\n        minLevel = i;\n      }\n    }\n  }\n\n  function write(levelIndex, levelName, args) {\n    if (args.length < 1) {\n      return;\n    }\n    let line;\n    const fullPrefix = prependLevelToMessage ? levelName + ': ' + prefix : prefix;\n    if (args.length === 1 || !formatFn) {\n      line = fullPrefix + args[0];\n    } else {\n      const tempArgs = [...args];\n      tempArgs[0] = fullPrefix + tempArgs[0];\n      line = formatFn(...tempArgs);\n    }\n    try {\n      destinations[levelIndex](line);\n    } catch (err) {\n      console &&\n        console.log &&\n        console.log(\"[LaunchDarkly] Configured logger's \" + levelName + ' method threw an exception: ' + err);\n    }\n  }\n\n  const logger = {};\n  for (let i = 0; i < logLevels.length; i++) {\n    const levelName = logLevels[i];\n    if (levelName !== 'none') {\n      if (i < minLevel) {\n        logger[levelName] = () => {};\n      } else {\n        const levelIndex = i;\n        logger[levelName] = function() {\n          // can't use arrow function with \"arguments\"\n          write(levelIndex, levelName, arguments);\n        };\n      }\n    }\n  }\n\n  return logger;\n}\n\nexport function validateLogger(logger) {\n  logLevels.forEach(level => {\n    if (level !== 'none' && (!logger[level] || typeof logger[level] !== 'function')) {\n      throw new Error('Provided logger instance must support logger.' + level + '(...) method');\n      // Note that the SDK normally does not throw exceptions to the application, but that rule\n      // does not apply to LDClient.init() which will throw an exception if the parameters are so\n      // invalid that we cannot proceed with creating the client. An invalid logger meets those\n      // criteria since the SDK calls the logger during nearly all of its operations.\n    }\n  });\n}\n\n// Deprecated equivalent to commonBasicLogger\nexport function createConsoleLogger(level, maybePrefix) {\n  return commonBasicLogger({ level, prefix: maybePrefix });\n}\n","import * as errors from './errors';\n\nfunction errorString(err) {\n  if (err && err.message) {\n    return err.message;\n  }\n  if (typeof err === 'string' || err instanceof String) {\n    return err;\n  }\n  return JSON.stringify(err);\n}\n\nexport const clientInitialized = function() {\n  return 'LaunchDarkly client initialized';\n};\n\nconst docLink =\n  ' Please see https://docs.launchdarkly.com/sdk/client-side/javascript#initializing-the-client for instructions on SDK initialization.';\n\nexport const clientNotReady = function() {\n  return 'LaunchDarkly client is not ready';\n};\n\nexport const eventCapacityExceeded = function() {\n  return 'Exceeded event queue capacity. Increase capacity to avoid dropping events.';\n};\n\nexport const eventWithoutUser = function() {\n  return 'Be sure to call `identify` in the LaunchDarkly client: https://docs.launchdarkly.com/sdk/features/identify#javascript';\n};\n\nexport const invalidContentType = function(contentType) {\n  return 'Expected application/json content type but got \"' + contentType + '\"';\n};\n\nexport const invalidKey = function() {\n  return 'Event key must be a string';\n};\n\nexport const localStorageUnavailable = function(err) {\n  return 'local storage is unavailable: ' + errorString(err);\n};\n\nexport const networkError = e => 'network error' + (e ? ' (' + e + ')' : '');\n\n// We should remove unknownCustomEventKey in the future - see comments in track() in index.js\nexport const unknownCustomEventKey = function(key) {\n  return 'Custom event \"' + key + '\" does not exist';\n};\n\nexport const environmentNotFound = function() {\n  return 'Environment not found. Double check that you specified a valid environment/client-side ID.' + docLink;\n};\n\nexport const environmentNotSpecified = function() {\n  return 'No environment/client-side ID was specified.' + docLink;\n};\n\nexport const errorFetchingFlags = function(err) {\n  return 'Error fetching flag settings: ' + errorString(err);\n};\n\nexport const userNotSpecified = function() {\n  return 'No user specified.' + docLink;\n};\n\nexport const invalidUser = function() {\n  return 'Invalid user specified.' + docLink;\n};\n\nexport const invalidData = function() {\n  return 'Invalid data received from LaunchDarkly; connection may have been interrupted';\n};\n\nexport const bootstrapOldFormat = function() {\n  return (\n    'LaunchDarkly client was initialized with bootstrap data that did not include flag metadata. ' +\n    'Events may not be sent correctly.' +\n    docLink\n  );\n};\n\nexport const bootstrapInvalid = function() {\n  return 'LaunchDarkly bootstrap data is not available because the back end could not read the flags.';\n};\n\nexport const deprecated = function(oldName, newName) {\n  if (newName) {\n    return '\"' + oldName + '\" is deprecated, please use \"' + newName + '\"';\n  }\n  return '\"' + oldName + '\" is deprecated';\n};\n\nexport const httpErrorMessage = function(status, context, retryMessage) {\n  return (\n    'Received error ' +\n    status +\n    (status === 401 ? ' (invalid SDK key)' : '') +\n    ' for ' +\n    context +\n    ' - ' +\n    (errors.isHttpErrorRecoverable(status) ? retryMessage : 'giving up permanently')\n  );\n};\n\nexport const httpUnavailable = function() {\n  return 'Cannot make HTTP requests in this environment.' + docLink;\n};\n\nexport const identifyDisabled = function() {\n  return 'identify() has no effect here; it must be called on the main client instance';\n};\n\nexport const streamClosing = function() {\n  return 'Closing stream connection';\n};\n\nexport const streamConnecting = function(url) {\n  return 'Opening stream connection to ' + url;\n};\n\nexport const streamError = function(err, streamReconnectDelay) {\n  return (\n    'Error on stream connection: ' +\n    errorString(err) +\n    ', will continue retrying after ' +\n    streamReconnectDelay +\n    ' milliseconds.'\n  );\n};\n\nexport const unrecoverableStreamError = function(err) {\n  return `Error on stream connection ${errorString(err)}, giving up permanently`;\n};\n\nexport const unknownOption = name => 'Ignoring unknown config option \"' + name + '\"';\n\nexport const wrongOptionType = (name, expectedType, actualType) =>\n  'Config option \"' + name + '\" should be of type ' + expectedType + ', got ' + actualType + ', using default value';\n\nexport const wrongOptionTypeBoolean = (name, actualType) =>\n  'Config option \"' + name + '\" should be a boolean, got ' + actualType + ', converting to boolean';\n\nexport const optionBelowMinimum = (name, value, minimum) =>\n  'Config option \"' + name + '\" was set to ' + value + ', changing to minimum value of ' + minimum;\n\nexport const debugPolling = function(url) {\n  return 'polling for feature flags at ' + url;\n};\n\nexport const debugStreamPing = function() {\n  return 'received ping message from stream';\n};\n\nexport const debugStreamPut = function() {\n  return 'received streaming update for all flags';\n};\n\nexport const debugStreamPatch = function(key) {\n  return 'received streaming update for flag \"' + key + '\"';\n};\n\nexport const debugStreamPatchIgnored = function(key) {\n  return 'received streaming update for flag \"' + key + '\" but ignored due to version check';\n};\n\nexport const debugStreamDelete = function(key) {\n  return 'received streaming deletion for flag \"' + key + '\"';\n};\n\nexport const debugStreamDeleteIgnored = function(key) {\n  return 'received streaming deletion for flag \"' + key + '\" but ignored due to version check';\n};\n\nexport const debugEnqueueingEvent = function(kind) {\n  return 'enqueueing \"' + kind + '\" event';\n};\n\nexport const debugPostingEvents = function(count) {\n  return 'sending ' + count + ' events';\n};\n\nexport const debugPostingDiagnosticEvent = function(event) {\n  return 'sending diagnostic event (' + event.kind + ')';\n};\n\nexport const invalidTagValue = name => `Config option \"${name}\" must only contain letters, numbers, ., _ or -.`;\n\nexport const invalidInspector = (type, name) => `an inspector: \"${name}\" of an invalid type (${type}) was configured`;\n\nexport const inspectorMethodError = (type, name) => `an inspector: \"${name}\" of type: \"${type}\" generated an exception`;\n\nexport const tagValueTooLong = name => `Value of \"${name}\" was longer than 64 characters and was discarded.`;\n","import * as errors from './errors';\nimport { validateLogger } from './loggers';\nimport * as messages from './messages';\nimport * as utils from './utils';\n\n// baseOptionDefs should contain an entry for each supported configuration option in the common package.\n// Each entry can have three properties:\n// - \"default\": the default value if any\n// - \"type\": a type constraint used if the type can't be inferred from the default value). The allowable\n//   values are \"boolean\", \"string\", \"number\", \"array\", \"object\", \"function\", or several of these OR'd\n//   together with \"|\" (\"function|object\").\n// - \"minimum\": minimum value if any for numeric properties\n//\n// The extraOptionDefs parameter to validate() uses the same format.\nexport const baseOptionDefs = {\n  baseUrl: { default: 'https://app.launchdarkly.com' },\n  streamUrl: { default: 'https://clientstream.launchdarkly.com' },\n  eventsUrl: { default: 'https://events.launchdarkly.com' },\n  sendEvents: { default: true },\n  streaming: { type: 'boolean' }, // default for this is undefined, which is different from false\n  sendLDHeaders: { default: true },\n  requestHeaderTransform: { type: 'function' },\n  inlineUsersInEvents: { default: false },\n  allowFrequentDuplicateEvents: { default: false },\n  sendEventsOnlyForVariation: { default: false },\n  useReport: { default: false },\n  evaluationReasons: { default: false },\n  eventCapacity: { default: 100, minimum: 1 },\n  flushInterval: { default: 2000, minimum: 2000 },\n  samplingInterval: { default: 0, minimum: 0 },\n  streamReconnectDelay: { default: 1000, minimum: 0 },\n  allAttributesPrivate: { default: false },\n  privateAttributeNames: { default: [] },\n  bootstrap: { type: 'string|object' },\n  diagnosticRecordingInterval: { default: 900000, minimum: 2000 },\n  diagnosticOptOut: { default: false },\n  wrapperName: { type: 'string' },\n  wrapperVersion: { type: 'string' },\n  stateProvider: { type: 'object' }, // not a public option, used internally\n  autoAliasingOptOut: { default: false },\n  application: { validator: applicationConfigValidator },\n  inspectors: { default: [] },\n};\n\n/**\n * Expression to validate characters that are allowed in tag keys and values.\n */\nconst allowedTagCharacters = /^(\\w|\\.|-)+$/;\n\n/**\n * Verify that a value meets the requirements for a tag value.\n * @param {string} tagValue\n * @param {Object} logger\n */\nfunction validateTagValue(name, tagValue, logger) {\n  if (typeof tagValue !== 'string' || !tagValue.match(allowedTagCharacters)) {\n    logger.warn(messages.invalidTagValue(name));\n    return undefined;\n  }\n  if (tagValue.length > 64) {\n    logger.warn(messages.tagValueTooLong(name));\n    return undefined;\n  }\n  return tagValue;\n}\n\nfunction applicationConfigValidator(name, value, logger) {\n  const validated = {};\n  if (value.id) {\n    validated.id = validateTagValue(`${name}.id`, value.id, logger);\n  }\n  if (value.version) {\n    validated.version = validateTagValue(`${name}.version`, value.version, logger);\n  }\n  return validated;\n}\n\nexport function validate(options, emitter, extraOptionDefs, logger) {\n  const optionDefs = utils.extend({ logger: { default: logger } }, baseOptionDefs, extraOptionDefs);\n\n  const deprecatedOptions = {\n    // eslint-disable-next-line camelcase\n    all_attributes_private: 'allAttributesPrivate',\n    // eslint-disable-next-line camelcase\n    private_attribute_names: 'privateAttributeNames',\n    samplingInterval: null,\n    // The property name is the deprecated name, and the property value is the preferred name if\n    // any, or null/undefined if there is no replacement. This should be removed, along with\n    // the option, in the next major version.\n    allowFrequentDuplicateEvents: undefined,\n  };\n\n  function checkDeprecatedOptions(config) {\n    const opts = config;\n    Object.keys(deprecatedOptions).forEach(oldName => {\n      if (opts[oldName] !== undefined) {\n        const newName = deprecatedOptions[oldName];\n        logger && logger.warn(messages.deprecated(oldName, newName));\n        if (newName) {\n          if (opts[newName] === undefined) {\n            opts[newName] = opts[oldName];\n          }\n          delete opts[oldName];\n        }\n      }\n    });\n  }\n\n  function applyDefaults(config) {\n    // This works differently from utils.extend() in that it *will not* override a default value\n    // if the provided value is explicitly set to null. This provides backward compatibility\n    // since in the past we only used the provided values if they were truthy.\n    const ret = utils.extend({}, config);\n    Object.keys(optionDefs).forEach(name => {\n      if (ret[name] === undefined || ret[name] === null) {\n        ret[name] = optionDefs[name] && optionDefs[name].default;\n      }\n    });\n    return ret;\n  }\n\n  function validateTypesAndNames(config) {\n    const ret = utils.extend({}, config);\n    const typeDescForValue = value => {\n      if (value === null) {\n        return 'any';\n      }\n      if (value === undefined) {\n        return undefined;\n      }\n      if (Array.isArray(value)) {\n        return 'array';\n      }\n      const t = typeof value;\n      if (t === 'boolean' || t === 'string' || t === 'number' || t === 'function') {\n        return t;\n      }\n      return 'object';\n    };\n    Object.keys(config).forEach(name => {\n      const value = config[name];\n      if (value !== null && value !== undefined) {\n        const optionDef = optionDefs[name];\n        if (optionDef === undefined) {\n          reportArgumentError(messages.unknownOption(name));\n        } else {\n          const expectedType = optionDef.type || typeDescForValue(optionDef.default);\n          const validator = optionDef.validator;\n          if (validator) {\n            const validated = validator(name, config[name], logger);\n            if (validated !== undefined) {\n              ret[name] = validated;\n            } else {\n              delete ret[name];\n            }\n          } else if (expectedType !== 'any') {\n            const allowedTypes = expectedType.split('|');\n            const actualType = typeDescForValue(value);\n            if (allowedTypes.indexOf(actualType) < 0) {\n              if (expectedType === 'boolean') {\n                ret[name] = !!value;\n                reportArgumentError(messages.wrongOptionTypeBoolean(name, actualType));\n              } else {\n                reportArgumentError(messages.wrongOptionType(name, expectedType, actualType));\n                ret[name] = optionDef.default;\n              }\n            } else {\n              if (actualType === 'number' && optionDef.minimum !== undefined && value < optionDef.minimum) {\n                reportArgumentError(messages.optionBelowMinimum(name, value, optionDef.minimum));\n                ret[name] = optionDef.minimum;\n              }\n            }\n          }\n        }\n      }\n    });\n    return ret;\n  }\n\n  function reportArgumentError(message) {\n    utils.onNextTick(() => {\n      emitter && emitter.maybeReportError(new errors.LDInvalidArgumentError(message));\n    });\n  }\n\n  let config = utils.extend({}, options || {});\n\n  checkDeprecatedOptions(config);\n\n  config = applyDefaults(config);\n  config = validateTypesAndNames(config);\n  validateLogger(config.logger);\n\n  return config;\n}\n\n/**\n * Get tags for the specified configuration.\n *\n * If any additional tags are added to the configuration, then the tags from\n * this method should be extended with those.\n * @param {Object} config The already valiated configuration.\n * @returns {Object} The tag configuration.\n */\nexport function getTags(config) {\n  const tags = {};\n  if (config) {\n    if (config.application && config.application.id !== undefined && config.application.id !== null) {\n      tags['application-id'] = [config.application.id];\n    }\n    if (config.application && config.application.version !== undefined && config.application.id !== null) {\n      tags['application-version'] = [config.application.version];\n    }\n  }\n\n  return tags;\n}\n","import { getLDUserAgentString } from './utils';\nimport { getTags } from './configuration';\n\nexport function getLDHeaders(platform, options) {\n  if (options && !options.sendLDHeaders) {\n    return {};\n  }\n  const h = {\n    'X-LaunchDarkly-User-Agent': getLDUserAgentString(platform),\n  };\n  if (options && options.wrapperName) {\n    h['X-LaunchDarkly-Wrapper'] = options.wrapperVersion\n      ? options.wrapperName + '/' + options.wrapperVersion\n      : options.wrapperName;\n  }\n  const tags = getTags(options);\n  const tagKeys = Object.keys(tags);\n  if (tagKeys.length) {\n    h['x-launchdarkly-tags'] = tagKeys\n      .sort()\n      .map(\n        key => (Array.isArray(tags[key]) ? tags[key].sort().map(value => `${key}/${value}`) : [`${key}/${tags[key]}`])\n      )\n      .reduce((flattened, item) => flattened.concat(item), [])\n      .join(' ');\n  }\n  return h;\n}\n\nexport function transformHeaders(headers, options) {\n  if (!options || !options.requestHeaderTransform) {\n    return headers;\n  }\n  return options.requestHeaderTransform({ ...headers });\n}\n","import * as errors from './errors';\nimport * as utils from './utils';\nimport uuidv1 from 'uuid/v1';\nimport { getLDHeaders, transformHeaders } from './headers';\n\nconst MAX_URL_LENGTH = 2000;\n\nexport default function EventSender(platform, environmentId, options) {\n  const imageUrlPath = '/a/' + environmentId + '.gif';\n  const baseHeaders = utils.extend({ 'Content-Type': 'application/json' }, getLDHeaders(platform, options));\n  const httpFallbackPing = platform.httpFallbackPing; // this will be set for us if we're in the browser SDK\n  const sender = {};\n\n  function getResponseInfo(result) {\n    const ret = { status: result.status };\n    const dateStr = result.header('date');\n    if (dateStr) {\n      const time = Date.parse(dateStr);\n      if (time) {\n        ret.serverTime = time;\n      }\n    }\n    return ret;\n  }\n\n  sender.sendChunk = (events, url, isDiagnostic, usePost) => {\n    const jsonBody = JSON.stringify(events);\n    const payloadId = isDiagnostic ? null : uuidv1();\n\n    function doPostRequest(canRetry) {\n      const headers = isDiagnostic\n        ? baseHeaders\n        : utils.extend({}, baseHeaders, {\n            'X-LaunchDarkly-Event-Schema': '3',\n            'X-LaunchDarkly-Payload-ID': payloadId,\n          });\n      return platform\n        .httpRequest('POST', url, transformHeaders(headers, options), jsonBody)\n        .promise.then(result => {\n          if (!result) {\n            // This was a response from a fire-and-forget request, so we won't have a status.\n            return;\n          }\n          if (result.status >= 400 && errors.isHttpErrorRecoverable(result.status) && canRetry) {\n            return doPostRequest(false);\n          } else {\n            return getResponseInfo(result);\n          }\n        })\n        .catch(() => {\n          if (canRetry) {\n            return doPostRequest(false);\n          }\n          return Promise.reject();\n        });\n    }\n\n    if (usePost) {\n      return doPostRequest(true).catch(() => {});\n    } else {\n      httpFallbackPing && httpFallbackPing(url + imageUrlPath + '?d=' + utils.base64URLEncode(jsonBody));\n      return Promise.resolve(); // we don't wait for this request to complete, it's just a one-way ping\n    }\n  };\n\n  sender.sendEvents = function(events, url, isDiagnostic) {\n    if (!platform.httpRequest) {\n      return Promise.resolve();\n    }\n    const canPost = platform.httpAllowsPost();\n    let chunks;\n    if (canPost) {\n      // no need to break up events into chunks if we can send a POST\n      chunks = [events];\n    } else {\n      chunks = utils.chunkUserEventsForUrl(MAX_URL_LENGTH - url.length, events);\n    }\n    const results = [];\n    for (let i = 0; i < chunks.length; i++) {\n      results.push(sender.sendChunk(chunks[i], url, isDiagnostic, canPost));\n    }\n    return Promise.all(results);\n  };\n\n  return sender;\n}\n","import EventSender from './EventSender';\nimport EventSummarizer from './EventSummarizer';\nimport UserFilter from './UserFilter';\nimport * as errors from './errors';\nimport * as messages from './messages';\nimport * as utils from './utils';\n\nexport default function EventProcessor(\n  platform,\n  options,\n  environmentId,\n  diagnosticsAccumulator = null,\n  emitter = null,\n  sender = null\n) {\n  const processor = {};\n  const eventSender = sender || EventSender(platform, environmentId, options);\n  const mainEventsUrl = utils.appendUrlPath(options.eventsUrl, '/events/bulk/' + environmentId);\n  const summarizer = EventSummarizer();\n  const userFilter = UserFilter(options);\n  const inlineUsers = options.inlineUsersInEvents;\n  const samplingInterval = options.samplingInterval;\n  const eventCapacity = options.eventCapacity;\n  const flushInterval = options.flushInterval;\n  const logger = options.logger;\n  let queue = [];\n  let lastKnownPastTime = 0;\n  let disabled = false;\n  let exceededCapacity = false;\n  let flushTimer;\n\n  function shouldSampleEvent() {\n    return samplingInterval === 0 || Math.floor(Math.random() * samplingInterval) === 0;\n  }\n\n  function shouldDebugEvent(e) {\n    if (e.debugEventsUntilDate) {\n      // The \"last known past time\" comes from the last HTTP response we got from the server.\n      // In case the client's time is set wrong, at least we know that any expiration date\n      // earlier than that point is definitely in the past.  If there's any discrepancy, we\n      // want to err on the side of cutting off event debugging sooner.\n      return e.debugEventsUntilDate > lastKnownPastTime && e.debugEventsUntilDate > new Date().getTime();\n    }\n    return false;\n  }\n\n  // Transform an event from its internal format to the format we use when sending a payload.\n  function makeOutputEvent(e) {\n    const ret = utils.extend({}, e);\n    if (e.kind === 'alias') {\n      // alias events do not require any transformation\n      return ret;\n    }\n    if (inlineUsers || e.kind === 'identify') {\n      // identify events always have an inline user\n      ret.user = userFilter.filterUser(e.user);\n    } else {\n      ret.userKey = e.user.key;\n      delete ret['user'];\n    }\n    if (e.kind === 'feature') {\n      delete ret['trackEvents'];\n      delete ret['debugEventsUntilDate'];\n    }\n    return ret;\n  }\n\n  function addToOutbox(event) {\n    if (queue.length < eventCapacity) {\n      queue.push(event);\n      exceededCapacity = false;\n    } else {\n      if (!exceededCapacity) {\n        exceededCapacity = true;\n        logger.warn(messages.eventCapacityExceeded());\n      }\n      if (diagnosticsAccumulator) {\n        // For diagnostic events, we track how many times we had to drop an event due to exceeding the capacity.\n        diagnosticsAccumulator.incrementDroppedEvents();\n      }\n    }\n  }\n\n  processor.enqueue = function(event) {\n    if (disabled) {\n      return;\n    }\n    let addFullEvent = false;\n    let addDebugEvent = false;\n\n    // Add event to the summary counters if appropriate\n    summarizer.summarizeEvent(event);\n\n    // Decide whether to add the event to the payload. Feature events may be added twice, once for\n    // the event (if tracked) and once for debugging.\n    if (event.kind === 'feature') {\n      if (shouldSampleEvent()) {\n        addFullEvent = !!event.trackEvents;\n        addDebugEvent = shouldDebugEvent(event);\n      }\n    } else {\n      addFullEvent = shouldSampleEvent();\n    }\n\n    if (addFullEvent) {\n      addToOutbox(makeOutputEvent(event));\n    }\n    if (addDebugEvent) {\n      const debugEvent = utils.extend({}, event, { kind: 'debug' });\n      debugEvent.user = userFilter.filterUser(debugEvent.user);\n      delete debugEvent['trackEvents'];\n      delete debugEvent['debugEventsUntilDate'];\n      addToOutbox(debugEvent);\n    }\n  };\n\n  processor.flush = function() {\n    if (disabled) {\n      return Promise.resolve();\n    }\n    const eventsToSend = queue;\n    const summary = summarizer.getSummary();\n    summarizer.clearSummary();\n    if (summary) {\n      summary.kind = 'summary';\n      eventsToSend.push(summary);\n    }\n    if (diagnosticsAccumulator) {\n      // For diagnostic events, we record how many events were in the queue at the last flush (since \"how\n      // many events happened to be in the queue at the moment we decided to send a diagnostic event\" would\n      // not be a very useful statistic).\n      diagnosticsAccumulator.setEventsInLastBatch(eventsToSend.length);\n    }\n    if (eventsToSend.length === 0) {\n      return Promise.resolve();\n    }\n    queue = [];\n    logger.debug(messages.debugPostingEvents(eventsToSend.length));\n    return eventSender.sendEvents(eventsToSend, mainEventsUrl).then(responseInfo => {\n      if (responseInfo) {\n        if (responseInfo.serverTime) {\n          lastKnownPastTime = responseInfo.serverTime;\n        }\n        if (!errors.isHttpErrorRecoverable(responseInfo.status)) {\n          disabled = true;\n        }\n        if (responseInfo.status >= 400) {\n          utils.onNextTick(() => {\n            emitter.maybeReportError(\n              new errors.LDUnexpectedResponseError(\n                messages.httpErrorMessage(responseInfo.status, 'event posting', 'some events were dropped')\n              )\n            );\n          });\n        }\n      }\n    });\n  };\n\n  processor.start = function() {\n    const flushTick = () => {\n      processor.flush();\n      flushTimer = setTimeout(flushTick, flushInterval);\n    };\n    flushTimer = setTimeout(flushTick, flushInterval);\n  };\n\n  processor.stop = function() {\n    clearTimeout(flushTimer);\n  };\n\n  return processor;\n}\n","export default function EventSummarizer() {\n  const es = {};\n\n  let startDate = 0,\n    endDate = 0,\n    counters = {};\n\n  es.summarizeEvent = function(event) {\n    if (event.kind === 'feature') {\n      const counterKey =\n        event.key +\n        ':' +\n        (event.variation !== null && event.variation !== undefined ? event.variation : '') +\n        ':' +\n        (event.version !== null && event.version !== undefined ? event.version : '');\n      const counterVal = counters[counterKey];\n      if (counterVal) {\n        counterVal.count = counterVal.count + 1;\n      } else {\n        counters[counterKey] = {\n          count: 1,\n          key: event.key,\n          variation: event.variation,\n          version: event.version,\n          value: event.value,\n          default: event.default,\n        };\n      }\n      if (startDate === 0 || event.creationDate < startDate) {\n        startDate = event.creationDate;\n      }\n      if (event.creationDate > endDate) {\n        endDate = event.creationDate;\n      }\n    }\n  };\n\n  es.getSummary = function() {\n    const flagsOut = {};\n    let empty = true;\n    for (const i in counters) {\n      const c = counters[i];\n      let flag = flagsOut[c.key];\n      if (!flag) {\n        flag = {\n          default: c.default,\n          counters: [],\n        };\n        flagsOut[c.key] = flag;\n      }\n      const counterOut = {\n        value: c.value,\n        count: c.count,\n      };\n      if (c.variation !== undefined && c.variation !== null) {\n        counterOut.variation = c.variation;\n      }\n      if (c.version) {\n        counterOut.version = c.version;\n      } else {\n        counterOut.unknown = true;\n      }\n      flag.counters.push(counterOut);\n      empty = false;\n    }\n    return empty\n      ? null\n      : {\n          startDate,\n          endDate,\n          features: flagsOut,\n        };\n  };\n\n  es.clearSummary = function() {\n    startDate = 0;\n    endDate = 0;\n    counters = {};\n  };\n\n  return es;\n}\n","import * as utils from './utils';\n\n/**\n * The UserFilter object transforms user objects into objects suitable to be sent as JSON to\n * the server, hiding any private user attributes.\n *\n * @param {Object} the LaunchDarkly client configuration object\n **/\nexport default function UserFilter(config) {\n  const filter = {};\n  const allAttributesPrivate = config.allAttributesPrivate;\n  const privateAttributeNames = config.privateAttributeNames || [];\n  const ignoreAttrs = { key: true, custom: true, anonymous: true };\n  const allowedTopLevelAttrs = {\n    key: true,\n    secondary: true,\n    ip: true,\n    country: true,\n    email: true,\n    firstName: true,\n    lastName: true,\n    avatar: true,\n    name: true,\n    anonymous: true,\n    custom: true,\n  };\n\n  filter.filterUser = function(user) {\n    if (!user) {\n      return null;\n    }\n    const userPrivateAttrs = user.privateAttributeNames || [];\n\n    const isPrivateAttr = function(name) {\n      return (\n        !ignoreAttrs[name] &&\n        (allAttributesPrivate || userPrivateAttrs.indexOf(name) !== -1 || privateAttributeNames.indexOf(name) !== -1)\n      );\n    };\n    const filterAttrs = function(props, isAttributeAllowed) {\n      return Object.keys(props).reduce(\n        (acc, name) => {\n          const ret = acc;\n          if (isAttributeAllowed(name)) {\n            if (isPrivateAttr(name)) {\n              // add to hidden list\n              ret[1][name] = true;\n            } else {\n              ret[0][name] = props[name];\n            }\n          }\n          return ret;\n        },\n        [{}, {}]\n      );\n    };\n    const result = filterAttrs(user, key => allowedTopLevelAttrs[key]);\n    const filteredProps = result[0];\n    let removedAttrs = result[1];\n    if (user.custom) {\n      const customResult = filterAttrs(user.custom, () => true);\n      filteredProps.custom = customResult[0];\n      removedAttrs = utils.extend({}, removedAttrs, customResult[1]);\n    }\n    const removedAttrNames = Object.keys(removedAttrs);\n    if (removedAttrNames.length) {\n      removedAttrNames.sort();\n      filteredProps.privateAttrs = removedAttrNames;\n    }\n    return filteredProps;\n  };\n  return filter;\n}\n","export default function EventEmitter(logger) {\n  const emitter = {};\n  const events = {};\n\n  const listeningTo = event => !!events[event];\n\n  emitter.on = function(event, handler, context) {\n    events[event] = events[event] || [];\n    events[event] = events[event].concat({\n      handler: handler,\n      context: context,\n    });\n  };\n\n  emitter.off = function(event, handler, context) {\n    if (!events[event]) {\n      return;\n    }\n    for (let i = 0; i < events[event].length; i++) {\n      if (events[event][i].handler === handler && events[event][i].context === context) {\n        events[event] = events[event].slice(0, i).concat(events[event].slice(i + 1));\n      }\n    }\n  };\n\n  emitter.emit = function(event) {\n    if (!events[event]) {\n      return;\n    }\n    // Copy the list of handlers before iterating, in case any handler adds or removes another handler.\n    // Any such changes should not affect what we do here-- we want to notify every handler that existed\n    // at the moment that the event was fired.\n    const copiedHandlers = events[event].slice(0);\n    for (let i = 0; i < copiedHandlers.length; i++) {\n      copiedHandlers[i].handler.apply(copiedHandlers[i].context, Array.prototype.slice.call(arguments, 1));\n    }\n  };\n\n  emitter.getEvents = function() {\n    return Object.keys(events);\n  };\n\n  emitter.getEventListenerCount = function(event) {\n    return events[event] ? events[event].length : 0;\n  };\n\n  emitter.maybeReportError = function(error) {\n    if (!error) {\n      return;\n    }\n    if (listeningTo('error')) {\n      this.emit('error', error);\n    } else {\n      (logger || console).error(error.message);\n    }\n  };\n  return emitter;\n}\n","// This file provides an abstraction of the client's startup state.\n//\n// Startup can either succeed or fail exactly once; calling signalSuccess() or signalFailure()\n// after that point has no effect.\n//\n// On success, we fire both an \"initialized\" event and a \"ready\" event. Both the waitForInitialization()\n// promise and the waitUntilReady() promise are resolved in this case.\n//\n// On failure, we fire both a \"failed\" event (with the error as a parameter) and a \"ready\" event.\n// The waitForInitialization() promise is rejected, but the waitUntilReady() promise is resolved.\n//\n// To complicate things, we must *not* create the waitForInitialization() promise unless it is\n// requested, because otherwise failures would cause an *unhandled* rejection which can be a\n// serious problem in some environments. So we use a somewhat roundabout system for tracking the\n// initialization state and lazily creating this promise.\n\nconst readyEvent = 'ready',\n  successEvent = 'initialized',\n  failureEvent = 'failed';\n\nfunction InitializationStateTracker(eventEmitter) {\n  let succeeded = false,\n    failed = false,\n    failureValue = null,\n    initializationPromise = null;\n\n  const readyPromise = new Promise(resolve => {\n    const onReady = () => {\n      eventEmitter.off(readyEvent, onReady); // we can't use \"once\" because it's not available on some JS platforms\n      resolve();\n    };\n    eventEmitter.on(readyEvent, onReady);\n  }).catch(() => {}); // this Promise should never be rejected, but the catch handler is a safety measure\n\n  return {\n    getInitializationPromise: () => {\n      if (initializationPromise) {\n        return initializationPromise;\n      }\n      if (succeeded) {\n        return Promise.resolve();\n      }\n      if (failed) {\n        return Promise.reject(failureValue);\n      }\n      initializationPromise = new Promise((resolve, reject) => {\n        const onSuccess = () => {\n          eventEmitter.off(successEvent, onSuccess);\n          resolve();\n        };\n        const onFailure = err => {\n          eventEmitter.off(failureEvent, onFailure);\n          reject(err);\n        };\n        eventEmitter.on(successEvent, onSuccess);\n        eventEmitter.on(failureEvent, onFailure);\n      });\n      return initializationPromise;\n    },\n\n    getReadyPromise: () => readyPromise,\n\n    signalSuccess: () => {\n      if (!succeeded && !failed) {\n        succeeded = true;\n        eventEmitter.emit(successEvent);\n        eventEmitter.emit(readyEvent);\n      }\n    },\n\n    signalFailure: err => {\n      if (!succeeded && !failed) {\n        failed = true;\n        failureValue = err;\n        eventEmitter.emit(failureEvent, err);\n        eventEmitter.emit(readyEvent);\n      }\n      eventEmitter.maybeReportError(err); // the \"error\" event can be emitted more than once, unlike the others\n    },\n  };\n}\n\nmodule.exports = InitializationStateTracker;\n","import * as utils from './utils';\n\nexport default function PersistentFlagStore(storage, environment, hash, ident) {\n  const store = {};\n\n  function getFlagsKey() {\n    let key = '';\n    const user = ident.getUser();\n    if (user) {\n      key = hash || utils.btoa(JSON.stringify(user));\n    }\n    return 'ld:' + environment + ':' + key;\n  }\n\n  // Returns a Promise which will be resolved with a parsed JSON value if a stored value was available,\n  // or resolved with null if there was no value or if storage was not available.\n  store.loadFlags = () =>\n    storage.get(getFlagsKey()).then(dataStr => {\n      if (dataStr === null || dataStr === undefined) {\n        return null;\n      }\n      try {\n        let data = JSON.parse(dataStr);\n        if (data) {\n          const schema = data.$schema;\n          if (schema === undefined || schema < 1) {\n            data = utils.transformValuesToVersionedValues(data);\n          } else {\n            delete data['$schema'];\n          }\n        }\n        return data;\n      } catch (ex) {\n        return store.clearFlags().then(() => null);\n      }\n    });\n\n  // Resolves with true if successful, or false if storage is unavailable. Never rejects.\n  store.saveFlags = flags => {\n    const data = utils.extend({}, flags, { $schema: 1 });\n    return storage.set(getFlagsKey(), JSON.stringify(data));\n  };\n\n  // Resolves with true if successful, or false if storage is unavailable. Never rejects.\n  store.clearFlags = () => storage.clear(getFlagsKey());\n\n  return store;\n}\n","import * as messages from './messages';\n\n// The localStorageProvider is provided by the platform object. It should have the following\n// methods, each of which should return a Promise:\n// - get(key): Gets the string value, if any, for the given key\n// - set(key, value): Stores a string value for the given key\n// - remove(key): Removes the given key\n//\n// Storage is just a light wrapper of the localStorageProvider, adding error handling and\n// ensuring that we don't call it if it's unavailable. The get method will simply resolve\n// with an undefined value if there is an error or if there is no localStorageProvider.\n// None of the promises returned by Storage will ever be rejected.\n//\n// It is always possible that the underlying platform storage mechanism might fail or be\n// disabled. If so, it's likely that it will keep failing, so we will only log one warning\n// instead of repetitive warnings.\nexport default function PersistentStorage(localStorageProvider, logger) {\n  const storage = {};\n  let loggedError = false;\n\n  const logError = err => {\n    if (!loggedError) {\n      loggedError = true;\n      logger.warn(messages.localStorageUnavailable(err));\n    }\n  };\n\n  storage.isEnabled = () => !!localStorageProvider;\n\n  // Resolves with a value, or undefined if storage is unavailable. Never rejects.\n  storage.get = key =>\n    new Promise(resolve => {\n      if (!localStorageProvider) {\n        resolve(undefined);\n        return;\n      }\n      localStorageProvider\n        .get(key)\n        .then(resolve)\n        .catch(err => {\n          logError(err);\n          resolve(undefined);\n        });\n    });\n\n  // Resolves with true if successful, or false if storage is unavailable. Never rejects.\n  storage.set = (key, value) =>\n    new Promise(resolve => {\n      if (!localStorageProvider) {\n        resolve(false);\n        return;\n      }\n      localStorageProvider\n        .set(key, value)\n        .then(() => resolve(true))\n        .catch(err => {\n          logError(err);\n          resolve(false);\n        });\n    });\n\n  // Resolves with true if successful, or false if storage is unavailable. Never rejects.\n  storage.clear = key =>\n    new Promise(resolve => {\n      if (!localStorageProvider) {\n        resolve(false);\n        return;\n      }\n      localStorageProvider\n        .clear(key)\n        .then(() => resolve(true))\n        .catch(err => {\n          logError(err);\n          resolve(false);\n        });\n    });\n\n  return storage;\n}\n","import * as messages from './messages';\nimport { appendUrlPath, base64URLEncode, objectHasOwnProperty } from './utils';\nimport { getLDHeaders, transformHeaders } from './headers';\nimport { isHttpErrorRecoverable } from './errors';\n\n// The underlying event source implementation is abstracted via the platform object, which should\n// have these three properties:\n// eventSourceFactory(): a function that takes a URL and optional config object and returns an object\n//   with the same methods as the regular HTML5 EventSource object. The properties in the config\n//   object are those supported by the launchdarkly-eventsource package; browser EventSource\n//   implementations don't have any config options.\n// eventSourceIsActive(): a function that takes an EventSource-compatible object and returns true if\n//   it is in an active state (connected or connecting).\n// eventSourceAllowsReport: true if REPORT is supported.\n\n// The read timeout for the stream is a fixed value that is set to be slightly longer than the expected\n// interval between heartbeats from the LaunchDarkly streaming server. If this amount of time elapses\n// with no new data, the connection will be cycled.\nconst streamReadTimeoutMillis = 5 * 60 * 1000; // 5 minutes\nconst maxRetryDelay = 30 * 1000; // Maximum retry delay 30 seconds.\nconst jitterRatio = 0.5; // Delay should be 50%-100% of calculated time.\n\nexport default function Stream(platform, config, environment, diagnosticsAccumulator) {\n  const baseUrl = config.streamUrl;\n  const logger = config.logger;\n  const stream = {};\n  const evalUrlPrefix = appendUrlPath(baseUrl, '/eval/' + environment);\n  const useReport = config.useReport;\n  const withReasons = config.evaluationReasons;\n  const baseReconnectDelay = config.streamReconnectDelay;\n  const headers = getLDHeaders(platform, config);\n  let firstConnectionErrorLogged = false;\n  let es = null;\n  let reconnectTimeoutReference = null;\n  let connectionAttemptStartTime;\n  let user = null;\n  let hash = null;\n  let handlers = null;\n  let retryCount = 0;\n\n  function backoff() {\n    const delay = baseReconnectDelay * Math.pow(2, retryCount);\n    return delay > maxRetryDelay ? maxRetryDelay : delay;\n  }\n\n  function jitter(computedDelayMillis) {\n    return computedDelayMillis - Math.trunc(Math.random() * jitterRatio * computedDelayMillis);\n  }\n\n  function getNextRetryDelay() {\n    const delay = jitter(backoff());\n    retryCount += 1;\n    return delay;\n  }\n\n  stream.connect = function(newUser, newHash, newHandlers) {\n    user = newUser;\n    hash = newHash;\n    handlers = {};\n    for (const key in newHandlers || {}) {\n      handlers[key] = function(e) {\n        // Reset the state for logging the first connection error so that the first\n        // connection error following a successful connection will once again be logged.\n        // We will decorate *all* handlers to do this to keep this abstraction agnostic\n        // for different stream implementations.\n        firstConnectionErrorLogged = false;\n        logConnectionResult(true);\n        newHandlers[key] && newHandlers[key](e);\n      };\n    }\n    tryConnect();\n  };\n\n  stream.disconnect = function() {\n    clearTimeout(reconnectTimeoutReference);\n    reconnectTimeoutReference = null;\n    closeConnection();\n  };\n\n  stream.isConnected = function() {\n    return !!(es && platform.eventSourceIsActive && platform.eventSourceIsActive(es));\n  };\n\n  function handleError(err) {\n    // The event source may not produce a status. But the LaunchDarkly\n    // polyfill can. If we can get the status, then we should stop retrying\n    // on certain error codes.\n    if (err.status && typeof err.status === 'number' && !isHttpErrorRecoverable(err.status)) {\n      // If we encounter an unrecoverable condition, then we do not want to\n      // retry anymore.\n      closeConnection();\n      logger.error(messages.unrecoverableStreamError(err));\n      // Ensure any pending retry attempts are not done.\n      if (reconnectTimeoutReference) {\n        clearTimeout(reconnectTimeoutReference);\n        reconnectTimeoutReference = null;\n      }\n      return;\n    }\n\n    const delay = getNextRetryDelay();\n\n    if (!firstConnectionErrorLogged) {\n      logger.warn(messages.streamError(err, delay));\n      firstConnectionErrorLogged = true;\n    }\n    logConnectionResult(false);\n    closeConnection();\n    tryConnect(delay);\n  }\n\n  function tryConnect(delay) {\n    if (!reconnectTimeoutReference) {\n      if (delay) {\n        reconnectTimeoutReference = setTimeout(openConnection, delay);\n      } else {\n        openConnection();\n      }\n    }\n  }\n\n  function openConnection() {\n    reconnectTimeoutReference = null;\n    let url;\n    let query = '';\n    const options = { headers, readTimeoutMillis: streamReadTimeoutMillis };\n    if (platform.eventSourceFactory) {\n      if (hash !== null && hash !== undefined) {\n        query = 'h=' + hash;\n      }\n      if (useReport) {\n        if (platform.eventSourceAllowsReport) {\n          url = evalUrlPrefix;\n          options.method = 'REPORT';\n          options.headers['Content-Type'] = 'application/json';\n          options.body = JSON.stringify(user);\n        } else {\n          // if we can't do REPORT, fall back to the old ping-based stream\n          url = appendUrlPath(baseUrl, '/ping/' + environment);\n          query = '';\n        }\n      } else {\n        url = evalUrlPrefix + '/' + base64URLEncode(JSON.stringify(user));\n      }\n      options.headers = transformHeaders(options.headers, config);\n      if (withReasons) {\n        query = query + (query ? '&' : '') + 'withReasons=true';\n      }\n      url = url + (query ? '?' : '') + query;\n\n      closeConnection();\n      logger.info(messages.streamConnecting(url));\n      logConnectionStarted();\n\n      es = platform.eventSourceFactory(url, options);\n      for (const key in handlers) {\n        if (objectHasOwnProperty(handlers, key)) {\n          es.addEventListener(key, handlers[key]);\n        }\n      }\n\n      es.onerror = handleError;\n\n      es.onopen = () => {\n        // If the connection is a success, then reset the retryCount.\n        retryCount = 0;\n      };\n    }\n  }\n\n  function closeConnection() {\n    if (es) {\n      logger.info(messages.streamClosing());\n      es.close();\n      es = null;\n    }\n  }\n\n  function logConnectionStarted() {\n    connectionAttemptStartTime = new Date().getTime();\n  }\n\n  function logConnectionResult(success) {\n    if (connectionAttemptStartTime && diagnosticsAccumulator) {\n      diagnosticsAccumulator.recordStreamInit(\n        connectionAttemptStartTime,\n        !success,\n        new Date().getTime() - connectionAttemptStartTime\n      );\n    }\n    connectionAttemptStartTime = null;\n  }\n\n  return stream;\n}\n","import * as utils from './utils';\nimport * as errors from './errors';\nimport * as messages from './messages';\nimport promiseCoalescer from './promiseCoalescer';\nimport { transformHeaders, getLDHeaders } from './headers';\n\nconst jsonContentType = 'application/json';\n\nfunction getResponseError(result) {\n  if (result.status === 404) {\n    return new errors.LDInvalidEnvironmentIdError(messages.environmentNotFound());\n  } else {\n    return new errors.LDFlagFetchError(messages.errorFetchingFlags(result.statusText || String(result.status)));\n  }\n}\n\nexport default function Requestor(platform, options, environment) {\n  const baseUrl = options.baseUrl;\n  const useReport = options.useReport;\n  const withReasons = options.evaluationReasons;\n  const logger = options.logger;\n\n  const requestor = {};\n\n  const activeRequests = {}; // map of URLs to promiseCoalescers\n\n  function fetchJSON(endpoint, body) {\n    if (!platform.httpRequest) {\n      return new Promise((resolve, reject) => {\n        reject(new errors.LDFlagFetchError(messages.httpUnavailable()));\n      });\n    }\n\n    const method = body ? 'REPORT' : 'GET';\n    const headers = getLDHeaders(platform, options);\n    if (body) {\n      headers['Content-Type'] = jsonContentType;\n    }\n\n    let coalescer = activeRequests[endpoint];\n    if (!coalescer) {\n      coalescer = promiseCoalescer(() => {\n        // this will be called once there are no more active requests for the same endpoint\n        delete activeRequests[endpoint];\n      });\n      activeRequests[endpoint] = coalescer;\n    }\n\n    const req = platform.httpRequest(method, endpoint, transformHeaders(headers, options), body);\n    const p = req.promise.then(\n      result => {\n        if (result.status === 200) {\n          // We're using substring here because using startsWith would require a polyfill in IE.\n          if (\n            result.header('content-type') &&\n            result.header('content-type').substring(0, jsonContentType.length) === jsonContentType\n          ) {\n            return JSON.parse(result.body);\n          } else {\n            const message = messages.invalidContentType(result.header('content-type') || '');\n            return Promise.reject(new errors.LDFlagFetchError(message));\n          }\n        } else {\n          return Promise.reject(getResponseError(result));\n        }\n      },\n      e => Promise.reject(new errors.LDFlagFetchError(messages.networkError(e)))\n    );\n    coalescer.addPromise(p, () => {\n      // this will be called if another request for the same endpoint supersedes this one\n      req.cancel && req.cancel();\n    });\n    return coalescer.resultPromise;\n  }\n\n  // Performs a GET request to an arbitrary path under baseUrl. Returns a Promise which will resolve\n  // with the parsed JSON response, or will be rejected if the request failed.\n  requestor.fetchJSON = function(path) {\n    return fetchJSON(utils.appendUrlPath(baseUrl, path), null);\n  };\n\n  // Requests the current state of all flags for the given user from LaunchDarkly. Returns a Promise\n  // which will resolve with the parsed JSON response, or will be rejected if the request failed.\n  requestor.fetchFlagSettings = function(user, hash) {\n    let data;\n    let endpoint;\n    let query = '';\n    let body;\n\n    if (useReport) {\n      endpoint = [baseUrl, '/sdk/evalx/', environment, '/user'].join('');\n      body = JSON.stringify(user);\n    } else {\n      data = utils.base64URLEncode(JSON.stringify(user));\n      endpoint = [baseUrl, '/sdk/evalx/', environment, '/users/', data].join('');\n    }\n    if (hash) {\n      query = 'h=' + hash;\n    }\n    if (withReasons) {\n      query = query + (query ? '&' : '') + 'withReasons=true';\n    }\n    endpoint = endpoint + (query ? '?' : '') + query;\n    logger.debug(messages.debugPolling(endpoint));\n\n    return fetchJSON(endpoint, body);\n  };\n\n  return requestor;\n}\n","// This function allows a series of Promises to be coalesced such that only the most recently\n// added one actually matters. For instance, if several HTTP requests are made to the same\n// endpoint and we want to ensure that whoever made each one always gets the latest data, each\n// can be passed to addPromise (on the same coalescer) and each caller can wait on the\n// coalescer.resultPromise; all three will then receive the result (or error) from the *last*\n// request, and the results of the first two will be discarded.\n//\n// The cancelFn callback, if present, will be called whenever an existing promise is being\n// discarded. This can be used for instance to abort an HTTP request that's now obsolete.\n//\n// The finallyFn callback, if present, is called on completion of the whole thing. This is\n// different from calling coalescer.resultPromise.finally() because it is executed before any\n// other handlers. Its purpose is to tell the caller that this coalescer should no longer be used.\n\nexport default function promiseCoalescer(finallyFn) {\n  let currentPromise;\n  let currentCancelFn;\n  let finalResolve;\n  let finalReject;\n\n  const coalescer = {};\n\n  coalescer.addPromise = (p, cancelFn) => {\n    currentPromise = p;\n    currentCancelFn && currentCancelFn();\n    currentCancelFn = cancelFn;\n\n    p.then(\n      result => {\n        if (currentPromise === p) {\n          finalResolve(result);\n          finallyFn && finallyFn();\n        }\n      },\n      error => {\n        if (currentPromise === p) {\n          finalReject(error);\n          finallyFn && finallyFn();\n        }\n      }\n    );\n  };\n\n  coalescer.resultPromise = new Promise((resolve, reject) => {\n    finalResolve = resolve;\n    finalReject = reject;\n  });\n\n  return coalescer;\n}\n","import uuidv1 from 'uuid/v1';\n\nimport * as errors from './errors';\nimport * as messages from './messages';\nimport * as utils from './utils';\n\n// Transforms the user object if necessary to make sure it has a valid key.\n// 1. If a key is present, but is not a string, change it to a string.\n// 2. If no key is present, and \"anonymous\" is true, use a UUID as a key. This is cached in local\n// storage if possible.\n// 3. If there is no key (or no user object), return an error.\n\nconst ldUserIdKey = 'ld:$anonUserId';\n\nexport default function UserValidator(persistentStorage) {\n  function getCachedUserId() {\n    return persistentStorage.get(ldUserIdKey);\n  }\n\n  function setCachedUserId(id) {\n    return persistentStorage.set(ldUserIdKey, id);\n  }\n\n  const ret = {};\n\n  // Validates the user, returning a Promise that resolves to the validated user, or rejects if there is an error.\n  ret.validateUser = user => {\n    if (!user) {\n      return Promise.reject(new errors.LDInvalidUserError(messages.userNotSpecified()));\n    }\n\n    const userOut = utils.clone(user);\n    if (userOut.key !== null && userOut.key !== undefined) {\n      userOut.key = userOut.key.toString();\n      return Promise.resolve(userOut);\n    }\n    if (userOut.anonymous) {\n      return getCachedUserId().then(cachedId => {\n        if (cachedId) {\n          userOut.key = cachedId;\n          return userOut;\n        } else {\n          const id = uuidv1();\n          userOut.key = id;\n          return setCachedUserId(id).then(() => userOut);\n        }\n      });\n    } else {\n      return Promise.reject(new errors.LDInvalidUserError(messages.invalidUser()));\n    }\n  };\n\n  return ret;\n}\n","const uuidv1 = require('uuid/v1');\n// Note that in the diagnostic events spec, these IDs are to be generated with UUID v4. However,\n// in JS we were already using v1 for unique user keys, so to avoid bringing in two packages we\n// will use v1 here as well.\n\nconst { baseOptionDefs } = require('./configuration');\nconst messages = require('./messages');\nconst { appendUrlPath } = require('./utils');\n\nfunction DiagnosticId(sdkKey) {\n  const ret = {\n    diagnosticId: uuidv1(),\n  };\n  if (sdkKey) {\n    ret.sdkKeySuffix = sdkKey.length > 6 ? sdkKey.substring(sdkKey.length - 6) : sdkKey;\n  }\n  return ret;\n}\n\n// A stateful object holding statistics that will go into diagnostic events.\n\nfunction DiagnosticsAccumulator(startTime) {\n  let dataSinceDate, droppedEvents, eventsInLastBatch, streamInits;\n\n  function reset(time) {\n    dataSinceDate = time;\n    droppedEvents = 0;\n    eventsInLastBatch = 0;\n    streamInits = [];\n  }\n\n  reset(startTime);\n\n  return {\n    getProps: () => ({\n      dataSinceDate,\n      droppedEvents,\n      eventsInLastBatch,\n      streamInits,\n      // omit deduplicatedUsers for the JS SDKs because they don't deduplicate users\n    }),\n    setProps: props => {\n      dataSinceDate = props.dataSinceDate;\n      droppedEvents = props.droppedEvents || 0;\n      eventsInLastBatch = props.eventsInLastBatch || 0;\n      streamInits = props.streamInits || [];\n    },\n    incrementDroppedEvents: () => {\n      droppedEvents++;\n    },\n    setEventsInLastBatch: n => {\n      eventsInLastBatch = n;\n    },\n    recordStreamInit: (timestamp, failed, durationMillis) => {\n      const info = { timestamp, failed, durationMillis };\n      streamInits.push(info);\n    },\n    reset,\n  };\n}\n\n// An object that maintains information that will go into diagnostic events, and knows how to format\n// those events. It is instantiated by the SDK client, and shared with the event processor.\n//\n// The JS-based SDKs have two modes for diagnostic events. By default, the behavior is basically the\n// same as the server-side SDKs: a \"diagnostic-init\" event is sent on startup, and then \"diagnostic\"\n// events with operating statistics are sent periodically. However, in a browser environment this is\n// undesirable because the page may be reloaded frequently. In that case, setting the property\n// \"platform.diagnosticUseCombinedEvent\" to true enables an alternate mode in which a combination of\n// both kinds of event is sent at intervals, relative to the last time this was done (if any) which\n// is cached in local storage.\n\nfunction DiagnosticsManager(\n  platform,\n  persistentStorage,\n  accumulator,\n  eventSender,\n  environmentId,\n  config,\n  diagnosticId\n) {\n  const combinedMode = !!platform.diagnosticUseCombinedEvent;\n  const localStorageKey = 'ld:' + environmentId + ':$diagnostics';\n  const diagnosticEventsUrl = appendUrlPath(config.eventsUrl, '/events/diagnostic/' + environmentId);\n  const periodicInterval = config.diagnosticRecordingInterval;\n  const acc = accumulator;\n  const initialEventSamplingInterval = 4; // used only in combined mode - see start()\n  let streamingEnabled = !!config.streaming;\n  let eventSentTime;\n  let periodicTimer;\n  const manager = {};\n\n  function makeInitProperties() {\n    return {\n      sdk: makeSdkData(),\n      configuration: makeConfigData(),\n      platform: platform.diagnosticPlatformData,\n    };\n  }\n\n  // Send a diagnostic event and do not wait for completion.\n  function sendDiagnosticEvent(event) {\n    config.logger && config.logger.debug(messages.debugPostingDiagnosticEvent(event));\n    eventSender\n      .sendEvents(event, diagnosticEventsUrl, true)\n      .then(() => undefined)\n      .catch(() => undefined);\n  }\n\n  function loadProperties(callback) {\n    if (!persistentStorage.isEnabled()) {\n      return callback(false); // false indicates that local storage is not available\n    }\n    persistentStorage\n      .get(localStorageKey)\n      .then(data => {\n        if (data) {\n          try {\n            const props = JSON.parse(data);\n            acc.setProps(props);\n            eventSentTime = props.dataSinceDate;\n          } catch (e) {\n            // disregard malformed cached data\n          }\n        }\n        callback(true);\n      })\n      .catch(() => {\n        callback(false);\n      });\n  }\n\n  function saveProperties() {\n    if (persistentStorage.isEnabled()) {\n      const props = { ...acc.getProps() };\n      persistentStorage.set(localStorageKey, JSON.stringify(props));\n    }\n  }\n\n  // Creates the initial event that is sent by the event processor when the SDK starts up. This will not\n  // be repeated during the lifetime of the SDK client. In combined mode, we don't send this.\n  function createInitEvent() {\n    return {\n      kind: 'diagnostic-init',\n      id: diagnosticId,\n      creationDate: acc.getProps().dataSinceDate,\n      ...makeInitProperties(),\n    };\n  }\n\n  // Creates a periodic event containing time-dependent stats, and resets the state of the manager with\n  // regard to those stats. In combined mode (browser SDK) this also contains the configuration data.\n  function createPeriodicEventAndReset() {\n    const currentTime = new Date().getTime();\n    let ret = {\n      kind: combinedMode ? 'diagnostic-combined' : 'diagnostic',\n      id: diagnosticId,\n      creationDate: currentTime,\n      ...acc.getProps(),\n    };\n    if (combinedMode) {\n      ret = { ...ret, ...makeInitProperties() };\n    }\n    acc.reset(currentTime);\n    return ret;\n  }\n\n  function sendPeriodicEvent() {\n    sendDiagnosticEvent(createPeriodicEventAndReset());\n    periodicTimer = setTimeout(sendPeriodicEvent, periodicInterval);\n    eventSentTime = new Date().getTime();\n    if (combinedMode) {\n      saveProperties();\n    }\n  }\n\n  function makeSdkData() {\n    const sdkData = { ...platform.diagnosticSdkData };\n    if (config.wrapperName) {\n      sdkData.wrapperName = config.wrapperName;\n    }\n    if (config.wrapperVersion) {\n      sdkData.wrapperVersion = config.wrapperVersion;\n    }\n    return sdkData;\n  }\n\n  function makeConfigData() {\n    const configData = {\n      customBaseURI: config.baseUrl !== baseOptionDefs.baseUrl.default,\n      customStreamURI: config.streamUrl !== baseOptionDefs.streamUrl.default,\n      customEventsURI: config.eventsUrl !== baseOptionDefs.eventsUrl.default,\n      eventsCapacity: config.eventCapacity,\n      eventsFlushIntervalMillis: config.flushInterval,\n      reconnectTimeMillis: config.streamReconnectDelay,\n      streamingDisabled: !streamingEnabled,\n      allAttributesPrivate: !!config.allAttributesPrivate,\n      inlineUsersInEvents: !!config.inlineUsersInEvents,\n      diagnosticRecordingIntervalMillis: config.diagnosticRecordingInterval,\n      // The following extra properties are only provided by client-side JS SDKs:\n      usingSecureMode: !!config.hash,\n      bootstrapMode: !!config.bootstrap,\n      fetchGoalsDisabled: !config.fetchGoals,\n      sendEventsOnlyForVariation: !!config.sendEventsOnlyForVariation,\n      autoAliasingOptOut: !!config.autoAliasingOptOut,\n    };\n    // Client-side JS SDKs do not have the following properties which other SDKs have:\n    // connectTimeoutMillis\n    // pollingIntervalMillis\n    // samplingInterval\n    // socketTimeoutMillis\n    // startWaitMillis\n    // userKeysCapacity\n    // userKeysFlushIntervalMillis\n    // usingProxy\n    // usingProxyAuthenticator\n    // usingRelayDaemon\n\n    return configData;\n  }\n\n  // Called when the SDK is starting up. Either send an init event immediately, or, in the alternate\n  // mode, check for cached local storage properties and send an event only if we haven't done so\n  // recently.\n  manager.start = () => {\n    if (combinedMode) {\n      loadProperties(localStorageAvailable => {\n        if (localStorageAvailable) {\n          const nextEventTime = (eventSentTime || 0) + periodicInterval;\n          const timeNow = new Date().getTime();\n          if (timeNow >= nextEventTime) {\n            sendPeriodicEvent();\n          } else {\n            periodicTimer = setTimeout(sendPeriodicEvent, nextEventTime - timeNow);\n          }\n        } else {\n          // We don't have the ability to cache anything in local storage, so we don't know if we\n          // recently sent an event before this page load, but we would still prefer not to send one\n          // on *every* page load. So, as a rough heuristic, we'll decide semi-randomly.\n          if (Math.floor(Math.random() * initialEventSamplingInterval) === 0) {\n            sendPeriodicEvent();\n          } else {\n            periodicTimer = setTimeout(sendPeriodicEvent, periodicInterval);\n          }\n        }\n      });\n    } else {\n      sendDiagnosticEvent(createInitEvent());\n      periodicTimer = setTimeout(sendPeriodicEvent, periodicInterval);\n    }\n  };\n\n  manager.stop = () => {\n    periodicTimer && clearTimeout(periodicTimer);\n  };\n\n  // Called when streaming mode is turned on or off dynamically.\n  manager.setStreaming = enabled => {\n    streamingEnabled = enabled;\n  };\n\n  return manager;\n}\n\nmodule.exports = {\n  DiagnosticId,\n  DiagnosticsAccumulator,\n  DiagnosticsManager,\n};\n","import * as messages from './messages';\nimport SafeInspector from './SafeInspector';\nimport { onNextTick } from './utils';\n\n/**\n * The types of supported inspectors.\n */\nexport const InspectorTypes = {\n  flagUsed: 'flag-used',\n  flagDetailsChanged: 'flag-details-changed',\n  flagDetailChanged: 'flag-detail-changed',\n  clientIdentityChanged: 'client-identity-changed',\n};\n\nObject.freeze(InspectorTypes);\n\n/**\n * Manages dispatching of inspection data to registered inspectors.\n */\nexport function InspectorManager(inspectors, logger) {\n  const manager = {};\n\n  /**\n   * Collection of inspectors keyed by type.\n   * @type {{[type: string]: object[]}}\n   */\n  const inspectorsByType = {\n    [InspectorTypes.flagUsed]: [],\n    [InspectorTypes.flagDetailsChanged]: [],\n    [InspectorTypes.flagDetailChanged]: [],\n    [InspectorTypes.clientIdentityChanged]: [],\n  };\n\n  const safeInspectors = inspectors?.map(inspector => SafeInspector(inspector, logger));\n\n  safeInspectors.forEach(safeInspector => {\n    // Only add inspectors of supported types.\n    if (Object.prototype.hasOwnProperty.call(inspectorsByType, safeInspector.type)) {\n      inspectorsByType[safeInspector.type].push(safeInspector);\n    } else {\n      logger.warn(messages.invalidInspector(safeInspector.type, safeInspector.name));\n    }\n  });\n\n  /**\n   * Check if there is an inspector of a specific type registered.\n   *\n   * @param {string} type The type of the inspector to check.\n   * @returns True if there are any inspectors of that type registered.\n   */\n  manager.hasListeners = type => inspectorsByType[type]?.length;\n\n  /**\n   * Notify registered inspectors of a flag being used.\n   *\n   * The notification itself will be dispatched asynchronously.\n   *\n   * @param {string} flagKey The key for the flag.\n   * @param {Object} detail The LDEvaluationDetail for the flag.\n   * @param {Object} user The LDUser for the flag.\n   */\n  manager.onFlagUsed = (flagKey, detail, user) => {\n    if (inspectorsByType[InspectorTypes.flagUsed].length) {\n      onNextTick(() => {\n        inspectorsByType[InspectorTypes.flagUsed].forEach(inspector => inspector.method(flagKey, detail, user));\n      });\n    }\n  };\n\n  /**\n   * Notify registered inspectors that the flags have been replaced.\n   *\n   * The notification itself will be dispatched asynchronously.\n   *\n   * @param {Record<string, Object>} flags The current flags as a Record<string, LDEvaluationDetail>.\n   */\n  manager.onFlags = flags => {\n    if (inspectorsByType[InspectorTypes.flagDetailsChanged].length) {\n      onNextTick(() => {\n        inspectorsByType[InspectorTypes.flagDetailsChanged].forEach(inspector => inspector.method(flags));\n      });\n    }\n  };\n\n  /**\n   * Notify registered inspectors that a flag value has changed.\n   *\n   * The notification itself will be dispatched asynchronously.\n   *\n   * @param {string} flagKey The key for the flag that changed.\n   * @param {Object} flag An `LDEvaluationDetail` for the flag.\n   */\n  manager.onFlagChanged = (flagKey, flag) => {\n    if (inspectorsByType[InspectorTypes.flagDetailChanged].length) {\n      onNextTick(() => {\n        inspectorsByType[InspectorTypes.flagDetailChanged].forEach(inspector => inspector.method(flagKey, flag));\n      });\n    }\n  };\n\n  /**\n   * Notify the registered inspectors that the user identity has changed.\n   *\n   * The notification itself will be dispatched asynchronously.\n   *\n   * @param {Object} user The `LDUser` which is now identified.\n   */\n  manager.onIdentityChanged = user => {\n    if (inspectorsByType[InspectorTypes.clientIdentityChanged].length) {\n      onNextTick(() => {\n        inspectorsByType[InspectorTypes.clientIdentityChanged].forEach(inspector => inspector.method(user));\n      });\n    }\n  };\n\n  return manager;\n}\n","import * as messages from './messages';\n\n/**\n * Wrap an inspector ensuring that calling its methods are safe.\n * @param {object} inspector Inspector to wrap.\n */\nexport default function SafeInspector(inspector, logger) {\n  let errorLogged = false;\n  const wrapper = {\n    type: inspector.type,\n    name: inspector.name,\n  };\n\n  wrapper.method = (...args) => {\n    try {\n      inspector.method(...args);\n    } catch {\n      // If something goes wrong in an inspector we want to log that something\n      // went wrong. We don't want to flood the logs, so we only log something\n      // the first time that something goes wrong.\n      // We do not include the exception in the log, because we do not know what\n      // kind of data it may contain.\n      if (!errorLogged) {\n        errorLogged = true;\n        logger.warn(messages.inspectorMethodError(wrapper.type, wrapper.name));\n      }\n      // Prevent errors.\n    }\n  };\n\n  return wrapper;\n}\n","import EventProcessor from './EventProcessor';\nimport EventEmitter from './EventEmitter';\nimport EventSender from './EventSender';\nimport InitializationStateTracker from './InitializationState';\nimport PersistentFlagStore from './PersistentFlagStore';\nimport PersistentStorage from './PersistentStorage';\nimport Stream from './Stream';\nimport Requestor from './Requestor';\nimport Identity from './Identity';\nimport UserValidator from './UserValidator';\nimport * as configuration from './configuration';\nimport * as diagnostics from './diagnosticEvents';\nimport { commonBasicLogger, createConsoleLogger } from './loggers';\nimport * as utils from './utils';\nimport * as errors from './errors';\nimport * as messages from './messages';\nimport { InspectorManager, InspectorTypes } from './InspectorManager';\n\nconst changeEvent = 'change';\nconst internalChangeEvent = 'internal-change';\n\n// This is called by the per-platform initialize functions to create the base client object that we\n// may also extend with additional behavior. It returns an object with these properties:\n//   client: the actual client object\n//   options: the configuration (after any appropriate defaults have been applied)\n// If we need to give the platform-specific clients access to any internals here, we should add those\n// as properties of the return object, not public properties of the client.\n//\n// For definitions of the API in the platform object, see stubPlatform.js in the test code.\n\nexport function initialize(env, user, specifiedOptions, platform, extraOptionDefs) {\n  const logger = createLogger();\n  const emitter = EventEmitter(logger);\n  const initializationStateTracker = InitializationStateTracker(emitter);\n  const options = configuration.validate(specifiedOptions, emitter, extraOptionDefs, logger);\n  const inspectorManager = InspectorManager(options.inspectors, logger);\n  const sendEvents = options.sendEvents;\n  let environment = env;\n  let hash = options.hash;\n\n  const persistentStorage = PersistentStorage(platform.localStorage, logger);\n\n  const eventSender = EventSender(platform, environment, options);\n\n  const diagnosticsEnabled = options.sendEvents && !options.diagnosticOptOut;\n  const diagnosticId = diagnosticsEnabled ? diagnostics.DiagnosticId(environment) : null;\n  const diagnosticsAccumulator = diagnosticsEnabled ? diagnostics.DiagnosticsAccumulator(new Date().getTime()) : null;\n  const diagnosticsManager = diagnosticsEnabled\n    ? diagnostics.DiagnosticsManager(\n        platform,\n        persistentStorage,\n        diagnosticsAccumulator,\n        eventSender,\n        environment,\n        options,\n        diagnosticId\n      )\n    : null;\n\n  const stream = Stream(platform, options, environment, diagnosticsAccumulator);\n\n  const events =\n    options.eventProcessor ||\n    EventProcessor(platform, options, environment, diagnosticsAccumulator, emitter, eventSender);\n\n  const requestor = Requestor(platform, options, environment);\n\n  let flags = {};\n  let useLocalStorage;\n  let streamActive;\n  let streamForcedState = options.streaming;\n  let subscribedToChangeEvents;\n  let inited = false;\n  let closed = false;\n  let firstEvent = true;\n\n  // The \"stateProvider\" object is used in the Electron SDK, to allow one client instance to take partial\n  // control of another. If present, it has the following contract:\n  // - getInitialState() returns the initial client state if it is already available. The state is an\n  //   object whose properties are \"environment\", \"user\", and \"flags\".\n  // - on(\"init\", listener) triggers an event when the initial client state becomes available, passing\n  //   the state object to the listener.\n  // - on(\"update\", listener) triggers an event when flag values change and/or the current user changes.\n  //   The parameter is an object that *may* contain \"user\" and/or \"flags\".\n  // - enqueueEvent(event) accepts an analytics event object and returns true if the stateProvider will\n  //   be responsible for delivering it, or false if we still should deliver it ourselves.\n  const stateProvider = options.stateProvider;\n\n  const ident = Identity(null, onIdentifyChange);\n  const userValidator = UserValidator(persistentStorage);\n  const persistentFlagStore = persistentStorage.isEnabled()\n    ? new PersistentFlagStore(persistentStorage, environment, hash, ident, logger)\n    : null;\n\n  function createLogger() {\n    if (specifiedOptions && specifiedOptions.logger) {\n      return specifiedOptions.logger;\n    }\n    return (extraOptionDefs && extraOptionDefs.logger && extraOptionDefs.logger.default) || createConsoleLogger('warn');\n  }\n\n  function readFlagsFromBootstrap(data) {\n    // If the bootstrap data came from an older server-side SDK, we'll have just a map of keys to values.\n    // Newer SDKs that have an allFlagsState method will provide an extra \"$flagsState\" key that contains\n    // the rest of the metadata we want. We do it this way for backward compatibility with older JS SDKs.\n    const keys = Object.keys(data);\n    const metadataKey = '$flagsState';\n    const validKey = '$valid';\n    const metadata = data[metadataKey];\n    if (!metadata && keys.length) {\n      logger.warn(messages.bootstrapOldFormat());\n    }\n    if (data[validKey] === false) {\n      logger.warn(messages.bootstrapInvalid());\n    }\n    const ret = {};\n    keys.forEach(key => {\n      if (key !== metadataKey && key !== validKey) {\n        let flag = { value: data[key] };\n        if (metadata && metadata[key]) {\n          flag = utils.extend(flag, metadata[key]);\n        } else {\n          flag.version = 0;\n        }\n        ret[key] = flag;\n      }\n    });\n    return ret;\n  }\n\n  function shouldEnqueueEvent() {\n    return sendEvents && !closed && !platform.isDoNotTrack();\n  }\n\n  function enqueueEvent(event) {\n    if (!environment) {\n      // We're in paired mode and haven't been initialized with an environment or user yet\n      return;\n    }\n    if (stateProvider && stateProvider.enqueueEvent && stateProvider.enqueueEvent(event)) {\n      return; // it'll be handled elsewhere\n    }\n    if (event.kind !== 'alias') {\n      if (!event.user) {\n        if (firstEvent) {\n          logger.warn(messages.eventWithoutUser());\n          firstEvent = false;\n        }\n        return;\n      }\n      firstEvent = false;\n    }\n    if (shouldEnqueueEvent()) {\n      logger.debug(messages.debugEnqueueingEvent(event.kind));\n      events.enqueue(event);\n    }\n  }\n\n  function notifyInspectionFlagUsed(key, detail) {\n    if (inspectorManager.hasListeners(InspectorTypes.flagUsed)) {\n      inspectorManager.onFlagUsed(key, detail, ident.getUser());\n    }\n  }\n\n  function notifyInspectionIdentityChanged() {\n    if (inspectorManager.hasListeners(InspectorTypes.clientIdentityChanged)) {\n      inspectorManager.onIdentityChanged(ident.getUser());\n    }\n  }\n\n  function notifyInspectionFlagChanged(data, newFlag) {\n    if (inspectorManager.hasListeners(InspectorTypes.flagDetailChanged)) {\n      inspectorManager.onFlagChanged(data.key, getFlagDetail(newFlag));\n    }\n  }\n\n  function notifyInspectionFlagsChanged() {\n    if (inspectorManager.hasListeners(InspectorTypes.flagDetailsChanged)) {\n      inspectorManager.onFlags(\n        Object.entries(flags)\n          .map(([key, value]) => ({ key, detail: getFlagDetail(value) }))\n          .reduce((acc, cur) => {\n            // eslint-disable-next-line no-param-reassign\n            acc[cur.key] = cur.detail;\n            return acc;\n          }, {})\n      );\n    }\n  }\n\n  function onIdentifyChange(user, previousUser) {\n    sendIdentifyEvent(user);\n    if (!options.autoAliasingOptOut && previousUser && previousUser.anonymous && user && !user.anonymous) {\n      alias(user, previousUser);\n    }\n    notifyInspectionIdentityChanged();\n  }\n\n  function sendIdentifyEvent(user) {\n    if (stateProvider) {\n      // In paired mode, the other client is responsible for sending identify events\n      return;\n    }\n    if (user) {\n      enqueueEvent({\n        kind: 'identify',\n        key: user.key,\n        user: user,\n        creationDate: new Date().getTime(),\n      });\n    }\n  }\n\n  function sendFlagEvent(key, detail, defaultValue, includeReason) {\n    const user = ident.getUser();\n    const now = new Date();\n    const value = detail ? detail.value : null;\n\n    const event = {\n      kind: 'feature',\n      key: key,\n      user: user,\n      value: value,\n      variation: detail ? detail.variationIndex : null,\n      default: defaultValue,\n      creationDate: now.getTime(),\n    };\n    if (user && user.anonymous) {\n      event.contextKind = userContextKind(user);\n    }\n    const flag = flags[key];\n    if (flag) {\n      event.version = flag.flagVersion ? flag.flagVersion : flag.version;\n      event.trackEvents = flag.trackEvents;\n      event.debugEventsUntilDate = flag.debugEventsUntilDate;\n    }\n    if ((includeReason || (flag && flag.trackReason)) && detail) {\n      event.reason = detail.reason;\n    }\n\n    enqueueEvent(event);\n  }\n\n  function identify(user, newHash, onDone) {\n    if (closed) {\n      return utils.wrapPromiseCallback(Promise.resolve({}), onDone);\n    }\n    if (stateProvider) {\n      // We're being controlled by another client instance, so only that instance is allowed to change the user\n      logger.warn(messages.identifyDisabled());\n      return utils.wrapPromiseCallback(Promise.resolve(utils.transformVersionedValuesToValues(flags)), onDone);\n    }\n    const clearFirst = useLocalStorage && persistentFlagStore ? persistentFlagStore.clearFlags() : Promise.resolve();\n    return utils.wrapPromiseCallback(\n      clearFirst\n        .then(() => userValidator.validateUser(user))\n        .then(realUser =>\n          requestor\n            .fetchFlagSettings(realUser, newHash)\n            // the following then() is nested within this one so we can use realUser from the previous closure\n            .then(requestedFlags => {\n              const flagValueMap = utils.transformVersionedValuesToValues(requestedFlags);\n              ident.setUser(realUser);\n              hash = newHash;\n              if (requestedFlags) {\n                return replaceAllFlags(requestedFlags).then(() => flagValueMap);\n              } else {\n                return flagValueMap;\n              }\n            })\n        )\n        .then(flagValueMap => {\n          if (streamActive) {\n            connectStream();\n          }\n          return flagValueMap;\n        })\n        .catch(err => {\n          emitter.maybeReportError(err);\n          return Promise.reject(err);\n        }),\n      onDone\n    );\n  }\n\n  function getUser() {\n    return ident.getUser();\n  }\n\n  function flush(onDone) {\n    return utils.wrapPromiseCallback(sendEvents ? events.flush() : Promise.resolve(), onDone);\n  }\n\n  function variation(key, defaultValue) {\n    return variationDetailInternal(key, defaultValue, true, false, false).value;\n  }\n\n  function variationDetail(key, defaultValue) {\n    return variationDetailInternal(key, defaultValue, true, true, false);\n  }\n\n  function variationDetailInternal(key, defaultValue, sendEvent, includeReasonInEvent, isAllFlags) {\n    let detail;\n\n    if (flags && utils.objectHasOwnProperty(flags, key) && flags[key] && !flags[key].deleted) {\n      const flag = flags[key];\n      detail = getFlagDetail(flag);\n      if (flag.value === null || flag.value === undefined) {\n        detail.value = defaultValue;\n      }\n    } else {\n      detail = { value: defaultValue, variationIndex: null, reason: { kind: 'ERROR', errorKind: 'FLAG_NOT_FOUND' } };\n    }\n\n    if (sendEvent) {\n      sendFlagEvent(key, detail, defaultValue, includeReasonInEvent);\n    }\n\n    // For the all flags case `onFlags` will be called instead.\n    if (!isAllFlags) {\n      notifyInspectionFlagUsed(key, detail);\n    }\n\n    return detail;\n  }\n\n  function getFlagDetail(flag) {\n    return {\n      value: flag.value,\n      variationIndex: flag.variation === undefined ? null : flag.variation,\n      reason: flag.reason || null,\n    };\n    // Note, the logic above ensures that variationIndex and reason will always be null rather than\n    // undefined if we don't have values for them. That's just to avoid subtle errors that depend on\n    // whether an object was JSON-encoded with null properties omitted or not.\n  }\n\n  function allFlags() {\n    const results = {};\n\n    if (!flags) {\n      return results;\n    }\n\n    for (const key in flags) {\n      if (utils.objectHasOwnProperty(flags, key) && !flags[key].deleted) {\n        results[key] = variationDetailInternal(key, null, !options.sendEventsOnlyForVariation, false, true).value;\n      }\n    }\n\n    return results;\n  }\n\n  function userContextKind(user) {\n    return user.anonymous ? 'anonymousUser' : 'user';\n  }\n\n  function alias(user, previousUser) {\n    if (stateProvider) {\n      // In paired mode, the other client is responsible for sending alias events\n      return;\n    }\n\n    if (!user || !previousUser) {\n      return;\n    }\n\n    enqueueEvent({\n      kind: 'alias',\n      key: user.key,\n      contextKind: userContextKind(user),\n      previousKey: previousUser.key,\n      previousContextKind: userContextKind(previousUser),\n      creationDate: new Date().getTime(),\n    });\n  }\n\n  function track(key, data, metricValue) {\n    if (typeof key !== 'string') {\n      emitter.maybeReportError(new errors.LDInvalidEventKeyError(messages.unknownCustomEventKey(key)));\n      return;\n    }\n\n    // The following logic was used only for the JS browser SDK (js-client-sdk) and\n    // is no longer needed as of version 2.9.13 of that SDK. The other client-side\n    // JS-based SDKs did not define customEventFilter, and now none of them do. We\n    // can remove this in the next major version of the common code, when it's OK to\n    // make breaking changes to our internal API contracts.\n    if (platform.customEventFilter && !platform.customEventFilter(key)) {\n      logger.warn(messages.unknownCustomEventKey(key));\n    }\n\n    const user = ident.getUser();\n    const e = {\n      kind: 'custom',\n      key: key,\n      user: user,\n      url: platform.getCurrentUrl(),\n      creationDate: new Date().getTime(),\n    };\n    if (user && user.anonymous) {\n      e.contextKind = userContextKind(user);\n    }\n    // Note, check specifically for null/undefined because it is legal to set these fields to a falsey value.\n    if (data !== null && data !== undefined) {\n      e.data = data;\n    }\n    if (metricValue !== null && metricValue !== undefined) {\n      e.metricValue = metricValue;\n    }\n    enqueueEvent(e);\n  }\n\n  function connectStream() {\n    streamActive = true;\n    if (!ident.getUser()) {\n      return;\n    }\n    const tryParseData = jsonData => {\n      try {\n        return JSON.parse(jsonData);\n      } catch (err) {\n        emitter.maybeReportError(new errors.LDInvalidDataError(messages.invalidData()));\n        return undefined;\n      }\n    };\n    stream.connect(ident.getUser(), hash, {\n      ping: function() {\n        logger.debug(messages.debugStreamPing());\n        const userAtTimeOfPingEvent = ident.getUser();\n        requestor\n          .fetchFlagSettings(userAtTimeOfPingEvent, hash)\n          .then(requestedFlags => {\n            // Check whether the current user is still the same - we don't want to overwrite the flags if\n            // the application has called identify() while this request was in progress\n            if (utils.deepEquals(userAtTimeOfPingEvent, ident.getUser())) {\n              replaceAllFlags(requestedFlags || {});\n            }\n          })\n          .catch(err => {\n            emitter.maybeReportError(new errors.LDFlagFetchError(messages.errorFetchingFlags(err)));\n          });\n      },\n      put: function(e) {\n        const data = tryParseData(e.data);\n        if (!data) {\n          return;\n        }\n        logger.debug(messages.debugStreamPut());\n        replaceAllFlags(data);\n        // Don't wait for this Promise to be resolved; note that replaceAllFlags is guaranteed\n        // never to have an unhandled rejection\n      },\n      patch: function(e) {\n        const data = tryParseData(e.data);\n        if (!data) {\n          return;\n        }\n        // If both the flag and the patch have a version property, then the patch version must be\n        // greater than the flag version for us to accept the patch.  If either one has no version\n        // then the patch always succeeds.\n        const oldFlag = flags[data.key];\n        if (!oldFlag || !oldFlag.version || !data.version || oldFlag.version < data.version) {\n          logger.debug(messages.debugStreamPatch(data.key));\n          const mods = {};\n          const newFlag = utils.extend({}, data);\n          delete newFlag['key'];\n          flags[data.key] = newFlag;\n          const newDetail = getFlagDetail(newFlag);\n          if (oldFlag) {\n            mods[data.key] = { previous: oldFlag.value, current: newDetail };\n          } else {\n            mods[data.key] = { current: newDetail };\n          }\n          handleFlagChanges(mods); // don't wait for this Promise to be resolved\n          notifyInspectionFlagChanged(data, newFlag);\n        } else {\n          logger.debug(messages.debugStreamPatchIgnored(data.key));\n        }\n      },\n      delete: function(e) {\n        const data = tryParseData(e.data);\n        if (!data) {\n          return;\n        }\n        if (!flags[data.key] || flags[data.key].version < data.version) {\n          logger.debug(messages.debugStreamDelete(data.key));\n          const mods = {};\n          if (flags[data.key] && !flags[data.key].deleted) {\n            mods[data.key] = { previous: flags[data.key].value };\n          }\n          flags[data.key] = { version: data.version, deleted: true };\n          notifyInspectionFlagChanged(data, flags[data.key]);\n          handleFlagChanges(mods); // don't wait for this Promise to be resolved\n        } else {\n          logger.debug(messages.debugStreamDeleteIgnored(data.key));\n        }\n      },\n    });\n  }\n\n  function disconnectStream() {\n    if (streamActive) {\n      stream.disconnect();\n      streamActive = false;\n    }\n  }\n\n  // Returns a Promise which will be resolved when we have completely updated the internal flags state,\n  // dispatched all change events, and updated local storage if appropriate. This Promise is guaranteed\n  // never to have an unhandled rejection.\n  function replaceAllFlags(newFlags) {\n    const changes = {};\n\n    if (!newFlags) {\n      return Promise.resolve();\n    }\n\n    for (const key in flags) {\n      if (utils.objectHasOwnProperty(flags, key) && flags[key]) {\n        if (newFlags[key] && !utils.deepEquals(newFlags[key].value, flags[key].value)) {\n          changes[key] = { previous: flags[key].value, current: getFlagDetail(newFlags[key]) };\n        } else if (!newFlags[key] || newFlags[key].deleted) {\n          changes[key] = { previous: flags[key].value };\n        }\n      }\n    }\n    for (const key in newFlags) {\n      if (utils.objectHasOwnProperty(newFlags, key) && newFlags[key] && (!flags[key] || flags[key].deleted)) {\n        changes[key] = { current: getFlagDetail(newFlags[key]) };\n      }\n    }\n\n    flags = { ...newFlags };\n\n    notifyInspectionFlagsChanged();\n\n    return handleFlagChanges(changes).catch(() => {}); // swallow any exceptions from this Promise\n  }\n\n  // Returns a Promise which will be resolved when we have dispatched all change events and updated\n  // local storage if appropriate.\n  function handleFlagChanges(changes) {\n    const keys = Object.keys(changes);\n\n    if (keys.length > 0) {\n      const changeEventParams = {};\n      keys.forEach(key => {\n        const current = changes[key].current;\n        const value = current ? current.value : undefined;\n        const previous = changes[key].previous;\n        emitter.emit(changeEvent + ':' + key, value, previous);\n        changeEventParams[key] = current ? { current: value, previous: previous } : { previous: previous };\n      });\n\n      emitter.emit(changeEvent, changeEventParams);\n      emitter.emit(internalChangeEvent, flags);\n\n      // By default, we send feature evaluation events whenever we have received new flag values -\n      // the client has in effect evaluated these flags just by receiving them. This can be suppressed\n      // by setting \"sendEventsOnlyForVariation\". Also, if we have a stateProvider, we don't send these\n      // events because we assume they have already been sent by the other client that gave us the flags\n      // (when it received them in the first place).\n      if (!options.sendEventsOnlyForVariation && !stateProvider) {\n        keys.forEach(key => {\n          sendFlagEvent(key, changes[key].current);\n        });\n      }\n    }\n\n    if (useLocalStorage && persistentFlagStore) {\n      return persistentFlagStore.saveFlags(flags);\n    } else {\n      return Promise.resolve();\n    }\n  }\n\n  function on(event, handler, context) {\n    if (isChangeEventKey(event)) {\n      subscribedToChangeEvents = true;\n      if (inited) {\n        updateStreamingState();\n      }\n      emitter.on(event, handler, context);\n    } else {\n      emitter.on(...arguments);\n    }\n  }\n\n  function off(event) {\n    emitter.off(...arguments);\n    if (isChangeEventKey(event)) {\n      let haveListeners = false;\n      emitter.getEvents().forEach(key => {\n        if (isChangeEventKey(key) && emitter.getEventListenerCount(key) > 0) {\n          haveListeners = true;\n        }\n      });\n      if (!haveListeners) {\n        subscribedToChangeEvents = false;\n        if (streamActive && streamForcedState === undefined) {\n          disconnectStream();\n        }\n      }\n    }\n  }\n\n  function setStreaming(state) {\n    const newState = state === null ? undefined : state;\n    if (newState !== streamForcedState) {\n      streamForcedState = newState;\n      updateStreamingState();\n    }\n  }\n\n  function updateStreamingState() {\n    const shouldBeStreaming = streamForcedState || (subscribedToChangeEvents && streamForcedState === undefined);\n    if (shouldBeStreaming && !streamActive) {\n      connectStream();\n    } else if (!shouldBeStreaming && streamActive) {\n      disconnectStream();\n    }\n    if (diagnosticsManager) {\n      diagnosticsManager.setStreaming(shouldBeStreaming);\n    }\n  }\n\n  function isChangeEventKey(event) {\n    return event === changeEvent || event.substr(0, changeEvent.length + 1) === changeEvent + ':';\n  }\n\n  if (typeof options.bootstrap === 'string' && options.bootstrap.toUpperCase() === 'LOCALSTORAGE') {\n    if (persistentFlagStore) {\n      useLocalStorage = true;\n    } else {\n      logger.warn(messages.localStorageUnavailable());\n    }\n  }\n\n  if (typeof options.bootstrap === 'object') {\n    // Set the flags as soon as possible before we get into any async code, so application code can read\n    // them even if the ready event has not yet fired.\n    flags = readFlagsFromBootstrap(options.bootstrap);\n  }\n\n  if (stateProvider) {\n    // The stateProvider option is used in the Electron SDK, to allow a client instance in the main process\n    // to control another client instance (i.e. this one) in the renderer process. We can't predict which\n    // one will start up first, so the initial state may already be available for us or we may have to wait\n    // to receive it.\n    const state = stateProvider.getInitialState();\n    if (state) {\n      initFromStateProvider(state);\n    } else {\n      stateProvider.on('init', initFromStateProvider);\n    }\n    stateProvider.on('update', updateFromStateProvider);\n  } else {\n    finishInit().catch(signalFailedInit);\n  }\n\n  function finishInit() {\n    if (!env) {\n      return Promise.reject(new errors.LDInvalidEnvironmentIdError(messages.environmentNotSpecified()));\n    }\n    return userValidator.validateUser(user).then(realUser => {\n      ident.setUser(realUser);\n      if (typeof options.bootstrap === 'object') {\n        // flags have already been set earlier\n        return signalSuccessfulInit();\n      } else if (useLocalStorage) {\n        return finishInitWithLocalStorage();\n      } else {\n        return finishInitWithPolling();\n      }\n    });\n  }\n\n  function finishInitWithLocalStorage() {\n    return persistentFlagStore.loadFlags().then(storedFlags => {\n      if (storedFlags === null || storedFlags === undefined) {\n        flags = {};\n        return requestor\n          .fetchFlagSettings(ident.getUser(), hash)\n          .then(requestedFlags => replaceAllFlags(requestedFlags || {}))\n          .then(signalSuccessfulInit)\n          .catch(err => {\n            const initErr = new errors.LDFlagFetchError(messages.errorFetchingFlags(err));\n            signalFailedInit(initErr);\n          });\n      } else {\n        // We're reading the flags from local storage. Signal that we're ready,\n        // then update localStorage for the next page load. We won't signal changes or update\n        // the in-memory flags unless you subscribe for changes\n        flags = storedFlags;\n        utils.onNextTick(signalSuccessfulInit);\n\n        return requestor\n          .fetchFlagSettings(ident.getUser(), hash)\n          .then(requestedFlags => replaceAllFlags(requestedFlags))\n          .catch(err => emitter.maybeReportError(err));\n      }\n    });\n  }\n\n  function finishInitWithPolling() {\n    return requestor\n      .fetchFlagSettings(ident.getUser(), hash)\n      .then(requestedFlags => {\n        flags = requestedFlags || {};\n\n        notifyInspectionFlagsChanged();\n        // Note, we don't need to call updateSettings here because local storage and change events are not relevant\n        signalSuccessfulInit();\n      })\n      .catch(err => {\n        flags = {};\n        signalFailedInit(err);\n      });\n  }\n\n  function initFromStateProvider(state) {\n    environment = state.environment;\n    ident.setUser(state.user);\n    flags = { ...state.flags };\n    utils.onNextTick(signalSuccessfulInit);\n  }\n\n  function updateFromStateProvider(state) {\n    if (state.user) {\n      ident.setUser(state.user);\n    }\n    if (state.flags) {\n      replaceAllFlags(state.flags); // don't wait for this Promise to be resolved\n    }\n  }\n\n  function signalSuccessfulInit() {\n    logger.info(messages.clientInitialized());\n    inited = true;\n    updateStreamingState();\n    initializationStateTracker.signalSuccess();\n  }\n\n  function signalFailedInit(err) {\n    initializationStateTracker.signalFailure(err);\n  }\n\n  function start() {\n    if (sendEvents) {\n      if (diagnosticsManager) {\n        diagnosticsManager.start();\n      }\n      events.start();\n    }\n  }\n\n  function close(onDone) {\n    if (closed) {\n      return utils.wrapPromiseCallback(Promise.resolve(), onDone);\n    }\n    const finishClose = () => {\n      closed = true;\n      flags = {};\n    };\n    const p = Promise.resolve()\n      .then(() => {\n        disconnectStream();\n        if (diagnosticsManager) {\n          diagnosticsManager.stop();\n        }\n        if (sendEvents) {\n          events.stop();\n          return events.flush();\n        }\n      })\n      .then(finishClose)\n      .catch(finishClose);\n    return utils.wrapPromiseCallback(p, onDone);\n  }\n\n  function getFlagsInternal() {\n    // used by Electron integration\n    return flags;\n  }\n\n  const client = {\n    waitForInitialization: () => initializationStateTracker.getInitializationPromise(),\n    waitUntilReady: () => initializationStateTracker.getReadyPromise(),\n    identify: identify,\n    getUser: getUser,\n    variation: variation,\n    variationDetail: variationDetail,\n    track: track,\n    alias: alias,\n    on: on,\n    off: off,\n    setStreaming: setStreaming,\n    flush: flush,\n    allFlags: allFlags,\n    close: close,\n  };\n\n  return {\n    client: client, // The client object containing all public methods.\n    options: options, // The validated configuration object, including all defaults.\n    emitter: emitter, // The event emitter which can be used to log errors or trigger events.\n    ident: ident, // The Identity object that manages the current user.\n    logger: logger, // The logging abstraction.\n    requestor: requestor, // The Requestor object.\n    start: start, // Starts the client once the environment is ready.\n    enqueueEvent: enqueueEvent, // Puts an analytics event in the queue, if event sending is enabled.\n    getFlagsInternal: getFlagsInternal, // Returns flag data structure with all details.\n    getEnvironmentId: () => environment, // Gets the environment ID (this may have changed since initialization, if we have a state provider)\n    internalChangeEventName: internalChangeEvent, // This event is triggered whenever we have new flag state.\n  };\n}\n\nexport const version = VERSION;\nexport { commonBasicLogger };\nexport { createConsoleLogger };\nexport { errors };\nexport { messages };\nexport { utils };\n","import * as utils from './utils';\n\nexport default function Identity(initialUser, onChange) {\n  const ident = {};\n  let user;\n\n  ident.setUser = function(u) {\n    const previousUser = user && utils.clone(user);\n    user = utils.sanitizeUser(u);\n    if (user && onChange) {\n      onChange(utils.clone(user), previousUser);\n    }\n  };\n\n  ident.getUser = function() {\n    return user ? utils.clone(user) : null;\n  };\n\n  if (initialUser) {\n    ident.setUser(initialUser);\n  }\n\n  return ident;\n}\n"],"names":["createCustomError","name","CustomError","message","code","Error","captureStackTrace","this","constructor","prototype","LDUnexpectedResponseError","LDInvalidEnvironmentIdError","LDInvalidUserError","LDInvalidEventKeyError","LDInvalidArgumentError","LDFlagFetchError","LDInvalidDataError","isHttpErrorRecoverable","status","uint8","tmp","len","length","extraBytes","parts","i","len2","push","start","end","output","num","lookup","join","charCodeAt","a","b","key","arrA","isArray","arrB","equal","dateA","Date","dateB","getTime","regexpA","RegExp","regexpB","toString","keys","keyList","hasProp","call","Array","Object","hasOwnProperty","userAttrsToStringify","appendUrlPath","baseUrl","path","endsWith","substring","startsWith","btoa","s","escaped","unescape","encodeURIComponent","base64","base64URLEncode","replace","clone","obj","JSON","parse","stringify","deepEquals","fastDeepEqual","onNextTick","cb","setTimeout","wrapPromiseCallback","promise","callback","ret","then","value","error","Promise","reject","undefined","transformValuesToVersionedValues","flags","objectHasOwnProperty","version","transformVersionedValuesToValues","flagsState","chunkUserEventsForUrl","maxLength","events","chunk","allEvents","slice","allChunks","remainingSpace","event","shift","unshift","getLDUserAgentString","platform","userAgent","extend","objects","reduce","acc","object","sanitizeUser","user","newUser","attr","String","rnds8","rnds","getRandomValues","crypto","bind","window","msCrypto","Uint8Array","module","r","Math","random","byteToHex","substr","_nodeId","_clockseq","buf","offset","bth","_lastMSecs","_lastNSecs","options","node","clockseq","msecs","seedBytes","rng","nsecs","dt","tl","tmh","n","bytesToUuid","logLevels","commonBasicLogger","formatFn","destination","toConsole","methodName","line","console","destinations","prependLevelToMessage","prefix","minLevel","level","logger","levelIndex","levelName","write","args","arguments","fullPrefix","tempArgs","err","log","_loop","createConsoleLogger","maybePrefix","errorString","clientInitialized","eventWithoutUser","unknownCustomEventKey","environmentNotFound","docLink","environmentNotSpecified","errorFetchingFlags","invalidData","bootstrapOldFormat","bootstrapInvalid","deprecated","oldName","newName","identifyDisabled","unknownOption","wrongOptionType","expectedType","actualType","wrongOptionTypeBoolean","optionBelowMinimum","minimum","debugStreamPing","debugStreamPut","debugStreamPatch","debugStreamPatchIgnored","debugStreamDelete","debugStreamDeleteIgnored","debugEnqueueingEvent","kind","inspectorMethodError","type","eventCapacityExceeded","invalidContentType","contentType","localStorageUnavailable","networkError","e","userNotSpecified","invalidUser","httpErrorMessage","context","retryMessage","errors","httpUnavailable","streamClosing","streamConnecting","url","streamError","streamReconnectDelay","unrecoverableStreamError","debugPolling","debugPostingEvents","count","invalidTagValue","invalidInspector","tagValueTooLong","baseOptionDefs","default","streamUrl","eventsUrl","sendEvents","streaming","sendLDHeaders","requestHeaderTransform","inlineUsersInEvents","allowFrequentDuplicateEvents","sendEventsOnlyForVariation","useReport","evaluationReasons","eventCapacity","flushInterval","samplingInterval","allAttributesPrivate","privateAttributeNames","bootstrap","diagnosticRecordingInterval","diagnosticOptOut","wrapperName","wrapperVersion","stateProvider","autoAliasingOptOut","application","validator","validated","id","validateTagValue","inspectors","allowedTagCharacters","tagValue","match","warn","messages","validate","emitter","extraOptionDefs","optionDefs","utils","deprecatedOptions","all_attributes_private","private_attribute_names","reportArgumentError","maybeReportError","opts","config","typeDescForValue","t","forEach","optionDef","allowedTypes","split","indexOf","getTags","tags","getLDHeaders","h","X-LaunchDarkly-User-Agent","tagKeys","sort","map","flattened","item","concat","transformHeaders","headers","MAX_URL_LENGTH","EventSender","environmentId","imageUrlPath","baseHeaders","Content-Type","httpFallbackPing","sender","sendChunk","isDiagnostic","usePost","jsonBody","payloadId","uuidv1","doPostRequest","canRetry","X-LaunchDarkly-Event-Schema","X-LaunchDarkly-Payload-ID","httpRequest","result","dateStr","header","serverTime","time","catch","resolve","canPost","httpAllowsPost","chunks","results","all","EventProcessor","startDate","endDate","counters","ignoreAttrs","allowedTopLevelAttrs","flushTimer","diagnosticsAccumulator","processor","eventSender","mainEventsUrl","summarizer","es","summarizeEvent","counterKey","counterVal","variation","creationDate","getSummary","flagsOut","empty","c","flag","counterOut","unknown","features","clearSummary","userFilter","filter","custom","anonymous","secondary","ip","country","email","firstName","lastName","avatar","filterUser","userPrivateAttrs","isPrivateAttr","filteredProps","removedAttrs","customResult","filterAttrs","props","isAttributeAllowed","removedAttrNames","privateAttrs","inlineUsers","queue","lastKnownPastTime","disabled","exceededCapacity","shouldSampleEvent","floor","addToOutbox","incrementDroppedEvents","enqueue","addDebugEvent","debugEvent","addFullEvent","trackEvents","debugEventsUntilDate","userKey","flush","eventsToSend","summary","setEventsInLastBatch","debug","responseInfo","flushTick","stop","clearTimeout","EventEmitter","on","handler","off","emit","copiedHandlers","apply","getEvents","getEventListenerCount","readyEvent","successEvent","failureEvent","eventEmitter","succeeded","failed","failureValue","initializationPromise","readyPromise","onReady","getInitializationPromise","onFailure","onSuccess","getReadyPromise","signalSuccess","signalFailure","PersistentFlagStore","storage","environment","hash","ident","store","getFlagsKey","getUser","loadFlags","get","dataStr","schema","data","$schema","ex","clearFlags","saveFlags","set","clear","PersistentStorage","localStorageProvider","logError","loggedError","isEnabled","streamReadTimeoutMillis","maxRetryDelay","jitterRatio","Stream","connectionAttemptStartTime","stream","evalUrlPrefix","withReasons","baseReconnectDelay","firstConnectionErrorLogged","reconnectTimeoutReference","handlers","retryCount","getNextRetryDelay","delay","pow","computedDelayMillis","trunc","handleError","closeConnection","logConnectionResult","tryConnect","openConnection","query","readTimeoutMillis","eventSourceFactory","eventSourceAllowsReport","method","body","info","addEventListener","onerror","onopen","close","success","recordStreamInit","connect","newHash","newHandlers","disconnect","isConnected","eventSourceIsActive","jsonContentType","Requestor","requestor","activeRequests","fetchJSON","endpoint","coalescer","finallyFn","currentPromise","currentCancelFn","finalResolve","finalReject","req","p","cancelFn","resultPromise","statusText","addPromise","cancel","fetchFlagSettings","ldUserIdKey","UserValidator","persistentStorage","validateUser","userOut","cachedId","require$$1","sdkKey","diagnosticId","sdkKeySuffix","startTime","dataSinceDate","droppedEvents","eventsInLastBatch","streamInits","reset","getProps","setProps","timestamp","durationMillis","accumulator","eventSentTime","periodicTimer","combinedMode","diagnosticUseCombinedEvent","localStorageKey","diagnosticEventsUrl","periodicInterval","streamingEnabled","makeInitProperties","sdk","sdkData","diagnosticSdkData","configuration","customBaseURI","customStreamURI","customEventsURI","eventsCapacity","eventsFlushIntervalMillis","reconnectTimeMillis","streamingDisabled","diagnosticRecordingIntervalMillis","usingSecureMode","bootstrapMode","fetchGoalsDisabled","fetchGoals","diagnosticPlatformData","sendDiagnosticEvent","debugPostingDiagnosticEvent","sendPeriodicEvent","currentTime","manager","localStorageAvailable","timeNow","nextEventTime","setStreaming","enabled","InspectorTypes","flagUsed","flagDetailsChanged","flagDetailChanged","clientIdentityChanged","InspectorManager","inspectorsByType","inspector","errorLogged","wrapper","safeInspector","hasListeners","_inspectorsByType$typ","onFlagUsed","flagKey","detail","onFlags","onFlagChanged","onIdentityChanged","freeze","changeEvent","internalChangeEvent","env","specifiedOptions","useLocalStorage","streamActive","subscribedToChangeEvents","onChange","metadataKey","metadata","initializationStateTracker","InitializationStateTracker","inspectorManager","localStorage","diagnosticsEnabled","diagnostics","diagnosticsManager","eventProcessor","streamForcedState","inited","closed","firstEvent","previousUser","enqueueEvent","alias","u","initialUser","setUser","userValidator","persistentFlagStore","isDoNotTrack","notifyInspectionFlagChanged","newFlag","getFlagDetail","notifyInspectionFlagsChanged","entries","cur","sendFlagEvent","defaultValue","includeReason","now","variationIndex","contextKind","userContextKind","flagVersion","trackReason","reason","variationDetailInternal","sendEvent","includeReasonInEvent","isAllFlags","deleted","errorKind","previousKey","previousContextKind","connectStream","tryParseData","jsonData","ping","userAtTimeOfPingEvent","requestedFlags","replaceAllFlags","put","patch","oldFlag","mods","newDetail","previous","current","handleFlagChanges","delete","disconnectStream","newFlags","changes","changeEventParams","updateStreamingState","shouldBeStreaming","isChangeEventKey","initFromStateProvider","state","signalSuccessfulInit","signalFailedInit","toUpperCase","_typeof","getInitialState","realUser","storedFlags","client","waitForInitialization","waitUntilReady","identify","onDone","flagValueMap","variationDetail","track","metricValue","customEventFilter","getCurrentUrl","haveListeners","newState","allFlags","finishClose","getFlagsInternal","getEnvironmentId","internalChangeEventName"],"mappings":"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"}